/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 18:04:54 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 4, (-3261), sQLException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (String) null, dataTruncation0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) singletonIterator0, 304);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 303
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLTransientConnectionException>(abstractOrderedMapIteratorDecorator0);
      MapIterator<SQLTimeoutException, SQLTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTimeoutException, ? extends SQLTransientException>) abstractMapIteratorDecorator0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>) mapIterator0, (Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, ComparatorPredicate.Criterion> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<SQLTransactionRollbackException, SQLException> hashtable0 = new Hashtable<SQLTransactionRollbackException, SQLException>();
      EntrySetMapIterator<SQLTransactionRollbackException, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, SQLException>(hashtable0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) entrySetMapIterator0, (Iterator<? extends SQLTransientException>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      Stack<Closure<Object>> stack0 = new Stack<Closure<Object>>();
      Closure<SQLNonTransientConnectionException> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLNonTransientConnectionException>>) stack0);
      IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) objectArrayListIterator0, (Closure<? super SQLNonTransientConnectionException>) closure0);
      assertEquals(3, objectArrayListIterator0.nextIndex());
      assertEquals(2, objectArrayListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 2);
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) orderedIterator0;
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0;
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>();
      ListIterator<PriorityQueue<SQLTransientConnectionException>> listIterator0 = IteratorUtils.singletonListIterator(priorityQueue0);
      ListIterator<PriorityQueue<SQLTransientConnectionException>> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.equals((Object)listIterator0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ListIterator<SQLException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OrderedMapIterator<HashMap<BatchUpdateException, Predicate<SQLNonTransientException>>, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      String string0 = IteratorUtils.toString((Iterator<HashMap<BatchUpdateException, Predicate<SQLNonTransientException>>>) orderedMapIterator0, (Transformer<? super HashMap<BatchUpdateException, Predicate<SQLNonTransientException>>, String>) factoryTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>((BatchUpdateException) null);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) singletonListIterator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[8];
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_FilteringModeArray0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Locale.FilteringMode[] locale_FilteringModeArray1 = IteratorUtils.toArray((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, class0);
      assertFalse(locale_FilteringModeArray1.equals((Object)locale_FilteringModeArray0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Locale.FilteringMode[] locale_FilteringModeArray0 = IteratorUtils.toArray((Iterator<? extends Locale.FilteringMode>) orderedIterator0, class0);
      assertEquals(0, locale_FilteringModeArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("G::#i{%fmei74{", "%<Z$f]t+Hd\":[i", intArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("G::#i{%fmei74{", hashMap0, batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 1266, sQLClientInfoException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      SingletonIterator<ServiceLoader<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<ServiceLoader<Locale.FilteringMode>>(serviceLoader0);
      ServiceLoader<Locale.FilteringMode> serviceLoader1 = IteratorUtils.get((Iterator<ServiceLoader<Locale.FilteringMode>>) singletonIterator0, 0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader1.toString());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLTransientConnectionException>) mapIterator0, (Object) mapIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 2);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableListIterator0;
      OrderedMapIterator<IIOMetadataNode, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLRecoverableException>(orderedMapIterator0);
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) abstractOrderedMapIteratorDecorator0;
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<Object>[] linkedListArray0 = (LinkedList<Object>[]) Array.newInstance(LinkedList.class, 5);
      ResettableIterator<LinkedList<Object>> resettableIterator0 = IteratorUtils.arrayIterator(linkedListArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<String, SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Locale.FilteringMode>) singletonIterator0, (Transformer<? super Locale.FilteringMode, String>) transformer0, "e_g=3*kU|ELO0tyH0", "", "e_g=3*kU|ELO0tyH0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("XOYNIyR7Hs}", "add() is not supported by this iterator");
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<SQLSyntaxErrorException, String> invokerTransformer0 = new InvokerTransformer<SQLSyntaxErrorException, String>("Y4V`eofJpZ", classArray0, sQLTimeoutExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) listIterator0, (Transformer<? super SQLSyntaxErrorException, String>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Y4V`eofJpZ' on 'class java.sql.SQLSyntaxErrorException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLDataException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLDataException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) abstractMapIteratorDecorator0, (Transformer<? super IIOMetadataNode, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      SQLException sQLException0 = new SQLException("'&Z.15]^ iII", "'&Z.15]^ iII", 22);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("'&Z.15]^ iII", "'&Z.15]^ iII", 22, sQLException0);
      linkedHashSet0.add(sQLIntegrityConstraintViolationException0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedHashSet0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, 93);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) linkedHashSet0);
      linkedHashSet0.add((SQLNonTransientConnectionException) null);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("G~NrD|C~%/a9", "org.apache.commons.collections4.functors.IfClosure");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.IfClosure", sQLNonTransientException0);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 7);
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLSyntaxErrorException0);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (-2225L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 6);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("Enumeration must not be null", classArray0, classArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) invokerTransformer0);
      predicateArray0[1] = predicate0;
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super IIOMetadataNode>) predicateArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Enumeration must not be null' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) null, 304);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      Factory<Boolean> factory0 = ConstantFactory.constantFactory((Boolean) null);
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(factory0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) loopingListIterator0, (-2363L), (-2363L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<DataTruncation, ComparatorPredicate.Criterion> hashMap0 = new HashMap<DataTruncation, ComparatorPredicate.Criterion>();
      EntrySetMapIterator<DataTruncation, ComparatorPredicate.Criterion> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, ComparatorPredicate.Criterion>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) entrySetMapIterator0, (-643L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLInvalidAuthorizationSpecException[]) null, 100, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TreeSet<SQLException>[] treeSetArray0 = (TreeSet<SQLException>[]) Array.newInstance(TreeSet.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(treeSetArray0, 696);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, 3, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-918));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((String[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 0, (-933));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLIntegrityConstraintViolationException[]) null, (-1830));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(closureArray0, (-1168));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 3, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLDataException sQLDataException0 = new SQLDataException("2 i3=$0Bb*,.<GQ_oV", sQLSyntaxErrorException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(predicate0);
      IfClosure<SQLNonTransientException> ifClosure0 = new IfClosure<SQLNonTransientException>(nullIsFalsePredicate0, (Closure<? super SQLNonTransientException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLDataException>) resettableIterator0, (Closure<? super SQLDataException>) ifClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      String string0 = IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) constantTransformer0, "pf@dWhR\"", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLException[] sQLExceptionArray0 = new SQLException[8];
      sQLExceptionArray0[2] = sQLException0;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLException0, defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) equalPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, 2352);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.EqualPredicate");
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      String string0 = IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) singletonIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) constantTransformer0, "9x", "9x", ";eyB&ofn>");
      assertEquals("9x;eyB&ofn>", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Predicate<Object>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) null, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, "", "", ">d$}");
      assertEquals(">d$}", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      HashMap<Predicate<Object>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory");
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>();
      SingletonIterator<HashSet<SQLRecoverableException>> singletonIterator0 = new SingletonIterator<HashSet<SQLRecoverableException>>(linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashSet<SQLRecoverableException>>) singletonIterator0, (Transformer<? super HashSet<SQLRecoverableException>, String>) constantTransformer0, "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactoryorg.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory", (String) null, "org.apache.commons.collections4.IterableUtils$5$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, (String) null, "", "98");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) null, (String) null, "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory", "org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      ResettableIterator<Class<SQLDataException>> resettableIterator0 = IteratorUtils.singletonIterator(class0);
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) vector0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("zG8I0! m!rQ1V");
      vector0.add(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, 729);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SingletonIterator<ServiceLoader<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<ServiceLoader<Locale.FilteringMode>>((ServiceLoader<Locale.FilteringMode>) null);
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = IteratorUtils.get((Iterator<ServiceLoader<Locale.FilteringMode>>) singletonIterator0, 0);
      assertNull(serviceLoader0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedHashSet0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, 93);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0, 650);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 650
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) vector0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      vector0.add(sQLIntegrityConstraintViolationException0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OrderedMapIterator<Class<SQLNonTransientException>, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(orderedMapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1078, true, true, 325, 16);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[", dataTruncation0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("'od?(T0`$*NW", (String) null, sQLInvalidAuthorizationSpecException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLRecoverableException0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) nullIsExceptionPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Collection must not be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Collection must not be null", "Collection must not be null", (-3423), sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLInvalidAuthorizationSpecException0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) nullIsExceptionPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = EmptyIterator.emptyIterator();
      boolean boolean0 = IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLException[] sQLExceptionArray0 = new SQLException[8];
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLException0, defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(nullIsTruePredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) nullIsFalsePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ResettableIterator<ArrayDeque<IIOMetadataNode>> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<ArrayDeque<IIOMetadataNode>>) resettableIterator0, (Predicate<? super ArrayDeque<IIOMetadataNode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Predicate<BatchUpdateException> predicate0 = IdentityPredicate.identityPredicate(batchUpdateException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      BatchUpdateException batchUpdateException1 = IteratorUtils.find((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertSame(batchUpdateException1, batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("k");
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLIntegrityConstraintViolationException0, defaultEquator0);
      BatchUpdateException batchUpdateException0 = IteratorUtils.find((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) equalPredicate0);
      assertNull(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Predicate<BatchUpdateException> predicate0 = IdentityPredicate.identityPredicate(batchUpdateException0);
      BatchUpdateException batchUpdateException1 = IteratorUtils.find((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
      assertNull(batchUpdateException1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<SQLNonTransientException> forClosure0 = new ForClosure<SQLNonTransientException>(571, closure0);
      IfClosure<SQLNonTransientException> ifClosure0 = new IfClosure<SQLNonTransientException>(predicate0, forClosure0, forClosure0);
      IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) null, (Closure<? super SQLNonTransientConnectionException>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Closure<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      Closure<SQLNonTransientException> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLIntegrityConstraintViolationException>) listIterator0, (Closure<? super SQLIntegrityConstraintViolationException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLSyntaxErrorException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (-774));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Locale.FilteringMode>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, ComparatorPredicate.Criterion> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLTimeoutException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) listIterator0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Vector<SQLFeatureNotSupportedException>, BatchUpdateException> hashMap0 = new HashMap<Vector<SQLFeatureNotSupportedException>, BatchUpdateException>();
      EntrySetMapIterator<Vector<SQLFeatureNotSupportedException>, BatchUpdateException> entrySetMapIterator0 = new EntrySetMapIterator<Vector<SQLFeatureNotSupportedException>, BatchUpdateException>(hashMap0);
      Iterable<Vector<SQLFeatureNotSupportedException>> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends Vector<SQLFeatureNotSupportedException>>) entrySetMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterable<Locale.FilteringMode> iterable0 = IteratorUtils.asIterable((Iterator<? extends Locale.FilteringMode>) orderedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) linkedList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) null, (Collection<? super IIOMetadataNode>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Locale.LanguageRange>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) arrayList0);
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (long) 0, (long) 0);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) enumSet0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends Locale.FilteringMode>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) reverseListIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, (Equator<Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) null, (Predicate<? super SQLDataException>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Predicate<? super Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Locale.FilteringMode>) null, (Predicate<? super Locale.FilteringMode>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 6);
      InvokerTransformer<Object, Properties> invokerTransformer0 = new InvokerTransformer<Object, Properties>("", classArray0, classArray0);
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) resettableIterator0, (Transformer<? super Object, ? extends Properties>) invokerTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) null, (Transformer<? super Properties, ? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Properties properties0 = new Properties();
      Class<Properties> class0 = Properties.class;
      InstantiateFactory<Properties> instantiateFactory0 = new InstantiateFactory<Properties>(class0);
      FactoryTransformer<Object, Properties> factoryTransformer0 = new FactoryTransformer<Object, Properties>(instantiateFactory0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) iterator0, (Transformer<? super Properties, ? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLTransientConnectionException>(orderedMapIterator0);
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, 0L);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) skippingIterator0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0, (Iterator<? extends SQLNonTransientException>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) linkedHashSet0, 3, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MapIterator<Locale.FilteringMode, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Locale.FilteringMode>) mapIterator0, (Class<Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_FilteringMode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) iteratorArray0[0], (Iterator<? extends IIOMetadataNode>) iteratorArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(locale_FilteringModeArray0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) sQLNonTransientConnectionExceptionArray0, (-94), 964);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MapIterator<SQLNonTransientException, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientException>) mapIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Integer integer0 = new Integer(1009);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) singletonListIterator0, (Iterator<? extends Integer>) singletonListIterator0);
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>((Integer) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Integer>) zippingIterator0, (Predicate<? super Integer>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (long) 4378);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Boolean>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "x h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Integer integer0 = new Integer(512);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 481, 2188);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, (-3386));
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, false);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLRecoverableException>) singletonIterator0, (Object) sQLRecoverableException0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "0SpM>gDH", (-2677));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-3694), true, false, (-3694), (-499));
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<DataTruncation, String> ifTransformer0 = new IfTransformer<DataTruncation, String>((Predicate<? super DataTruncation>) null, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) listIterator0, (Transformer<? super DataTruncation, String>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, ComparatorPredicate.Criterion> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator0, 364);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      OrderedIterator<HashSet<PriorityQueue>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[10];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLSyntaxErrorException0, (Equator<Object>) null);
      Predicate<SQLException> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) equalPredicate0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) predicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }
}
