/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:17:59 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0, (Iterator<? extends SQLTimeoutException>) resettableIterator0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) zippingIterator0, 717);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 1);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      classArray0[0] = class0;
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) iterator0, 88L, 695L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) orderedIterator0, class0);
      OrderedMapIterator<SQLRecoverableException, LinkedList<SQLFeatureNotSupportedException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      int int0 = 1073741824;
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.singletonIterator(clientInfoStatus0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 8);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientConnectionException> class3 = SQLNonTransientConnectionException.class;
      classArray0[3] = class3;
      Class<SQLNonTransientConnectionException> class4 = SQLNonTransientConnectionException.class;
      classArray0[4] = class4;
      Class<SQLNonTransientConnectionException> class5 = SQLNonTransientConnectionException.class;
      classArray0[5] = class5;
      Class<SQLNonTransientConnectionException> class6 = SQLNonTransientConnectionException.class;
      classArray0[6] = class6;
      Class<SQLNonTransientConnectionException> class7 = SQLNonTransientConnectionException.class;
      classArray0[7] = class7;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.PushbackIterator", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ClientInfoStatus>) resettableIterator0, (Transformer<? super ClientInfoStatus, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.iterators.PushbackIterator' on 'class java.sql.ClientInfoStatus' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>((SQLRecoverableException) null);
      IteratorUtils.get((Iterator<SQLRecoverableException>) singletonListIterator0, 0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, (Throwable) null);
      Transformer<SQLException, SQLClientInfoException> transformer0 = ConstantTransformer.constantTransformer(sQLClientInfoException0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) iterator0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLClientInfoException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      Transformer<Object, SQLRecoverableException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      int int0 = 2401;
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 2401);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstantiateFactory<SQLTimeoutException> instantiateFactory0 = new InstantiateFactory<SQLTimeoutException>(class0);
      Transformer<Object, SQLTimeoutException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTimeoutException>) instantiateFactory0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<Hashtable<HashSet, SQLFeatureNotSupportedException>>) null, (Closure<? super Hashtable<HashSet, SQLFeatureNotSupportedException>>) closure0);
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 8);
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[0] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[1] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[2] = class3;
      Class<SQLDataException> class4 = SQLDataException.class;
      classArray0[3] = class4;
      Class<SQLDataException> class5 = SQLDataException.class;
      classArray0[4] = class5;
      Class<SQLDataException> class6 = SQLDataException.class;
      classArray0[5] = class6;
      Class<SQLDataException> class7 = SQLDataException.class;
      classArray0[6] = class7;
      Class<SQLDataException> class8 = SQLDataException.class;
      classArray0[7] = class8;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("ListIterator must not be null", classArray0, classArray0);
      IteratorUtils.toString((Iterator<SQLRecoverableException>) listIterator0, (Transformer<? super SQLRecoverableException, String>) invokerTransformer0, "", "", "ListIterator must not be null");
      Integer integer0 = new Integer(3686);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      singletonListIterator0.next();
      ListIterator<Integer> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) singletonListIterator0);
      assertTrue(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Transformer<Object, Locale.Category> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<Locale.Category> iterator0 = IteratorUtils.objectGraphIterator(locale_Category0, (Transformer<? super Locale.Category, ? extends Locale.Category>) transformer0);
      Class<Locale.Category> class0 = Locale.Category.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Locale.Category>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.Locale$Category' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) orderedIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, 28, 28);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLRecoverableException) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("~(5", "~(5", hashMap0, (Throwable) null);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) null);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.getIterator(uniquePredicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ListIterator<SQLRecoverableException> listIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      sQLRecoverableException0.getLocalizedMessage();
      IteratorUtils.get((Iterator<SQLRecoverableException>) listIterator0, 0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      OrderedIterator<SQLClientInfoException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) arrayList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("+@>L,$/<rJr!6", "+@>L,$/<rJr!6", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("onU");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("DR|hB%o0Z9vI,5");
      IteratorUtils.singletonListIterator((Object) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) listIterator0, (Transformer<? super SQLRecoverableException, String>) null, "", "+@>L,$/<rJr!6", "Node must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLRecoverableException) null);
      MapIterator<SQLFeatureNotSupportedException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLFeatureNotSupportedException, DataTruncation> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<SQLFeatureNotSupportedException, DataTruncation> mapIterator2 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, DataTruncation>(mapIterator1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(")1RyA=", "u/H#Wem", (Throwable) null);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) singletonListIterator0;
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) mapIterator1;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      iteratorArray0[2] = (Iterator<SQLFeatureNotSupportedException>) resettableIterator0;
      iteratorArray0[3] = (Iterator<SQLFeatureNotSupportedException>) singletonListIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 8);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[1] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[2] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[3] = class3;
      Class<SQLDataException> class4 = SQLDataException.class;
      classArray0[4] = class4;
      Class<SQLDataException> class5 = SQLDataException.class;
      classArray0[5] = class5;
      Class<SQLDataException> class6 = SQLDataException.class;
      classArray0[6] = class6;
      Class<SQLDataException> class7 = SQLDataException.class;
      classArray0[7] = class7;
      IteratorUtils.arrayListIterator(classArray0, 0, 0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) transformerPredicate0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iteratorArray0[2], (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator((SQLRecoverableException) null);
      IteratorUtils.get((Iterator<SQLRecoverableException>) listIterator0, 0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, 0, (-821));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FalsePredicate.falsePredicate();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<StringTokenizer>) null, (Predicate<? super StringTokenizer>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.emptyIterator();
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[2];
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("");
      stringTokenizerArray0[1] = stringTokenizer1;
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      Transformer<Object, Properties> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) nullIsExceptionPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<StringTokenizer>) resettableIterator0, (Predicate<? super StringTokenizer>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.StringTokenizer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) arrayList0);
      SQLDataException sQLDataException0 = new SQLDataException();
      boolean boolean0 = IteratorUtils.contains((Iterator<Object>) null, (Object) sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      LinkedHashSet<Object>[] linkedHashSetArray0 = (LinkedHashSet<Object>[]) Array.newInstance(LinkedHashSet.class, 7);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<Object> linkedHashSet2 = new LinkedHashSet<Object>();
      linkedHashSetArray0[1] = linkedHashSet2;
      LinkedHashSet<Object> linkedHashSet3 = new LinkedHashSet<Object>();
      linkedHashSetArray0[3] = linkedHashSet3;
      LinkedHashSet<Object> linkedHashSet4 = new LinkedHashSet<Object>();
      linkedHashSetArray0[4] = linkedHashSet4;
      LinkedHashSet<Object> linkedHashSet5 = new LinkedHashSet<Object>();
      linkedHashSetArray0[5] = linkedHashSet5;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate<SQLIntegrityConstraintViolationException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLIntegrityConstraintViolationException>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MapIterator<SQLClientInfoException, Class<SQLNonTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate.notPredicate((Predicate<? super Object>) uniquePredicate0);
      UniquePredicate<SQLFeatureNotSupportedException> uniquePredicate1 = new UniquePredicate<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "cC+zS*#;;/G93[", 0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("cC+zS*#;;/G93[");
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", (String) null, sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[2] = (long) (-26);
      longArray0[3] = (long) (-26);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (-26);
      longArray0[6] = (long) 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("&KtJJJ|\"T", (String) null, (-26), longArray0, sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("D#]", batchUpdateException0);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("D#]");
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0, (-26));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.singletonListIterator((Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.singletonListIterator((SQLRecoverableException) null);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("$[;.", classArray0, classArray0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>((SQLRecoverableException) null);
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) singletonIterator0, (Transformer<? super SQLRecoverableException, String>) invokerTransformer0, "$[;.", "Already at start of list.", "Already at start of list.");
      assertEquals("Already at start of list.nullAlready at start of list.", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      String string0 = "%lR";
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) sQLClientInfoException0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) sQLClientInfoException0;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("%lR", (Class<?>[]) null, objectArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      EmptyListIterator.emptyListIterator();
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("&%#A~Nx>");
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) singletonIterator0);
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(list0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends String>) loopingIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MapIterator<Integer, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) mapIterator0);
      ResettableListIterator<Transformer<StringTokenizer, StringTokenizer>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends Transformer<StringTokenizer, StringTokenizer>>) resettableListIterator0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Index cannot be negative: ", "Index cannot be negative: ", 1619);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Index cannot be negative: ", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLTransientConnectionException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      FileSystemHandling.shouldAllThrowIOExceptions();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 1619;
      intArray0[2] = 1619;
      intArray0[3] = 1619;
      intArray0[4] = 1619;
      intArray0[5] = 1619;
      intArray0[6] = 1619;
      intArray0[7] = 1619;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Estimated size must be greater than 0", "Index cannot be negative: ", intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, 14, 1577);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MapIterator<SQLClientInfoException, Class<SQLNonTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "org.apache.commons.collections4.iterators.EntrySetMapIterator", hashtable0);
      arrayList0.add((SQLException) sQLClientInfoException0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) arrayList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "o6a!chB1Gj%/", (-1926), sQLClientInfoException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(10, (-1926)).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0);
      Hashtable<Object, SQLInvalidAuthorizationSpecException> hashtable1 = new Hashtable<Object, SQLInvalidAuthorizationSpecException>();
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLInvalidAuthorizationSpecException>) hashtable1);
      IfTransformer<Object, SQLInvalidAuthorizationSpecException> ifTransformer0 = new IfTransformer<Object, SQLInvalidAuthorizationSpecException>(predicate0, transformer0, transformer0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) ifTransformer0);
      boolean boolean0 = IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<String> class0 = String.class;
      IteratorUtils.getIterator(class0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Properties>) resettableIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MapIterator<SQLClientInfoException, Class<SQLNonTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "org.apache.commons.collections4.iterators.EntrySetMapIterator", hashtable0);
      arrayList0.add((SQLException) sQLClientInfoException0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) arrayList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "o6a!chB1Gj%/", (-1926), sQLClientInfoException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0);
      Hashtable<Object, SQLInvalidAuthorizationSpecException> hashtable1 = new Hashtable<Object, SQLInvalidAuthorizationSpecException>();
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLInvalidAuthorizationSpecException>) hashtable1);
      IfTransformer<Object, SQLInvalidAuthorizationSpecException> ifTransformer0 = new IfTransformer<Object, SQLInvalidAuthorizationSpecException>(predicate0, transformer0, transformer0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) ifTransformer0);
      boolean boolean0 = IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(":?Ui");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 0, 0);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 4);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      classArray0[3] = class3;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer(":?Ui", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "]", "", "");
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) arrayList0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      ExceptionPredicate.exceptionPredicate();
      IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) objectArrayIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Predicate<Object>>) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      EmptyListIterator.emptyListIterator();
      String string0 = "Node must not be null";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "Node must not be null", 2416);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      Predicate<SQLException> predicate2 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) objectArrayIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
      Boolean[] booleanArray0 = new Boolean[2];
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(predicate2);
      // Undeclared exception!
      try { 
        predicateTransformer0.transform(sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Gqv");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, true);
      MapIterator<IIOMetadataNode, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) singletonIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      ListIteratorWrapper<IIOMetadataNode> listIteratorWrapper0 = new ListIteratorWrapper<IIOMetadataNode>(zippingIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIteratorWrapper0, (Iterator<? extends IIOMetadataNode>) singletonIterator0, (Iterator<? extends IIOMetadataNode>) listIteratorWrapper0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      IteratorUtils.toList((Iterator<?>) listIteratorWrapper0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(linkedList0);
      Integer integer0 = new Integer(11);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Gqv", "", 11);
      IteratorUtils.contains((Iterator<Object>) loopingListIterator0, (Object) sQLSyntaxErrorException0);
      ServiceLoader<Integer>[] serviceLoaderArray0 = (ServiceLoader<Integer>[]) Array.newInstance(ServiceLoader.class, 6);
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[0] = serviceLoader0;
      ServiceLoader<Integer> serviceLoader1 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[1] = serviceLoader1;
      Class<Integer> class1 = Integer.class;
      ServiceLoader<Integer> serviceLoader2 = ServiceLoader.loadInstalled(class1);
      serviceLoaderArray0[2] = serviceLoader2;
      Class<Integer> class2 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Integer> serviceLoader3 = ServiceLoader.load(class2, classLoader0);
      serviceLoaderArray0[3] = serviceLoader3;
      Class<Integer> class3 = Integer.class;
      ServiceLoader<Integer> serviceLoader4 = ServiceLoader.load(class3, classLoader0);
      serviceLoaderArray0[4] = serviceLoader4;
      Class<Integer> class4 = Integer.class;
      ServiceLoader<Integer> serviceLoader5 = ServiceLoader.load(class4);
      serviceLoaderArray0[5] = serviceLoader5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(serviceLoaderArray0, 11, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MapIterator<IIOMetadataNode, Vector<ServiceLoader>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      OrderedMapIterator<SQLWarning, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLWarning, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLWarning, SQLNonTransientConnectionException>(orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) abstractOrderedMapIteratorDecorator0);
      String string0 = "";
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.functors.ExceptionFactory", "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      singletonIterator0.next();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) singletonIterator0, class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ArrayList<Predicate<SQLTimeoutException>> arrayList0 = new ArrayList<Predicate<SQLTimeoutException>>();
      int[] intArray0 = new int[6];
      intArray0[0] = 10;
      intArray0[1] = (-847);
      intArray0[2] = 2731;
      intArray0[3] = 100;
      intArray0[4] = 2654;
      intArray0[5] = 11;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(batchUpdateException0);
      Comparator<SQLTimeoutException> comparator0 = (Comparator<SQLTimeoutException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<SQLTimeoutException> predicate0 = ComparatorPredicate.comparatorPredicate(sQLTimeoutException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      arrayList0.add(predicate0);
      ResettableListIterator<Predicate<SQLTimeoutException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Predicate<SQLTimeoutException>>) arrayList0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MapIterator<DataTruncation, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLException>) mapIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator((SQLRecoverableException) null);
      IteratorUtils.get((Iterator<SQLRecoverableException>) listIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MapIterator<IIOMetadataNode, Vector<ServiceLoader>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      IteratorUtils.toList((Iterator<?>) zippingIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.map.Flat3Map$EntrySet", "");
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("QFPccl ", "", 61);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Vl?WN$_1h3?,Pi1> |r", (String) null, 61);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) objectArrayIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      singletonIterator0.next();
      String string0 = "transformer may not be null";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("transformer may not be null");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("transformer may not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MapIterator<SQLClientInfoException, Class<SQLNonTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator0);
      IteratorUtils.getIterator(enumeration0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientConnectionException[]) null, 99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends String>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MapIterator<SQLClientInfoException, Class<SQLNonTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends String>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      MapIterator<SQLClientInfoException, Class<SQLNonTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) stack0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) zippingIterator0, 1653L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      EmptyListIterator.emptyListIterator();
      NullIsTruePredicate<SQLIntegrityConstraintViolationException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLIntegrityConstraintViolationException>(predicate1);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) nullIsTruePredicate0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 812, 812);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(" 77Y;>W_beJS%", sQLNonTransientException0);
      properties0.put(sQLTransactionRollbackException0, " 77Y;>W_beJS%");
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties(properties0);
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      properties7.replace((Object) properties1, (Object) properties2);
      propertiesArray0[7] = properties7;
      IteratorUtils.arrayIterator(propertiesArray0, 1);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      singletonIterator0.next();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) singletonIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode((String) null);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-20);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2012;
      intArray0[1] = 2012;
      intArray0[2] = 2012;
      intArray0[3] = 2012;
      intArray0[4] = 2012;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((String) null, (String) null, intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(batchUpdateException1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      int[] intArray1 = new int[0];
      BatchUpdateException batchUpdateException3 = new BatchUpdateException((String) null, "org.apache.commons.collections4.FunctorException", intArray1, batchUpdateException0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("9`Yl,", "9`Yl,", intArray1, batchUpdateException3);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException((String) null, "Yz<}/A", 2012, intArray1);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = new Integer(100);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      singletonIterator0.next();
      Class<StringTokenizer>[] classArray0 = (Class<StringTokenizer>[]) Array.newInstance(Class.class, 5);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      classArray0[0] = class0;
      Class<StringTokenizer> class1 = StringTokenizer.class;
      classArray0[1] = class1;
      Class<StringTokenizer> class2 = StringTokenizer.class;
      classArray0[2] = class2;
      Class<StringTokenizer> class3 = StringTokenizer.class;
      classArray0[3] = class3;
      Class<StringTokenizer> class4 = StringTokenizer.class;
      classArray0[4] = class4;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("Cannot use setValue() when the object being set is already in the map", classArray0, classArray0);
      String string0 = "=x!N?O'^v$y/U*w";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) invokerTransformer0, "=x!N?O'^v$y/U*w", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Integer integer0 = new Integer(2050);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(")l{N-&;zz");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "T[u", sQLTransientException0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      IteratorUtils.get((Iterator<SQLRecoverableException>) listIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      singletonIterator0.next();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) singletonIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Integer>) listIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("\fV?C&*TwzZ", classArray0, classArray0);
      IteratorUtils.toString((Iterator<SQLRecoverableException>) listIterator0, (Transformer<? super SQLRecoverableException, String>) invokerTransformer0, "", "", "");
      NullIsTruePredicate<SQLIntegrityConstraintViolationException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLIntegrityConstraintViolationException>(predicate1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) nullIsTruePredicate0);
      assertNull(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Integer integer0 = new Integer(1177);
      Integer integer1 = new Integer(735);
      Integer integer2 = new Integer(532);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer2, (Transformer<? super Integer, ? extends Integer>) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", mockThrowable0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("V_bG+K~y2Sy", "V_bG+K~y2Sy", 369, sQLNonTransientConnectionException0);
      Integer integer3 = new Integer((-1309));
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) iterator0;
      objectArray0[4] = (Object) mapIterator0;
      objectArray0[5] = (Object) mockThrowable0;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) iIOMetadataNode0;
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<Object>) objectArrayIterator0, (Object) mapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNodeNS("prefix may not be null", "prefix may not be null");
      Integer integer0 = new Integer(812);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(")l{N-&;zz");
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", sQLTransientException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "|49V^b\u0005.*");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      int int0 = (-1236);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "", (-1236), sQLRecoverableException2);
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException(sQLFeatureNotSupportedException0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) objectArrayListIterator0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer(")l{N-&;zz");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) listIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "wJ$[}HK'k;FoU", "wJ$[}HK'k;FoU", "Pt,X`>WTc/S3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ')l{N-&;zz' on 'class java.sql.SQLRecoverableException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      Integer integer0 = new Integer(851);
      Hashtable<Object, Integer> hashtable0 = new Hashtable<Object, Integer>();
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) hashtable0);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Integer integer1 = new Integer(851);
      hashtable0.put("Collection must not be null", integer1);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) iterator0, (Predicate<? super Integer>) predicate0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransientException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<SQLException, String> transformer1 = ConstantTransformer.constantTransformer("qQ7%i}_EaL");
      IteratorUtils.toString((Iterator<SQLTransientException>) orderedMapIterator0, (Transformer<? super SQLTransientException, String>) transformer1);
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      int int0 = 812;
      Integer integer0 = new Integer(812);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      String string0 = ")l{N-&;zz";
      SQLTransientException sQLTransientException0 = new SQLTransientException(")l{N-&;zz");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, sQLTransientException0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLRecoverableException>) listIterator0, 61);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 60
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Integer integer0 = new Integer(812);
      Integer integer1 = new Integer(812);
      IteratorUtils.objectGraphIterator(integer1, (Transformer<? super Integer, ? extends Integer>) null);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", mockThrowable0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("V_bG+K~y2Sy", "1>+~]", 386, sQLIntegrityConstraintViolationException0);
      Integer integer2 = new Integer(5);
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(sQLIntegrityConstraintViolationExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<Object>) objectArrayIterator0, (Object) "1>+~]");
      assertFalse(objectArrayIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Integer integer0 = new Integer(812);
      Integer integer1 = new Integer(812);
      IteratorUtils.objectGraphIterator(integer1, (Transformer<? super Integer, ? extends Integer>) null);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.getIterator(iIOMetadataNode0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      LinkedList<LinkedList<DataTruncation>> linkedList0 = new LinkedList<LinkedList<DataTruncation>>();
      Stack<LinkedList<DataTruncation>> stack0 = new Stack<LinkedList<DataTruncation>>();
      LoopingListIterator<LinkedList<DataTruncation>> loopingListIterator0 = new LoopingListIterator<LinkedList<DataTruncation>>(stack0);
      Properties properties0 = new Properties();
      SQLException sQLException0 = new SQLException("InstantiateFactory: Constructor must be public");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("UeEW", sQLException0);
      boolean boolean0 = IteratorUtils.contains((Iterator<LinkedList<DataTruncation>>) loopingListIterator0, (Object) sQLTransientConnectionException0);
      boolean boolean1 = IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.singletonIterator(locale_Category0);
      MapIterator<IIOMetadataNode, Vector<ServiceLoader>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      Integer integer0 = new Integer(147);
      Integer integer1 = new Integer(10);
      IteratorUtils.objectGraphIterator(integer1, (Transformer<? super Integer, ? extends Integer>) null);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Integer>) null, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Properties properties0 = new Properties();
      Transformer<Properties, Properties> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      IteratorUtils.toString(iterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (-38L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<DataTruncation, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstantiateFactory<SQLTimeoutException> instantiateFactory0 = new InstantiateFactory<SQLTimeoutException>(class0);
      Transformer<Object, SQLTimeoutException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTimeoutException>) instantiateFactory0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 9);
      closureArray0[0] = closure0;
      closureArray0[1] = closure0;
      closureArray0[2] = closure0;
      closureArray0[3] = closure0;
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      Class<String> class2 = String.class;
      classArray0[0] = class2;
      Class<String> class3 = String.class;
      classArray0[1] = class3;
      Class<String> class4 = String.class;
      classArray0[2] = class4;
      Class<String> class5 = String.class;
      classArray0[3] = class5;
      Class<String> class6 = String.class;
      classArray0[4] = class6;
      // Undeclared exception!
      try { 
        InstantiateFactory.instantiateFactory(class1, (Class<?>[]) classArray0, (Object[]) closureArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Start index must not be less than zero");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      LinkedList<LinkedList<DataTruncation>> linkedList0 = new LinkedList<LinkedList<DataTruncation>>();
      LoopingListIterator<LinkedList<DataTruncation>> loopingListIterator0 = new LoopingListIterator<LinkedList<DataTruncation>>(linkedList0);
      Properties properties0 = new Properties();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Integer integer0 = new Integer(812);
      IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) null);
      FalsePredicate.falsePredicate();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", mockThrowable0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("V_bG+K~y2Sy", "1>+~]", 386, sQLIntegrityConstraintViolationException0);
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(arrayList0);
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) reverseListIterator0, (long) 812);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Predicate must not be null");
      MapIterator<SQLIntegrityConstraintViolationException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Predicate must not be null", sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLInvalidAuthorizationSpecException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Predicate must not be null", "Predicate must not be null", ":'l/aW8", (-1752));
      stackTraceElementArray0[0] = stackTraceElement0;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      sQLInvalidAuthorizationSpecException0.printStackTrace((PrintWriter) mockPrintWriter0);
      StackTraceElement stackTraceElement1 = new StackTraceElement("Predicate must not be null", ":'l/aW8", ";a", (-987));
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLInvalidAuthorizationSpecException0.setStackTrace(stackTraceElementArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(":'l/aW8", ":'l/aW8", (-987), sQLTransactionRollbackException0);
      IteratorUtils.singletonIterator(sQLTransactionRollbackException1);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Collection must not be null", "", 1);
      vector0.add(sQLTransientConnectionException0);
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) vector0);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Properties>) reverseListIterator0, (long) (-987));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Start index must not be less than zero");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("toIndex = ", "Start index must not be less than zero", (-2143), sQLNonTransientConnectionException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLFeatureNotSupportedException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("No element at index ", sQLFeatureNotSupportedException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("6wT9.SR2$WKH", "[", (-1637), sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException1;
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException1;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertFalse(sQLIntegrityConstraintViolationException2.equals((Object)sQLIntegrityConstraintViolationException1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstantiateFactory<SQLTimeoutException> instantiateFactory0 = new InstantiateFactory<SQLTimeoutException>(class0);
      Transformer<Object, SQLTimeoutException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTimeoutException>) instantiateFactory0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<Hashtable<HashSet, SQLFeatureNotSupportedException>>) null, (Closure<? super Hashtable<HashSet, SQLFeatureNotSupportedException>>) closure0);
      EmptyListIterator.emptyListIterator();
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 8);
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[0] = class1;
      classArray0[1] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[2] = class2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("Array class must not be null", "", 1528);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("Array class must not be null", "ListIterator must not be null", (-1382));
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException0;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Array class must not be null", (String) null, 5);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLTransactionRollbackException0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) comparatorPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) null, (Predicate<? super String>) comparatorPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      MapIterator<DataTruncation, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLException>) mapIterator0);
      DefaultEquator.defaultEquator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) resettableIterator0, (Equator<Object>) defaultEquator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[4] = (Predicate<Object>) anyPredicate0;
      predicateArray0[5] = predicate0;
      predicateArray0[6] = predicate0;
      predicateArray0[7] = predicate0;
      predicateArray0[8] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      OnePredicate.onePredicate((Predicate<? super SQLNonTransientException>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Integer integer0 = new Integer(812);
      Integer integer1 = new Integer(812);
      IteratorUtils.objectGraphIterator(integer1, (Transformer<? super Integer, ? extends Integer>) null);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", mockThrowable0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("V_bG+K~y2Sy", "1>+~]", 386, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertNull(sQLIntegrityConstraintViolationException2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      String string0 = "O8.&^#[jN[~rNFLP";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("&sx AErPxD\"4DV/EN t");
      SQLDataException sQLDataException0 = new SQLDataException("$qeRaKWqBr1Hdtg", (String) null, 99, sQLClientInfoException0);
      SQLDataException sQLDataException1 = new SQLDataException();
      SQLDataException sQLDataException2 = new SQLDataException("O8.&^#[jN[~rNFLP", "O8.&^#[jN[~rNFLP");
      SQLDataException sQLDataException3 = new SQLDataException();
      SQLDataException sQLDataException4 = new SQLDataException("O8.&^#[jN[~rNFLP");
      int int0 = 5;
      IteratorUtils.toList((Iterator<? extends SQLException>) iterator0, 5);
      HashMap<SQLTransactionRollbackException, IIOMetadataNode> hashMap0 = new HashMap<SQLTransactionRollbackException, IIOMetadataNode>();
      EntrySetMapIterator<SQLTransactionRollbackException, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, IIOMetadataNode>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      EnumSet<Locale.Category>[] enumSetArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null, (Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      String string1 = null;
      SQLDataException sQLDataException0 = new SQLDataException("", "", 0, (Throwable) null);
      SQLDataException sQLDataException1 = new SQLDataException();
      SQLDataException sQLDataException2 = new SQLDataException((String) null, "");
      SQLDataException sQLDataException3 = new SQLDataException();
      SQLDataException sQLDataException4 = new SQLDataException("O8.&^#[jN[~rNFLP");
      IteratorUtils.toList((Iterator<? extends SQLException>) mapIterator0, 812);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      LinkedHashSet<Object> linkedHashSet2 = new LinkedHashSet<Object>();
      LinkedHashSet<Object> linkedHashSet3 = new LinkedHashSet<Object>();
      LinkedHashSet<Object> linkedHashSet4 = new LinkedHashSet<Object>();
      LinkedHashSet<Object> linkedHashSet5 = new LinkedHashSet<Object>();
      Transformer<SQLNonTransientException, Boolean> transformer0 = ConstantTransformer.constantTransformer((Boolean) null);
      TransformerPredicate<SQLNonTransientException> transformerPredicate0 = new TransformerPredicate<SQLNonTransientException>(transformer0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 956);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException((String) null, "", 956);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("", "", 4932);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IteratorUtils.singletonIterator(locale_Category0);
      MapIterator<IIOMetadataNode, Vector<ServiceLoader>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      int int0 = 123;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0, 123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      singletonIterator0.next();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) singletonIterator0, class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 148);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("-l");
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      String string0 = "m.XZ,%Pi";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("m.XZ,%Pi", "O8.&^#[jN[~rNFLP");
      ListIterator<SQLTransactionRollbackException> listIterator1 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("-l", "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0, 344);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) resettableIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("O8.&^#[jN[~rNFLP");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 344);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      singletonIterator0.next();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) singletonIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      String string0 = "i\\u2N";
      SQLWarning sQLWarning0 = new SQLWarning(string0, (Throwable) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicateArray0[0], equalPredicate0);
      predicateArray0[1] = (Predicate<Object>) andPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(andPredicate0);
      predicateArray0[2] = (Predicate<Object>) notPredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLClientInfoException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) listIterator1);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) listIterator1);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) priorityQueue0);
      IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator2 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      IteratorUtils.unmodifiableListIterator(listIterator2);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("t1CIuu@=DIS&`xM");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("g#Qv*");
      iIOMetadataNode1.getAttributeNode("t1CIuu@=DIS&`xM");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MapIterator<DataTruncation, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends IIOMetadataNode>) mapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) mapIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) stack0);
      Enumeration<SQLClientInfoException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration1, (Collection<? super Object>) stack0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("t1CIuu@=DIS&`xM");
      iIOMetadataNode0.getAttributeNode("t1CIuu@=DIS&`xM");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getOwnerDocument();
      iIOMetadataNode0.setAttributeNS("=>", "", "SosC=");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) nonePredicate0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) nonePredicate0, (Closure<? super Object>) closure0, (Closure<? super Object>) closure0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(3, closure1);
      IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) forClosure0);
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      IteratorUtils.apply((Iterator<Properties>) singletonListIterator0, (Closure<? super Properties>) forClosure0);
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLSyntaxErrorException, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLSyntaxErrorException, IIOMetadataNode>(mapIterator0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("SosC=");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("F~W*");
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      iIOMetadataNodeArray0[0] = iIOMetadataNode1;
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      iIOMetadataNodeArray0[2] = iIOMetadataNode1;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      iIOMetadataNodeArray0[4] = iIOMetadataNode2;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      singletonIterator0.next();
      Class<String> class0 = String.class;
      String[] stringArray0 = IteratorUtils.toArray((Iterator<? extends String>) singletonIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 8);
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[0] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[1] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[2] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      classArray0[3] = class4;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      classArray0[4] = class5;
      Class<SQLClientInfoException> class6 = SQLClientInfoException.class;
      classArray0[5] = class6;
      Class<SQLClientInfoException> class7 = SQLClientInfoException.class;
      classArray0[6] = class7;
      Class<SQLClientInfoException> class8 = SQLClientInfoException.class;
      classArray0[7] = class8;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("", classArray0, stringArray0);
      MapIterator<SQLRecoverableException, HashSet<PriorityQueue>> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) mapIterator0, (Transformer<? super SQLRecoverableException, String>) invokerTransformer0, (String) null, "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.emptyIterator();
      MapIterator<DataTruncation, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<DataTruncation, IIOMetadataNode> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends IIOMetadataNode>) mapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) mapIterator1);
      IteratorUtils.emptyIterator();
      Enumeration<SQLClientInfoException> enumeration0 = (Enumeration<SQLClientInfoException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) stack0);
      Enumeration<SQLClientInfoException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      Iterator<Object> iterator1 = IteratorUtils.asIterator((Enumeration<?>) enumeration1, (Collection<? super Object>) stack0);
      assertNotNull(iterator1);
      
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Invalid map index: ");
      iIOMetadataNode0.getAttributeNode("*<qsJ#?[8e}t*ANi~9m");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<DataTruncation, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<DataTruncation, IIOMetadataNode> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends IIOMetadataNode>) mapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) mapIterator1);
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) stack0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator1);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) stack0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("t1CIuu@=DIS&`xM");
      iIOMetadataNode0.getAttributeNode("g#Qv*");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getOwnerDocument();
      iIOMetadataNode0.setAttributeNS("=>", "=>", "SosC=");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      LinkedList<LinkedList<DataTruncation>> linkedList0 = new LinkedList<LinkedList<DataTruncation>>();
      LoopingListIterator<LinkedList<DataTruncation>> loopingListIterator0 = new LoopingListIterator<LinkedList<DataTruncation>>(linkedList0);
      Properties properties0 = new Properties();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IteratorUtils.getIterator("/");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getOwnerDocument();
      iIOMetadataNode0.setAttributeNS("=>", "", "SosC=");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstantiateFactory<SQLRecoverableException> instantiateFactory0 = new InstantiateFactory<SQLRecoverableException>(class0);
      instantiateFactory0.create();
      Transformer<SQLException, SQLRecoverableException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLRecoverableException>) instantiateFactory0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      Vector<Integer> vector0 = new Vector<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) vector0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      Hashtable<IIOMetadataNode, Locale.Category> hashtable0 = new Hashtable<IIOMetadataNode, Locale.Category>();
      EntrySetMapIterator<IIOMetadataNode, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, Locale.Category>(hashtable0);
      AbstractMapIteratorDecorator<IIOMetadataNode, Locale.Category> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, Locale.Category>(entrySetMapIterator0);
      MapIterator<IIOMetadataNode, Locale.Category> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends Locale.Category>) entrySetMapIterator0);
      OrderedMapIterator<IIOMetadataNode, Locale.Category> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Locale.Category> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Locale.Category>(orderedMapIterator0);
      MapIterator<IIOMetadataNode, Locale.Category> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, Locale.Category>) abstractOrderedMapIteratorDecorator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 3;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TruePredicate.truePredicate();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Start index must not be less than zero");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IteratorUtils.getIterator(mapIterator1);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      LinkedList<LinkedList<DataTruncation>> linkedList0 = new LinkedList<LinkedList<DataTruncation>>();
      LoopingListIterator<LinkedList<DataTruncation>> loopingListIterator0 = new LoopingListIterator<LinkedList<DataTruncation>>(linkedList0);
      Properties properties0 = new Properties();
      IteratorUtils.contains((Iterator<LinkedList<DataTruncation>>) loopingListIterator0, (Object) properties0);
      IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      Transformer<SQLException, SQLTransactionRollbackException>[] transformerArray0 = (Transformer<SQLException, SQLTransactionRollbackException>[]) Array.newInstance(Transformer.class, 0);
      ConstantTransformer<SQLException, SQLTransactionRollbackException> constantTransformer0 = new ConstantTransformer<SQLException, SQLTransactionRollbackException>((SQLTransactionRollbackException) null);
      Transformer<SQLException, SQLTransactionRollbackException> transformer0 = SwitchTransformer.switchTransformer((Predicate<? super SQLException>[]) predicateArray0, (Transformer<? super SQLException, ? extends SQLTransactionRollbackException>[]) transformerArray0, (Transformer<? super SQLException, ? extends SQLTransactionRollbackException>) constantTransformer0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator((SQLTransactionRollbackException) null, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) iterator0);
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      Iterator<SQLTransactionRollbackException> iterator2 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) iterator1);
      assertFalse(iterator2.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getOwnerDocument();
      iIOMetadataNode0.setAttributeNS("=>", "", "SosC=");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstantiateFactory<SQLRecoverableException> instantiateFactory0 = new InstantiateFactory<SQLRecoverableException>(class0);
      instantiateFactory0.create();
      Transformer<SQLException, SQLRecoverableException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLRecoverableException>) instantiateFactory0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      Vector<Integer> vector0 = new Vector<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) vector0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) resettableIterator0);
      Hashtable<IIOMetadataNode, Locale.Category> hashtable0 = new Hashtable<IIOMetadataNode, Locale.Category>();
      EntrySetMapIterator<IIOMetadataNode, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, Locale.Category>(hashtable0);
      AbstractMapIteratorDecorator<IIOMetadataNode, Locale.Category> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, Locale.Category>(entrySetMapIterator0);
      MapIterator<IIOMetadataNode, Locale.Category> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends Locale.Category>) entrySetMapIterator0);
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("SosC=");
      IteratorUtils.peekingIterator((Iterator<? extends String>) listIterator0);
      OrderedMapIterator<String, LinkedHashSet<SQLTransientConnectionException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, LinkedHashSet<SQLTransientConnectionException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, LinkedHashSet<SQLTransientConnectionException>>(orderedMapIterator0);
      MapIterator<String, LinkedHashSet<SQLTransientConnectionException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, LinkedHashSet<SQLTransientConnectionException>>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.asEnumeration((Iterator<? extends String>) mapIterator1);
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) mapIterator1);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) priorityQueue0);
      String string0 = IteratorUtils.toString((Iterator<IIOMetadataNode>) mapIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<DataTruncation, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      singletonIterator0.next();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) singletonIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      IteratorUtils.getIterator(singletonIterator0);
      singletonIterator0.reset();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      LinkedList<LinkedList<DataTruncation>> linkedList0 = new LinkedList<LinkedList<DataTruncation>>();
      LoopingListIterator<LinkedList<DataTruncation>> loopingListIterator0 = new LoopingListIterator<LinkedList<DataTruncation>>(linkedList0);
      Properties properties0 = new Properties();
      IteratorUtils.contains((Iterator<LinkedList<DataTruncation>>) loopingListIterator0, (Object) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLTransientConnectionException0, comparator0);
      Predicate<SQLException> predicate1 = OrPredicate.orPredicate((Predicate<? super SQLException>) predicate0, (Predicate<? super SQLException>) predicate0);
      IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "0z");
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) null);
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      singletonIterator0.next();
      SQLTransientException sQLTransientException0 = new SQLTransientException("BwEG,K<bvBsC?Ct+", "BwEG,K<bvBsC?Ct+", 2047);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 1606, sQLTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("0OLl", sQLRecoverableException0);
      SQLWarning sQLWarning0 = new SQLWarning("", sQLTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException("dOua<mt8~f", (String) null);
      SQLDataException sQLDataException1 = new SQLDataException("dOua<mt8~f", "The closure array must not contain a null closure, index ", 1606, sQLTransientConnectionException0);
      sQLDataException0.addSuppressed(sQLDataException1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(", ", (String) null, 2614);
      sQLFeatureNotSupportedException1.setNextException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0, 1606, 2614);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstantiateFactory<SQLTimeoutException> instantiateFactory0 = new InstantiateFactory<SQLTimeoutException>(class0);
      Transformer<Object, SQLTimeoutException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTimeoutException>) instantiateFactory0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<Hashtable<HashSet, SQLFeatureNotSupportedException>>) null, (Closure<? super Hashtable<HashSet, SQLFeatureNotSupportedException>>) closure0);
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 8);
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[0] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[1] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[2] = class3;
      Class<SQLDataException> class4 = SQLDataException.class;
      classArray0[3] = class4;
      Class<SQLDataException> class5 = SQLDataException.class;
      classArray0[4] = class5;
      Class<SQLDataException> class6 = SQLDataException.class;
      classArray0[5] = class6;
      Class<SQLDataException> class7 = SQLDataException.class;
      classArray0[6] = class7;
      Class<SQLDataException> class8 = SQLDataException.class;
      classArray0[7] = class8;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("ListIterator must not be null", classArray0, classArray0);
      IteratorUtils.toString((Iterator<SQLRecoverableException>) listIterator0, (Transformer<? super SQLRecoverableException, String>) invokerTransformer0, "", "", "ListIterator must not be null");
      Integer integer0 = new Integer(3686);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      ListIterator<Integer> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) singletonListIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Integer> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Integer>) uniquePredicate0);
      Iterator<Integer> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Integer>) listIterator1, (Predicate<? super Integer>) predicate0);
      Iterator<Integer> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends Integer>) iterator0, (Predicate<? super Integer>) predicate0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Start index must not be less than zero");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IteratorUtils.getIterator(mapIterator1);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      LinkedList<LinkedList<DataTruncation>> linkedList0 = new LinkedList<LinkedList<DataTruncation>>();
      LoopingListIterator<LinkedList<DataTruncation>> loopingListIterator0 = new LoopingListIterator<LinkedList<DataTruncation>>(linkedList0);
      Properties properties0 = new Properties();
      boolean boolean0 = IteratorUtils.contains((Iterator<LinkedList<DataTruncation>>) loopingListIterator0, (Object) properties0);
      boolean boolean1 = IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[5];
      SQLWarning sQLWarning0 = new SQLWarning("", (String) null, 9);
      sQLWarningArray0[0] = sQLWarning0;
      DataTruncation dataTruncation0 = new DataTruncation(10, false, false, 10, (-566), sQLWarning0);
      sQLWarningArray0[1] = (SQLWarning) dataTruncation0;
      SQLWarning sQLWarning1 = new SQLWarning("ePX");
      sQLWarning1.getLocalizedMessage();
      sQLWarningArray0[2] = sQLWarning1;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLWarning sQLWarning2 = new SQLWarning("ePX", "", (-566), sQLNonTransientException0);
      sQLWarningArray0[3] = sQLWarning2;
      SQLWarning sQLWarning3 = new SQLWarning("", "ePX", 10, sQLWarning2);
      sQLWarningArray0[4] = sQLWarning3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLWarningArray0, (-566), 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Properties properties0 = new Properties();
      Transformer<Properties, Properties> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      IteratorUtils.toString(iterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) predicate1, (Closure<? super Object>) closure0);
      IteratorUtils.apply((Iterator<Properties>) listIterator0, (Closure<? super Properties>) closure1);
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.emptyIterator();
      Stack<Object> stack0 = new Stack<Object>();
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) stack0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      Enumeration<SQLNonTransientException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      Iterator<Object> iterator1 = IteratorUtils.asIterator((Enumeration<?>) enumeration1, (Collection<? super Object>) stack0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = "";
      iIOMetadataNode0.getOwnerDocument();
      String string1 = "SosC=";
      int int0 = (-987);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("=>", "=>", (-211));
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "", (Equator<Object>) defaultEquator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      OnePredicate.onePredicate((Predicate<? super SQLNonTransientException>[]) predicateArray0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLRecoverableException>) resettableIterator0, 2111);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2111
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      String string0 = "i\\u2N";
      SQLWarning sQLWarning0 = new SQLWarning(string0, (Throwable) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      SQLWarning sQLWarning1 = null;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicateArray0[0], equalPredicate0);
      predicateArray0[1] = (Predicate<Object>) andPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(andPredicate0);
      predicateArray0[2] = (Predicate<Object>) notPredicate0;
      Integer integer0 = new Integer((-1));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(integer0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[3] = (Predicate<Object>) comparatorPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[4] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) string0, (Equator<Object>) defaultEquator0);
      predicateArray0[5] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[6] = (Predicate<Object>) allPredicate0;
      Predicate<SQLNonTransientException> predicate1 = OnePredicate.onePredicate((Predicate<? super SQLNonTransientException>[]) predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLRecoverableException>) resettableIterator0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Start index must not be less than zero");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      Integer integer0 = new Integer(344);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) null);
      Iterator<Integer> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends Integer>) iterator0, (Predicate<? super Integer>) predicate0);
      Iterator<Integer> iterator2 = IteratorUtils.filteredIterator((Iterator<? extends Integer>) iterator1, (Predicate<? super Integer>) predicate1);
      assertNotSame(iterator1, iterator2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("Estimated size must be greater than 0");
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) singletonIterator0, class0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("Estimated size must be greater than 0");
      iIOMetadataNode0.hasAttribute("'");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("O8.&^#[jN[~rNFLP");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0);
      String string0 = IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableIterator0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("ZSWGIU-j@W'JQ");
      singletonIterator0.next();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) singletonIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Integer integer0 = new Integer((-1851));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("MyxKqxeKk/'d=-5HC' ", "ZSWGIU-j@W'JQ");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("p@", sQLNonTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException("p@", sQLSyntaxErrorException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLDataException0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[1] = (Predicate<Object>) comparatorPredicate0;
      predicateArray0[2] = (Predicate<Object>) comparatorPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) predicateArray0[1], (Equator<Object>) defaultEquator0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      OnePredicate.onePredicate((Predicate<? super SQLNonTransientException>[]) predicateArray0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Start index must not be less than zero");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Integer integer0 = new Integer(344);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer1 = new Integer(837);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer1, (Transformer<? super Integer, ? extends Integer>) null);
      Iterator<Integer> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends Integer>) iterator0, (Predicate<? super Integer>) predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) iterator1, (Predicate<? super Integer>) predicate1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Start index must not be less than zero", "Transformer must not be null");
      MockThrowable mockThrowable0 = new MockThrowable("\"8[#Dabau!AD", sQLSyntaxErrorException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 7, (-463), mockThrowable0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      singletonIterator0.next();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) singletonIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode((String) null);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) singletonIterator0);
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(list0);
      Integer integer0 = new Integer(344);
      boolean boolean0 = IteratorUtils.contains((Iterator<Object>) loopingListIterator0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      LinkedHashSet<Object>[] linkedHashSetArray0 = (LinkedHashSet<Object>[]) Array.newInstance(LinkedHashSet.class, 7);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<Object> linkedHashSet2 = new LinkedHashSet<Object>();
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<Object> linkedHashSet3 = new LinkedHashSet<Object>();
      linkedHashSetArray0[3] = linkedHashSet3;
      LinkedHashSet<Object> linkedHashSet4 = new LinkedHashSet<Object>();
      linkedHashSetArray0[4] = linkedHashSet4;
      LinkedHashSet<Object> linkedHashSet5 = new LinkedHashSet<Object>();
      linkedHashSetArray0[5] = linkedHashSet5;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) resettableIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(", ", ", ", (-1752), (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(", ");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("O8.&^#[jN[~rNFLP");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, (-1131));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.getIterator((Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      MockThrowable mockThrowable0 = new MockThrowable("");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", mockThrowable0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLNonTransientException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("Jykf8]j", "", 100);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException();
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("", "", mockThrowable0);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("", "Array class must not be null");
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException();
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException("", "j+jl7wPfZY|D");
      MockThrowable mockThrowable1 = new MockThrowable("The type to check instanceof must not be null");
      SQLDataException sQLDataException8 = new SQLDataException("w8O2?Z7>(q#=c~+A\"`", "org.apache.commons.collections4.IteratorUtils", mockThrowable1);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Iterator<? extends SQLDataException>) resettableListIterator0);
      IteratorUtils.toList((Iterator<? extends SQLException>) iterator0, 2012);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = new Object();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("%pmp#nl", "org.apache.commons.collections4.functors.OrPredicate", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[8] = sQLIntegrityConstraintViolationException0;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NullIsTruePredicate<SQLIntegrityConstraintViolationException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLIntegrityConstraintViolationException>(predicate0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) nullIsTruePredicate0);
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      LoopingListIterator<SQLNonTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientConnectionException>(linkedList0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) loopingListIterator0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) linkedList1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ListIterator<String> listIterator1 = EmptyListIterator.emptyListIterator();
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) listIterator1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list0, locale_FilteringMode1);
      ReverseListIterator<String> reverseListIterator0 = new ReverseListIterator<String>(list1);
      Class<String> class0 = String.class;
      Iterator<String> iterator0 = IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>) reverseListIterator0, (Iterator<? extends String>) reverseListIterator0);
      String[] stringArray0 = IteratorUtils.toArray((Iterator<? extends String>) iterator0, class0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      MockThrowable mockThrowable0 = new MockThrowable("");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", mockThrowable0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLNonTransientException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("Jykf8]j", "", 100);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException();
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("", "", mockThrowable0);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("", "Array class must not be null");
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException();
      sQLDataExceptionArray0[6] = sQLDataException6;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SQLDataException sQLDataException7 = new SQLDataException("{07e7KSZY8`VCu:_3}", "");
      SQLDataException sQLDataException8 = new SQLDataException("{07e7KSZY8`VCu:_3}", "", sQLDataException0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      ResettableListIterator<SQLDataException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Iterator<? extends SQLDataException>) resettableListIterator1);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) resettableListIterator1, 100);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("]0!zjM^m1~?", "]0!zjM^m1~?", 1021);
      ConstantFactory<SQLTimeoutException> constantFactory0 = new ConstantFactory<SQLTimeoutException>(sQLTimeoutException0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      LinkedHashSet<Object> linkedHashSet2 = new LinkedHashSet<Object>();
      LinkedHashSet<Object> linkedHashSet3 = new LinkedHashSet<Object>();
      LinkedHashSet<Object> linkedHashSet4 = new LinkedHashSet<Object>();
      LinkedHashSet<Object>[] linkedHashSetArray0 = (LinkedHashSet<Object>[]) Array.newInstance(LinkedHashSet.class, 5);
      linkedHashSetArray0[1] = linkedHashSet2;
      linkedHashSetArray0[2] = linkedHashSet0;
      linkedHashSetArray0[3] = linkedHashSet3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(linkedHashSetArray0, 730);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      LinkedHashSet<Object>[] linkedHashSetArray0 = (LinkedHashSet<Object>[]) Array.newInstance(LinkedHashSet.class, 7);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSetArray0[0] = linkedHashSet0;
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstantiateFactory<SQLTimeoutException> instantiateFactory0 = new InstantiateFactory<SQLTimeoutException>(class0);
      Transformer<Object, SQLTimeoutException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTimeoutException>) instantiateFactory0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<Hashtable<HashSet, SQLFeatureNotSupportedException>>) null, (Closure<? super Hashtable<HashSet, SQLFeatureNotSupportedException>>) closure0);
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 9);
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[0] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[1] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[2] = class3;
      Class<DataTruncation> class4 = DataTruncation.class;
      classArray0[3] = class4;
      Class<DataTruncation> class5 = DataTruncation.class;
      classArray0[4] = class5;
      Class<DataTruncation> class6 = DataTruncation.class;
      classArray0[5] = class6;
      Class<DataTruncation> class7 = DataTruncation.class;
      classArray0[6] = class7;
      Class<DataTruncation> class8 = DataTruncation.class;
      classArray0[7] = class8;
      Class<DataTruncation> class9 = DataTruncation.class;
      classArray0[8] = class9;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("", classArray0, linkedHashSetArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) listIterator0, (Transformer<? super SQLRecoverableException, String>) invokerTransformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
      
      IteratorUtils.emptyIterator();
      MapIterator<DataTruncation, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<DataTruncation, IIOMetadataNode> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends IIOMetadataNode>) mapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) mapIterator1);
      IteratorUtils.emptyIterator();
      Enumeration<SQLClientInfoException> enumeration0 = (Enumeration<SQLClientInfoException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 3);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("<(PZ|Q", classArray0, classArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) invokerTransformer0, "N5", "<(PZ|Q", "<(PZ|Q");
      assertEquals("<(PZ|Q<(PZ|Q", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      String string0 = "i\\u2N";
      SQLWarning sQLWarning0 = new SQLWarning(string0, (Throwable) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLWarning0, defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicateArray0[0], equalPredicate0);
      predicateArray0[1] = (Predicate<Object>) andPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(andPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Estimated size must be greater than 0");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("Estimated size must be greater than 0");
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("9lJ^7");
      iIOMetadataNodeArray0[0] = iIOMetadataNode2;
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 147);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = "=\\>";
      iIOMetadataNode0.getOwnerDocument();
      iIOMetadataNode0.setAttributeNS("=>", "", "SosC=");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      DataTruncation dataTruncation0 = new DataTruncation((-1144), false, false, 2429, (-1144));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 0, (-704));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) resettableIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(", ", ", ", (-1752), (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "", (Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("Collection must not be null", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("^f1sJ}<dc", "", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("", "", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 1688, 2182);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      MapIterator<SQLClientInfoException, Class<SQLNonTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) null, (Collection<? super SQLClientInfoException>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstantiateFactory<SQLTimeoutException> instantiateFactory0 = new InstantiateFactory<SQLTimeoutException>(class0);
      Transformer<Object, SQLTimeoutException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTimeoutException>) instantiateFactory0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<Hashtable<HashSet, SQLFeatureNotSupportedException>>) null, (Closure<? super Hashtable<HashSet, SQLFeatureNotSupportedException>>) closure0);
      EmptyListIterator.emptyListIterator();
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 8);
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[0] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[1] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[2] = class3;
      Class<SQLDataException> class4 = SQLDataException.class;
      classArray0[3] = class4;
      Class<SQLDataException> class5 = SQLDataException.class;
      classArray0[4] = class5;
      Class<SQLDataException> class6 = SQLDataException.class;
      classArray0[5] = class6;
      Iterator<SQLClientInfoException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Transformers must not be null");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.SwitchClosure", sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.SwitchClosure", "org.apache.commons.collections4.functors.SwitchClosure", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException2;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException(")TQ%", "g&", 0, batchUpdateException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException3;
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "g&", 0);
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(")TQ%", "g&", 0, sQLTransientException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("g&", "", 147, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("g&");
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("", "org.apache.commons.collections4.functors.SwitchClosure", sQLSyntaxErrorException5);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException7;
      SQLSyntaxErrorException sQLSyntaxErrorException8 = new SQLSyntaxErrorException("qnnZ", "", 147, sQLSyntaxErrorException5);
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException8;
      SQLSyntaxErrorException sQLSyntaxErrorException9 = new SQLSyntaxErrorException(")TQ%", "Estimated size must be greater than 0", 147);
      sQLSyntaxErrorExceptionArray0[8] = sQLSyntaxErrorException9;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.emptyIterator();
      MapIterator<DataTruncation, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<DataTruncation, IIOMetadataNode> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends IIOMetadataNode>) mapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLWarning>) mapIterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Start index must not be less than zero");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("Start index must not be less than zero");
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode2;
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      iIOMetadataNodeArray0[4] = iIOMetadataNode1;
      iIOMetadataNodeArray0[5] = iIOMetadataNode1;
      iIOMetadataNodeArray0[6] = iIOMetadataNode0;
      iIOMetadataNodeArray0[7] = iIOMetadataNode1;
      iIOMetadataNodeArray0[8] = iIOMetadataNode0;
      IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[8];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Start index must not be less than zero");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Start index must not be less than zero", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("Start index must not be less than zero", "Start index must not be less than zero", 3027);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("Start index must not be less than zero", "]", 3027);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("Start index must not be less than zero");
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("Start index must not be less than zero", "tes1s<)?qM!]");
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException((String) null, "tes1s<)?qM!]", 100, sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("", "", (-219));
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLFeatureNotSupportedException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, SQLSyntaxErrorException>) orderedMapIterator0);
      IteratorUtils.isEmpty(mapIterator0);
      PriorityQueue<SQLTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLTransientConnectionException>();
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>(priorityQueue0);
      // Undeclared exception!
      try { 
        linkedList0.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MapIterator<SQLNonTransientException, Boolean> mapIterator0 = IteratorUtils.emptyMapIterator();
      Properties properties0 = new Properties();
      int int0 = 2566;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "!,{P", 2566);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("Collection must not be null", "iF)KD6]0Dgj5e|<");
      IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException1);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) mapIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("iF)KD6]0Dgj5e|<", "");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("Collection must not be null", "", sQLInvalidAuthorizationSpecException0);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException1);
      Predicate<SQLNonTransientException> predicate0 = EqualPredicate.equalPredicate((SQLNonTransientException) sQLNonTransientConnectionException1);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientException>(orderedMapIterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = null;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      String string0 = "i\\u2N";
      SQLWarning sQLWarning0 = new SQLWarning(string0, (Throwable) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLWarning0, defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicateArray0[0], equalPredicate0);
      predicateArray0[1] = (Predicate<Object>) andPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(andPredicate0);
      predicateArray0[2] = (Predicate<Object>) notPredicate0;
      Integer integer0 = new Integer((-1));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(integer0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[3] = (Predicate<Object>) comparatorPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[4] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) string0, (Equator<Object>) defaultEquator0);
      predicateArray0[5] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[6] = (Predicate<Object>) allPredicate0;
      Predicate<SQLNonTransientException> predicate1 = OnePredicate.onePredicate((Predicate<? super SQLNonTransientException>[]) predicateArray0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 7);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      enumSetArray0[0] = enumSet0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet1 = EnumSet.range(locale_Category1, locale_Category2);
      enumSetArray0[1] = enumSet1;
      EnumSet<Locale.Category> enumSet2 = EnumSet.copyOf((Collection<Locale.Category>) enumSet0);
      enumSetArray0[2] = enumSet2;
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet3 = EnumSet.noneOf(class0);
      enumSetArray0[3] = enumSet3;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      locale_CategoryArray0[0] = locale_Category0;
      EnumSet<Locale.Category> enumSet4 = EnumSet.of(locale_Category3, locale_CategoryArray0);
      enumSetArray0[4] = enumSet4;
      Class<Locale.Category> class1 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet5 = EnumSet.allOf(class1);
      enumSetArray0[5] = enumSet5;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet6 = EnumSet.of(locale_Category2, locale_Category4, locale_Category0, locale_Category4);
      enumSetArray0[6] = enumSet6;
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutException0.getLocalizedMessage();
      IteratorUtils.getIterator(sQLTimeoutException0);
      String string0 = "ar}OpBp6uE";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("ar}OpBp6uE", "ar}OpBp6uE", (-1668));
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, false);
      // Undeclared exception!
      try { 
        singletonIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.SingletonIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Object object0 = new Object();
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) resettableIterator0, object0);
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) listIterator0, (Transformer<? super IIOMetadataNode, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.ClosureTransformer", "org.apache.commons.collections4.map.Flat3Map$FlatMapEntry");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransactionRollbackException0);
      SQLWarning sQLWarning0 = new SQLWarning("", "", 901, sQLFeatureNotSupportedException0);
      IteratorUtils.singletonIterator(sQLWarning0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.functors.ClosureTransformer");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("[B`yC/?waW$f7B<ioRb");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("org.apache.commons.collections4.functors.ComparatorPredicate$Criterion");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 901);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("ZSWGIU-j@W'JQ");
      String string0 = singletonIterator0.next();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) singletonIterator0, class0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("ZSWGIU-j@W'JQ");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("O8.&^#[jN[~rNFLP");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0);
      String string1 = IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableIterator0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Iterator<Locale.Category> iterator0 = IteratorUtils.objectGraphIterator(locale_Category0, (Transformer<? super Locale.Category, ? extends Locale.Category>) null);
      IteratorUtils.isEmpty(iterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Estimated size must be greater than 0", (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Estimated size must be greater than 0", sQLNonTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Estimated size must be greater than 0", "Estimated size must be greater than 0", 31, sQLFeatureNotSupportedException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLFeatureNotSupportedException1);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("Estimated size must be greater than 0", "4Iq@P/G.x#}v[di", (-3092));
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", "Estimated size must be greater than 0", (-3092), sQLDataException3);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException();
      sQLDataExceptionArray0[5] = sQLDataException5;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.nullTransformer();
      OrderedMapIterator<Integer, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Integer>) orderedMapIterator0, (Transformer<? super Integer, ? extends IIOMetadataNode>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Transformer<? super IIOMetadataNode, ? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) null, (Transformer<? super Integer, ? extends IIOMetadataNode>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("GREATER", "org.apache.commons.collections4.functors.SwitchClosure", (-1), map0, (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "org.apache.commons.collections4.functors.SwitchClosure", sQLClientInfoException1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(".XY1ocoH't&*J", ":x[,0Y!=JEH1", (-1), sQLNonTransientException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("org.apache.commons.collections4.iterators.SingletonListIterator", "F", (-1));
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("RD/is_ ", "@Q^};a+56", 1334, (Throwable) null);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) objectArrayListIterator0, (-987));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0, 807L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      MockThrowable mockThrowable0 = new MockThrowable("");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", mockThrowable0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLNonTransientException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("Jykf8]j", "", 100);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException();
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("", "", mockThrowable0);
      sQLDataExceptionArray0[4] = sQLDataException4;
      sQLDataException0.addSuppressed(sQLDataException1);
      SQLDataException sQLDataException5 = new SQLDataException("", "Array class must not be null");
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException();
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException("](Mj>h^3354moypka", "Node must not be null");
      sQLDataExceptionArray0[7] = sQLDataException7;
      SQLDataException sQLDataException8 = new SQLDataException("", "lc,'K.", sQLNonTransientException0);
      sQLDataExceptionArray0[8] = sQLDataException8;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Iterator<? extends SQLDataException>) resettableListIterator0);
      IteratorUtils.toList((Iterator<? extends SQLException>) iterator0, 100);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      IteratorUtils.getIterator("/");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) singletonListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransactionRollbackException, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) singletonListIterator0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Locale.Category>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLTransientException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getOwnerDocument();
      iIOMetadataNode0.setAttributeNS("=>", "=>", "=>");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstantiateFactory<SQLTimeoutException> instantiateFactory0 = new InstantiateFactory<SQLTimeoutException>(class0);
      Transformer<Object, SQLTimeoutException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTimeoutException>) instantiateFactory0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<Hashtable<HashSet, SQLFeatureNotSupportedException>>) null, (Closure<? super Hashtable<HashSet, SQLFeatureNotSupportedException>>) closure0);
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 8);
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[0] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[1] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[2] = class3;
      Class<SQLDataException> class4 = SQLDataException.class;
      classArray0[3] = class4;
      Class<SQLDataException> class5 = SQLDataException.class;
      classArray0[4] = class5;
      Class<SQLDataException> class6 = SQLDataException.class;
      classArray0[5] = class6;
      Class<SQLDataException> class7 = SQLDataException.class;
      classArray0[6] = class7;
      Class<SQLDataException> class8 = SQLDataException.class;
      classArray0[7] = class8;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("ListIterator must not be null", classArray0, classArray0);
      IteratorUtils.toString((Iterator<SQLRecoverableException>) listIterator0, (Transformer<? super SQLRecoverableException, String>) invokerTransformer0, "", "", "ListIterator must not be null");
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) priorityQueue0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      HashSet<SQLSyntaxErrorException> hashSet0 = new HashSet<SQLSyntaxErrorException>();
      String string0 = " iCf2TJEwB@Q*]64";
      String string1 = "toIndex = ";
      int int0 = 0;
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "org.apache.commons.collections4.IteratorUtils", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(" iCf2TJEwB@Q*]64", sQLTransientException0);
      SQLWarning sQLWarning0 = new SQLWarning(" iCf2TJEwB@Q*]64", "", 0, sQLNonTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(" iCf2TJEwB@Q*]64", "toIndex = ", 3, sQLWarning0);
      hashSet0.add(sQLSyntaxErrorException0);
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) hashSet0);
      IteratorUtils.emptyMapIterator();
      String string2 = "nC";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "nC", hashMap0, sQLTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      int int0 = 0;
      ListIterator<SQLDataException> listIterator0 = arrayList0.listIterator(0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) listIterator0, (-98L), (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLTransientConnectionException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) mapIterator0, (-1999L), (-1999L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.IteratorUtils");
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0, sQLFeatureNotSupportedException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, false, false, 0, (-2078), dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      IteratorUtils.arrayListIterator(dataTruncationArray0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation1, (-2078));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties1, 1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) predicate1, (Closure<? super Object>) closure0);
      IteratorUtils.apply((Iterator<Properties>) listIterator0, (Closure<? super Properties>) closure1);
      MapIterator<SQLSyntaxErrorException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Start index must not be less than zero");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("Start index must not be less than zero");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      MockThrowable mockThrowable0 = new MockThrowable("");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", mockThrowable0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLNonTransientException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("Jykf8]j", "", 100);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException();
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("", "", mockThrowable0);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("", "Array class must not be null");
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException();
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException("](Mj>h^3354moypka", "Node must not be null");
      sQLDataExceptionArray0[7] = sQLDataException7;
      SQLDataException sQLDataException8 = new SQLDataException("", "lc,'K.", sQLNonTransientException0);
      sQLDataExceptionArray0[8] = sQLDataException8;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Iterator<? extends SQLDataException>) resettableListIterator0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) iterator0, 100);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) null, (-4271L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      MapIterator<DataTruncation, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("{ivz", " must be Comparable");
      String string0 = null;
      MockFile mockFile0 = new MockFile((String) null, "Z-m4i5iu|geZ(<Sr");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, " must be Comparable");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  must be Comparable
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 100;
      int int1 = 1482;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, 100, 1482);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, (-2567), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, 0, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte) (-81);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Class<DataTruncation>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      EmptyMapIterator.emptyMapIterator();
      MapIterator<IIOMetadataNode, Vector<ServiceLoader>> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) mapIterator0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator1, (Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      int int0 = 7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) linkedList0);
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 2, 2211);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      SQLException sQLException0 = new SQLException("#MA,^lwG/c],|f");
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "transformer may not be null", 10, sQLException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, sQLWarning0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("#MA,^lwG/c],|f", "#MA,^lwG/c],|f", 10, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException((String) null, "transformer may not be null", 10, sQLWarning0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException((String) null, sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, (-1534), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      LinkedHashSet<Object>[] linkedHashSetArray0 = (LinkedHashSet<Object>[]) Array.newInstance(LinkedHashSet.class, 7);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<Object> linkedHashSet2 = new LinkedHashSet<Object>();
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<Object> linkedHashSet3 = new LinkedHashSet<Object>();
      linkedHashSetArray0[3] = linkedHashSet3;
      LinkedHashSet<Object> linkedHashSet4 = new LinkedHashSet<Object>();
      linkedHashSetArray0[4] = linkedHashSet4;
      LinkedHashSet<Object> linkedHashSet5 = new LinkedHashSet<Object>();
      linkedHashSetArray0[5] = linkedHashSet5;
      LinkedHashSet<Object> linkedHashSet6 = new LinkedHashSet<Object>();
      linkedHashSetArray0[6] = linkedHashSet6;
      ResettableListIterator<LinkedHashSet<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedHashSetArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLWarning sQLWarning0 = new SQLWarning("U{'+", sQLDataException0);
      sQLDataException0.addSuppressed(sQLWarning0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("PrototypeCloneFactory: Clone method must be public", sQLWarning0);
      sQLFeatureNotSupportedException0.setNextException(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 3578, 3578);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "PrototypeCloneFactory: Clone method must be public";
      String string1 = "U{'+";
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLWarning sQLWarning0 = new SQLWarning("U{'+", sQLDataException0);
      sQLDataException0.addSuppressed(sQLWarning0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("PrototypeCloneFactory: Clone method must be public", sQLWarning0);
      sQLFeatureNotSupportedException0.setNextException(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 3578, 3578);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      ListIterator<SQLClientInfoException> listIterator0 = linkedList0.listIterator();
      IteratorUtils.unmodifiableListIterator(listIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("?yQ4N7T~T#6}`=]9l", "?yQ4N7T~T#6}`=]9l", false);
      // Undeclared exception!
      try { 
        ChainedTransformer.chainedTransformer((Collection<? extends Transformer<? super StringTokenizer, ? extends StringTokenizer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Transformer collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.ChainedTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("~r[k_~s/^{GCo", hashtable0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      assertTrue(listIterator0.hasNext());
  }
}
