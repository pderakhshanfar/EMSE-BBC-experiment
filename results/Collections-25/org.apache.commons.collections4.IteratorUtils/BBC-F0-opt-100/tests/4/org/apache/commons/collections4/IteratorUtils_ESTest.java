/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 09 02:10:57 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("jXr", (Throwable) null);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, PriorityQueue<Transformer<Object, String>>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) iterator0, (Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      objectArrayListIterator0.next();
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) objectArrayListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ResettableListIterator<HashMap<SQLDataException, Properties>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<HashMap<SQLDataException, Properties>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<HashMap<SQLDataException, Properties>>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, SQLTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends SQLTransientException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLTransientException>(orderedMapIterator1);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("?#<LK`lAd~A$tTc!", "org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", 2911);
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransactionRollbackException0, false);
      Consumer<SQLException> consumer0 = (Consumer<SQLException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLTransientException>) singletonIterator0, (Transformer<? super SQLTransientException, String>) transformer0, "org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("*s)5+;K|h_", "eBp8");
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) listIterator0, class0);
      assertEquals(1, sQLRecoverableExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      LoopingIterator<SQLRecoverableException> loopingIterator0 = new LoopingIterator<SQLRecoverableException>(arrayList0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) loopingIterator0, class0);
      assertEquals(0, sQLRecoverableExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[3];
      ObjectArrayListIterator<StringTokenizer> objectArrayListIterator0 = new ObjectArrayListIterator<StringTokenizer>(stringTokenizerArray0);
      ListIteratorWrapper<StringTokenizer> listIteratorWrapper0 = new ListIteratorWrapper<StringTokenizer>(objectArrayListIterator0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) listIteratorWrapper0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation(3059, false, true, 1985, 1532);
      arrayList0.add(dataTruncation0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[6];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTimeoutException0;
      ObjectArrayIterator<SQLTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientException>(sQLTransientExceptionArray0);
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)IteratorUtils.get((Iterator<SQLTransientException>) objectArrayIterator0, 1);
      assertNull(sQLTimeoutException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Object) sQLInvalidAuthorizationSpecException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 3);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ReverseListIterator<Locale.Category> reverseListIterator0 = new ReverseListIterator<Locale.Category>(linkedList0);
      iteratorArray0[0] = (Iterator<Locale.Category>) reverseListIterator0;
      iteratorArray0[1] = (Iterator<Locale.Category>) reverseListIterator0;
      MapIterator<Locale.Category, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[2] = (Iterator<Locale.Category>) mapIterator0;
      Iterator<Object> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Object>) null, (Iterator<?>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 3);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableIterator0;
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) resettableIterator0;
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) objectArrayListIterator0;
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      BoundedIterator<SQLInvalidAuthorizationSpecException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[2];
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0, 0, 1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[5];
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.arrayIterator(sQLWarningArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 8);
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.arrayIterator(enumSetArray0, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[]");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNodeArray0[0];
      iIOMetadataNodeArray0[5] = iIOMetadataNodeArray0[1];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 5);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 9);
      InvokerTransformer<IIOMetadataNode, String> invokerTransformer0 = new InvokerTransformer<IIOMetadataNode, String>((String) null, classArray0, iIOMetadataNodeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0, (Transformer<? super IIOMetadataNode, String>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) orderedIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("zDa/du`O]e*f+0", "org.apache.commons.collections4.iterators.ObjectArrayListIterator", 1207);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("zDa/du`O]e*f+0", sQLFeatureNotSupportedException0);
      stack0.add(sQLRecoverableException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) stack0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("^eCgtSI?");
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) vector0);
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTransactionRollbackException0);
      vector0.add(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Hashtable<Integer, SQLWarning>>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      SQLDataException sQLDataException0 = new SQLDataException("", " was null", 0, sQLTimeoutException0);
      Transformer<Object, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("#~ZD]ld@[Q");
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableIterator0, 1047);
      ResettableIterator<SQLRecoverableException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) list0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      predicateArray0[0] = predicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLRecoverableException0, defaultEquator0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      Predicate<SQLException> predicate1 = NonePredicate.nonePredicate((Predicate<? super SQLException>[]) predicateArray0);
      // Undeclared exception!
      IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) resettableIterator1, (Predicate<? super SQLRecoverableException>) predicate1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      Transformer<Object, Properties> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Properties>) null);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<EnumSet<Locale.Category>>) resettableIterator0, (Predicate<? super EnumSet<Locale.Category>>) transformedPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<HashMap<IIOMetadataNode, EnumSet>>) iterator0, (Predicate<? super HashMap<IIOMetadataNode, EnumSet>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Collection must not be null");
      Transformer<Object, SQLTransactionRollbackException> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<SQLTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLTransientException) sQLTimeoutException0, (Transformer<? super SQLTransientException, ? extends SQLTransientException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLTimeoutException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("^eCgtSI?");
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) vector0);
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTransactionRollbackException0);
      vector0.add(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) resettableIterator0, 5);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<HashMap<DataTruncation, Class<SQLTimeoutException>>>) null, 995);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>((Boolean) null);
      TransformerPredicate<String> transformerPredicate0 = new TransformerPredicate<String>(constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<String>) resettableIterator0, (Predicate<? super String>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedMapIterator<LinkedHashSet<SQLClientInfoException>, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends LinkedHashSet<SQLClientInfoException>>) orderedMapIterator0, (-484L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLWarning[]) null, 13, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator", 2562, (-1985));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLWarningArray0, 0, (-2145));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLWarningArray0, 2451, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 1773);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Vector<StringTokenizer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 914, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, Transformer<Object, String>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) mapIterator0, 12);
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientException>) list0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      Closure<SQLException> closure1 = IfClosure.ifClosure((Predicate<? super SQLException>) predicate1, (Closure<? super SQLException>) closure0, (Closure<? super SQLException>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) closure1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(instantiateFactory0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientException>) objectArrayListIterator0, (Transformer<? super SQLNonTransientException, String>) factoryTransformer0, "z[$", "org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator", "1rOrkfW<Z");
      assertEquals("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator1rOrkfW<Z", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Transformer<SQLNonTransientException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientException>) null, (Transformer<? super SQLNonTransientException, String>) transformer0, "VW3L", "w", "fH3lF");
      assertEquals("wfH3lF", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<LinkedHashSet<LinkedList>>) null, (Predicate<? super LinkedHashSet<LinkedList>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) null, (-4187));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0, (-292L), 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ConstantTransformer<SQLIntegrityConstraintViolationException, String> constantTransformer0 = new ConstantTransformer<SQLIntegrityConstraintViolationException, String>("/jr;vM8");
      String string0 = IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) null, (Transformer<? super SQLIntegrityConstraintViolationException, String>) constantTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<SQLNonTransientException, Transformer<Object, String>> hashMap0 = new HashMap<SQLNonTransientException, Transformer<Object, String>>();
      EntrySetMapIterator<SQLNonTransientException, Transformer<Object, String>> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientException, Transformer<Object, String>>(hashMap0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("l3~w%cYO?:&1", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) entrySetMapIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<SQLTransactionRollbackException, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) listIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLRecoverableException0);
      SQLDataException sQLDataException0 = new SQLDataException("", "delimiter may not be null", sQLRecoverableException0);
      Transformer<SQLNonTransientException, SQLDataException> transformer0 = ConstantTransformer.constantTransformer(sQLDataException0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLSyntaxErrorException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLNonTransientException, String>) null, "", "", "0#_W/S!.8\u0006=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("y&t|#v/0^", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("y&t|#v/0^", "=gRr", 0, sQLNonTransientConnectionException0);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResettableListIterator<HashMap<SQLDataException, Properties>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[27];
      ObjectArrayIterator<SQLTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientException>(sQLTransientExceptionArray0);
      SQLTransientException sQLTransientException0 = IteratorUtils.get((Iterator<SQLTransientException>) objectArrayIterator0, 0);
      assertNull(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      ObjectArrayIterator<SQLTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientException>(sQLTransientExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransientException>) objectArrayIterator0, 54);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 47
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLException sQLException0 = new SQLException("6c{GdOU/]D%Zar&{b", "UCfp>'&?v2_Vl", 10);
      MockThrowable mockThrowable0 = new MockThrowable("delimiter may not be null", sQLException0);
      SQLDataException sQLDataException0 = new SQLDataException("UCfp>'&?v2_Vl", mockThrowable0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("delimiter may not be null", "delimiter may not be null", sQLDataException0);
      DataTruncation dataTruncation0 = new DataTruncation((-2315), true, false, (-2315), (-2315), sQLTimeoutException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(dataTruncation0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, Locale.Category> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(orderedMapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      ResettableIterator<ArrayList<SQLTransientConnectionException>> resettableIterator0 = IteratorUtils.singletonIterator(arrayList0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstantiateFactory<SQLTransientConnectionException> instantiateFactory0 = new InstantiateFactory<SQLTransientConnectionException>(class0);
      Transformer<Object, SQLTransientConnectionException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTransientConnectionException>) instantiateFactory0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "eBp8", (Equator<Object>) defaultEquator0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayList<SQLTransientConnectionException>>) resettableIterator0, (Predicate<? super ArrayList<SQLTransientConnectionException>>) transformedPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      ResettableIterator<ArrayList<SQLTransientConnectionException>> resettableIterator0 = IteratorUtils.singletonIterator(arrayList0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayList<SQLTransientConnectionException>>) resettableIterator0, (Predicate<? super ArrayList<SQLTransientConnectionException>>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Predicate<SQLWarning> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      ResettableIterator<ArrayList<SQLTransientConnectionException>> resettableIterator0 = IteratorUtils.singletonIterator(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayList<SQLTransientConnectionException>>) resettableIterator0, (Predicate<? super ArrayList<SQLTransientConnectionException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = new Object();
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(object0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<Object>) singletonListIterator0, (Predicate<? super Object>) uniquePredicate0);
      assertEquals(1, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Properties properties0 = IteratorUtils.find((Iterator<Properties>) null, (Predicate<? super Properties>) uniquePredicate0);
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<LinkedList<SQLTimeoutException>>) null, (Predicate<? super LinkedList<SQLTimeoutException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("-Pp 4GA");
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      Stack<Stack> stack0 = IteratorUtils.find((Iterator<Stack<Stack>>) iterator0, (Predicate<? super Stack<Stack>>) predicate0);
      assertNull(stack0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 6);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      closureArray0[0] = closure0;
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) stack0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(1773, closure0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, forClosure0, true);
      closureArray0[1] = (Closure<Object>) whileClosure0;
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0);
      closureArray0[2] = (Closure<Object>) ifClosure0;
      closureArray0[3] = (Closure<Object>) ifClosure0;
      closureArray0[4] = closure0;
      closureArray0[5] = (Closure<Object>) ifClosure0;
      Closure<SQLNonTransientException> closure1 = ChainedClosure.chainedClosure((Closure<? super SQLNonTransientException>[]) closureArray0);
      IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) null, (Closure<? super SQLInvalidAuthorizationSpecException>) closure1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Predicate<SQLException>, Closure<SQLException>> hashMap0 = new HashMap<Predicate<SQLException>, Closure<SQLException>>();
      Closure<SQLException> closure0 = SwitchClosure.switchClosure((Map<Predicate<SQLException>, Closure<SQLException>>) hashMap0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) closure0);
      assertFalse(objectArrayListIterator0.hasNext());
      assertEquals(4, objectArrayListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("[]", "", false);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, PriorityQueue<Transformer<Object, String>>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0, (-1956));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Class<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) vector0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, EnumSet<Locale.Category>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, EnumSet<Locale.Category>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, EnumSet<Locale.Category>>(orderedMapIterator0);
      Iterable<Object> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<?>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("y&t|#v/0^", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("y&t|#v/0^", "=gRr", 0, sQLNonTransientConnectionException0);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      Iterable<SQLInvalidAuthorizationSpecException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) null, (Collection<? super Object>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(arrayList0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) reverseListIterator0);
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("]<>)zj;F%5<Ycxt,YF");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>((Boolean) null);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) constantTransformer0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      ListIterator<SQLFeatureNotSupportedException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) andPredicate0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, PriorityQueue<Transformer<Object, String>>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>(transformer0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) objectArrayIterator0, (Predicate<? super SQLWarning>) transformerPredicate0);
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLWarning>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OrderedMapIterator<Transformer<Object, String>, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Transformer<Object, String>>) orderedMapIterator0, (Transformer<? super Transformer<Object, String>, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Transformer<Object, String>>) null, (Transformer<? super Transformer<Object, String>, ? extends String>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) null, (Iterator<? extends Locale.Category>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0, 5);
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) objectArrayListIterator0);
      LoopingIterator<SQLException> loopingIterator0 = new LoopingIterator<SQLException>(list0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLException>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/'?85^SUf", "/'?85^SUf", (-2832));
      SQLDataException sQLDataException0 = new SQLDataException(sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLDataException>) singletonIterator0, 0L);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("WG ^[VuF\"@,-2");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) skippingIterator0, (Transformer<? super SQLDataException, String>) transformer0, "org.apache.commons.collections4.collection.AbstractCollectionDecorator", "org.apache.commons.collections4.collection.AbstractCollectionDecorator", "G#OaBVwJ>DsQX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'WG ^[VuF\"@,-2' on 'class java.sql.SQLDataException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[9];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (-17), intArray0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("");
      IteratorUtils.toString((Iterator<BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, String>) transformer0);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) listIterator0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, (-883), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, 79);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      Class<SQLDataException> class0 = SQLDataException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<LinkedHashSet<LinkedList>>) iterator0, (Predicate<? super LinkedHashSet<LinkedList>>) orPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Iterator<SQLTransientException>[] iteratorArray0 = (Iterator<SQLTransientException>[]) Array.newInstance(Iterator.class, 15);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Transformer<Object, String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[34];
      ObjectArrayIterator<SQLTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientException>(sQLTransientExceptionArray0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) null, (Iterator<? extends SQLTransientException>) objectArrayIterator0, (Iterator<? extends SQLTransientException>) objectArrayIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // You must invoke setComparator() to set a comparator first.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 2012, (-1831));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLWarning[]) null, 0, 2464);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLDataException>) objectArrayListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("C~b]");
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("T/5}1kk)", (Transformer<? super String, ? extends String>) transformer0);
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) iterator0, (long) 91);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "d/Z4'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1956), (-1956));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[3];
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 3);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 1403);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[5];
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, hashMap0, sQLRecoverableException0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      ListIterator<SQLClientInfoException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertTrue(listIterator1.hasNext());
  }
}
