/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 02:27:25 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[15];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 10);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) resettableIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 5
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(stack0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator((SQLRecoverableException) null);
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) loopingListIterator0, (Iterator<? extends SQLRecoverableException>) listIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(stack0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator((SQLRecoverableException) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>) listIterator0, (Iterator<? extends SQLRecoverableException>) loopingListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, 0, 777);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[]", "[]", (-1208));
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ConstantTransformer.constantTransformer(sQLSyntaxErrorException0);
      Closure<SQLTransientException> closure0 = TransformerClosure.transformerClosure((Transformer<? super SQLTransientException, ?>) transformer0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Transformer<SQLTransientConnectionException, SQLTransientConnectionException> transformer1 = ClosureTransformer.closureTransformer((Closure<? super SQLTransientConnectionException>) closure0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer1);
      IteratorUtils.apply(iterator0, (Closure<? super SQLTransientConnectionException>) closure0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientConnectionException) null);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) listIterator0;
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) listIterator0;
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) listIterator0;
      iteratorArray0[3] = (Iterator<SQLTransientConnectionException>) listIterator0;
      iteratorArray0[4] = (Iterator<SQLTransientConnectionException>) listIterator0;
      iteratorArray0[5] = (Iterator<SQLTransientConnectionException>) listIterator0;
      iteratorArray0[6] = (Iterator<SQLTransientConnectionException>) listIterator0;
      iteratorArray0[7] = (Iterator<SQLTransientConnectionException>) listIterator0;
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, Object> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector<LinkedHashSet<DataTruncation>> vector0 = new Vector<LinkedHashSet<DataTruncation>>();
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      vector0.add(linkedHashSet0);
      ResettableListIterator<LinkedHashSet<DataTruncation>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<LinkedHashSet<DataTruncation>>) vector0);
      ListIterator<LinkedHashSet<DataTruncation>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<DataTruncation>>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientConnectionException) null);
      ListIterator<SQLTransientConnectionException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertTrue(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) mapIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[5];
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) objectArrayListIterator0, class0);
      assertEquals(5, sQLNonTransientConnectionExceptionArray1.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) objectArrayIterator0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 1);
      String string0 = IteratorUtils.get((Iterator<String>) resettableIterator0, 1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      ServiceLoader<SQLRecoverableException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      ServiceLoader<SQLRecoverableException>[] serviceLoaderArray0 = (ServiceLoader<SQLRecoverableException>[]) Array.newInstance(ServiceLoader.class, 9);
      serviceLoaderArray0[5] = serviceLoader0;
      ResettableIterator<ServiceLoader<SQLRecoverableException>> resettableIterator0 = IteratorUtils.arrayIterator(serviceLoaderArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<ServiceLoader<SQLRecoverableException>>) resettableIterator0, (Object) serviceLoader0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      OrderedIterator<EnumSet<Locale.FilteringMode>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      BoundedIterator<EnumSet<Locale.FilteringMode>> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0, 1L, 1L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(arrayList0);
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) loopingListIterator0, (long) 12);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator((Object[]) stringArray0, 1, 1);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 1);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Iterator<SQLWarning>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("Og=R<6*py^v>r*ZI", "8t6Z)ik6Z>doo-}5D", 10);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, false);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<SQLDataException, String> invokerTransformer0 = new InvokerTransformer<SQLDataException, String>("8t6Z)ik6Z>doo-}5D", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) singletonIterator0, (Transformer<? super SQLDataException, String>) invokerTransformer0, "Og=R<6*py^v>r*ZI", "8t6Z)ik6Z>doo-}5D", "8t6Z)ik6Z>doo-}5D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '8t6Z)ik6Z>doo-}5D' on 'class java.sql.SQLDataException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[6];
      int[] intArray0 = new int[2];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, 1, intArray0, sQLClientInfoException0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Iterator setValue() can only be called after next() and before remove()", batchUpdateException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationExceptionArray0[0];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0, 1);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("<&Q66X6(>'", classArray0, stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) objectArrayIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '<&Q66X6(>'' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientConnectionException0);
      Transformer<SQLException, SQLRecoverableException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(linkedList0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "");
      vector0.add(sQLRecoverableException0);
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(vector0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLRecoverableException>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(stack0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      stack0.add(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) loopingListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("`8H}4u,6!3!4", "6lI+%", 3221);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 9);
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("Start index must not be greater than the array length", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) iterator0, 3221);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Start index must not be greater than the array length' on 'class java.sql.SQLNonTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer integer0 = new Integer(2760);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) singletonListIterator0, 100);
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(list0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Integer>) loopingIterator0, 100);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ListIterator<Locale.LanguageRange> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Locale.LanguageRange>) listIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\"t<~gnDyiZjKrug8", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(") greater than the size of the ", sQLRecoverableException0);
      Class<Locale.FilteringMode>[] classArray0 = (Class<Locale.FilteringMode>[]) Array.newInstance(Class.class, 5);
      InvokerTransformer<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> invokerTransformer0 = new InvokerTransformer<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException>(") greater than the size of the ", classArray0, classArray0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ') greater than the size of the ' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(stack0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("3$RZzfD/HQ$>~\"*+yp", "3$RZzfD/HQ$>~\"*+yp", mockThrowable0);
      loopingListIterator0.add(sQLRecoverableException0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Properties>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>((SQLTransientConnectionException) null, false);
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) singletonIterator0);
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(list0);
      // Undeclared exception!
      IteratorUtils.matchesAny((Iterator<SQLTransientConnectionException>) loopingListIterator0, (Predicate<? super SQLTransientConnectionException>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      HashMap<SQLClientInfoException, Object> hashMap0 = new HashMap<SQLClientInfoException, Object>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>(16);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, hashMap1);
      hashMap0.put(sQLClientInfoException0, sQLClientInfoException0);
      EntrySetMapIterator<SQLClientInfoException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, Object>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) entrySetMapIterator0, (Predicate<? super SQLClientInfoException>) allPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 1);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("s><(Ybrzi.%uIiyMLw", "iterator", 1763);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLTransactionRollbackException0, comparator0);
      // Undeclared exception!
      IteratorUtils.matchesAll((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) predicate0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(allPredicate0);
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      ListIteratorWrapper<Properties> listIteratorWrapper0 = new ListIteratorWrapper<Properties>(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Properties>) listIteratorWrapper0, (Predicate<? super Properties>) notPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) null, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Predicate<? super SQLFeatureNotSupportedException>) notPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NotPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      LoopingListIterator<SQLNonTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientConnectionException>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) loopingListIterator0, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Stack<Closure<Object>>[] stackArray0 = (Stack<Closure<Object>>[]) Array.newInstance(Stack.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stackArray0, 1, (-678));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, (-452), 1414);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Stack<SQLClientInfoException>[] stackArray0 = (Stack<SQLClientInfoException>[]) Array.newInstance(Stack.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stackArray0, 2916);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((EnumSet<Locale.FilteringMode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 200);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashSet<SQLRecoverableException>[] hashSetArray0 = (HashSet<SQLRecoverableException>[]) Array.newInstance(HashSet.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(hashSetArray0, 0, (-3444));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, (-1906), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((ServiceLoader<SQLRecoverableException>[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("$VALUES", "M Ay)");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0, 31, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<Iterator<SQLInvalidAuthorizationSpecException>> linkedList0 = new LinkedList<Iterator<SQLInvalidAuthorizationSpecException>>();
      LoopingListIterator<Iterator<SQLInvalidAuthorizationSpecException>> loopingListIterator0 = new LoopingListIterator<Iterator<SQLInvalidAuthorizationSpecException>>(linkedList0);
      Enumeration<Iterator<SQLInvalidAuthorizationSpecException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLInvalidAuthorizationSpecException>>) loopingListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) enumeration0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientConnectionException) null);
      Factory<SQLInvalidAuthorizationSpecException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLInvalidAuthorizationSpecException> factoryTransformer0 = new FactoryTransformer<Object, SQLInvalidAuthorizationSpecException>(factory0);
      Closure<SQLTransientException> closure0 = TransformerClosure.transformerClosure((Transformer<? super SQLTransientException, ?>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTransientConnectionException>) listIterator0, (Closure<? super SQLTransientConnectionException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      Transformer<SQLDataException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) objectArrayIterator0, (Transformer<? super SQLDataException, String>) transformer0, "", "W=_E", "Pj3z*$lg?eRU|9 J ");
      assertEquals("W=_EnullnullPj3z*$lg?eRU|9 J ", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ListIterator<Locale.LanguageRange> listIterator0 = EmptyListIterator.emptyListIterator();
      List<Locale.LanguageRange> list0 = IteratorUtils.toList((Iterator<? extends Locale.LanguageRange>) listIterator0, 714);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("&}q<");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) resettableIterator0, (Transformer<? super String, String>) null, "&}q<", "&}q<", "&}q<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Transformer<SQLNonTransientException, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) null, (Transformer<? super SQLDataException, String>) transformer0, "4Xkk=>f+", "i'&&VVS`k%-M49f", "i'&&VVS`k%-M49f");
      assertEquals("i'&&VVS`k%-M49fi'&&VVS`k%-M49f", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Factory<String> factory0 = ConstantFactory.constantFactory("underlying nodeList has no more elements");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) null, (Transformer<? super SQLDataException, String>) factoryTransformer0, "underlying nodeList has no more elements", "underlying nodeList has no more elements", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("(E@/Zy I6b6b4Uh/", "(E@/Zy I6b6b4Uh/", 10);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, true);
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<SQLDataException, String> invokerTransformer0 = new InvokerTransformer<SQLDataException, String>("8t6Z)ik6Z>doo-}5D", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) singletonIterator0, (Transformer<? super SQLDataException, String>) invokerTransformer0, "", (String) null, "ConstantTransformer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0, 1, 1);
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("s");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) resettableIterator0, (Transformer<? super SQLDataException, String>) constantTransformer0, (String) null, "}m&k7ZL_HZ0;1+#/Y5", "t/<\"[xh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("|E[<G@i#'ZSE", "", 3371);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) singletonListIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      int int0 = IteratorUtils.size(singletonListIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) resettableListIterator0, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 32
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 1);
      IteratorUtils.get((Iterator<String>) resettableIterator0, 1);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientConnectionException) null);
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      PredicateTransformer<TreeSet<SQLClientInfoException>> predicateTransformer0 = new PredicateTransformer<TreeSet<SQLClientInfoException>>(predicate0);
      Comparator<SQLClientInfoException> comparator0 = (Comparator<SQLClientInfoException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>(comparator0);
      Boolean boolean0 = predicateTransformer0.transform(treeSet0);
      ListIterator<Boolean> listIterator0 = IteratorUtils.singletonListIterator(boolean0);
      boolean boolean1 = IteratorUtils.matchesAll((Iterator<Boolean>) listIterator0, (Predicate<? super Boolean>) predicate0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayList<ClientInfoStatus>>) null, (Predicate<? super ArrayList<ClientInfoStatus>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ArrayList<ClientInfoStatus> arrayList0 = new ArrayList<ClientInfoStatus>();
      SingletonListIterator<ArrayList<ClientInfoStatus>> singletonListIterator0 = new SingletonListIterator<ArrayList<ClientInfoStatus>>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayList<ClientInfoStatus>>) singletonListIterator0, (Predicate<? super ArrayList<ClientInfoStatus>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      InvokerTransformer<Object, ClientInfoStatus> invokerTransformer0 = new InvokerTransformer<Object, ClientInfoStatus>("Iterator must not be null", classArray0, classArray0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.objectGraphIterator(clientInfoStatus0, (Transformer<? super ClientInfoStatus, ? extends ClientInfoStatus>) invokerTransformer0);
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends ClientInfoStatus>) iterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Iterator must not be null", "Iterator must not be null");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransactionRollbackException0, defaultEquator0);
      Predicate<ClientInfoStatus> predicate0 = OrPredicate.orPredicate((Predicate<? super ClientInfoStatus>) equalPredicate0, (Predicate<? super ClientInfoStatus>) equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) listIterator0, (Predicate<? super ClientInfoStatus>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Iterator must not be null' on 'class java.sql.ClientInfoStatus' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientConnectionException) null);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLTransientConnectionException>) listIterator0, (Predicate<? super SQLTransientConnectionException>) instanceofPredicate0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientConnectionException) null);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Factory<SQLTransientConnectionException> factory0 = ConstantFactory.constantFactory((SQLTransientConnectionException) null);
      Transformer<Object, SQLTransientConnectionException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTransientConnectionException>) factory0);
      IfTransformer<Object, SQLTransientException> ifTransformer0 = new IfTransformer<Object, SQLTransientException>(predicate0, transformer0, transformer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(ifTransformer0, predicate0);
      Predicate<SQLException> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) transformedPredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLTransientConnectionException>) listIterator0, (Predicate<? super SQLTransientConnectionException>) predicate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      SQLWarning sQLWarning0 = new SQLWarning("_}JAY(TGtj", "elementsToSkip parameter must n:t be negative.", 2935);
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.singletonListIterator(sQLWarning0);
      IteratorUtils.find((Iterator<SQLWarning>) listIterator0, (Predicate<? super SQLWarning>) predicate0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.singletonListIterator(sQLWarning0);
      IteratorUtils.find((Iterator<SQLWarning>) listIterator0, (Predicate<? super SQLWarning>) instanceofPredicate0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) allPredicate0);
      assertNull(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 6);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("48UU<`lfUM", classArray0, classArray0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Predicate<? super SQLFeatureNotSupportedException>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '48UU<`lfUM' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      FactoryTransformer<Object, SQLInvalidAuthorizationSpecException> factoryTransformer0 = new FactoryTransformer<Object, SQLInvalidAuthorizationSpecException>((Factory<? extends SQLInvalidAuthorizationSpecException>) null);
      IfTransformer<Object, SQLInvalidAuthorizationSpecException> ifTransformer0 = new IfTransformer<Object, SQLInvalidAuthorizationSpecException>(predicate0, factoryTransformer0, factoryTransformer0);
      IfTransformer<SQLException, SQLInvalidAuthorizationSpecException> ifTransformer1 = new IfTransformer<SQLException, SQLInvalidAuthorizationSpecException>(predicate0, factoryTransformer0, ifTransformer0);
      Closure<SQLTransientException> closure0 = TransformerClosure.transformerClosure((Transformer<? super SQLTransientException, ?>) ifTransformer1);
      IteratorUtils.apply((Iterator<SQLTransientConnectionException>) null, (Closure<? super SQLTransientConnectionException>) closure0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Properties>) null, (Closure<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      ChainedClosure<SQLException> chainedClosure0 = new ChainedClosure<SQLException>((Closure<? super SQLException>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTimeoutException>) objectArrayListIterator0, (Closure<? super SQLTimeoutException>) chainedClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("9?KxUySNRT7g/]K+\"@", (String) null, false);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("<YZ>4j2xR@V.En+JK-", "GREATER_OR_EQUAL", 446);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLDataException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) listIterator0, (-2199));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.LanguageRange>) null, 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>(100);
      Iterator<SQLNonTransientConnectionException> iterator0 = priorityQueue0.iterator();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) iterator0, class0);
      assertEquals(0, sQLNonTransientConnectionExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) iterator0, (Class<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ResettableIterator<Object> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      ObjectArrayIterator<Locale.FilteringMode> objectArrayIterator0 = new ObjectArrayIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      Iterable<Locale.FilteringMode> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.FilteringMode>) objectArrayIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Integer integer0 = new Integer(44);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Iterable<Integer> iterable0 = IteratorUtils.asIterable((Iterator<? extends Integer>) singletonListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, Integer>(orderedMapIterator0);
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0, (Collection<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) null, (Collection<? super SQLRecoverableException>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientConnectionException) null);
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) listIterator0);
      TreeSet<SQLException> treeSet0 = new TreeSet<SQLException>();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0, (Collection<? super SQLTransientConnectionException>) treeSet0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) singletonIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("r4OUH&");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Closure<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TreeSet<Iterator<SQLInvalidAuthorizationSpecException>> treeSet0 = new TreeSet<Iterator<SQLInvalidAuthorizationSpecException>>();
      ResettableIterator<Iterator<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Iterator<SQLInvalidAuthorizationSpecException>>) treeSet0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("4;kRt[BU}6/", (String) null, 945);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<?>) listIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>(priorityQueue0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) null, (Predicate<? super String>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientConnectionException) null);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      ListIterator<Object> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<?>) listIterator0, (Predicate<? super Object>) comparatorPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) listIterator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientConnectionException) null);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) listIterator0, (Predicate<? super SQLTransientConnectionException>) instanceofPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) iterator0, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Hashtable<StringTokenizer, ServiceLoader<SQLTransientConnectionException>> hashtable0 = new Hashtable<StringTokenizer, ServiceLoader<SQLTransientConnectionException>>(0, 10);
      EntrySetMapIterator<StringTokenizer, ServiceLoader<SQLTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<StringTokenizer, ServiceLoader<SQLTransientConnectionException>>(hashtable0);
      Transformer<Object, SQLWarning> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLWarning> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) entrySetMapIterator0, (Transformer<? super StringTokenizer, ? extends SQLWarning>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) null, (Transformer<? super SQLTransientConnectionException, ? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientConnectionException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) listIterator0, (Transformer<? super SQLTransientConnectionException, ? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>((SQLDataException) null);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) singletonIterator0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MapIterator<SQLNonTransientException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      SkippingIterator<SQLNonTransientException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLNonTransientException>) mapIterator0, 248L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0, 1);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("<&Q66X6(>'", classArray0, stringArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) objectArrayIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) invokerTransformer0);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals("[null, null, null, null, null, null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 10, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\"t<~gnDyiZjKrug8", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(") greater than the size of the ", sQLRecoverableException0);
      Class<Locale.FilteringMode>[] classArray0 = (Class<Locale.FilteringMode>[]) Array.newInstance(Class.class, 5);
      InvokerTransformer<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> invokerTransformer0 = new InvokerTransformer<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException>(") greater than the size of the ", classArray0, classArray0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) invokerTransformer0);
      Iterator<SQLIntegrityConstraintViolationException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("NodeList must not be null");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, ArrayDeque<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("Og=R<6*py^v>r*ZI", "8t6Z)ik6Z>doo-}5D", 10);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, false);
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((EnumSet<Locale.FilteringMode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLIntegrityConstraintViolationException[]) null, 490, 2786);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) listIterator0);
      assertFalse(listIterator0.hasNext());
      assertEquals("[java.sql.SQLRecoverableException]", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1, 6);
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) zippingIterator0, (Iterator<? extends SQLNonTransientConnectionException>) zippingIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedMapIterator<InstanceofPredicate, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends InstanceofPredicate>) orderedMapIterator0, (-344L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("The predicate array must not be null", (String) null, 2914, (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 1);
      Iterator<String> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends String>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) resettableListIterator0, (Transformer<? super SQLDataException, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLTransientException>) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("' is invalid.");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "v_)3S}");
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLNonTransientException) sQLDataException0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) listIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertFalse(listIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1653);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      OrderedIterator<EnumSet<Locale.FilteringMode>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0, (-4055L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }
}
