/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:19:07 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableListIterator0, (Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "MapIterator[]", (-1707), sQLRecoverableException0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLTransientConnectionException0);
      singletonListIterator0.reset();
      ListIterator<SQLException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLException>) singletonListIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<SQLException>) listIterator0, (Predicate<? super SQLException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Integer integer0 = new Integer((-774));
      Factory<Integer> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(factory0);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedList0);
      DataTruncation dataTruncation0 = new DataTruncation((-1843), true, true, (-1843), (-1843));
      linkedList0.add(dataTruncation0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null);
      IteratorUtils.get((Iterator<SQLSyntaxErrorException>) singletonIterator0, (int) 0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("Enumeration must not be null");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("Enumeration must not be null", "%MI*c7;7!.Ah?)8'g", 0, sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("", "%MI*c7;7!.Ah?)8'g");
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException6;
      int int0 = (-1654);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0, (-1654));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray(iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, (byte)0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, (byte)0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      BoundedIterator<SQLSyntaxErrorException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0, (long) 0, (long) 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0, (Iterator<? extends SQLSyntaxErrorException>) boundedIterator0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 0);
      IdentityPredicate<SQLNonTransientException> identityPredicate0 = new IdentityPredicate<SQLNonTransientException>(sQLSyntaxErrorException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) identityPredicate0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLSyntaxErrorException>) singletonIterator0, 1856);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1855
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTransientException sQLTransientException0 = new SQLTransientException(mockThrowable0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashtable0);
      Transformer<SQLClientInfoException, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("Y)<N4dqx,GlRt");
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException0, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      Factory<SQLSyntaxErrorException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLSyntaxErrorException> factoryTransformer0 = new FactoryTransformer<Object, SQLSyntaxErrorException>(factory0);
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Transformer<? super SQLClientInfoException, ? extends SQLSyntaxErrorException>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator1, 5034);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Y)<N4dqx,GlRt' on 'class java.sql.SQLClientInfoException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", sQLTransientConnectionException2);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) predicate1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) null, 512, 215);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("a>2XWv##dZ@", "The collection must not be null", true);
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IteratorUtils.getIterator(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      List<SQLTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientException>) listIterator0);
      LoopingListIterator<SQLTransientException> loopingListIterator0 = new LoopingListIterator<SQLTransientException>(list0);
      Class<SQLTransientException> class1 = SQLTransientException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) loopingListIterator0, class1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>((SQLTransientConnectionException) null);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) singletonListIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IteratorUtils.getIterator(class0);
      ArrayList<SQLIntegrityConstraintViolationException>[] arrayListArray0 = (ArrayList<SQLIntegrityConstraintViolationException>[]) Array.newInstance(ArrayList.class, 2);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[0] = arrayList0;
      ArrayList<SQLIntegrityConstraintViolationException> arrayList1 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayListArray0[1] = arrayList1;
      IteratorUtils.arrayIterator(arrayListArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Entry does not exist: ");
      IteratorUtils.size((Iterator<?>) null);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Entry does not exist: ");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("Entry does not exist: ");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("Entry does not exist: ");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("|,>id\"1^vg yyZ.");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("|,>id\"1^vg yyZ.");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "Entry does not exist: ", "|,>id\"1^vg yyZ.", "|,>id\"1^vg yyZ.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '|,>id\"1^vg yyZ.' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("suffix may not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) null, ":Z~:9TfE", "suffix may not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("R4|v8N[@17gS~@T&2", (String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", (String) null, sQLNonTransientConnectionException0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      InvokerTransformer<SQLNonTransientException, SQLFeatureNotSupportedException> invokerTransformer0 = new InvokerTransformer<SQLNonTransientException, SQLFeatureNotSupportedException>("", classArray0, classArray0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) invokerTransformer0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("Tra]sformer must not\be null");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Tra]sformer must not\be null");
      ConstantTransformer.constantTransformer(sQLIntegrityConstraintViolationException0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) constantTransformer0, "Tra]sformer must not\be null", "Tra]sformer must not\be null", "Tra]sformer must not\be null");
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      MapIterator<Transformer<Object, Boolean>, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator((BatchUpdateException) null);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) listIterator0, 91);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) null, (Collection<? super SQLFeatureNotSupportedException>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Iterator<SQLTransactionRollbackException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OrderedIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) orderedIterator0;
      objectArray0[1] = (Object) orderedIterator0;
      objectArray0[2] = (Object) orderedIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(objectArray0, 0, (-4157));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) resettableListIterator0, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      IteratorUtils.getIterator("");
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("\"ayZjp>%G:?[J-9P}t", "\"ayZjp>%G:?[J-9P}t", (-1472));
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, false);
      IteratorUtils.get((Iterator<SQLSyntaxErrorException>) singletonIterator0, (int) 0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      UniquePredicate<SQLTimeoutException> uniquePredicate0 = new UniquePredicate<SQLTimeoutException>();
      EmptyListIterator.emptyListIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Z5g$Q{");
      DataTruncation dataTruncation0 = new DataTruncation(25, false, false, (-1), (-1), sQLTimeoutException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(25, false, false, 1, (-431), sQLTimeoutException0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-431), false, false, (-1), 25);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-431), false, true, 1, 1);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(331, false, false, 331, 25);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(1, false, true, (-431), 1);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(1, false, false, 10, 1, dataTruncation3);
      dataTruncationArray0[6] = dataTruncation6;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLWarning>) resettableListIterator0, (Transformer<? super SQLWarning, ? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) "N&37HDeke8l[N", comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      MapIterator<SQLTransientException, Transformer<SQLClientInfoException, SQLNonTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(predicate0);
      IteratorUtils.matchesAll((Iterator<SQLTransientException>) mapIterator0, (Predicate<? super SQLTransientException>) nullIsExceptionPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<SQLException, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) null, (Transformer<? super SQLDataException, ? extends IIOMetadataNode>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      String string0 = "";
      Transformer<Object, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      IfTransformer<Object, SQLSyntaxErrorException> ifTransformer0 = new IfTransformer<Object, SQLSyntaxErrorException>(predicate0, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) null, (Transformer<? super Properties, ? extends SQLSyntaxErrorException>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1315;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-1));
      MockThrowable mockThrowable0 = new MockThrowable("", sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("N&37HDeke8l[N", "N&37HDeke8l[N", intArray0, mockThrowable0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(batchUpdateException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLTransactionRollbackException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLInvalidAuthorizationSpecException1, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      MapIterator<SQLTransientException, Transformer<SQLClientInfoException, SQLNonTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransientException>) mapIterator0, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E.P;igJ_x");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<LinkedList<Class<String>>>) null, (Closure<? super LinkedList<Class<String>>>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-735), 512);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("iterator", "", 12, sQLTransientConnectionException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException1);
      Closure<SQLException> closure0 = TransformerClosure.transformerClosure((Transformer<? super SQLException, ?>) null);
      IteratorUtils.apply((Iterator<SQLTransientConnectionException>) singletonIterator0, (Closure<? super SQLTransientConnectionException>) closure0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) "N&37HDeke8l[N", comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      MapIterator<SQLTransientException, Transformer<SQLClientInfoException, SQLNonTransientException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(predicate0);
      IteratorUtils.matchesAll((Iterator<SQLTransientException>) mapIterator0, (Predicate<? super SQLTransientException>) nullIsExceptionPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) nullIsExceptionPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLDataException sQLDataException0 = new SQLDataException("z#t5'&G-2.2)`^Sb~1");
      SQLDataException sQLDataException1 = new SQLDataException("");
      sQLDataException1.spliterator();
      SQLDataException sQLDataException2 = new SQLDataException("org.apache.commons.collections4.iterators.UnmodifiableIterator", "SR", sQLDataException0);
      SQLDataException sQLDataException3 = new SQLDataException("Q'f>.-cAw5i$_Zim/PE");
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      sQLDataExceptionArray0[0] = sQLDataException1;
      IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Predicate<SQLTransientException> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLDataException sQLDataException0 = new SQLDataException("z#t5'&G-2.2)`^Sb~1");
      SQLDataException sQLDataException1 = new SQLDataException("");
      SQLDataException sQLDataException2 = new SQLDataException("org.apache.commons.collections4.iterators.UnmodifiableIterator", "SR", sQLDataException0);
      SQLDataException sQLDataException3 = new SQLDataException("Q'f>.-cAw5i$_Zim/PE");
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      sQLDataExceptionArray0[0] = sQLDataException1;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<SQLException, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Transformer<? super SQLDataException, ? extends IIOMetadataNode>) transformer0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.toArray(iterator0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorException0.getStackTrace();
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      Predicate<SQLClientInfoException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      IteratorUtils.singletonListIterator((ArrayList<LinkedList>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null, (-2846));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(",>z", ",>z", (-1119));
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("/E+YiB;10.", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, class0);
      ResettableListIterator<Properties> resettableListIterator1 = IteratorUtils.emptyListIterator();
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) resettableListIterator1, 0L);
      IteratorUtils.pushbackIterator((Iterator<? extends Properties>) boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Hashtable<SQLClientInfoException, SQLClientInfoException> hashtable0 = new Hashtable<SQLClientInfoException, SQLClientInfoException>();
      EntrySetMapIterator<SQLClientInfoException, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, SQLClientInfoException>(hashtable0);
      UniquePredicate<SQLClientInfoException> uniquePredicate0 = new UniquePredicate<SQLClientInfoException>();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) entrySetMapIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Hashtable<SQLClientInfoException, SQLClientInfoException> hashtable0 = new Hashtable<SQLClientInfoException, SQLClientInfoException>();
      EntrySetMapIterator<SQLClientInfoException, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, SQLClientInfoException>(hashtable0);
      IteratorUtils.isEmpty(resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      UniquePredicate<SQLTimeoutException> uniquePredicate0 = new UniquePredicate<SQLTimeoutException>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLDataException sQLDataException0 = new SQLDataException("SR", "9c]YksPJ@)F", (Throwable) null);
      SQLDataException sQLDataException1 = new SQLDataException("Q'f>.-cAw5i$_Zim/PE");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<SQLTransientConnectionException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLTransientConnectionException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, BatchUpdateException>(mapIterator0);
      AbstractMapIteratorDecorator<SQLTransientConnectionException, BatchUpdateException> abstractMapIteratorDecorator1 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, BatchUpdateException>(mapIterator0);
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(abstractMapIteratorDecorator0);
      Closure<SQLException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLTransientConnectionException>) mapIterator0, (Closure<? super SQLTransientConnectionException>) closure0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException0 = new SQLDataException("Qq2?gAp{R");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("Qq2?gAp{R");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("p3", "p3", sQLDataException1);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException((String) null);
      sQLDataExceptionArray0[3] = sQLDataException3;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<SQLException, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Transformer<? super SQLDataException, ? extends IIOMetadataNode>) transformer0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      Predicate<SQLTimeoutException> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) resettableListIterator1, (Predicate<? super SQLTimeoutException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<SQLTransientConnectionException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLTransientConnectionException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, BatchUpdateException>(mapIterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      MapIterator<SQLTransientException, Transformer<SQLClientInfoException, SQLNonTransientException>> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(predicate0);
      IteratorUtils.matchesAll((Iterator<SQLTransientException>) mapIterator1, (Predicate<? super SQLTransientException>) nullIsExceptionPredicate0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0, class0);
      MapIterator<Properties, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NullIsTruePredicate<Properties> nullIsTruePredicate0 = new NullIsTruePredicate<Properties>(predicate0);
      IteratorUtils.matchesAll((Iterator<Properties>) mapIterator0, (Predicate<? super Properties>) nullIsTruePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, (-2615));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 620);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLSyntaxErrorException0);
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) objectArrayListIterator0, (Predicate<? super SQLTransientException>) andPredicate0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      priorityQueue0.add(sQLInvalidAuthorizationSpecException0);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) priorityQueue0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-438);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLException[]) null, 100, (-438));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("Tra]sformer must not\be null");
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLSyntaxErrorException>) null, 2323);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ResettableListIterator<EnumSet<ComparatorPredicate.Criterion>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OrderedIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) linkedList0);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      IteratorUtils.getIterator(resettableIterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(arrayList0);
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) reverseListIterator0, 979L);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) andPredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) skippingIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) vector0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("-x#/L%'15L>?M, 0");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLWarning sQLWarning0 = new SQLWarning();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLWarning0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.matchesAll((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) predicate0);
      SQLException sQLException0 = new SQLException("-x#/L%'15L>?M, 0", "", sQLWarning0);
      sQLWarning0.getStackTrace();
      MockThrowable mockThrowable0 = new MockThrowable(sQLException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      IteratorUtils.emptyMapIterator();
      SQLWarning[] sQLWarningArray0 = new SQLWarning[8];
      sQLWarningArray0[0] = sQLWarning0;
      sQLWarningArray0[1] = sQLWarning0;
      sQLWarningArray0[2] = sQLWarning0;
      sQLWarningArray0[3] = sQLWarning0;
      sQLWarningArray0[4] = sQLWarning0;
      sQLWarningArray0[5] = sQLWarning0;
      sQLWarningArray0[6] = sQLWarning0;
      sQLWarningArray0[7] = sQLWarning0;
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.arrayIterator(sQLWarningArray0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) resettableIterator0, (Iterator<? extends SQLWarning>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLWarning sQLWarning0 = new SQLWarning("");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLWarning0);
      sQLWarning0.setNextException(sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", sQLWarning0);
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      ConstantTransformer.constantTransformer(sQLRecoverableException0);
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, String>) constantTransformer0, "", "", "9e)&.nz*.{lAA");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(arrayList0);
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) reverseListIterator0, 979L);
      IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) skippingIterator0, (Iterator<? extends SQLRecoverableException>) skippingIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) reverseListIterator0);
      ExceptionFactory.exceptionFactory();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "The prototype must be cloneable via a public clone method", 686, sQLSyntaxErrorException0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, false);
      IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) reverseListIterator0, (Iterator<? extends SQLRecoverableException>) singletonIterator0);
      IteratorUtils.emptyMapIterator();
      Boolean[] booleanArray0 = new Boolean[5];
      SQLDataException sQLDataException0 = new SQLDataException("The prototype must be cloneable via a public clone method", "q");
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLDataException0);
      PredicateTransformer<SQLClientInfoException> predicateTransformer0 = new PredicateTransformer<SQLClientInfoException>(identityPredicate0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0, sQLSyntaxErrorException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", ".A", map0);
      Boolean boolean0 = predicateTransformer0.transform(sQLClientInfoException1);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = predicateTransformer0.transform(sQLClientInfoException1);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform(sQLClientInfoException1);
      booleanArray0[2] = boolean2;
      Boolean boolean3 = predicateTransformer0.transform(sQLClientInfoException0);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = predicateTransformer0.transform(sQLClientInfoException1);
      booleanArray0[4] = boolean4;
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      IteratorUtils.toList((Iterator<? extends Boolean>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 4);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLWarning sQLWarning0 = new SQLWarning("Invalid map index: ");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "Invalid map index: ", sQLWarning0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", "", (-2620));
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", "[<x79he:(Y]", (-2585));
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("Invalid map index: ", "[<x79he:(Y]", sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("BR/mXhu", "");
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, 1);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0, 512);
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(list0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) reverseListIterator0;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) resettableIterator0;
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[2] = iterator0;
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[3] = (Iterator<SQLTransactionRollbackException>) orderedIterator0;
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      List<SQLTransactionRollbackException> list1 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) iterator1);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) list1);
      Iterator<SQLTransactionRollbackException> iterator2 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator1, (Iterator<? extends SQLTransactionRollbackException>) iterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) iterator2, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator1, (Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashMap<String, Integer>[] hashMapArray0 = (HashMap<String, Integer>[]) Array.newInstance(HashMap.class, 0);
      IteratorUtils.arrayListIterator(hashMapArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) resettableIterator0);
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(list0);
      reverseListIterator0.add((Integer) null);
      IteratorUtils.toListIterator((Iterator<? extends Integer>) reverseListIterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Hashtable<SQLSyntaxErrorException, Integer> hashtable0 = new Hashtable<SQLSyntaxErrorException, Integer>();
      EntrySetMapIterator<SQLSyntaxErrorException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, Integer>(hashtable0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>) entrySetMapIterator0, (Iterator<? extends SQLSyntaxErrorException>) entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(arrayList0);
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) reverseListIterator0, 979L);
      IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) skippingIterator0, (Iterator<? extends SQLRecoverableException>) skippingIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) reverseListIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLSyntaxErrorException>) singletonListIterator0, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(arrayList0);
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) reverseListIterator0, 979L);
      IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) skippingIterator0, (Iterator<? extends SQLRecoverableException>) skippingIterator0);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) reverseListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0, (Collection<? super SQLRecoverableException>) arrayList0);
      Closure<SQLTransientConnectionException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLTransientConnectionException>) null, (Closure<? super SQLTransientConnectionException>) closure0);
      ArrayDeque<SQLClientInfoException>[] arrayDequeArray0 = (ArrayDeque<SQLClientInfoException>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLClientInfoException> arrayDeque1 = new ArrayDeque<SQLClientInfoException>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<SQLClientInfoException> arrayDeque2 = new ArrayDeque<SQLClientInfoException>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<SQLClientInfoException> arrayDeque3 = new ArrayDeque<SQLClientInfoException>();
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<SQLClientInfoException> arrayDeque4 = new ArrayDeque<SQLClientInfoException>();
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<SQLClientInfoException> arrayDeque5 = new ArrayDeque<SQLClientInfoException>();
      arrayDequeArray0[5] = arrayDeque5;
      IteratorUtils.arrayListIterator(arrayDequeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2124), (-2706));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      MapIterator<SQLTransientConnectionException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLTransientConnectionException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, BatchUpdateException>(mapIterator0);
      AbstractMapIteratorDecorator<SQLTransientConnectionException, BatchUpdateException> abstractMapIteratorDecorator1 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, BatchUpdateException>(mapIterator0);
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(abstractMapIteratorDecorator0);
      NOPClosure.nopClosure();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[5];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("(-hyuP");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("iterator");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("iterator", "4)1\"4,#wO@#U9", 1);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("(-hyuP", "(-hyuP", sQLRecoverableException2);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException4;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 1, 1);
      IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) resettableListIterator0, (Iterator<? extends SQLRecoverableException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OrderedIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<LinkedHashSet<Hashtable>>) orderedIterator0, (Transformer<? super LinkedHashSet<Hashtable>, String>) transformer0, "", "", "");
      HashSet<SQLTransientConnectionException>[] hashSetArray0 = (HashSet<SQLTransientConnectionException>[]) Array.newInstance(HashSet.class, 2);
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      hashSet0.add(sQLTransientConnectionException0);
      hashSetArray0[0] = hashSet0;
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      hashSetArray0[1] = (HashSet<SQLTransientConnectionException>) linkedHashSet0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(hashSetArray0, 2451, 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Transformer<Object, BatchUpdateException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends BatchUpdateException>) transformer0, (Transformer<? super Object, ? extends BatchUpdateException>) transformer0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer1, (Predicate<? super Object>) predicate0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) predicate1);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null);
      IteratorUtils.find((Iterator<SQLSyntaxErrorException>) singletonListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.isEmpty(resettableListIterator0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Node must not be null", 15, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((Throwable) null);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("Node must not be null", "", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", "'lyga");
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) objectArrayIterator0, 0L, 2284L);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(defaultEquator0, defaultEquator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("d87'+b5b)w k!");
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Transformer<? super SQLSyntaxErrorException, String>) constantTransformer0, "4bh", "-j", "");
      IteratorUtils.emptyMapIterator();
      SQLWarning sQLWarning0 = new SQLWarning("4OGktgP");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLWarning0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("The predicate collection must not contain a null predicate, index ", sQLTransactionRollbackException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLSyntaxErrorException>) singletonIterator0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableIterator0, defaultEquator0);
      Properties properties0 = new Properties();
      DefaultEquator<Properties> defaultEquator1 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(properties0, (Equator<Properties>) defaultEquator1);
      ExceptionTransformer.exceptionTransformer();
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.nullTransformer();
      IfTransformer.ifTransformer((Predicate<? super Object>) equalPredicate0, (Transformer<? super Object, ? extends BatchUpdateException>) transformer0, (Transformer<? super Object, ? extends BatchUpdateException>) transformer0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      Integer integer0 = new Integer((-1));
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(arrayList0);
      IteratorUtils.toListIterator((Iterator<? extends Integer>) reverseListIterator0);
      Transformer<Object, String> transformer1 = InvokerTransformer.invokerTransformer(".t=~)a4Sp40Otsch");
      IteratorUtils.toString((Iterator<Integer>) reverseListIterator0, (Transformer<? super Integer, String>) transformer1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Hashtable<SQLClientInfoException, SQLClientInfoException> hashtable0 = new Hashtable<SQLClientInfoException, SQLClientInfoException>();
      EntrySetMapIterator<SQLClientInfoException, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, SQLClientInfoException>(hashtable0);
      Predicate<SQLClientInfoException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) entrySetMapIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<BatchUpdateException>) resettableListIterator0);
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("[]");
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) reverseListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) constantTransformer0, (String) null, "Transformer must not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) iteratorArray0);
      MapIterator<SQLRecoverableException, ArrayList<TreeSet>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) mapIterator0, (Iterator<? extends SQLRecoverableException>) mapIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("lqi<N&^isBhr>x$R", "!B-");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "!B-");
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) stack0);
      IteratorUtils.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) linkedHashSet0, comparator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(uniquePredicate0, (Closure<? super Object>) null, false);
      uniquePredicate0.evaluate(stack0);
      WhileClosure.whileClosure((Predicate<? super Predicate<SQLInvalidAuthorizationSpecException>>) uniquePredicate0, (Closure<? super Predicate<SQLInvalidAuthorizationSpecException>>) whileClosure0, true);
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(uniquePredicate0, (Closure<? super SQLException>) null);
      IfClosure<SQLException> ifClosure1 = new IfClosure<SQLException>(predicate0, (Closure<? super SQLException>) null, whileClosure0);
      IteratorUtils.apply((Iterator<SQLTransientException>) null, (Closure<? super SQLTransientException>) ifClosure1);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<LinkedList<IIOMetadataNode>, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<LinkedList<IIOMetadataNode>, SQLClientInfoException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<LinkedList<IIOMetadataNode>, SQLClientInfoException>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedList<IIOMetadataNode>, SQLClientInfoException>) orderedMapIterator0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, false);
      IteratorUtils.skippingIterator((Iterator<Properties>) singletonIterator0, 0L);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Array class must not be null");
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("Q0!1y=Z");
      iIOMetadataNode2.getAttributeNS((String) null, "Q0!1y=Z");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode2);
      MapIterator<Properties, LinkedHashSet<IIOMetadataNode>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) mapIterator0, (-1474L), (-247L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("lqi<N&^isBhr>x$R", "!B-");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Node must not be null", "!B-", 0, sQLNonTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException((String) null, "!B-");
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) stack0);
      IteratorUtils.emptyListIterator();
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(arrayList0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) reverseListIterator0, (Iterator<? extends SQLRecoverableException>) reverseListIterator0);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0, (Collection<? super SQLRecoverableException>) arrayList0);
      HashMap<SQLRecoverableException, SQLRecoverableException> hashMap0 = new HashMap<SQLRecoverableException, SQLRecoverableException>();
      EntrySetMapIterator<SQLRecoverableException, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, SQLRecoverableException>(hashMap0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLRecoverableException, ? extends SQLRecoverableException>) entrySetMapIterator0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) entrySetMapIterator0;
      objectArray0[1] = (Object) iterator0;
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) objectArrayIterator0, (Transformer<? super Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<ClientInfoStatus>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Enumeration must not be null", "58TG3OHZ<u)t!r", (-28), (Throwable) null);
      ConstantFactory<SQLTransientConnectionException> constantFactory0 = new ConstantFactory<SQLTransientConnectionException>(sQLTransientConnectionException0);
      FactoryTransformer<SQLException, SQLTransientConnectionException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLTransientConnectionException>(constantFactory0);
      IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) factoryTransformer0);
      OrderedMapIterator<SQLSyntaxErrorException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Enumeration must not be null", sQLSyntaxErrorException0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("#");
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) orderedMapIterator0, (Transformer<? super SQLSyntaxErrorException, String>) constantTransformer0, "Enumeration must not be null", "Iterator must not be null", "List must not be null");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("0S");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<String, Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      IteratorUtils.getIterator((Object) null);
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) reverseListIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("lqi<N&^isBhr>x$R", "!B-");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Node must not be null", "!B-", 0, sQLNonTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException((String) null, "!B-");
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) stack0);
      IteratorUtils.emptyListIterator();
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(arrayList0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) reverseListIterator0, (Iterator<? extends SQLRecoverableException>) reverseListIterator0);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0, (Collection<? super SQLRecoverableException>) arrayList0);
      HashMap<SQLRecoverableException, SQLRecoverableException> hashMap0 = new HashMap<SQLRecoverableException, SQLRecoverableException>();
      EntrySetMapIterator<SQLRecoverableException, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, SQLRecoverableException>(hashMap0);
      MapIterator<SQLRecoverableException, SQLRecoverableException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLRecoverableException, ? extends SQLRecoverableException>) entrySetMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) iterator0, (Iterator<? extends SQLRecoverableException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PriorityQueue<IIOMetadataNode> priorityQueue0 = new PriorityQueue<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(priorityQueue0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) loopingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) iteratorArray0);
      IteratorUtils.toArray(iterator0);
      OrderedMapIterator<SQLException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLException, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLException, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      IteratorUtils.isEmpty(abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      DefaultEquator.defaultEquator();
      IteratorUtils.isEmpty(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[5];
      String string0 = "";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "");
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "", 1771);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLIntegrityConstraintViolationException1;
      SQLDataException sQLDataException0 = new SQLDataException("remove() cannot be called", sQLIntegrityConstraintViolationException1);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLDataException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientExceptionArray0[2]);
      MockFile mockFile0 = new MockFile((String) null, "remove() cannot be called");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        mockPrintStream0.format((String) null, (Object[]) sQLNonTransientExceptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) iteratorArray0);
      IteratorUtils.toArray(iterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("58TG3OHZ<u)t!r", "HRHYo{G#iN", (-28), (Throwable) null);
      ConstantFactory<SQLTransientConnectionException> constantFactory0 = new ConstantFactory<SQLTransientConnectionException>(sQLTransientConnectionException0);
      FactoryTransformer<SQLException, SQLTransientConnectionException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLTransientConnectionException>(constantFactory0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("yWK05PvG<z;S", "58TG3OHZ<u)t!r");
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      OrderedMapIterator<SQLDataException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLDataException, Properties> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, Properties>) orderedMapIterator0);
      IteratorUtils.contains((Iterator<SQLDataException>) mapIterator0, (Object) factoryTransformer0);
      DataTruncation dataTruncation0 = new DataTruncation((-28), false, false, (-28), 93);
      IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.cloneNode(true);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("\"=ei&WF4M");
      iIOMetadataNode0.appendChild(iIOMetadataNode1);
      iIOMetadataNode1.getElementsByTagNameNS("\"=ei&WF4M", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-341));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("@WK?CzHs<{Ex");
      MockThrowable mockThrowable0 = new MockThrowable(sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("org.apache.commons.collections4.functors.CatchAndRethrowClosure");
      sQLTransientConnectionException0.fillInStackTrace();
      IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) orderedIterator0, (Iterator<?>) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) iteratorArray0);
      IteratorUtils.toArray(iterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("58TG3OHZ<u)t!r", "HRHYo{G#iN", (-28), (Throwable) null);
      ConstantFactory<SQLTransientConnectionException> constantFactory0 = new ConstantFactory<SQLTransientConnectionException>(sQLTransientConnectionException0);
      FactoryTransformer<SQLException, SQLTransientConnectionException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLTransientConnectionException>(constantFactory0);
      factoryTransformer0.transform(sQLTransientConnectionException0);
      IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) factoryTransformer0);
      OrderedMapIterator<SQLSyntaxErrorException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(linkedList0);
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(linkedList0);
      Integer integer0 = new Integer((-823));
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      IteratorUtils.toListIterator((Iterator<? extends Integer>) singletonListIterator0);
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator1 = new ReverseListIterator<SQLClientInfoException>(arrayList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) reverseListIterator1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = "Transformer must not be null";
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("Transformer must not be null");
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) zippingIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) comparator0, (Iterator<? extends SQLTransientException>[]) iteratorArray0);
      String string0 = "ZGS`b8Gi9BA*s*";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ZGS`b8Gi9BA*s*", "ZGS`b8Gi9BA*s*", sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ZGS`b8Gi9BA*s*", "ZGS`b8Gi9BA*s*", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("lqi<N&^isBhr>x$R", "!B-");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Node must not be null", "!B-", 0, sQLNonTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException((String) null, "!B-");
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) stack0);
      IteratorUtils.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) linkedHashSet0, comparator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(uniquePredicate0, (Closure<? super Object>) null, false);
      WhileClosure.whileClosure((Predicate<? super Predicate<SQLInvalidAuthorizationSpecException>>) uniquePredicate0, (Closure<? super Predicate<SQLInvalidAuthorizationSpecException>>) whileClosure0, true);
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(uniquePredicate0, (Closure<? super SQLException>) null);
      IfClosure<SQLException> ifClosure1 = new IfClosure<SQLException>(predicate0, (Closure<? super SQLException>) null, whileClosure0);
      IteratorUtils.apply((Iterator<SQLTransientException>) null, (Closure<? super SQLTransientException>) ifClosure1);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<LinkedList<IIOMetadataNode>, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<LinkedList<IIOMetadataNode>, SQLClientInfoException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<LinkedList<IIOMetadataNode>, SQLClientInfoException>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedList<IIOMetadataNode>, SQLClientInfoException>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Closure<SQLTransientException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLTransientException>) null, (Closure<? super SQLTransientException>) closure0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractMapDecorator");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode();
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 4151, 4151);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<BatchUpdateException>) resettableListIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Estimated size must be greater than 0", "");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("tFuR$}jWHcl)7aD ");
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("W^jFW.YKfX~\"NQV7yG+", sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(sQLSyntaxErrorException1);
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("Zw'v>!`;8khLrF3%#", "u*9ob0ax-X", (-2196));
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("Zw'v>!`;8khLrF3%#", sQLSyntaxErrorException3);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("Estimated size must be greater than 0");
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(equalPredicate0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) nullIsTruePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException4, (-2196), 541);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) iteratorArray0);
      IteratorUtils.toArray(iterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Enumeration must not be null", "58TG3OHZ<u)t!r", (-28), (Throwable) null);
      ConstantFactory<SQLTransientConnectionException> constantFactory0 = new ConstantFactory<SQLTransientConnectionException>(sQLTransientConnectionException0);
      FactoryTransformer<SQLException, SQLTransientConnectionException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLTransientConnectionException>(constantFactory0);
      IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) factoryTransformer0);
      OrderedMapIterator<SQLSyntaxErrorException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      Iterator<IIOMetadataNode>[] iteratorArray1 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 7);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray1[1] = (Iterator<IIOMetadataNode>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Iterator<? extends IIOMetadataNode>) iteratorArray1[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) iteratorArray0);
      IteratorUtils.toArray(iterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Enumeration must not be null", "58TG3OHZ<u)tt!r", (-28), (Throwable) null);
      ConstantFactory<SQLTransientConnectionException> constantFactory0 = new ConstantFactory<SQLTransientConnectionException>(sQLTransientConnectionException0);
      FactoryTransformer<SQLException, SQLTransientConnectionException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLTransientConnectionException>(constantFactory0);
      IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) factoryTransformer0);
      OrderedMapIterator<SQLSyntaxErrorException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Iterator must not be null", "58TG3OHZ<u)tt!r", 125);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("List must not be null", sQLTransientConnectionException0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter");
      IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) orderedMapIterator0, (Transformer<? super SQLSyntaxErrorException, String>) constantTransformer0, "org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", "}W", "Zw'v>!`;8khLrF3%#");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<BatchUpdateException>) resettableListIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Estimated size must be greater than 0", "");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("tFuR$}jWHcl)7aD ");
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("W^jFW.YKfX~\"NQV7yG+", sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(sQLSyntaxErrorException1);
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("Zw'v>!`;8khLrF3%#", "u*9ob0ax-X", (-2196));
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("Zw'v>!`;8khLrF3%#", sQLSyntaxErrorException3);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException5;
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      WhileClosure.whileClosure((Predicate<? super Predicate<SQLInvalidAuthorizationSpecException>>) predicate1, (Closure<? super Predicate<SQLInvalidAuthorizationSpecException>>) closure0, false);
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(predicate0, closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) null, (-2196));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<BatchUpdateException>) resettableListIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Estimated size must be greater than 0", "");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("tFuR$}jWHcl)7aD ");
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("W^jFW.YKfX~\"NQV7yG+", sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(sQLSyntaxErrorException1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2196));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("NoaXJe =Fst");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode1, 782, (-1246));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      EmptyMapIterator.emptyMapIterator();
      int int0 = 1;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Boolean>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<BatchUpdateException>) resettableListIterator0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) listIterator0;
      objectArray0[1] = (Object) listIterator0;
      objectArray0[2] = (Object) resettableListIterator0;
      OrderedMapIterator<SQLTransactionRollbackException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(arrayList0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[]");
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 9);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException0;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 2);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) resettableIterator0;
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) reverseListIterator0;
      iteratorArray0[2] = (Iterator<SQLTransactionRollbackException>) singletonIterator0;
      iteratorArray0[3] = (Iterator<SQLTransactionRollbackException>) reverseListIterator0;
      iteratorArray0[4] = (Iterator<SQLTransactionRollbackException>) orderedMapIterator0;
      iteratorArray0[5] = (Iterator<SQLTransactionRollbackException>) orderedMapIterator0;
      iteratorArray0[6] = (Iterator<SQLTransactionRollbackException>) singletonIterator0;
      iteratorArray0[7] = (Iterator<SQLTransactionRollbackException>) reverseListIterator0;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[8] = (Iterator<SQLTransactionRollbackException>) resettableIterator1;
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", 476);
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      Spliterator<Throwable> spliterator0 = sQLSyntaxErrorException0.spliterator();
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertNotNull(spliterator0);
      
      Spliterator<Throwable> spliterator1 = sQLSyntaxErrorException0.spliterator();
      assertNotSame(spliterator1, spliterator0);
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertFalse(spliterator1.equals((Object)spliterator0));
      assertNotNull(spliterator1);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLSyntaxErrorException0);
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertNotNull(iterator0);
      
      Spliterator<Throwable> spliterator2 = sQLSyntaxErrorException0.spliterator();
      assertNotSame(spliterator2, spliterator1);
      assertNotSame(spliterator2, spliterator0);
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertFalse(spliterator2.equals((Object)spliterator1));
      assertFalse(spliterator2.equals((Object)spliterator0));
      assertNotNull(spliterator2);
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", 0, sQLSyntaxErrorException0);
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException1);
      
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException2.getMessage());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException2.toString());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertNotNull(sQLNonTransientConnectionException2);
      
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("org.apache.commons.collections4.IteratorUtils", "zX;L");
      assertEquals("zX;L", sQLNonTransientConnectionException3.getSQLState());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException3.getMessage());
      assertEquals(0, sQLNonTransientConnectionException3.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException3.toString());
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException3);
      
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) stack0);
      IteratorUtils.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) spliterator0, comparator0);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, (Closure<? super Object>) null, true);
      WhileClosure.whileClosure((Predicate<? super Predicate<SQLInvalidAuthorizationSpecException>>) predicate0, (Closure<? super Predicate<SQLInvalidAuthorizationSpecException>>) whileClosure0, true);
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(predicate0, whileClosure0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("zX;L");
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Throwable throwable0 = null;
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      boolean boolean0 = hashSet0.add(sQLTransactionRollbackException0);
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertTrue(hashSet0.contains(sQLTransactionRollbackException0));
      
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(hashSet0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(hashSet0.contains(sQLTransactionRollbackException0));
      assertNotNull(loopingIterator0);
      
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) loopingIterator0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(hashSet0.contains(sQLTransactionRollbackException0));
      assertNotNull(enumeration0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertNotNull(sQLTransactionRollbackException1);
      
      boolean boolean1 = hashSet0.add(sQLTransactionRollbackException1);
      assertNotSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertTrue(boolean1);
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertTrue(boolean1 == boolean0);
      assertTrue(hashSet0.contains(sQLTransactionRollbackException1));
      
      loopingIterator0.reset();
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(hashSet0.contains(sQLTransactionRollbackException1));
      
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(hashSet0.contains(sQLTransactionRollbackException1));
      assertNotNull(iterator0);
      
      // Undeclared exception!
      IteratorUtils.size(loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) resettableListIterator0);
      assertEquals("[]", string0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(string0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Estimated size must be greater than 0", "");
      assertEquals("java.sql.SQLSyntaxErrorException: Estimated size must be greater than 0", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Estimated size must be greater than 0", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("tFuR$}jWHcl)7aD ");
      assertEquals("tFuR$}jWHcl)7aD ", sQLSyntaxErrorException1.getMessage());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: tFuR$}jWHcl)7aD ", sQLSyntaxErrorException1.toString());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException2.toString());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertNull(sQLSyntaxErrorException2.getMessage());
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertNotNull(sQLSyntaxErrorException2);
      
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("W^jFW.YKfX~\"NQV7yG+", sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: Estimated size must be greater than 0", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Estimated size must be greater than 0", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException3.getSQLState());
      assertEquals("W^jFW.YKfX~\"NQV7yG+", sQLSyntaxErrorException3.getMessage());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: W^jFW.YKfX~\"NQV7yG+", sQLSyntaxErrorException3.toString());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertNotNull(sQLSyntaxErrorException3);
      
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(sQLSyntaxErrorException1);
      assertEquals("tFuR$}jWHcl)7aD ", sQLSyntaxErrorException1.getMessage());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: tFuR$}jWHcl)7aD ", sQLSyntaxErrorException1.toString());
      assertEquals(0, sQLSyntaxErrorException4.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: tFuR$}jWHcl)7aD ", sQLSyntaxErrorException4.getMessage());
      assertNull(sQLSyntaxErrorException4.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLSyntaxErrorException: tFuR$}jWHcl)7aD ", sQLSyntaxErrorException4.toString());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException4);
      
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("Zw'v>!`;8khLrF3%#", "u*9ob0ax-X", (-2196));
      assertEquals("u*9ob0ax-X", sQLSyntaxErrorException5.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: Zw'v>!`;8khLrF3%#", sQLSyntaxErrorException5.toString());
      assertEquals((-2196), sQLSyntaxErrorException5.getErrorCode());
      assertEquals("Zw'v>!`;8khLrF3%#", sQLSyntaxErrorException5.getMessage());
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException3));
      assertNotNull(sQLSyntaxErrorException5);
      
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("Zw'v>!`;8khLrF3%#", sQLSyntaxErrorException3);
      assertEquals("java.sql.SQLSyntaxErrorException: Estimated size must be greater than 0", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Estimated size must be greater than 0", sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException3.getSQLState());
      assertEquals("W^jFW.YKfX~\"NQV7yG+", sQLSyntaxErrorException3.getMessage());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: W^jFW.YKfX~\"NQV7yG+", sQLSyntaxErrorException3.toString());
      assertNull(sQLSyntaxErrorException6.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: Zw'v>!`;8khLrF3%#", sQLSyntaxErrorException6.toString());
      assertEquals(0, sQLSyntaxErrorException6.getErrorCode());
      assertEquals("Zw'v>!`;8khLrF3%#", sQLSyntaxErrorException6.getMessage());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException6);
      
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException5;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException5;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(2, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(2, sQLSyntaxErrorExceptionArray0.length);
      assertNotNull(objectArrayIterator0);
      
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("cy&2#Ds\",O|");
      assertNotNull(constantTransformer0);
      
      String string1 = IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) objectArrayIterator0, (Transformer<? super SQLSyntaxErrorException, String>) constantTransformer0, "8ilNS", "W^jFW.YKfX~\"NQV7yG+", "tFuR$}jWHcl)7aD ");
      assertEquals("W^jFW.YKfX~\"NQV7yG+cy&2#Ds\",O|8ilNScy&2#Ds\",O|tFuR$}jWHcl)7aD ", string1);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(2, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, sQLSyntaxErrorExceptionArray0.length);
      assertNotNull(string1);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) resettableListIterator0);
      assertEquals("[]", string0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(string0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Estimated size must be greater than 0", "");
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("Estimated size must be greater than 0", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Estimated size must be greater than 0", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      String string1 = "tFuR$}jWHcl)7aD ";
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("tFuR$}jWHcl)7aD ");
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals("tFuR$}jWHcl)7aD ", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: tFuR$}jWHcl)7aD ", sQLSyntaxErrorException1.toString());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      assertNull(sQLSyntaxErrorException2.getMessage());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException2.toString());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException2);
      
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("W^jFW.YKfX~\"NQV7yG+", sQLSyntaxErrorException0);
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("Estimated size must be greater than 0", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Estimated size must be greater than 0", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException3.getSQLState());
      assertEquals("W^jFW.YKfX~\"NQV7yG+", sQLSyntaxErrorException3.getMessage());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: W^jFW.YKfX~\"NQV7yG+", sQLSyntaxErrorException3.toString());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertNotNull(sQLSyntaxErrorException3);
      
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(sQLSyntaxErrorException1);
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals("tFuR$}jWHcl)7aD ", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: tFuR$}jWHcl)7aD ", sQLSyntaxErrorException1.toString());
      assertEquals(0, sQLSyntaxErrorException4.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLSyntaxErrorException: tFuR$}jWHcl)7aD ", sQLSyntaxErrorException4.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: tFuR$}jWHcl)7aD ", sQLSyntaxErrorException4.getMessage());
      assertNull(sQLSyntaxErrorException4.getSQLState());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException1));
      assertNotNull(sQLSyntaxErrorException4);
      
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException(sQLSyntaxErrorException3);
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("Estimated size must be greater than 0", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Estimated size must be greater than 0", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException3.getSQLState());
      assertEquals("W^jFW.YKfX~\"NQV7yG+", sQLSyntaxErrorException3.getMessage());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: W^jFW.YKfX~\"NQV7yG+", sQLSyntaxErrorException3.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLSyntaxErrorException: W^jFW.YKfX~\"NQV7yG+", sQLSyntaxErrorException5.toString());
      assertNull(sQLSyntaxErrorException5.getSQLState());
      assertEquals(0, sQLSyntaxErrorException5.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: W^jFW.YKfX~\"NQV7yG+", sQLSyntaxErrorException5.getMessage());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException3));
      assertNotNull(sQLSyntaxErrorException5);
      
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException5;
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException4;
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException1;
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException3;
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException3;
      ResettableListIterator<IIOMetadataNode> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertNotNull(resettableListIterator1);
      
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(zippingIterator0);
      
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(iIOMetadataNode0));
      assertNotNull(linkedList0);
      
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(loopingListIterator0.hasNext());
      assertFalse(loopingListIterator0.hasPrevious());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(linkedList0.contains(iIOMetadataNode0));
      assertNotNull(loopingListIterator0);
      
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(linkedList0.contains(iIOMetadataNode0));
      assertNotNull(reverseListIterator0);
      
      Integer integer0 = new Integer(55);
      assertEquals(55, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-826));
      assertEquals((-826), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer1);
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(singletonListIterator0);
      
      ListIterator<Integer> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends Integer>) singletonListIterator0);
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(listIterator1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("W^jFW.YKfX~\"NQV7yG+", "org.apache.commons.collections4.functors.FunctorUtils");
      assertEquals("java.sql.SQLFeatureNotSupportedException: W^jFW.YKfX~\"NQV7yG+", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("W^jFW.YKfX~\"NQV7yG+", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("org.apache.commons.collections4.functors.FunctorUtils", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      ArrayIterator<Locale.Category> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<Locale.Category>(sQLFeatureNotSupportedException0, 100, 55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", 476);
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      Spliterator<Throwable> spliterator0 = sQLSyntaxErrorException0.spliterator();
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(spliterator0);
      
      Spliterator<Throwable> spliterator1 = sQLSyntaxErrorException0.spliterator();
      assertNotSame(spliterator1, spliterator0);
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertFalse(spliterator1.equals((Object)spliterator0));
      assertNotNull(spliterator1);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLSyntaxErrorException0);
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(iterator0);
      
      Spliterator<Throwable> spliterator2 = sQLSyntaxErrorException0.spliterator();
      assertNotSame(spliterator2, spliterator1);
      assertNotSame(spliterator2, spliterator0);
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertFalse(spliterator2.equals((Object)spliterator1));
      assertFalse(spliterator2.equals((Object)spliterator0));
      assertNotNull(spliterator2);
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", 0, sQLSyntaxErrorException0);
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.getMessage());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException1);
      
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException2.getMessage());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException2.toString());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException2);
      
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("org.apache.commons.collections4.IteratorUtils", "zX;L");
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException3.getMessage());
      assertEquals("zX;L", sQLNonTransientConnectionException3.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException3.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException3.toString());
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertNotNull(sQLNonTransientConnectionException3);
      
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLNonTransientConnectionException0, comparator0);
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException2);
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException3);
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.getMessage());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.toString());
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException3));
      assertNotNull(predicate0);
      
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, (Closure<? super Object>) null, true);
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertTrue(whileClosure0.isDoLoop());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.getMessage());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.toString());
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException3));
      assertNotNull(whileClosure0);
      
      Integer integer0 = new Integer(3237);
      assertEquals(3237, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(100);
      assertEquals(100, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(100);
      assertEquals(100, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer2);
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(singletonListIterator0);
      
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) singletonListIterator0);
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("Transformer must not be null");
      assertNotNull(constantTransformer0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "Transformer must not be null";
      stringArray0[3] = null;
      stringArray0[4] = "Transformer must not be null";
      stringArray0[5] = "A|}Dk9wv";
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = "Transformer must not be null";
      ResettableListIterator<String> resettableListIterator1 = IteratorUtils.arrayListIterator(stringArray0);
      assertFalse(resettableListIterator1.hasPrevious());
      assertTrue(resettableListIterator1.hasNext());
      assertEquals(9, stringArray0.length);
      assertNotNull(resettableListIterator1);
      
      Iterable<String> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) resettableListIterator1);
      assertFalse(resettableListIterator1.hasPrevious());
      assertTrue(resettableListIterator1.hasNext());
      assertEquals(9, stringArray0.length);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", 476);
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      Spliterator<Throwable> spliterator0 = sQLSyntaxErrorException0.spliterator();
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(spliterator0);
      
      Spliterator<Throwable> spliterator1 = sQLSyntaxErrorException0.spliterator();
      assertNotSame(spliterator1, spliterator0);
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertFalse(spliterator1.equals((Object)spliterator0));
      assertNotNull(spliterator1);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(iterator0);
      
      Spliterator<Throwable> spliterator2 = sQLSyntaxErrorException0.spliterator();
      assertNotSame(spliterator2, spliterator0);
      assertNotSame(spliterator2, spliterator1);
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertFalse(spliterator2.equals((Object)spliterator0));
      assertFalse(spliterator2.equals((Object)spliterator1));
      assertNotNull(spliterator2);
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      int int0 = 0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", 0, sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.getMessage());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException1.toString());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException1);
      
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) sQLNonTransientConnectionExceptionArray0, (-1253));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      int int0 = (-1253);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) defaultEquator0;
      objectArray0[1] = (Object) defaultEquator0;
      objectArray0[2] = null;
      objectArray0[3] = (Object) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>) null, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Enumeration<SQLDataException> enumeration0 = stack0.elements();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(enumeration0);
      
      Stream<SQLDataException> stream0 = stack0.stream();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stream0);
      
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(iterator0);
      
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(0, int0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.functors.OnePredicate", "8..c! ", 0);
      assertEquals("org.apache.commons.collections4.functors.OnePredicate", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.functors.OnePredicate", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("8..c! ", sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.OnePredicate");
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.functors.OnePredicate", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.OnePredicate", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      MockThrowable mockThrowable0 = new MockThrowable(sQLNonTransientConnectionException0);
      assertNotNull(mockThrowable0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("");
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals("", sQLTransientConnectionException1.getMessage());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLTransientConnectionException1);
      
      SQLTransientConnectionException sQLTransientConnectionException2 = (SQLTransientConnectionException)sQLTransientConnectionException1.fillInStackTrace();
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException2);
      assertNotSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertSame(sQLTransientConnectionException2, sQLTransientConnectionException1);
      assertNotSame(sQLTransientConnectionException2, sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals("", sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException2.toString());
      assertEquals(0, sQLTransientConnectionException2.getErrorCode());
      assertEquals("", sQLTransientConnectionException2.getMessage());
      assertNull(sQLTransientConnectionException2.getSQLState());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException0));
      assertNotNull(sQLTransientConnectionException2);
      
      MapIterator<SQLTransactionRollbackException, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterator<Predicate<HashSet>> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<Predicate<HashSet>>) iterator0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Array class must not be null");
      assertNotNull(iIOMetadataNode0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(":[", "", 1);
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: :[", sQLTransientConnectionException0.toString());
      assertEquals(1, sQLTransientConnectionException0.getErrorCode());
      assertEquals(":[", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      Object object0 = iIOMetadataNode1.getUserObject();
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNull(object0);
      
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("Array class must not be null");
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode2);
      
      Node node0 = iIOMetadataNode0.replaceChild(iIOMetadataNode2, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode0, node0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode2);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertSame(iIOMetadataNode1, node0);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode2);
      assertNotSame(iIOMetadataNode2, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode2, node0);
      assertNotSame(iIOMetadataNode2, iIOMetadataNode0);
      assertNotSame(node0, iIOMetadataNode0);
      assertNotSame(node0, iIOMetadataNode2);
      assertSame(node0, iIOMetadataNode1);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(node0.equals((Object)iIOMetadataNode0));
      assertFalse(node0.equals((Object)iIOMetadataNode2));
      assertNotNull(node0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode0, node0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode2);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode0.equals((Object)node0));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode2));
      assertNotNull(nodeListIterator0);
      
      MapIterator<SQLTransientConnectionException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      AbstractMapIteratorDecorator<SQLTransientConnectionException, BatchUpdateException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, BatchUpdateException>(mapIterator0);
      assertNotNull(abstractMapIteratorDecorator0);
      
      MapIterator<SQLTransientConnectionException, BatchUpdateException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientConnectionException, ? extends BatchUpdateException>) abstractMapIteratorDecorator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(mapIterator1);
      
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(mapIterator1);
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertNotNull(listIteratorWrapper0);
      
      Closure<SQLException> closure0 = NOPClosure.nopClosure();
      assertNotNull(closure0);
      
      IteratorUtils.apply((Iterator<SQLTransientConnectionException>) listIteratorWrapper0, (Closure<? super SQLTransientConnectionException>) closure0);
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<IIOMetadataNode>) orderedMapIterator0, (Closure<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", 476);
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      Spliterator<Throwable> spliterator0 = sQLSyntaxErrorException0.spliterator();
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertNotNull(spliterator0);
      
      Spliterator<Throwable> spliterator1 = sQLSyntaxErrorException0.spliterator();
      assertNotSame(spliterator1, spliterator0);
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertFalse(spliterator1.equals((Object)spliterator0));
      assertNotNull(spliterator1);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLSyntaxErrorException0);
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertNotNull(iterator0);
      
      Spliterator<Throwable> spliterator2 = sQLSyntaxErrorException0.spliterator();
      assertNotSame(spliterator2, spliterator1);
      assertNotSame(spliterator2, spliterator0);
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertFalse(spliterator2.equals((Object)spliterator1));
      assertFalse(spliterator2.equals((Object)spliterator0));
      assertNotNull(spliterator2);
      
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", 0, sQLSyntaxErrorException0);
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException1);
      
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException2.toString());
      assertNull(sQLNonTransientConnectionException2.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException2.getMessage());
      assertEquals(0, sQLNonTransientConnectionException2.getErrorCode());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException2.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException2);
      
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("org.apache.commons.collections4.IteratorUtils", "zX;L");
      assertEquals("zX;L", sQLNonTransientConnectionException3.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException3.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException3.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException3.toString());
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException2));
      assertFalse(sQLNonTransientConnectionException3.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException3);
      
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertNotNull(resettableListIterator1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) spliterator0, comparator0);
      assertNotSame(spliterator0, spliterator2);
      assertNotSame(spliterator0, spliterator1);
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertFalse(spliterator0.equals((Object)spliterator2));
      assertFalse(spliterator0.equals((Object)spliterator1));
      assertNotNull(predicate0);
      
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, (Closure<? super Object>) null, true);
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertTrue(whileClosure0.isDoLoop());
      assertFalse(spliterator0.equals((Object)spliterator2));
      assertFalse(spliterator0.equals((Object)spliterator1));
      assertNotNull(whileClosure0);
      
      Closure<Predicate<SQLInvalidAuthorizationSpecException>> closure0 = WhileClosure.whileClosure((Predicate<? super Predicate<SQLInvalidAuthorizationSpecException>>) predicate0, (Closure<? super Predicate<SQLInvalidAuthorizationSpecException>>) whileClosure0, true);
      assertNotSame(spliterator0, spliterator2);
      assertNotSame(spliterator0, spliterator1);
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertTrue(whileClosure0.isDoLoop());
      assertFalse(spliterator0.equals((Object)spliterator2));
      assertFalse(spliterator0.equals((Object)spliterator1));
      assertNotNull(closure0);
      
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(predicate0, whileClosure0);
      assertEquals(476, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLSyntaxErrorException0.getMessage());
      assertTrue(whileClosure0.isDoLoop());
      assertFalse(spliterator0.equals((Object)spliterator2));
      assertFalse(spliterator0.equals((Object)spliterator1));
      assertNotNull(ifClosure0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTransientException>) null, (Closure<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertNotNull(singletonListIterator0);
      
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) singletonListIterator0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertFalse(boolean0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Throwable throwable0 = null;
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(loopingIterator0);
      
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) loopingIterator0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(enumeration0);
      
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(iterator0);
      
      int int0 = IteratorUtils.size(loopingIterator0);
      assertEquals(0, int0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>) resettableIterator0, (Iterator<?>) resettableIterator0);
      assertNotNull(iterator0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<SQLTransientException> comparator1 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator1, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      assertNotNull(iterator1);
      
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) iterator1);
      assertNotNull(enumeration0);
      
      Iterator<SQLTransactionRollbackException> iterator2 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      assertFalse(iterator2.equals((Object)iterator1));
      assertNotNull(iterator2);
      
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      String string0 = "There are no elements for this iterator to loop on";
      String string1 = "G|u";
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashtable0.put("G|u", clientInfoStatus0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("There are no elements for this iterator to loop on", "org.apache.commons.collections4.functors.SwitchClosure", (-1), hashtable0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertEquals("java.sql.SQLClientInfoException: There are no elements for this iterator to loop on", sQLClientInfoException0.toString());
      assertEquals((-1), sQLClientInfoException0.getErrorCode());
      assertEquals("There are no elements for this iterator to loop on", sQLClientInfoException0.getMessage());
      assertEquals("org.apache.commons.collections4.functors.SwitchClosure", sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, (-648));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-95)).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) batchUpdateException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) predicate0);
      assertTrue(boolean0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      
      SQLWarning sQLWarning0 = new SQLWarning("bI<mEh^vWdn", "bI<mEh^vWdn");
      assertEquals("bI<mEh^vWdn", sQLWarning0.getMessage());
      assertEquals("bI<mEh^vWdn", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: bI<mEh^vWdn", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.singletonListIterator(sQLWarning0);
      assertEquals("bI<mEh^vWdn", sQLWarning0.getMessage());
      assertEquals("bI<mEh^vWdn", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: bI<mEh^vWdn", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      boolean boolean1 = IteratorUtils.matchesAny((Iterator<SQLWarning>) listIterator0, (Predicate<? super SQLWarning>) predicate0);
      assertFalse(boolean1);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("bI<mEh^vWdn", sQLWarning0.getMessage());
      assertEquals("bI<mEh^vWdn", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: bI<mEh^vWdn", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OrderedIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      int int0 = IteratorUtils.size(orderedIterator0);
      assertEquals(0, int0);
      
      OrderedMapIterator<SQLRecoverableException, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      MapIterator<SQLRecoverableException, SQLRecoverableException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLRecoverableException, ? extends SQLRecoverableException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(mapIterator0);
      
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, 505L);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(boundedIterator0);
      
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) boundedIterator0, (Iterator<? extends SQLRecoverableException>) boundedIterator0, (Iterator<? extends SQLRecoverableException>) mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(zippingIterator0);
      
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLRecoverableException>) boundedIterator0, (Object) boundedIterator0);
      assertFalse(boolean0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedMapIterator<String, Boolean> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) resettableListIterator0);
      assertEquals("[]", string0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) listIterator0;
      objectArray0[1] = (Object) listIterator0;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (-577), intArray0);
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals((-577), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("", "[]", (-4958));
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("[]", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals((-4958), sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      SQLException sQLException0 = new SQLException("", sQLWarning0);
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("[]", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals((-4958), sQLWarning0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertNotNull(sQLException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[]", "", 0, batchUpdateException0);
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals((-577), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("[]", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: []", sQLIntegrityConstraintViolationException0.toString());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(sQLIntegrityConstraintViolationException0));
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(sQLIntegrityConstraintViolationException0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals((-577), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("[]", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: []", sQLIntegrityConstraintViolationException0.toString());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(arrayList0.contains(sQLIntegrityConstraintViolationException0));
      
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(resettableListIterator1.hasPrevious());
      assertTrue(resettableListIterator1.hasNext());
      assertTrue(arrayList0.contains(sQLIntegrityConstraintViolationException0));
      assertNotNull(resettableListIterator1);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLSyntaxErrorException0);
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNotNull(iterator0);
      
      Predicate<SQLClientInfoException> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1073741820;
      intArray0[2] = 1074;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-395);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) batchUpdateException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) predicate0);
      assertTrue(boolean0);
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      SQLWarning sQLWarning0 = new SQLWarning("bI<mEh^vWdn", "bI<mEh^vWdn");
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("bI<mEh^vWdn", sQLWarning0.getSQLState());
      assertEquals("bI<mEh^vWdn", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: bI<mEh^vWdn", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.singletonListIterator(sQLWarning0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("bI<mEh^vWdn", sQLWarning0.getSQLState());
      assertEquals("bI<mEh^vWdn", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: bI<mEh^vWdn", sQLWarning0.toString());
      assertNotNull(listIterator0);
      
      boolean boolean1 = IteratorUtils.matchesAny((Iterator<SQLWarning>) listIterator0, (Predicate<? super SQLWarning>) predicate0);
      assertTrue(boolean1);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("bI<mEh^vWdn", sQLWarning0.getSQLState());
      assertEquals("bI<mEh^vWdn", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: bI<mEh^vWdn", sQLWarning0.toString());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OrderedIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      int int0 = IteratorUtils.size(orderedIterator0);
      assertEquals(0, int0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\"=ei&WF4M", "\"=ei&WF4M");
      assertEquals("\"=ei&WF4M", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("\"=ei&WF4M", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: \"=ei&WF4M", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      assertEquals("\"=ei&WF4M", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("\"=ei&WF4M", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: \"=ei&WF4M", sQLRecoverableException0.toString());
      assertNotNull(resettableIterator0);
      
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLRecoverableException>) resettableIterator0, (Object) sQLRecoverableException0);
      assertTrue(boolean0);
      assertEquals("\"=ei&WF4M", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("\"=ei&WF4M", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: \"=ei&WF4M", sQLRecoverableException0.toString());
      
      OrderedMapIterator<String, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLWarning sQLWarning0 = new SQLWarning("", "Couldn't get the node: index (", (Throwable) null);
      assertEquals("Couldn't get the node: index (", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLWarning0);
      assertEquals("Couldn't get the node: index (", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, "Couldn't get the node: index (");
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException1.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertNull(sQLTimeoutException1.getMessage());
      assertEquals("Couldn't get the node: index (", sQLTimeoutException1.getSQLState());
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertNotNull(sQLTimeoutException1);
      
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", "87i};SEqJU}LC~i_", sQLTimeoutException1);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException1.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertNull(sQLTimeoutException1.getMessage());
      assertEquals("Couldn't get the node: index (", sQLTimeoutException1.getSQLState());
      assertEquals("87i};SEqJU}LC~i_", sQLTimeoutException2.getSQLState());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException2.toString());
      assertEquals("", sQLTimeoutException2.getMessage());
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertNotNull(sQLTimeoutException2);
      
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException();
      assertEquals(0, sQLTimeoutException3.getErrorCode());
      assertNull(sQLTimeoutException3.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException3.toString());
      assertNull(sQLTimeoutException3.getSQLState());
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException2));
      assertNotNull(sQLTimeoutException3);
      
      int[] intArray0 = new int[1];
      int int0 = 227;
      intArray0[0] = 227;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {227}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)batchUpdateException0.fillInStackTrace();
      assertSame(batchUpdateException0, batchUpdateException1);
      assertSame(batchUpdateException1, batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException1.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertArrayEquals(new int[] {227}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(batchUpdateException1);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(";)L`RrGyp.&Ein", (String) null, sQLWarning0);
      assertEquals("Couldn't get the node: index (", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException: ;)L`RrGyp.&Ein", sQLTransactionRollbackException0.toString());
      assertEquals(";)L`RrGyp.&Ein", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(MQU0S?-CV+RGL", "(MQU0S?-CV+RGL", sQLWarning0);
      assertEquals("Couldn't get the node: index (", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("(MQU0S?-CV+RGL", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("(MQU0S?-CV+RGL", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: (MQU0S?-CV+RGL", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Couldn't get the node: index (", "Couldn't get the node: index (", 227, batchUpdateException1);
      assertEquals(227, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Couldn't get the node: index (", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("Couldn't get the node: index (", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Couldn't get the node: index (", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException1.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertArrayEquals(new int[] {227}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      int int1 = 381;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "cys", 381, sQLTimeoutException1);
      assertEquals(381, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("cys", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException1.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertNull(sQLTimeoutException1.getMessage());
      assertEquals("Couldn't get the node: index (", sQLTimeoutException1.getSQLState());
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException3));
      assertNotNull(sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Iterable<SQLSyntaxErrorException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(iterable0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotSame(predicate1, predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      predicateArray0[2] = predicate1;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(identityPredicate0);
      
      predicateArray0[3] = (Predicate<Object>) identityPredicate0;
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) identityPredicate0, (Predicate<? super Object>) predicate1);
      assertNotSame(predicate1, predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
      assertNotSame(predicate0, predicate1);
      assertTrue(boolean0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      
      ResettableIterator<ArrayDeque<Object>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)0, (byte)4}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = (int) (byte) (-30);
      intArray0[1] = (int) (byte)4;
      intArray0[2] = 24;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte) (-30);
      intArray0[5] = (int) (byte) (-30);
      intArray0[6] = (int) (byte)4;
      intArray0[7] = (int) (byte)4;
      intArray0[8] = (int) (byte)0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("\"ayZjp>%G:?[J-9P}t", intArray0);
      assertEquals("java.sql.BatchUpdateException: \"ayZjp>%G:?[J-9P}t", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("\"ayZjp>%G:?[J-9P}t", batchUpdateException0.getMessage());
      assertEquals(17, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals("java.sql.BatchUpdateException: \"ayZjp>%G:?[J-9P}t", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("\"ayZjp>%G:?[J-9P}t", batchUpdateException0.getMessage());
      assertEquals(17, intArray0.length);
      assertNotNull(singletonListIterator0);
      
      int[] intArray1 = batchUpdateException0.getUpdateCounts();
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals("java.sql.BatchUpdateException: \"ayZjp>%G:?[J-9P}t", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("\"ayZjp>%G:?[J-9P}t", batchUpdateException0.getMessage());
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(17, intArray1.length);
      assertEquals(17, intArray0.length);
      assertNotNull(intArray1);
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      boolean boolean1 = IteratorUtils.matchesAll((Iterator<BatchUpdateException>) singletonListIterator0, (Predicate<? super BatchUpdateException>) uniquePredicate0);
      assertNotSame(intArray0, intArray1);
      assertTrue(boolean1);
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals("java.sql.BatchUpdateException: \"ayZjp>%G:?[J-9P}t", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("\"ayZjp>%G:?[J-9P}t", batchUpdateException0.getMessage());
      assertFalse(boolean1 == boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(17, intArray0.length);
      
      ResettableIterator<ArrayDeque<Object>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) batchUpdateException0;
      objectArray0[1] = (Object) 4;
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(2, objectArray0.length);
      assertNotNull(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)0, (byte)4}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      OrderedIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      SQLDataException sQLDataException0 = new SQLDataException("");
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("@46(<cR8eo~IP", (int[]) null, sQLDataException0);
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: @46(<cR8eo~IP", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("@46(<cR8eo~IP", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: @46(<cR8eo~IP", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("@46(<cR8eo~IP", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(predicate0));
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(linkedList0.contains(predicate1));
      assertNotNull(predicate1);
      
      boolean boolean2 = IteratorUtils.matchesAll((Iterator<BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) predicate1);
      assertFalse(boolean2);
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: @46(<cR8eo~IP", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("@46(<cR8eo~IP", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(linkedList0.contains(predicate1));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1073741824;
      intArray0[2] = 1074;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-395);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {0, 1073741824, 1074, 0, 0, 0, (-395)}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) batchUpdateException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {0, 1073741824, 1074, 0, 0, 0, (-395)}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) predicate0);
      assertTrue(boolean0);
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {0, 1073741824, 1074, 0, 0, 0, (-395)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<Locale.Category> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      BoundedIterator<Locale.Category> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) iterator0, 1L);
      assertNotNull(boundedIterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Entry does not exist: ");
      assertNotNull(iIOMetadataNode0);
      
      Attr attr0 = iIOMetadataNode0.getAttributeNodeNS("Entry does not exist: ", "Entry does not exist: ");
      assertNull(attr0);
      
      // Undeclared exception!
      try { 
        iIOMetadataNode0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newChild == null!
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 8);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("#v=C+e");
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("#v=C+e");
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertNotNull(iIOMetadataNode2);
      
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("Collection must not be null");
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode3);
      
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("#v=C+e");
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertNotNull(iIOMetadataNode4);
      
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode1));
      assertNotNull(iIOMetadataNode5);
      
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode5));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode3));
      assertNotNull(iIOMetadataNode6);
      
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode5));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode6));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode2));
      assertNotNull(iIOMetadataNode7);
      
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      IIOMetadataNode iIOMetadataNode8 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode7));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode6));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode5));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode1));
      assertNotNull(iIOMetadataNode8);
      
      iIOMetadataNodeArray0[8] = iIOMetadataNode8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, (-2481), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      DataTruncation dataTruncation0 = new DataTruncation(2587, false, true, 2587, 2587);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("prefix may not be null", "", (-1), dataTruncation0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("prefix may not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals((-1), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: prefix may not be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLException sQLException0 = new SQLException("", "prefix may not be null", (-1), sQLIntegrityConstraintViolationException0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("prefix may not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals((-1), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: prefix may not be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals((-1), sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("prefix may not be null", sQLException0.getSQLState());
      assertNotNull(sQLException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLException0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("prefix may not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals((-1), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: prefix may not be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals((-1), sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("prefix may not be null", sQLException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("prefix may not be null", "", sQLTransactionRollbackException0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("prefix may not be null", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals((-1), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: prefix may not be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals((-1), sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals("prefix may not be null", sQLException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: prefix may not be null", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("prefix may not be null", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("prefix may not be null", "prefix may not be null");
      assertEquals("prefix may not be null", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("prefix may not be null", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: prefix may not be null", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("prefix may not be null", "", sQLInvalidAuthorizationSpecException1);
      assertEquals("prefix may not be null", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("prefix may not be null", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: prefix may not be null", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException2.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: prefix may not be null", sQLInvalidAuthorizationSpecException2.toString());
      assertEquals("prefix may not be null", sQLInvalidAuthorizationSpecException2.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException2.getErrorCode());
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertNotNull(sQLInvalidAuthorizationSpecException2);
      
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException2);
      assertEquals("prefix may not be null", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("prefix may not be null", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: prefix may not be null", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException2.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: prefix may not be null", sQLInvalidAuthorizationSpecException2.toString());
      assertEquals("prefix may not be null", sQLInvalidAuthorizationSpecException2.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException2.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException3.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException3.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: prefix may not be null", sQLInvalidAuthorizationSpecException3.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLInvalidAuthorizationSpecException: prefix may not be null", sQLInvalidAuthorizationSpecException3.toString());
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertNotNull(sQLInvalidAuthorizationSpecException3);
      
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException(")Wn5{P+(*", "prefix may not be null");
      assertEquals(0, sQLInvalidAuthorizationSpecException4.getErrorCode());
      assertEquals("prefix may not be null", sQLInvalidAuthorizationSpecException4.getSQLState());
      assertEquals(")Wn5{P+(*", sQLInvalidAuthorizationSpecException4.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: )Wn5{P+(*", sQLInvalidAuthorizationSpecException4.toString());
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertNotNull(sQLInvalidAuthorizationSpecException4);
      
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException(dataTruncation0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.DataTruncation: Data truncation", sQLInvalidAuthorizationSpecException5.toString());
      assertNull(sQLInvalidAuthorizationSpecException5.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException5.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", sQLInvalidAuthorizationSpecException5.getMessage());
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException4));
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertNotNull(sQLInvalidAuthorizationSpecException5);
      
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 2587, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<SQLTransientException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientException, SQLNonTransientConnectionException>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      MapIterator<SQLTransientException, SQLNonTransientConnectionException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientException, ? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(mapIterator0);
      
      MapIterator<SQLTransientException, SQLNonTransientConnectionException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertSame(mapIterator0, mapIterator1);
      assertSame(mapIterator1, mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(mapIterator1);
      
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTransientException>) mapIterator1, (-1252L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLWarning sQLWarning0 = new SQLWarning("", "Couldn't get the node: index (", (Throwable) null);
      assertEquals("Couldn't get the node: index (", sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLWarning0);
      assertEquals("Couldn't get the node: index (", sQLWarning0.getSQLState());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, "Couldn't get the node: index (");
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException1.toString());
      assertNull(sQLTimeoutException1.getMessage());
      assertEquals("Couldn't get the node: index (", sQLTimeoutException1.getSQLState());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertNotNull(sQLTimeoutException1);
      
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", "87i};SEqJU}LC~i_", sQLTimeoutException1);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException1.toString());
      assertNull(sQLTimeoutException1.getMessage());
      assertEquals("Couldn't get the node: index (", sQLTimeoutException1.getSQLState());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("", sQLTimeoutException2.getMessage());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException2.toString());
      assertEquals("87i};SEqJU}LC~i_", sQLTimeoutException2.getSQLState());
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertNotNull(sQLTimeoutException2);
      
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException();
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException3.toString());
      assertEquals(0, sQLTimeoutException3.getErrorCode());
      assertNull(sQLTimeoutException3.getSQLState());
      assertNull(sQLTimeoutException3.getMessage());
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException2));
      assertNotNull(sQLTimeoutException3);
      
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0, 0);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(4, objectArrayIterator0.getEndIndex());
      assertEquals(4, sQLTimeoutExceptionArray0.length);
      assertNotNull(objectArrayIterator0);
      
      Iterator<SQLException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLException>) objectArrayIterator0);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(4, objectArrayIterator0.getEndIndex());
      assertEquals(4, sQLTimeoutExceptionArray0.length);
      assertNotNull(iterator0);
      
      OrderedIterator<EnumSet<Locale.Category>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterator<EnumSet<Locale.Category>> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends EnumSet<Locale.Category>>) orderedIterator0);
      assertNotNull(iterator1);
      
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator1, 14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 14
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      int int0 = 0;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 0);
      assertEquals(0, sQLTransactionRollbackExceptionArray0.length);
      assertNotNull(resettableIterator0);
      
      ResettableIterator<Iterator<SQLSyntaxErrorException>> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator1);
      
      Hashtable<Predicate<Object>, Closure<Object>> hashtable0 = new Hashtable<Predicate<Object>, Closure<Object>>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      OrderedIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      int int0 = IteratorUtils.size(orderedIterator0);
      assertEquals(0, int0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("\"=ei&WF4M");
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      Node node0 = iIOMetadataNode0.appendChild(iIOMetadataNode1);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode0, node0);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertSame(iIOMetadataNode1, node0);
      assertNotSame(node0, iIOMetadataNode0);
      assertSame(node0, iIOMetadataNode1);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(node0.equals((Object)iIOMetadataNode0));
      assertNotNull(node0);
      
      NodeList nodeList0 = iIOMetadataNode1.getElementsByTagNameNS("\"=ei&WF4M", "");
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertSame(iIOMetadataNode1, node0);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(nodeList0);
      
      Node node1 = iIOMetadataNode0.replaceChild(node0, node0);
      assertNotSame(iIOMetadataNode0, node1);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode0, node0);
      assertSame(iIOMetadataNode1, node1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertSame(iIOMetadataNode1, node0);
      assertSame(node0, node1);
      assertNotSame(node0, iIOMetadataNode0);
      assertSame(node0, iIOMetadataNode1);
      assertSame(node1, iIOMetadataNode1);
      assertNotSame(node1, iIOMetadataNode0);
      assertSame(node1, node0);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode0.equals((Object)node0));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(node0.equals((Object)iIOMetadataNode0));
      assertFalse(node1.equals((Object)iIOMetadataNode0));
      assertNotNull(node1);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(node1);
      assertNotSame(iIOMetadataNode0, node1);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotSame(iIOMetadataNode0, node0);
      assertSame(iIOMetadataNode1, node1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertSame(iIOMetadataNode1, node0);
      assertSame(node0, node1);
      assertNotSame(node0, iIOMetadataNode0);
      assertSame(node0, iIOMetadataNode1);
      assertSame(node1, iIOMetadataNode1);
      assertNotSame(node1, iIOMetadataNode0);
      assertSame(node1, node0);
      assertFalse(iIOMetadataNode0.equals((Object)node1));
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode0.equals((Object)node0));
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertFalse(node0.equals((Object)iIOMetadataNode0));
      assertFalse(node1.equals((Object)iIOMetadataNode0));
      assertNotNull(nodeListIterator0);
      
      Integer integer0 = new Integer(3848);
      assertEquals(3848, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("\"=ei&WF4M");
      assertNotNull(transformer0);
      
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertNotNull(singletonListIterator0);
      
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) singletonListIterator0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertFalse(boolean0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("bpN4&|C;]&8B4q9", "", 0);
      assertEquals("bpN4&|C;]&8B4q9", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: bpN4&|C;]&8B4q9", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransientConnectionException0);
      assertNotNull(mockThrowable0);
      
      sQLTransientConnectionException0.addSuppressed(mockThrowable0);
      assertEquals("bpN4&|C;]&8B4q9", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: bpN4&|C;]&8B4q9", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLTransientConnectionException: bpN4&|C;]&8B4q9", mockThrowable0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: bpN4&|C;]&8B4q9", mockThrowable0.getMessage());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)sQLTransientConnectionException0.fillInStackTrace();
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertEquals("bpN4&|C;]&8B4q9", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: bpN4&|C;]&8B4q9", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException1.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("bpN4&|C;]&8B4q9", sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: bpN4&|C;]&8B4q9", sQLTransientConnectionException1.toString());
      assertNotNull(sQLTransientConnectionException1);
      
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertEquals("bpN4&|C;]&8B4q9", sQLTransientConnectionException0.getMessage());
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: bpN4&|C;]&8B4q9", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      ArrayDeque<SQLRecoverableException> arrayDeque0 = new ArrayDeque<SQLRecoverableException>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(resettableIterator0);
      
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0, (Predicate<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(equalPredicate0);
      
      Transformer<Object, BatchUpdateException> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Iterator<SQLRecoverableException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      SQLDataException sQLDataException0 = new SQLDataException("j3", "mdbu");
      assertEquals("java.sql.SQLDataException: j3", sQLDataException0.toString());
      assertEquals("j3", sQLDataException0.getMessage());
      assertEquals("mdbu", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      boolean boolean0 = stack0.add(sQLDataException0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[java.sql.SQLDataException: j3]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("java.sql.SQLDataException: j3", sQLDataException0.toString());
      assertEquals("j3", sQLDataException0.getMessage());
      assertEquals("mdbu", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertTrue(stack0.contains(sQLDataException0));
      
      ListIterator<Vector<SQLDataException>> listIterator0 = IteratorUtils.singletonListIterator((Vector<SQLDataException>) stack0);
      assertFalse(stack0.isEmpty());
      assertEquals("[java.sql.SQLDataException: j3]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(stack0.contains(sQLDataException0));
      assertNotNull(listIterator0);
      
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLDataException0);
      assertEquals("java.sql.SQLDataException: j3", sQLDataException0.toString());
      assertEquals("j3", sQLDataException0.getMessage());
      assertEquals("mdbu", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLRecoverableException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      assertEquals("java.sql.SQLDataException: j3", sQLDataException0.toString());
      assertEquals("j3", sQLDataException0.getMessage());
      assertEquals("mdbu", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(predicate0);
      
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      assertEquals("java.sql.SQLDataException: j3", sQLDataException0.toString());
      assertEquals("j3", sQLDataException0.getMessage());
      assertEquals("mdbu", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(orPredicate0);
      
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) orPredicate0);
      assertEquals("java.sql.SQLDataException: j3", sQLDataException0.toString());
      assertEquals("j3", sQLDataException0.getMessage());
      assertEquals("mdbu", sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) predicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      String string0 = "";
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1073741824;
      intArray0[2] = 1074;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-395);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      assertEquals("", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<EnumSet<Locale.Category>>) null, (-395));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -395
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Enumeration<SQLDataException> enumeration0 = stack0.elements();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(enumeration0);
      
      Stream<SQLDataException> stream0 = stack0.stream();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stream0);
      
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(iterator0);
      
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(0, int0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("", sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      int int0 = (-2264);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLWarning0, (-2264));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 2);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) comparator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MapIterator<LinkedList<String>, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashSet<BatchUpdateException> hashSet0 = new HashSet<BatchUpdateException>(493);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (-2487L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("rO>t!ZU");
      assertNotNull(iIOMetadataNode0);
      
      boolean boolean0 = iIOMetadataNode0.isSupported("", "");
      assertFalse(boolean0);
      
      boolean boolean1 = linkedHashSet0.add(iIOMetadataNode0);
      assertTrue(boolean1);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains(iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("]Q</UDc^[5tNsaD");
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      boolean boolean2 = linkedHashSet0.add(iIOMetadataNode1);
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertTrue(boolean2);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(linkedHashSet0.contains(iIOMetadataNode0));
      
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(iIOMetadataNode0));
      assertNotNull(resettableIterator0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(iIOMetadataNode0));
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "S#V A\\CkVyH";
      String string1 = "nf$$`z.laIp";
      String string2 = "E&v";
      String string3 = "";
      String string4 = "]";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("E&v", "]");
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: E&v", sQLTransactionRollbackException0.toString());
      assertEquals("]", sQLTransactionRollbackException0.getSQLState());
      assertEquals("E&v", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 0, sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: E&v", sQLTransactionRollbackException0.toString());
      assertEquals("]", sQLTransactionRollbackException0.getSQLState());
      assertEquals("E&v", sQLTransactionRollbackException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("E&v", "nf$$`z.laIp", 4073, sQLNonTransientConnectionException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: E&v", sQLTransactionRollbackException0.toString());
      assertEquals("]", sQLTransactionRollbackException0.getSQLState());
      assertEquals("E&v", sQLTransactionRollbackException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: E&v", sQLTransactionRollbackException1.toString());
      assertEquals(4073, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("nf$$`z.laIp", sQLTransactionRollbackException1.getSQLState());
      assertEquals("E&v", sQLTransactionRollbackException1.getMessage());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertNotNull(sQLTransactionRollbackException1);
      
      SQLException sQLException0 = new SQLException("nf$$`z.laIp", "", sQLTransactionRollbackException1);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: E&v", sQLTransactionRollbackException0.toString());
      assertEquals("]", sQLTransactionRollbackException0.getSQLState());
      assertEquals("E&v", sQLTransactionRollbackException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: E&v", sQLTransactionRollbackException1.toString());
      assertEquals(4073, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("nf$$`z.laIp", sQLTransactionRollbackException1.getSQLState());
      assertEquals("E&v", sQLTransactionRollbackException1.getMessage());
      assertEquals("nf$$`z.laIp", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: nf$$`z.laIp", sQLException0.toString());
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertNotNull(sQLException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("S#V ACkVyH", "", 44, sQLException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: E&v", sQLTransactionRollbackException0.toString());
      assertEquals("]", sQLTransactionRollbackException0.getSQLState());
      assertEquals("E&v", sQLTransactionRollbackException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: E&v", sQLTransactionRollbackException1.toString());
      assertEquals(4073, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("nf$$`z.laIp", sQLTransactionRollbackException1.getSQLState());
      assertEquals("E&v", sQLTransactionRollbackException1.getMessage());
      assertEquals("nf$$`z.laIp", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: nf$$`z.laIp", sQLException0.toString());
      assertEquals("S#V ACkVyH", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(44, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: S#V ACkVyH", sQLInvalidAuthorizationSpecException0.toString());
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "\"t)pUI(9v_o";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "\"t)pUI(9v_o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertNotNull(reverseListIterator0);
      
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) reverseListIterator0, 979L);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertNotNull(skippingIterator0);
      
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) skippingIterator0, (Iterator<? extends SQLRecoverableException>) skippingIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) reverseListIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertNotNull(enumeration0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (Throwable) null);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLNonTransientConnectionException: ", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("", "tL+|N,nj;", 0, batchUpdateException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLNonTransientConnectionException: ", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("tL+|N,nj;", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((String) null, "", sQLDataException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLNonTransientConnectionException: ", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("tL+|N,nj;", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "", (-1174), sQLNonTransientConnectionException1);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLNonTransientConnectionException: ", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("tL+|N,nj;", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals((-1174), sQLSyntaxErrorException0.getErrorCode());
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLSyntaxErrorException0);
      
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLNonTransientConnectionException: ", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("tL+|N,nj;", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals((-1174), sQLSyntaxErrorException0.getErrorCode());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(singletonListIterator0);
      
      Predicate<SQLNonTransientException> predicate0 = NullPredicate.nullPredicate();
      assertNotNull(predicate0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = IteratorUtils.find((Iterator<SQLSyntaxErrorException>) singletonListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLNonTransientConnectionException: ", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("tL+|N,nj;", sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals((-1174), sQLSyntaxErrorException0.getErrorCode());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNull(sQLSyntaxErrorException1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      Iterator<SQLRecoverableException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("bI<mEh^vWdn", "bI<mEh^vWdn");
      assertEquals("java.sql.SQLWarning: bI<mEh^vWdn", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("bI<mEh^vWdn", sQLWarning0.getMessage());
      assertEquals("bI<mEh^vWdn", sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Transformer<Object, BatchUpdateException> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Transformer<Object, BatchUpdateException> transformer1 = ConstantTransformer.nullTransformer();
      assertFalse(transformer1.equals((Object)transformer0));
      assertNotNull(transformer1);
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) transformer1, (Equator<Object>) null);
      assertFalse(transformer1.equals((Object)transformer0));
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      assertFalse(transformer1.equals((Object)transformer0));
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = (-1742);
      Predicate<Object> predicate2 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      assertFalse(transformer0.equals((Object)transformer1));
      assertFalse(transformer1.equals((Object)transformer0));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      Predicate<SQLException> predicate3 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) predicate1);
      assertFalse(transformer1.equals((Object)transformer0));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = IteratorUtils.find((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate1);
      assertFalse(transformer1.equals((Object)transformer0));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertNull(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>) resettableIterator0, (Iterator<?>) resettableIterator0);
      assertNotNull(iterator0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) resettableIterator0, comparator0);
      assertNotNull(predicate0);
      
      Object object0 = IteratorUtils.find(iterator0, (Predicate<? super Object>) predicate0);
      assertNull(object0);
      
      Iterator<SQLRecoverableException> iterator1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(equalPredicate0);
      
      Transformer<Object, BatchUpdateException> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Transformer<Object, BatchUpdateException> transformer1 = ConstantTransformer.nullTransformer();
      assertFalse(transformer1.equals((Object)transformer0));
      assertNotNull(transformer1);
      
      Transformer<Object, BatchUpdateException> transformer2 = IfTransformer.ifTransformer((Predicate<? super Object>) equalPredicate0, (Transformer<? super Object, ? extends BatchUpdateException>) transformer0, (Transformer<? super Object, ? extends BatchUpdateException>) transformer1);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertFalse(transformer0.equals((Object)transformer1));
      assertFalse(transformer1.equals((Object)transformer0));
      assertFalse(transformer2.equals((Object)transformer1));
      assertFalse(transformer2.equals((Object)transformer0));
      assertNotNull(transformer2);
      
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer2, (Predicate<? super Object>) equalPredicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertFalse(transformer0.equals((Object)transformer1));
      assertFalse(transformer0.equals((Object)transformer2));
      assertFalse(transformer1.equals((Object)transformer0));
      assertFalse(transformer1.equals((Object)transformer2));
      assertFalse(transformer2.equals((Object)transformer1));
      assertFalse(transformer2.equals((Object)transformer0));
      assertNotNull(predicate0);
      
      Predicate<SQLException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) predicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertFalse(transformer0.equals((Object)transformer1));
      assertFalse(transformer0.equals((Object)transformer2));
      assertFalse(transformer1.equals((Object)transformer0));
      assertFalse(transformer1.equals((Object)transformer2));
      assertFalse(transformer2.equals((Object)transformer1));
      assertFalse(transformer2.equals((Object)transformer0));
      assertNotNull(predicate1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = IteratorUtils.find((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate1);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertFalse(transformer0.equals((Object)transformer1));
      assertFalse(transformer0.equals((Object)transformer2));
      assertFalse(transformer1.equals((Object)transformer0));
      assertFalse(transformer1.equals((Object)transformer2));
      assertFalse(transformer2.equals((Object)transformer1));
      assertFalse(transformer2.equals((Object)transformer0));
      assertNull(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", 476);
      sQLSyntaxErrorException0.spliterator();
      sQLSyntaxErrorException0.spliterator();
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.spliterator();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", 0, sQLSyntaxErrorException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("pSvs/", "zX;L", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("pSvs/", "O]6w'~f9p!TcT`", 476, sQLNonTransientConnectionException3);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("org.apache.commons.collections4.IteratorUtils", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 9);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 476;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("pSvs/", "", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0, 2016, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      ArrayListIterator<SQLClientInfoException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLClientInfoException>(resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, SQLDataException>) orderedMapIterator0);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-951));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(500);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-951));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1611));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-791));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-791));
      integerArray0[8] = integer8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, (-791), 900);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      String string0 = "Transformer must not be null";
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("Transformer must not be null");
      String string1 = "prefix may not be null";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) constantTransformer0, "Transformer must not be null", (String) null, "prefix may not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLWarning sQLWarning0 = new SQLWarning("", "Couldn't get the node: index (", (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLWarning0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, "Couldn't get the node: index (");
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>((String) null);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "gL5id}xCh[e`9?H");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException((String) null);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("MapIterator[]", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException(sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException(".%-/I'Av", "", (-2196));
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("MapIterator[]", (Throwable) null);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) objectArrayIterator0, (Transformer<? super SQLSyntaxErrorException, String>) constantTransformer0, "m%)Rxxk", ".%-/I'Av", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("Transformer must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Transformer<? super SQLSyntaxErrorException, String>) constantTransformer0, "Transformer must not be null", (String) null, "prefix may not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("lqi<N&^isBhr>x$R", "!B-");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Node must not be null", "!B-", 0, sQLNonTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException((String) null, "!B-");
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) stack0);
      IteratorUtils.emptyListIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      DefaultEquator.defaultEquator();
      ExceptionTransformer.exceptionTransformer();
      ConstantTransformer.nullTransformer();
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(vector0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) loopingListIterator0, 125);
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(vector0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", 476);
      sQLSyntaxErrorException0.spliterator();
      sQLSyntaxErrorException0.spliterator();
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.spliterator();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", 0, sQLSyntaxErrorException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      DefaultEquator.defaultEquator();
      ExceptionTransformer.exceptionTransformer();
      ConstantTransformer.nullTransformer();
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) loopingListIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", 476);
      sQLSyntaxErrorException0.spliterator();
      sQLSyntaxErrorException0.spliterator();
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.spliterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", 840, (Throwable) null);
      ConstantFactory<SQLTransientConnectionException> constantFactory0 = new ConstantFactory<SQLTransientConnectionException>(sQLTransientConnectionException0);
      FactoryTransformer<SQLException, SQLTransientConnectionException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLTransientConnectionException>(constantFactory0);
      IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) factoryTransformer0);
      OrderedMapIterator<SQLSyntaxErrorException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(linkedList0);
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(linkedList0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.IteratorUtils", sQLTransientException0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0, 840);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("Transformer must not be null");
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate1);
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>(iIOMetadataNode0);
      Transformer<Object, IIOMetadataNode> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate2, (Transformer<? super Object, ? extends IIOMetadataNode>) constantTransformer0, (Transformer<? super Object, ? extends IIOMetadataNode>) constantTransformer0);
      IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = null;
      int int0 = 2976;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLInvalidAuthorizationSpecException[]) null, 2976);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Comparator<Object> comparator0 = null;
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) null, (Iterator<? extends Locale.Category>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) iteratorArray0);
      IteratorUtils.toArray(iterator0);
      int int0 = 0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Enumeration must not be null", "58TG3OHZ<u)t!r", 0, (Throwable) null);
      ConstantFactory<SQLTransientConnectionException> constantFactory0 = new ConstantFactory<SQLTransientConnectionException>(sQLTransientConnectionException0);
      FactoryTransformer<SQLException, SQLTransientConnectionException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLTransientConnectionException>(constantFactory0);
      IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) factoryTransformer0);
      OrderedMapIterator<SQLSyntaxErrorException, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      Iterator<IIOMetadataNode>[] iteratorArray1 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 7);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray1[0] = (Iterator<IIOMetadataNode>) resettableListIterator0;
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Iterator<? extends IIOMetadataNode>) iteratorArray1[0]);
      iteratorArray1[1] = (Iterator<IIOMetadataNode>) zippingIterator0;
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(linkedList0);
      iteratorArray1[2] = (Iterator<IIOMetadataNode>) loopingListIterator0;
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(linkedList0);
      iteratorArray1[3] = (Iterator<IIOMetadataNode>) reverseListIterator0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Enumeration must not be null", (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 5);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyMapIterator();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<BatchUpdateException>) resettableListIterator0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) listIterator0;
      objectArray0[1] = (Object) listIterator0;
      objectArray0[2] = (Object) resettableListIterator0;
      objectArray0[3] = (Object) listIterator0;
      objectArray0[4] = (Object) listIterator0;
      ObjectArrayListIterator<Object> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0, 32, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("|&G", "8&.x1");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLTimeoutException0);
      sQLTransientException0.setNextException(sQLTimeoutException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("M%(M8vXnVTyah_k", "M%(M8vXnVTyah_k", "NodeList must not be null", 1);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("|&G", "U2^nQ{a|gIL/=14X\"", "|&G", (-1624));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("M%(M8vXnVTyah_k", "org.apache.commons.collections4.IteratorUtils", "|&G", (-1624));
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLTransientException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientException0, (-5127));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
