/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 09:13:36 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("@W(@PJi%c^=", "@W(@PJi%c^=", 1347);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("@W(@PJi%c^=", "@W(@PJi%c^=");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("@W(@PJi%c^=", (String) null, 1347, sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("@W(@PJi%c^=", "@W(@PJi%c^=", sQLRecoverableException2);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("m]}", "+K]#suVkVu>4Yna{", 1347);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException4;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 4);
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableListIterator0, class0);
      IteratorUtils.pushbackIterator((Iterator<?>) orderedIterator0);
      Iterator<ClientInfoStatus>[] iteratorArray0 = (Iterator<ClientInfoStatus>[]) Array.newInstance(Iterator.class, 7);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.singletonListIterator(clientInfoStatus0);
      iteratorArray0[0] = (Iterator<ClientInfoStatus>) listIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) clientInfoStatus0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IteratorUtils.get((Iterator<SQLTransactionRollbackException>) singletonIterator0, 0);
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 5);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class3;
      Class<SQLIntegrityConstraintViolationException> class4 = SQLIntegrityConstraintViolationException.class;
      classArray0[4] = class4;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("M?L.e", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Properties>) objectArrayListIterator0, (Transformer<? super Properties, String>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'M?L.e' on 'class java.util.Properties' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<?> iterator0 = IteratorUtils.getIterator("2`H !.");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) allPredicate0, (Predicate<? super Object>) allPredicate0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate1);
      predicateArray0[0] = (Predicate<Object>) nullIsFalsePredicate0;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException0);
      Factory<SQLFeatureNotSupportedException> factory0 = ConstantFactory.constantFactory(sQLFeatureNotSupportedException0);
      FactoryTransformer<Object, SQLFeatureNotSupportedException> factoryTransformer0 = new FactoryTransformer<Object, SQLFeatureNotSupportedException>(factory0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(factoryTransformer0, predicate0);
      predicateArray0[1] = (Predicate<Object>) transformedPredicate0;
      Predicate<Object> predicate2 = TruePredicate.truePredicate();
      predicateArray0[2] = predicate2;
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      Predicate<Object> predicate3 = NullPredicate.nullPredicate();
      predicateArray0[4] = predicate3;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<HashSet<PriorityQueue>>) iterator0, (Predicate<? super HashSet<PriorityQueue>>) anyPredicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLDataException sQLDataException0 = new SQLDataException("", "", (-3271));
      sQLDataExceptionArray0[0] = sQLDataException0;
      String string0 = "<Y`U3Qb6cE}";
      SQLDataException sQLDataException1 = new SQLDataException("<Y`U3Qb6cE}", "<Y`U3Qb6cE}", (-3271));
      sQLDataExceptionArray0[1] = sQLDataException1;
      String string1 = "";
      SQLDataException sQLDataException2 = new SQLDataException("", "", sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("", "", sQLDataException2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Sg";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) sQLDataException1;
      objectArray0[3] = (Object) sQLDataException2;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "Sg", objectArray0);
      sQLDataException1.printStackTrace(printWriter0);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException();
      sQLDataExceptionArray0[4] = sQLDataException4;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLDataException>) objectArrayIterator0, 0L);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) skippingIterator0);
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(list0);
      IteratorUtils.size(loopingListIterator0);
      int int0 = 1774;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(string0, string1, int0);
      int int1 = 28;
      int int2 = (-144);
      ArrayIterator<BatchUpdateException> arrayIterator0 = new ArrayIterator<BatchUpdateException>(sQLSyntaxErrorException0, int1, int2);
      long long0 = (-793L);
      IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) arrayIterator0, long0);
      IteratorUtils.toArray((Iterator<?>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("!_");
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<StringTokenizer> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) listIterator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) iterator0);
      IteratorUtils.find(iterator1, (Predicate<? super StringTokenizer>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.contains((Iterator<IIOMetadataNode>) orderedMapIterator0, (Object) orderedMapIterator0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) orderedMapIterator1, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 21;
      intArray0[2] = (-2111);
      intArray0[3] = (-2166);
      intArray0[4] = 28;
      intArray0[5] = (-2377);
      intArray0[6] = (-114);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("65uH)R", "m", intArray0);
      Class<SQLSyntaxErrorException>[] classArray0 = (Class<SQLSyntaxErrorException>[]) Array.newInstance(Class.class, 0);
      Transformer<BatchUpdateException, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("h*Job^%T82fXx", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) iterator0, 1499);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'h*Job^%T82fXx' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("waD&/-XLR|{}");
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 9);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      classArray0[4] = class4;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      classArray0[5] = class5;
      Class<SQLClientInfoException> class6 = SQLClientInfoException.class;
      classArray0[6] = class6;
      Class<SQLClientInfoException> class7 = SQLClientInfoException.class;
      classArray0[7] = class7;
      Class<SQLClientInfoException> class8 = SQLClientInfoException.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<Object, IIOMetadataNode>("waD&/-XLR|{}", classArray0, classArray0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) invokerTransformer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("waD&/-XLR|{}", "t#GwgZliotDw", (-1049));
      // Undeclared exception!
      try { 
        IteratorUtils.contains(iterator0, (Object) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'waD&/-XLR|{}' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null, false);
      IteratorUtils.get((Iterator<SQLTransactionRollbackException>) singletonIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.getIterator("a");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("a");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLFeatureNotSupportedException0);
      IteratorUtils.singletonIterator(sQLClientInfoException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("a");
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 6);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class3;
      Class<SQLIntegrityConstraintViolationException> class4 = SQLIntegrityConstraintViolationException.class;
      classArray0[4] = class4;
      Class<SQLIntegrityConstraintViolationException> class5 = SQLIntegrityConstraintViolationException.class;
      classArray0[5] = class5;
      InvokerTransformer<Object, IIOMetadataNode> invokerTransformer0 = new InvokerTransformer<Object, IIOMetadataNode>("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", classArray0, classArray0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonIterator0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0, (Collection<? super Locale.FilteringMode>) arrayDeque0);
      IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) singletonIterator0, (Iterator<? extends Locale.FilteringMode>) iterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("E,zhkXt", (Throwable) null);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstantiateFactory<SQLSyntaxErrorException> instantiateFactory0 = new InstantiateFactory<SQLSyntaxErrorException>(class0);
      FactoryTransformer<Object, SQLSyntaxErrorException> factoryTransformer0 = new FactoryTransformer<Object, SQLSyntaxErrorException>(instantiateFactory0);
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) factoryTransformer0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAny(iterator1, (Predicate<? super SQLSyntaxErrorException>) uniquePredicate0);
      IteratorUtils.toArray(iterator1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IteratorUtils.emptyIterator();
      MapIterator<SQLDataException, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      IteratorUtils.emptyListIterator();
      Class<SQLDataException> class1 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) mapIterator0, class1);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      DataTruncation dataTruncation0 = new DataTruncation(60, false, false, 2174, 60);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(2, false, false, 60, 5);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(2174, true, true, (-1), 0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(2854, true, false, 1319, 2, dataTruncation1);
      dataTruncationArray0[3] = dataTruncation3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstantiateFactory<SQLSyntaxErrorException> instantiateFactory0 = new InstantiateFactory<SQLSyntaxErrorException>(class0);
      FactoryTransformer<Object, SQLSyntaxErrorException> factoryTransformer0 = new FactoryTransformer<Object, SQLSyntaxErrorException>(instantiateFactory0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("3E=(n(~");
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) factoryTransformer0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NullIsTruePredicate<SQLNonTransientException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLNonTransientException>(predicate0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(instantiateFactory0, defaultEquator0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
      Iterator<Predicate<Object>>[] iteratorArray0 = (Iterator<Predicate<Object>>[]) Array.newInstance(Iterator.class, 1);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Iterator<Predicate<Object>> iterator1 = linkedList0.iterator();
      Iterator<Predicate<Object>> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends Predicate<Object>>) iterator1, (Iterator<? extends Predicate<Object>>) iterator1);
      Iterator<Predicate<Object>> iterator3 = IteratorUtils.peekingIterator((Iterator<? extends Predicate<Object>>) iterator2);
      iteratorArray0[0] = iterator3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iteratorArray0, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Hashtable<BatchUpdateException, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<BatchUpdateException, SQLFeatureNotSupportedException>();
      Enumeration<BatchUpdateException> enumeration0 = hashtable0.keys();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(hashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLDataException>) loopingIterator0, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Hashtable<BatchUpdateException, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<BatchUpdateException, SQLFeatureNotSupportedException>();
      Enumeration<BatchUpdateException> enumeration0 = hashtable0.keys();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("L 9waA?2^\"M0-", "L 9waA?2^\"M0-");
      IteratorUtils.getIterator(stringTokenizer0);
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 2);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      Enumeration<SQLTimeoutException> enumeration0 = stack0.elements();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) stack0);
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) iterator0);
      iteratorArray0[0] = iterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Hashtable<BatchUpdateException, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<BatchUpdateException, SQLFeatureNotSupportedException>();
      Enumeration<BatchUpdateException> enumeration0 = hashtable0.keys();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2202;
      Throwable throwable0 = null;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      BiFunction<Object, SQLException, SQLFeatureNotSupportedException> biFunction0 = (BiFunction<Object, SQLException, SQLFeatureNotSupportedException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any(java.sql.SQLException.class));
      hashtable0.compute(batchUpdateException0, biFunction0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("vJQSE_Y5W(0", "vJQSE_Y5W(0", intArray0, batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      hashtable0.put(batchUpdateException1, sQLFeatureNotSupportedException0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) iterator0, class0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 9);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Hashtable<Boolean, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<Boolean, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<Boolean, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<Boolean, SQLFeatureNotSupportedException>(hashtable0);
      IteratorUtils.apply((Iterator<Boolean>) entrySetMapIterator0, (Closure<? super Boolean>) closure0);
      IteratorUtils.apply((Iterator<StringTokenizer>) null, (Closure<? super StringTokenizer>) closure0);
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLTransientException>) orderedIterator0);
      LinkedList<SQLNonTransientException>[] linkedListArray0 = (LinkedList<SQLNonTransientException>[]) Array.newInstance(LinkedList.class, 9);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLNonTransientException> linkedList1 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLNonTransientException> linkedList2 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[2] = linkedList2;
      LinkedList<SQLNonTransientException> linkedList3 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[3] = linkedList3;
      LinkedList<SQLNonTransientException> linkedList4 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[4] = linkedList4;
      LinkedList<SQLNonTransientException> linkedList5 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[5] = linkedList5;
      LinkedList<SQLNonTransientException> linkedList6 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[6] = linkedList6;
      LinkedList<SQLNonTransientException> linkedList7 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[7] = linkedList7;
      LinkedList<SQLNonTransientException> linkedList8 = new LinkedList<SQLNonTransientException>();
      linkedListArray0[8] = linkedList8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(linkedListArray0, 1654, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.contains((Iterator<IIOMetadataNode>) orderedMapIterator0, (Object) orderedMapIterator0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstantiateFactory<SQLSyntaxErrorException> instantiateFactory0 = new InstantiateFactory<SQLSyntaxErrorException>(class0);
      FactoryTransformer<Object, SQLSyntaxErrorException> factoryTransformer0 = new FactoryTransformer<Object, SQLSyntaxErrorException>(instantiateFactory0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(")Ew5");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(")Ew5", "=!SwG", sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "V#Zb", 100, sQLFeatureNotSupportedException0);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException((String) null, "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", (-1));
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("M,@Gli(JX$%Le=");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("", (String) null);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLRecoverableException3);
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException(sQLIntegrityConstraintViolationException0);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      sQLRecoverableExceptionArray0[6] = sQLRecoverableExceptionArray0[1];
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("M,@Gli(JX$%Le=", ")Ew5");
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException("", sQLRecoverableException6);
      sQLRecoverableExceptionArray0[8] = sQLRecoverableException7;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1), 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      String string0 = "Ik?En^[DD5b3il!5==";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Ik?En^[DD5b3il!5==", "Ik?En^[DD5b3il!5==");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Ik?En^[DD5b3il!5==", "Ik?En^[DD5b3il!5==", sQLNonTransientConnectionException0);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Hashtable<BatchUpdateException, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<BatchUpdateException, SQLFeatureNotSupportedException>();
      hashtable0.keys();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(arrayList0);
      IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) loopingIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("I)_3VGn`Yk5gbP5nr");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("I)_3VGn`Yk5gbP5nr", "I)_3VGn`Yk5gbP5nr");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException((String) null, (String) null, 21);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("Transformer must not be null", "Transformer must not be null");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("I)_3VGn`Yk5gbP5nr", "qy#C^LB-", 433, sQLRecoverableException1);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      sQLRecoverableException4.getSuppressed();
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      IteratorUtils.getIterator("Transformer must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Hashtable<BatchUpdateException, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<BatchUpdateException, SQLFeatureNotSupportedException>();
      IdentityPredicate.identityPredicate("Node must not be null");
      IteratorUtils.getIterator(hashtable0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLInvalidAuthorizationSpecException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "Oxd[U~UQKl9)_]ho", (-502), sQLTransactionRollbackException0);
      SQLWarning sQLWarning0 = new SQLWarning("The type to check instanceof must not be null");
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator((SQLException) sQLTimeoutException0);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      predicateArray0[1] = predicate1;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLTransactionRollbackException0);
      predicateArray0[2] = (Predicate<Object>) identityPredicate0;
      Predicate<Object> predicate2 = IdentityPredicate.identityPredicate((Object) listIterator0);
      predicateArray0[3] = predicate2;
      Predicate<Object> predicate3 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      predicateArray0[4] = predicate3;
      Predicate<Object> predicate4 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      predicateArray0[5] = predicate4;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate5 = ComparatorPredicate.comparatorPredicate((Object) sQLTimeoutException0, comparator0);
      predicateArray0[6] = predicate5;
      Predicate<Object> predicate6 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      linkedHashSet0.add(predicate6);
      Predicate<Object> predicate7 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.matchesAll((Iterator<SQLException>) listIterator0, (Predicate<? super SQLException>) predicate7);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Hashtable<BatchUpdateException, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<BatchUpdateException, SQLFeatureNotSupportedException>();
      Enumeration<BatchUpdateException> enumeration0 = hashtable0.keys();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) iterator0, class0);
      Boolean[] booleanArray0 = new Boolean[1];
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(iterator0);
      PredicateTransformer<StringTokenizer> predicateTransformer0 = new PredicateTransformer<StringTokenizer>(identityPredicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("5>}1N+Kht_KJ3_");
      Boolean boolean0 = predicateTransformer0.transform(stringTokenizer0);
      booleanArray0[0] = boolean0;
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0);
      IteratorUtils.matchesAll((Iterator<Boolean>) objectArrayListIterator0, (Predicate<? super Boolean>) identityPredicate0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Iterator<Locale.FilteringMode> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Locale.FilteringMode>) null, 1073741824);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(orderedMapIterator0);
      Factory<DataTruncation> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLException> factoryTransformer0 = new FactoryTransformer<Object, SQLException>(factory0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(factoryTransformer0, equalPredicate0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("j+ Ji=9To\"N$IS5", "j+ Ji=9To\"N$IS5", (-1989), sQLNonTransientException0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator((SQLException) sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLException>) listIterator0, (Predicate<? super SQLException>) transformedPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      NOPClosure.nopClosure();
      Hashtable<Boolean, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<Boolean, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<Boolean, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<Boolean, SQLFeatureNotSupportedException>(hashtable0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLInvalidAuthorizationSpecException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "~>PM9%j51", 1496, sQLNonTransientException0);
      SQLWarning sQLWarning0 = new SQLWarning("CL/H_5|[6H;n?d");
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator((SQLException) sQLWarning0);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      IteratorUtils.matchesAll((Iterator<SQLException>) listIterator0, (Predicate<? super SQLException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Iterator<Predicate<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(orderedIterator0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, equalPredicate0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("YC?AT@Ksk/6Z#yaVzWU", "YC?AT@Ksk/6Z#yaVzWU", 1496, sQLTransactionRollbackException0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator((SQLException) sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLException>) listIterator0, (Predicate<? super SQLException>) transformedPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformedPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Hashtable<Boolean, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<Boolean, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<Boolean, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<Boolean, SQLFeatureNotSupportedException>(hashtable0);
      IteratorUtils.apply((Iterator<Boolean>) entrySetMapIterator0, (Closure<? super Boolean>) closure0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 2054);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator0);
      Iterator<SQLWarning> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLWarning, String>) null, "E,zhkXt", "Hmv/NOB", "Hmv/NOB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0, false);
      IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonIterator0);
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0, (Collection<? super Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, 10);
      assertNotNull(list0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) list0, (Equator<Object>) null);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, true);
      Object object0 = new Object();
      SQLDataException sQLDataException0 = new SQLDataException("nV}Wt53nV7)Um", (Throwable) null);
      IteratorUtils.getIterator(sQLDataException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      List<SQLTransactionRollbackException> list1 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) listIterator0, 10);
      ReverseListIterator<SQLTransactionRollbackException> reverseListIterator0 = new ReverseListIterator<SQLTransactionRollbackException>(list1);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) reverseListIterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) reverseListIterator0);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MapIterator<SQLException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(mapIterator0);
      IdentityPredicate.identityPredicate("");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MapIterator<SQLException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(mapIterator0);
      IdentityPredicate.identityPredicate("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Q,^q", ",AL~D!IsYV", sQLInvalidAuthorizationSpecException0);
      SQLWarning sQLWarning0 = new SQLWarning("", "", 1319, sQLTimeoutException0);
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.singletonListIterator(sQLWarning0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(equalPredicate0, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) listIterator0, (Transformer<? super SQLWarning, String>) ifTransformer0, ",AL~D!IsYV", "", "Estimated size must be greater than 0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0, true);
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0, (Collection<? super Locale.FilteringMode>) arrayDeque0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) singletonIterator0, (Iterator<? extends Locale.FilteringMode>) singletonIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Z5)CzRv`)$WFC`&b", (Throwable) null);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("E,zhkXt", "E,zhkXt");
      ConstantTransformer.constantTransformer(sQLSyntaxErrorException0);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) singletonListIterator0);
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(list0);
      OrderedMapIterator<SQLRecoverableException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) null, (Transformer<? super SQLWarning, String>) transformer0, "0(wQ", (String) null, "0(wQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MapIterator<SQLException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIterator<SQLWarning> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLWarning>) listIterator0, (Transformer<? super SQLWarning, String>) transformer0, "Node must not be null", "MM+yLM> N+*h", "MM+yLM> N+*h");
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      int int0 = 10;
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, 10);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) list0, (Equator<Object>) null);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, true);
      Hashtable<Boolean, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<Boolean, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<Boolean, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<Boolean, SQLFeatureNotSupportedException>(hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0, true);
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0, (Collection<? super Locale.FilteringMode>) arrayDeque0);
      IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) singletonIterator0, (Iterator<? extends Locale.FilteringMode>) singletonIterator0);
      String string0 = "Z5)CzRv`)$WFC`&b";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Z5)CzRv`)$WFC`&b", (Throwable) null);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstantiateFactory<SQLSyntaxErrorException> instantiateFactory0 = new InstantiateFactory<SQLSyntaxErrorException>(class0);
      FactoryTransformer<Object, SQLSyntaxErrorException> factoryTransformer0 = new FactoryTransformer<Object, SQLSyntaxErrorException>(instantiateFactory0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) factoryTransformer0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      IteratorUtils.toArray(iterator0);
      IteratorUtils.emptyIterator();
      EmptyMapIterator.emptyMapIterator();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 14, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MapIterator<SQLException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLException>) mapIterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Hashtable<BatchUpdateException, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<BatchUpdateException, SQLFeatureNotSupportedException>();
      Hashtable<BatchUpdateException, SQLFeatureNotSupportedException> hashtable1 = new Hashtable<BatchUpdateException, SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Enumeration<BatchUpdateException> enumeration0 = hashtable1.keys();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) loopingListIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "E,zhkXt";
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0, (Collection<? super Locale.FilteringMode>) arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) singletonIterator0, (Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, 0L);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.isEmpty(iterator0);
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      ConstantTransformer.nullTransformer();
      NotNullPredicate.notNullPredicate();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0, false);
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      Iterator<Locale.FilteringMode> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0, (Collection<? super Locale.FilteringMode>) vector0);
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) iterator1, 512);
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Locale.FilteringMode>) resettableListIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) iterator1, (Iterator<? extends Locale.FilteringMode>) listIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MapIterator<SQLException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(mapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("e/ ;o]lv#fy3gwA");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("e/ ;o]lv#fy3gwA", "", 11, sQLDataException0);
      DefaultEquator<SQLIntegrityConstraintViolationException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(sQLIntegrityConstraintViolationException0, (Equator<SQLIntegrityConstraintViolationException>) defaultEquator0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, equalPredicate0);
      HashMap<Boolean, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Boolean, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<Boolean, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<Boolean, SQLFeatureNotSupportedException>(hashMap0);
      MapIterator<Boolean, SQLFeatureNotSupportedException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<Boolean, SQLFeatureNotSupportedException>) entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Boolean>) mapIterator1, (Closure<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MapIterator<Properties, EnumSet<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", "");
      IteratorUtils.nodeListIterator(nodeList0);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 2);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("NodeList must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString((Iterator<Iterator<PriorityQueue>>) mapIterator0, (Transformer<? super Iterator<PriorityQueue>, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>((Locale.FilteringMode) null);
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0, (Collection<? super Locale.FilteringMode>) arrayDeque0);
      IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyListIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLDataException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      ObjectArrayIterator<Locale.FilteringMode> objectArrayIterator0 = new ObjectArrayIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Predicate<Locale.FilteringMode> predicate0 = IdentityPredicate.identityPredicate(locale_FilteringMode2);
      IteratorUtils.find((Iterator<Locale.FilteringMode>) null, (Predicate<? super Locale.FilteringMode>) predicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("!}DRyk=3(L9");
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0, true);
      IteratorUtils.get((Iterator<SQLTransactionRollbackException>) singletonIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ListIterator<SQLWarning> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLWarning>) listIterator0, (Transformer<? super SQLWarning, String>) transformer0, "f^2>\"Z.", "", "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, 0L);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.isEmpty(iterator0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      Transformer<Object, SQLDataException> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(predicate0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, predicate0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) nullIsExceptionPredicate0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.emptyIterator();
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(stack0);
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) loopingListIterator0, (Predicate<? super BatchUpdateException>) nullIsExceptionPredicate0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("w@T9>HNe__", "");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "w@T9>HNe__", 1);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLWarning sQLWarning0 = new SQLWarning("", "", sQLFeatureNotSupportedException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("66JQ9;qJBY=[w.3M", "", 1, sQLWarning0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("br`/", (String) null);
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException(sQLIntegrityConstraintViolationException0);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      ResettableListIterator<SQLTimeoutException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 1, 1);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) resettableListIterator1, 1);
      IteratorUtils.loopingListIterator(list0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, false);
      IteratorUtils.contains((Iterator<IIOMetadataNode>) singletonIterator0, (Object) "E,zhkXt");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "suffix may not be null");
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNextSibling();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, false);
      IteratorUtils.contains((Iterator<IIOMetadataNode>) singletonIterator0, (Object) iIOMetadataNode0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      StringTokenizer stringTokenizer0 = null;
      try {
        stringTokenizer0 = new StringTokenizer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>((Locale.FilteringMode) null);
      IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[0];
      ObjectArrayIterator<Locale.FilteringMode> objectArrayIterator0 = new ObjectArrayIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Predicate<Locale.FilteringMode> predicate0 = IdentityPredicate.identityPredicate(locale_FilteringMode0);
      IteratorUtils.find((Iterator<Locale.FilteringMode>) singletonListIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) objectArrayIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException0;
      ListIterator<SQLWarning> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = "K6{)fj#m}1H";
      String string1 = "5m]U";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) listIterator0, (Transformer<? super SQLWarning, String>) transformer0, (String) null, "K6{)fj#m}1H", "5m]U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>((Locale.FilteringMode) null);
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0, (Collection<? super Locale.FilteringMode>) arrayDeque0);
      IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyListIterator();
      LinkedList<ClientInfoStatus> linkedList0 = new LinkedList<ClientInfoStatus>();
      ReverseListIterator<ClientInfoStatus> reverseListIterator0 = new ReverseListIterator<ClientInfoStatus>(linkedList0);
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<ClientInfoStatus>) reverseListIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>) listIterator0, (Iterator<? extends ClientInfoStatus>) listIterator0, (Iterator<? extends ClientInfoStatus>) reverseListIterator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>((Locale.FilteringMode) null);
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0, (Collection<? super Locale.FilteringMode>) arrayDeque0);
      SingletonListIterator<Locale.FilteringMode> singletonListIterator1 = new SingletonListIterator<Locale.FilteringMode>((Locale.FilteringMode) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, 0L);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.isEmpty(iterator0);
      IteratorUtils.emptyListIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("VoXbT#%kdr@#JR)(+,", "", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("VoXbT#%kdr@#JR)(+,", "1[\"", 0, (int[]) null, sQLTransactionRollbackException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException1);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      int int0 = (-18);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null, (-18));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      locale_FilteringModeArray0[0] = locale_FilteringMode2;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode4;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      locale_FilteringModeArray0[4] = locale_FilteringMode0;
      ObjectArrayIterator<Locale.FilteringMode> objectArrayIterator0 = new ObjectArrayIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Predicate<Locale.FilteringMode> predicate0 = IdentityPredicate.identityPredicate(locale_FilteringMode5);
      IteratorUtils.find((Iterator<Locale.FilteringMode>) objectArrayIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      OrderedMapIterator<Object, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Object, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, Integer>(orderedMapIterator0);
      IteratorUtils.toString((Iterator<Object>) abstractMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[0];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/1^)WOf|.b[9:'[uVf", "VoXbT#%kdr@#JR)(+,", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 99, intArray0, sQLTransactionRollbackException0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      MapIterator<SQLTransientConnectionException, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientConnectionException>) mapIterator1);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Iterator<Properties> iterator0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MapIterator<Properties, EnumSet<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLDataException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(list0);
      Consumer<SQLNonTransientException> consumer0 = (Consumer<SQLNonTransientException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      OrderedMapIterator<SQLRecoverableException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator0);
      IteratorUtils.isEmpty(reverseListIterator0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      ArrayIterator<SQLNonTransientConnectionException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLNonTransientConnectionException>(sQLInvalidAuthorizationSpecException0, 1130);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[0];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/1^)WOf|.b[9:'[uVf", "VoXbT#%kdr@#JR)(+,", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/1^)WOf|.b[9:'[uVf", "/1^)WOf|.b[9:'[uVf", (-161), intArray0, sQLTransactionRollbackException0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      OrderedMapIterator<SQLDataException, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLFeatureNotSupportedException>(orderedMapIterator0);
      IteratorUtils.isEmpty(listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Hashtable<BatchUpdateException, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<BatchUpdateException, SQLFeatureNotSupportedException>();
      OrderedMapIterator<SQLFeatureNotSupportedException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MapIterator<SQLException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) null);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, false);
      Hashtable<Boolean, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<Boolean, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<Boolean, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<Boolean, SQLFeatureNotSupportedException>(hashtable0);
      OrderedMapIterator<Boolean, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Boolean, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Boolean, SQLFeatureNotSupportedException>(orderedMapIterator0);
      MapIterator<Boolean, SQLFeatureNotSupportedException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<Boolean, SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.apply((Iterator<Boolean>) mapIterator1, (Closure<? super Boolean>) closure0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Gs&%xO", "mKL3+>s+F<{v4");
      IteratorUtils.getIterator(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MapIterator<SQLException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(mapIterator0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, equalPredicate0);
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(equalPredicate0, transformedPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) transformedPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("Predicate must not be null");
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[8];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[6] = locale_FilteringMode6;
      Locale.FilteringMode locale_FilteringMode7 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[7] = locale_FilteringMode7;
      ObjectArrayIterator<Locale.FilteringMode> objectArrayIterator0 = new ObjectArrayIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      Locale.FilteringMode locale_FilteringMode8 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Predicate<Locale.FilteringMode> predicate0 = IdentityPredicate.identityPredicate(locale_FilteringMode8);
      IteratorUtils.find((Iterator<Locale.FilteringMode>) objectArrayIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[8];
      locale_FilteringModeArray0[0] = locale_FilteringMode1;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      locale_FilteringModeArray0[2] = locale_FilteringMode1;
      locale_FilteringModeArray0[3] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode2;
      locale_FilteringModeArray0[5] = locale_FilteringMode0;
      locale_FilteringModeArray0[6] = locale_FilteringMode0;
      locale_FilteringModeArray0[7] = locale_FilteringMode1;
      ObjectArrayIterator<Locale.FilteringMode> objectArrayIterator0 = new ObjectArrayIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      IdentityPredicate.identityPredicate(locale_FilteringMode3);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0, false);
      IteratorUtils.get((Iterator<SQLTransactionRollbackException>) singletonIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((LinkedList<SQLDataException>[]) null, 91, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      IteratorUtils.arrayIterator(objectArray0, 0, 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null, 0, 577);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<SQLDataException, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) mapIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, 10);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) list0, (Equator<Object>) null);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, true);
      Hashtable<Boolean, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<Boolean, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<Boolean, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<Boolean, SQLFeatureNotSupportedException>(hashtable0);
      MapIterator<Boolean, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Boolean, SQLFeatureNotSupportedException>) entrySetMapIterator0);
      IteratorUtils.apply((Iterator<Boolean>) mapIterator0, (Closure<? super Boolean>) closure0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("suffix may not be null", "nNPC!c^.x!d&Rh}");
      IteratorUtils.getIterator(whileClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("Predicate must not be null");
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[8];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) orderedIterator0);
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0, (Collection<? super Locale.FilteringMode>) treeSet0);
      IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) orderedIterator0, (Iterator<? extends Locale.FilteringMode>) orderedIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.emptyListIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      ServiceLoader<DataTruncation> serviceLoader0 = ServiceLoader.load(class0);
      Iterator<DataTruncation> iterator0 = serviceLoader0.iterator();
      Iterator<DataTruncation> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) iterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) iterator1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      Iterator<SQLNonTransientException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) iterator0);
      String string0 = "";
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      IteratorUtils.toString(iterator1, (Transformer<? super SQLNonTransientException, String>) transformer0, "", "", "DS");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLRecoverableException>[] iteratorArray1 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 8);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      int int0 = 0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "DS", 0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("DS", "", 6, sQLClientInfoException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("DS");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException((String) null, sQLRecoverableException1);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ConstantTransformer.nullTransformer();
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("VoXbT#%kdr@#JR)(+,");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate1);
      predicateArray0[1] = predicate2;
      Predicate<Object> predicate3 = FalsePredicate.falsePredicate();
      predicateArray0[2] = predicate3;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      predicateArray0[3] = (Predicate<Object>) nullIsTruePredicate0;
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Predicate<Object> predicate4 = new UniquePredicate<Object>();
      predicateArray0[4] = predicate4;
      Predicate<Object> predicate5 = NotPredicate.notPredicate((Predicate<? super Object>) nullIsTruePredicate0);
      predicateArray0[5] = predicate5;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) anyPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Collection must not be null", "2BOD", 4110);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, true);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, 44);
      OrderedMapIterator<SQLFeatureNotSupportedException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, 2196);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicate0, predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("$7S?c~.", "$7S?c~.");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("&^", sQLTimeoutException0);
      IteratorUtils.singletonIterator(sQLTimeoutException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLRecoverableException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1, (Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MapIterator<SQLException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(mapIterator0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, equalPredicate0);
      IteratorUtils.matchesAll((Iterator<SQLException>) null, (Predicate<? super SQLException>) transformedPredicate0);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      SingletonIterator<PriorityQueue<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<PriorityQueue<SQLClientInfoException>>(priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      IteratorUtils.find((Iterator<Stack<SQLException>>) null, (Predicate<? super Stack<SQLException>>) predicate0);
      IteratorUtils.size((Iterator<?>) null);
      String string0 = "&}rnfY-R|eY^&j";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("&}rnfY-R|eY^&j", "9", 0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0, (long) 0, 1603L);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\"=P*lzyj`tA4Prt'h6", "");
      int int0 = 99;
      ArrayListIterator<SQLInvalidAuthorizationSpecException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLRecoverableException0, 99, 99);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("VoXbT#%kdr@#JR)(+,", "(@=aF+TxS `'Gx", (Throwable) null);
      int[] intArray0 = new int[6];
      intArray0[0] = (-161);
      intArray0[1] = (-148);
      intArray0[2] = (-161);
      intArray0[3] = (-161);
      intArray0[4] = (-1418);
      intArray0[5] = (-161);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("(@=aF+TxS `'Gx", "VoXbT#%kdr@#JR)(+,", (-1418), intArray0, (Throwable) null);
      batchUpdateException0.fillInStackTrace();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      Transformer<SQLTimeoutException, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<SQLTimeoutException>) null, (Transformer<? super SQLTimeoutException, String>) transformer0, "", "aV&{ 6} 5iyjJw[T7A!", "$6s<efVWs6.R$");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Hashtable<BatchUpdateException, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<BatchUpdateException, SQLFeatureNotSupportedException>();
      Enumeration<BatchUpdateException> enumeration0 = hashtable0.keys();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) iterator0, class0);
      ListIterator<SQLWarning> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) listIterator0, (Transformer<? super SQLWarning, String>) transformer0, "]", "]", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) objectArrayListIterator0);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) listIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Closure must not be null", "", 1901);
      DataTruncation dataTruncation0 = new DataTruncation((-60), false, false, 99, 9, sQLTransactionRollbackException0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(list0, comparator0, comparatorPredicate_Criterion0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) comparatorPredicate0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      NullIsFalsePredicate<SQLTransientException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLTransientException>(predicate1);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) listIterator0, (Predicate<? super SQLTransientException>) nullIsFalsePredicate0);
      Transformer<SQLTimeoutException, String> transformer1 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<SQLTimeoutException>) listIterator0, (Transformer<? super SQLTimeoutException, String>) transformer1, "", ", size=", "");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) null, (Collection<? super SQLClientInfoException>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MapIterator<Properties, EnumSet<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) mapIterator0);
      String string0 = "org.apache.commons.collections4.IteratorUtils";
      SQLException sQLException0 = new SQLException("org.apache.commons.collections4.IteratorUtils", "org.apache.cjmmons.collections4.functors.IfTransformer", (-949));
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>((Predicate<? super SQLException>) null, (Predicate<? super SQLException>) null);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = linkedList0.listIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.contains((Iterator<IIOMetadataNode>) orderedMapIterator0, (Object) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0, 2913);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[0];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/1^)WOf|.b[9:'[uVf", "VoXbT#%kdr@#JR)(+,", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/1^)WOf|.b[9:'[uVf", "", (-161), intArray0, sQLTransactionRollbackException0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      OrderedMapIterator<SQLDataException, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLFeatureNotSupportedException>(orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<ClientInfoStatus>) null, 2802L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "VoXbT#%kdr@#JR)(+,";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/1^)WOf|.b[9:'[uVf", "VoXbT#%kdr@#JR)(+,", (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[0];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/1^)WOf|.b[9:'[uVf", "VoXbT#%kdr@#JR)(+,", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/1^)WOf|.b[9:'[uVf", "P", (-161), intArray0, sQLTransactionRollbackException0);
      IteratorUtils.singletonListIterator(batchUpdateException0);
      TruePredicate.truePredicate();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Hashtable<BatchUpdateException, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<BatchUpdateException, SQLFeatureNotSupportedException>();
      Enumeration<BatchUpdateException> enumeration0 = hashtable0.keys();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      String string0 = "<J\"g";
      SQLException sQLException0 = new SQLException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", "<J\"g", 4);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("<'c%'JVj~L", "org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", 1338);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException2;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException1;
      String string1 = "List must not be null";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("List must not be null", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException3;
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException0;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (long) 1338);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) boundedIterator0, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MapIterator<SQLException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = null;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(mapIterator0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, equalPredicate0);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 3);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("r");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("Q1FzgQL0");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("Q1FzgQL0", "Q1FzgQL0");
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException((String) null, "", sQLInvalidAuthorizationSpecException3);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("r", "r", sQLInvalidAuthorizationSpecException3);
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) objectArrayIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 854);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      ResettableListIterator<PriorityQueue<ClientInfoStatus>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<PriorityQueue<ClientInfoStatus>>) resettableListIterator0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(linkedList0);
      loopingIterator0.hasNext();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) loopingIterator0, 667);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1892);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CuL~ h)wkF?)VPF(");
      SQLException sQLException0 = new SQLException("CuL~ h)wkF?)VPF(", "org.pace.commons.collections4.IteratorUtils", 100);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("+hl$nyMI9 Mfv7`", "", (-1671));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException1;
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException1, true);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(arrayList0);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0);
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(arrayList0);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) singletonIterator0, 1320);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>((Locale.FilteringMode) null);
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0, (Collection<? super Locale.FilteringMode>) arrayDeque0);
      Iterator<Locale.FilteringMode> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) iterator1, (-23L), (-23L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, 10);
      OrderedMapIterator<SQLFeatureNotSupportedException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, 10);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, 10);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicate0, predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator1, (Predicate<? super SQLFeatureNotSupportedException>) andPredicate0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) resettableIterator0, class0);
      IteratorUtils.singletonIterator("iZko=&{Po");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>((Locale.FilteringMode) null);
      IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      PriorityQueue<ClientInfoStatus> priorityQueue0 = new PriorityQueue<ClientInfoStatus>();
      PriorityQueue<ClientInfoStatus> priorityQueue1 = new PriorityQueue<ClientInfoStatus>(priorityQueue0);
      SingletonListIterator<PriorityQueue<ClientInfoStatus>> singletonListIterator1 = new SingletonListIterator<PriorityQueue<ClientInfoStatus>>(priorityQueue1);
      IteratorUtils.unmodifiableListIterator((ListIterator<PriorityQueue<ClientInfoStatus>>) singletonListIterator1);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, equalPredicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer(":=kN=%", "1SYf;n~Ls", true);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1242), (-1242));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      int int0 = 10;
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, 10);
      OrderedMapIterator<SQLFeatureNotSupportedException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, 10);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicate0, predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator1, (Predicate<? super SQLFeatureNotSupportedException>) andPredicate0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("7\"~h ig}t/8E@K", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "", sQLIntegrityConstraintViolationException0);
      IteratorUtils.singletonIterator(sQLTimeoutException1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) mapIterator0, 0L);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      IteratorUtils.isEmpty(iterator0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("]", ";+g V'g`u.})", 1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("vAc:", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("]", "", (-1024), sQLTransientConnectionException0);
      IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      Transformer<Object, SQLDataException> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(predicate0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, predicate0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) transformedPredicate0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      List<SQLNonTransientConnectionException> list0 = new Stack<SQLNonTransientConnectionException>();
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("Iterator must not be null", "Iterator must not be null");
      IteratorUtils.nodeListIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      ResettableListIterator<PriorityQueue<ClientInfoStatus>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<PriorityQueue<ClientInfoStatus>> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<PriorityQueue<ClientInfoStatus>>) resettableListIterator0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator1);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, equalPredicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer(":=kN=%", "/", true);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0, (-1242), (-1242));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("E,zhkXt", "E,zhkXt", 10);
      Transformer<SQLNonTransientException, SQLSyntaxErrorException> transformer0 = ConstantTransformer.constantTransformer(sQLSyntaxErrorException0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) list0);
      OrderedMapIterator<SQLRecoverableException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) resettableIterator0;
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      iteratorArray0[3] = iterator0;
      iteratorArray0[4] = (Iterator<SQLSyntaxErrorException>) resettableIterator0;
      iteratorArray0[5] = iterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, 10);
      PriorityQueue<ClientInfoStatus>[] priorityQueueArray0 = (PriorityQueue<ClientInfoStatus>[]) Array.newInstance(PriorityQueue.class, 2);
      PriorityQueue<ClientInfoStatus> priorityQueue0 = new PriorityQueue<ClientInfoStatus>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<ClientInfoStatus> priorityQueue1 = new PriorityQueue<ClientInfoStatus>();
      priorityQueueArray0[1] = priorityQueue1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(priorityQueueArray0, 1555);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLException sQLException0 = new SQLException("CuL~ h)wkF?)VPF(", "org.pace.commons.collections4.IteratorUtils", 100);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("+hl$nyMI9 Mfv7`", "", (-1671));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException1;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException1, true);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 99
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MapIterator<Properties, EnumSet<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) mapIterator0);
      SQLException sQLException0 = new SQLException("org.apache.commons.collections4.IteratorUtils", "org.apache.cjmmons.collections4.functors.IfTransformer", (-949));
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((EnumSet<ClientInfoStatus>[]) null, 123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ServiceLoader<SQLInvalidAuthorizationSpecException>[] serviceLoaderArray0 = (ServiceLoader<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ServiceLoader.class, 6);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.load(class0);
      serviceLoaderArray0[0] = serviceLoader0;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader1 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[1] = serviceLoader1;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader2 = ServiceLoader.load(class1, classLoader0);
      serviceLoaderArray0[2] = serviceLoader2;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader3 = ServiceLoader.load(class0);
      serviceLoaderArray0[3] = serviceLoader3;
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader4 = ServiceLoader.load(class2, classLoader0);
      serviceLoaderArray0[4] = serviceLoader4;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader5 = ServiceLoader.loadInstalled(class1);
      serviceLoaderArray0[5] = serviceLoader5;
      ResettableListIterator<ServiceLoader<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.arrayListIterator(serviceLoaderArray0, 0);
      Vector<Closure<Object>> vector0 = new Vector<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) vector0);
      Closure<Object> closure1 = ForClosure.forClosure(0, (Closure<? super Object>) closure0);
      IteratorUtils.apply((Iterator<ServiceLoader<SQLInvalidAuthorizationSpecException>>) resettableListIterator0, (Closure<? super ServiceLoader<SQLInvalidAuthorizationSpecException>>) closure1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      IteratorUtils.find((Iterator<Stack<SQLException>>) null, (Predicate<? super Stack<SQLException>>) predicate0);
      IteratorUtils.size((Iterator<?>) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("&}rnfY-R|eY^&j", (String) null, sQLFeatureNotSupportedException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "Array class must not be null", 1655, (int[]) null, sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.getLocalizedMessage();
      IteratorUtils.singletonListIterator(batchUpdateException0);
      TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      IteratorUtils.loopingListIterator((List<Boolean>) linkedList0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) linkedList0, (Equator<Object>) defaultEquator0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, true);
      IfClosure<IIOMetadataNode> ifClosure0 = new IfClosure<IIOMetadataNode>(predicate0, closure0, closure0);
      WhileClosure.whileClosure((Predicate<? super IIOMetadataNode>) predicate0, (Closure<? super IIOMetadataNode>) ifClosure0, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "[", (-1));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 5, sQLTransientException0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      Transformer<Object, SQLDataException> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate1;
      predicateArray0[1] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(nonePredicate0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, nullIsExceptionPredicate0);
      OrderedMapIterator<SQLSyntaxErrorException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, SQLClientInfoException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends SQLClientInfoException>) orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLSyntaxErrorException, SQLClientInfoException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLSyntaxErrorException, SQLClientInfoException>(orderedMapIterator1);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) abstractMapIteratorDecorator0, (Predicate<? super SQLSyntaxErrorException>) transformedPredicate0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) nullIsExceptionPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) mapIterator0, 0L);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      IteratorUtils.isEmpty(iterator0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("]", "vAc:", 1);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("vAc:", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.getStackTrace();
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("vAc:", "]", 61, sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException2;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      Transformer<Object, SQLDataException> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(nonePredicate0);
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, nullIsExceptionPredicate0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) transformedPredicate0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[0];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/1^)WOf|.b[9:'[uVf", "VoXbT#%kdr@#JR)(+,", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("/1^)WOf|.b[9:'[uVf", "", (-161), intArray0, sQLTransactionRollbackException0);
      IteratorUtils.singletonListIterator(batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLFeatureNotSupportedException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = new int[0];
      TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException(")_`>}K@a$ig|&B{");
      SQLDataException sQLDataException1 = new SQLDataException(")_`>}K@a$ig|&B{", (String) null, 850, sQLDataException0);
      SQLDataException sQLDataException2 = new SQLDataException(sQLDataException1);
      SQLDataException sQLDataException3 = new SQLDataException("Closure must not be null");
      SQLDataException sQLDataException4 = new SQLDataException(sQLDataException1);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      sQLDataExceptionArray0[0] = sQLDataException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 0, (-161));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      String string0 = "cS^j:DL-f:'c.";
      StringTokenizer stringTokenizer0 = new StringTokenizer("cS^j:DL-f:'c.", "cS^j:DL-f:'c.", false);
      StringTokenizer stringTokenizer1 = new StringTokenizer("+\"L~V{o,y/?", "cS^j:DL-f:'c.", true);
      StringTokenizer stringTokenizer2 = new StringTokenizer("");
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      IteratorUtils.arrayListIterator(stringTokenizerArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends SQLInvalidAuthorizationSpecException>) null, (Transformer<? super Object, ? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Transformers must not be null
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Boolean>) linkedList0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) linkedList0, (Equator<Object>) defaultEquator0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, true);
      IfClosure<IIOMetadataNode> ifClosure0 = new IfClosure<IIOMetadataNode>(predicate0, closure0, closure0);
      WhileClosure.whileClosure((Predicate<? super IIOMetadataNode>) predicate0, (Closure<? super IIOMetadataNode>) ifClosure0, true);
      IteratorUtils.apply((Iterator<Boolean>) resettableListIterator0, (Closure<? super Boolean>) whileClosure0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("suffix may not be null", "nD");
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("P:jU1_Y", "nD", false);
      StringTokenizer stringTokenizer1 = new StringTokenizer("nD");
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[7];
      stringTokenizerArray0[0] = stringTokenizer1;
      stringTokenizerArray0[1] = stringTokenizer0;
      stringTokenizerArray0[2] = stringTokenizer0;
      stringTokenizerArray0[3] = stringTokenizer1;
      stringTokenizerArray0[4] = stringTokenizer0;
      stringTokenizerArray0[5] = stringTokenizer1;
      stringTokenizerArray0[6] = stringTokenizer0;
      IteratorUtils.arrayListIterator(stringTokenizerArray0);
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends SQLInvalidAuthorizationSpecException>) null, (Transformer<? super Object, ? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Transformers must not be null
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MapIterator<SQLException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(mapIterator0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, equalPredicate0);
      IteratorUtils.matchesAll((Iterator<SQLException>) mapIterator0, (Predicate<? super SQLException>) transformedPredicate0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      SQLDataException sQLDataException0 = new SQLDataException("$JS6G~1'4{@z%tG", "$JS6G~1'4{@z%tG", 2596);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator");
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator", "", 2596, sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException(sQLDataException2);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException(" xI>bH4AKD5nDE$<mE");
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException(sQLDataException3);
      sQLDataExceptionArray0[5] = sQLDataException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 2596, 2596);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Boolean>) linkedList0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) linkedList0, (Equator<Object>) defaultEquator0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, true);
      IfClosure<IIOMetadataNode> ifClosure0 = new IfClosure<IIOMetadataNode>(predicate0, closure0, closure0);
      WhileClosure.whileClosure((Predicate<? super IIOMetadataNode>) predicate0, (Closure<? super IIOMetadataNode>) ifClosure0, true);
      IteratorUtils.apply((Iterator<Boolean>) resettableListIterator0, (Closure<? super Boolean>) whileClosure0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("suffix may not be null", "nD");
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("suffix may not be null", "nD", 4);
      Transformer<SQLNonTransientException, SQLSyntaxErrorException> transformer0 = ConstantTransformer.constantTransformer(sQLSyntaxErrorException0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) list0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) arrayDeque0);
      IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) resettableListIterator0);
      HashMap<TreeSet<IIOMetadataNode>, Locale.FilteringMode> hashMap0 = new HashMap<TreeSet<IIOMetadataNode>, Locale.FilteringMode>();
      EntrySetMapIterator<TreeSet<IIOMetadataNode>, Locale.FilteringMode> entrySetMapIterator0 = new EntrySetMapIterator<TreeSet<IIOMetadataNode>, Locale.FilteringMode>(hashMap0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends TreeSet<IIOMetadataNode>, ? extends Locale.FilteringMode>) entrySetMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      OrderedMapIterator<ClientInfoStatus, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<ClientInfoStatus, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ClientInfoStatus, Integer>(orderedMapIterator0);
      Transformer<Object, Predicate<Object>> transformer0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends ClientInfoStatus>) abstractOrderedMapIteratorDecorator0, (Transformer<? super ClientInfoStatus, ? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Predicate<Object> predicate0 = null;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ConstantTransformer<Properties, Locale.FilteringMode> constantTransformer0 = new ConstantTransformer<Properties, Locale.FilteringMode>(locale_FilteringMode0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ConstantTransformer.constantTransformer(sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "E{p@XOxz386m+{'Yy", sQLTimeoutException0);
      ConstantTransformer.constantTransformer(sQLRecoverableException1);
      IfTransformer<Properties, Locale.FilteringMode> ifTransformer0 = new IfTransformer<Properties, Locale.FilteringMode>((Predicate<? super Properties>) null, constantTransformer0, constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) null, (Transformer<? super Properties, ? extends Locale.FilteringMode>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectArrayIterator<Locale.FilteringMode> objectArrayIterator0 = new ObjectArrayIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Predicate<Locale.FilteringMode> predicate0 = IdentityPredicate.identityPredicate(locale_FilteringMode1);
      IteratorUtils.find((Iterator<Locale.FilteringMode>) null, (Predicate<? super Locale.FilteringMode>) predicate0);
      Transformer<Object, SQLDataException> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLDataException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      // Undeclared exception!
      try { 
        AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((EnumSet<Locale.FilteringMode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) singletonListIterator0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 5);
      int int0 = (-3889);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) listIterator0, (-3889));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[9];
      String string0 = "/";
      boolean boolean0 = false;
      StringTokenizer stringTokenizer0 = new StringTokenizer("/", (String) null, false);
      stringTokenizerArray0[0] = stringTokenizer0;
      String string1 = "List must not be null";
      StringTokenizer stringTokenizer1 = new StringTokenizer("", "List must not be null", false);
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("List must not be null", "G9re.HIqy';B");
      stringTokenizerArray0[2] = stringTokenizer2;
      boolean boolean1 = true;
      StringTokenizer stringTokenizer3 = null;
      try {
        stringTokenizer3 = new StringTokenizer((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) orderedIterator0, class0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLTransientException>) orderedIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 2);
      OrderedMapIterator<Integer, LinkedList<SQLTransientConnectionException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<Integer>) orderedMapIterator0;
      Integer integer0 = new Integer(44);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      iteratorArray0[1] = (Iterator<Integer>) singletonListIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 6);
      HashMap<DataTruncation, LinkedHashSet<SQLSyntaxErrorException>> hashMap0 = new HashMap<DataTruncation, LinkedHashSet<SQLSyntaxErrorException>>();
      EntrySetMapIterator<DataTruncation, LinkedHashSet<SQLSyntaxErrorException>> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, LinkedHashSet<SQLSyntaxErrorException>>(hashMap0);
      iteratorArray0[0] = (Iterator<DataTruncation>) entrySetMapIterator0;
      boolean boolean0 = false;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>(1525);
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>(hashtable0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Dd(_%_", hashtable1, sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-2376), false, true, (-2376), 0, sQLClientInfoException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      iteratorArray0[1] = (Iterator<DataTruncation>) listIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      assertNotNull(singletonListIterator0);
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      assertNotNull(enumeration0);
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(locale_FilteringMode0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0, (Collection<? super Locale.FilteringMode>) arrayDeque0);
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains(locale_FilteringMode0));
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<Locale.FilteringMode> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      assertNotNull(iterator1);
      assertFalse(arrayDeque0.contains(locale_FilteringMode0));
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(iterator1.equals((Object)iterator0));
      
      BoundedIterator<Locale.FilteringMode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) iterator1, 0L, 0L);
      assertNotNull(boundedIterator0);
      assertFalse(arrayDeque0.contains(locale_FilteringMode0));
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(iterator1.equals((Object)iterator0));
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      HashMap<Object, Properties> hashMap0 = new HashMap<Object, Properties>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Transformer<Object, Properties> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Properties>) hashMap0);
      assertNotNull(transformer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Iterator<Properties> iterator2 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      assertNotNull(iterator2);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", (String) null);
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "NodeList must not be null", 0, intArray0, sQLRecoverableException0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals(5, intArray0.length);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("NodeList must not be null", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(batchUpdateException1);
      assertEquals(5, intArray0.length);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("NodeList must not be null", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.BatchUpdateException: ", batchUpdateException1.toString());
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", "", intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(batchUpdateException2);
      assertEquals(5, intArray0.length);
      assertEquals("", batchUpdateException2.getSQLState());
      assertEquals("", batchUpdateException2.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException2.toString());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "Closure must not be null", 3025, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(batchUpdateException3);
      assertEquals(5, intArray0.length);
      assertEquals("Closure must not be null", batchUpdateException3.getSQLState());
      assertEquals("", batchUpdateException3.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException3.toString());
      assertEquals(3025, batchUpdateException3.getErrorCode());
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("zI$bQ7sc", intArray0, batchUpdateException3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(batchUpdateException4);
      assertEquals(5, intArray0.length);
      assertEquals("Closure must not be null", batchUpdateException3.getSQLState());
      assertEquals("", batchUpdateException3.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException3.toString());
      assertEquals(3025, batchUpdateException3.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: zI$bQ7sc", batchUpdateException4.toString());
      assertEquals(0, batchUpdateException4.getErrorCode());
      assertEquals("zI$bQ7sc", batchUpdateException4.getMessage());
      assertNull(batchUpdateException4.getSQLState());
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException3));
      
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("j;aFU;A\"u!+G9/]Fya", "", 61, intArray0, batchUpdateException0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(batchUpdateException5);
      assertEquals(5, intArray0.length);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("NodeList must not be null", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("j;aFU;A\"u!+G9/]Fya", batchUpdateException5.getMessage());
      assertEquals("java.sql.BatchUpdateException: j;aFU;A\"u!+G9/]Fya", batchUpdateException5.toString());
      assertEquals(61, batchUpdateException5.getErrorCode());
      assertEquals("", batchUpdateException5.getSQLState());
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException4));
      
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(batchUpdateException6);
      assertEquals(5, intArray0.length);
      assertEquals(0, batchUpdateException6.getErrorCode());
      assertNull(batchUpdateException6.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException6.toString());
      assertNull(batchUpdateException6.getMessage());
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException0));
      
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException("*", intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(batchUpdateException7);
      assertEquals(5, intArray0.length);
      assertEquals(0, batchUpdateException7.getErrorCode());
      assertEquals("*", batchUpdateException7.getMessage());
      assertEquals("java.sql.BatchUpdateException: *", batchUpdateException7.toString());
      assertNull(batchUpdateException7.getSQLState());
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException6));
      
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0);
      assertNotNull(objectArrayIterator0);
      assertEquals(8, batchUpdateExceptionArray0.length);
      assertEquals(8, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      BatchUpdateException[] batchUpdateExceptionArray1 = IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) objectArrayIterator0, class0);
      assertNotNull(batchUpdateExceptionArray1);
      assertEquals(8, batchUpdateExceptionArray1.length);
      assertEquals(8, batchUpdateExceptionArray0.length);
      assertEquals(8, objectArrayIterator0.getEndIndex());
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertNotSame(batchUpdateExceptionArray1, batchUpdateExceptionArray0);
      assertNotSame(batchUpdateExceptionArray0, batchUpdateExceptionArray1);
      assertFalse(batchUpdateExceptionArray1.equals((Object)batchUpdateExceptionArray0));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("d_z'4%vM+IRx", "org.apache.commons.collections4.IteratorUtils");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("d_z'4%vM+IRx", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: d_z'4%vM+IRx", sQLFeatureNotSupportedException0.toString());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.IteratorUtils", "d_z'4%vM+IRx", sQLFeatureNotSupportedException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("d_z'4%vM+IRx", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: d_z'4%vM+IRx", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.IteratorUtils", sQLRecoverableException0.toString());
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLRecoverableException0.getMessage());
      assertEquals("d_z'4%vM+IRx", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>((Locale.FilteringMode) null);
      assertNotNull(singletonListIterator0);
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      assertNotNull(enumeration0);
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[0];
      ObjectArrayIterator<Locale.FilteringMode> objectArrayIterator0 = new ObjectArrayIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      assertNotNull(objectArrayIterator0);
      assertEquals(0, locale_FilteringModeArray0.length);
      assertEquals(0, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertFalse(objectArrayIterator0.hasNext());
      
      DataTruncation dataTruncation0 = new DataTruncation(6, true, true, 1895, 1895);
      assertNotNull(dataTruncation0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      SQLWarning sQLWarning0 = dataTruncation0.getNextWarning();
      assertNull(sQLWarning0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.singletonListIterator((SQLWarning) null);
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      int int0 = dataTruncation0.getDataSize();
      assertEquals(1895, int0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      
      Transformer<SQLWarning, String> transformer0 = InvokerTransformer.invokerTransformer("MM+yLM> N+*h");
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLWarning>) listIterator0, (Transformer<? super SQLWarning, String>) transformer0, "MM+yLM> N+*h", "MM+yLM> N+*h", "xs|o=B^H_Q2");
      assertEquals("MM+yLM> N+*hnullxs|o=B^H_Q2", string0);
      assertNotNull(string0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("org.apache.commons.collections4.map.Flat3Map");
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      iIOMetadataNode1.normalize();
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      int int0 = 0;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0);
      assertNotNull(resettableIterator0);
      assertEquals(2, iIOMetadataNodeArray0.length);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) resettableIterator0);
      assertNotNull(iterator0);
      assertEquals(2, iIOMetadataNodeArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super IIOMetadataNode, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<Properties> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Properties>) resettableIterator0);
      assertNotNull(iterator0);
      
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      int int0 = (-1441);
      Locale.FilteringMode[] locale_FilteringModeArray0 = Locale.FilteringMode.values();
      assertNotNull(locale_FilteringModeArray0);
      assertEquals(5, locale_FilteringModeArray0.length);
      
      int int1 = (-544);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) locale_FilteringMode0, (-1441), (-544));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<Properties> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Properties>) resettableIterator0);
      assertNotNull(iterator0);
      
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = Locale.FilteringMode.values();
      assertNotNull(locale_FilteringModeArray0);
      assertEquals(5, locale_FilteringModeArray0.length);
      
      int int0 = (-544);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) locale_FilteringMode0, (-1441), (-544));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("-#q&mf", "", sQLTimeoutException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("-#q&mf", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: -#q&mf", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("X^>,", "", 0);
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals("X^>,", sQLSyntaxErrorException1.getMessage());
      assertEquals("", sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: X^>,", sQLSyntaxErrorException1.toString());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0, 0, 0);
      assertNotNull(objectArrayListIterator0);
      assertEquals(2, sQLSyntaxErrorExceptionArray0.length);
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasNext());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLSyntaxErrorException1);
      assertNotNull(equalPredicate0);
      assertEquals("X^>,", sQLSyntaxErrorException1.getMessage());
      assertEquals("", sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: X^>,", sQLSyntaxErrorException1.toString());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) equalPredicate0);
      assertNotNull(predicate0);
      assertEquals("X^>,", sQLSyntaxErrorException1.getMessage());
      assertEquals("", sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: X^>,", sQLSyntaxErrorException1.toString());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertNotSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      
      predicateArray0[1] = predicate0;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>("-#q&mf");
      assertNotNull(identityPredicate0);
      
      predicateArray0[2] = (Predicate<Object>) identityPredicate0;
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicateArray0[2]);
      assertNotNull(predicate1);
      assertEquals(4, predicateArray0.length);
      assertNotSame(predicate1, predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      
      predicateArray0[3] = predicate1;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      assertNotNull(nonePredicate0);
      assertEquals(4, predicateArray0.length);
      
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) objectArrayListIterator0, (Predicate<? super SQLSyntaxErrorException>) nonePredicate0);
      assertNotNull(listIterator0);
      assertEquals(2, sQLSyntaxErrorExceptionArray0.length);
      assertEquals(4, predicateArray0.length);
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals(0, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, false);
      assertNotNull(singletonIterator0);
      assertTrue(singletonIterator0.hasNext());
      
      boolean boolean0 = IteratorUtils.contains((Iterator<IIOMetadataNode>) singletonIterator0, (Object) "E,zhkXt");
      assertFalse(boolean0);
      assertFalse(singletonIterator0.hasNext());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("E,zhkXt"));
      assertEquals(0, linkedList0.size());
      
      StringTokenizer stringTokenizer0 = null;
      try {
        stringTokenizer0 = new StringTokenizer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HashMap<IIOMetadataNode, Closure<Object>> hashMap0 = new HashMap<IIOMetadataNode, Closure<Object>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      EntrySetMapIterator<IIOMetadataNode, Closure<Object>> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, Closure<Object>>(hashMap0);
      assertNotNull(entrySetMapIterator0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      MapIterator<Object, Closure<Object>> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<?, ? extends Closure<Object>>) entrySetMapIterator0);
      assertNotNull(mapIterator0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      MapIterator<Object, Closure<Object>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertNotNull(mapIterator1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(mapIterator0, mapIterator1);
      assertSame(mapIterator1, mapIterator0);
      
      OrderedMapIterator<Properties, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) orderedMapIterator0, 1701L);
      assertNotNull(skippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) orderedIterator0);
      assertNotNull(enumeration0);
      
      HashSet<SQLException> hashSet0 = new HashSet<SQLException>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) hashSet0);
      assertNotNull(iterator0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedIterator0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("E,zhkXt", "E,zhkXt", 10);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: E,zhkXt", sQLSyntaxErrorException0.toString());
      assertEquals("E,zhkXt", sQLSyntaxErrorException0.getSQLState());
      assertEquals("E,zhkXt", sQLSyntaxErrorException0.getMessage());
      assertEquals(10, sQLSyntaxErrorException0.getErrorCode());
      
      Transformer<SQLNonTransientException, SQLSyntaxErrorException> transformer0 = ConstantTransformer.constantTransformer(sQLSyntaxErrorException0);
      assertNotNull(transformer0);
      assertEquals("java.sql.SQLSyntaxErrorException: E,zhkXt", sQLSyntaxErrorException0.toString());
      assertEquals("E,zhkXt", sQLSyntaxErrorException0.getSQLState());
      assertEquals("E,zhkXt", sQLSyntaxErrorException0.getMessage());
      assertEquals(10, sQLSyntaxErrorException0.getErrorCode());
      
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      assertNotNull(iterator0);
      assertEquals("java.sql.SQLSyntaxErrorException: E,zhkXt", sQLSyntaxErrorException0.toString());
      assertEquals("E,zhkXt", sQLSyntaxErrorException0.getSQLState());
      assertEquals("E,zhkXt", sQLSyntaxErrorException0.getMessage());
      assertEquals(10, sQLSyntaxErrorException0.getErrorCode());
      
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      assertNotNull(list0);
      assertTrue(list0.contains(sQLSyntaxErrorException0));
      assertEquals("java.sql.SQLSyntaxErrorException: E,zhkXt", sQLSyntaxErrorException0.toString());
      assertEquals("E,zhkXt", sQLSyntaxErrorException0.getSQLState());
      assertEquals("E,zhkXt", sQLSyntaxErrorException0.getMessage());
      assertEquals(10, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) list0);
      assertNotNull(resettableIterator0);
      assertTrue(list0.contains(sQLSyntaxErrorException0));
      assertEquals("java.sql.SQLSyntaxErrorException: E,zhkXt", sQLSyntaxErrorException0.toString());
      assertEquals("E,zhkXt", sQLSyntaxErrorException0.getSQLState());
      assertEquals("E,zhkXt", sQLSyntaxErrorException0.getMessage());
      assertEquals(10, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      OrderedMapIterator<SQLRecoverableException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator0);
      assertNotNull(listIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertTrue(boolean0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException0;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      assertNotNull(resettableIterator0);
      assertEquals(7, sQLFeatureNotSupportedExceptionArray0.length);
      
      Transformer<Object, SQLDataException> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate0);
      
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      assertNotNull(nonePredicate0);
      
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(predicate0);
      assertNotNull(nullIsExceptionPredicate0);
      
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, nullIsExceptionPredicate0);
      assertNotNull(transformedPredicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      assertFalse(boolean0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertNotNull(objectArray0);
      assertEquals(7, sQLFeatureNotSupportedExceptionArray0.length);
      assertEquals(7, objectArray0.length);
      
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator1, 3215);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      OrderedMapIterator<SQLRecoverableException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator0);
      assertNotNull(listIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MapIterator<SQLException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Predicate<String> predicate0 = IdentityPredicate.identityPredicate("B_)8bbh^@");
      assertNotNull(predicate0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      assertNotNull(iterator0);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      LoopingListIterator<Locale.FilteringMode> loopingListIterator0 = new LoopingListIterator<Locale.FilteringMode>(stack0);
      assertNotNull(loopingListIterator0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(loopingListIterator0.hasNext());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      
      Iterator<Locale.FilteringMode> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) null, (Iterator<? extends Locale.FilteringMode>) loopingListIterator0, (Iterator<? extends Locale.FilteringMode>) loopingListIterator0);
      assertNotNull(iterator1);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(loopingListIterator0.hasNext());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) mapIterator0, 0L);
      assertNotNull(skippingIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertTrue(boolean0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("HIv+%$af2;HtX", "#4 `z#<+V*<aI7|)T", 0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("HIv+%$af2;HtX", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("#4 `z#<+V*<aI7|)T", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: HIv+%$af2;HtX", sQLFeatureNotSupportedException0.toString());
      
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("]", "vAc:", 1);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals("vAc:", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ]", sQLFeatureNotSupportedException1.toString());
      assertEquals(1, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("]", sQLFeatureNotSupportedException1.getMessage());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("Aq>97O543`Yf9c8|w", sQLFeatureNotSupportedException1);
      assertNotNull(sQLFeatureNotSupportedException2);
      assertEquals("vAc:", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ]", sQLFeatureNotSupportedException1.toString());
      assertEquals(1, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("]", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("Aq>97O543`Yf9c8|w", sQLFeatureNotSupportedException2.getMessage());
      assertNull(sQLFeatureNotSupportedException2.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Aq>97O543`Yf9c8|w", sQLFeatureNotSupportedException2.toString());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("HIv+%$af2;HtX", "#4 `z#<+V*<aI7|)T", 0);
      assertNotNull(sQLFeatureNotSupportedException3);
      assertEquals("#4 `z#<+V*<aI7|)T", sQLFeatureNotSupportedException3.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException3.getErrorCode());
      assertEquals("HIv+%$af2;HtX", sQLFeatureNotSupportedException3.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: HIv+%$af2;HtX", sQLFeatureNotSupportedException3.toString());
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException3.equals((Object)sQLFeatureNotSupportedException2));
      
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("vAc:", "]", 61, sQLFeatureNotSupportedException2);
      assertNotNull(sQLFeatureNotSupportedException4);
      assertEquals("vAc:", sQLFeatureNotSupportedException4.getMessage());
      assertEquals("]", sQLFeatureNotSupportedException4.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: vAc:", sQLFeatureNotSupportedException4.toString());
      assertEquals(61, sQLFeatureNotSupportedException4.getErrorCode());
      assertEquals("vAc:", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ]", sQLFeatureNotSupportedException1.toString());
      assertEquals(1, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("]", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("Aq>97O543`Yf9c8|w", sQLFeatureNotSupportedException2.getMessage());
      assertNull(sQLFeatureNotSupportedException2.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Aq>97O543`Yf9c8|w", sQLFeatureNotSupportedException2.toString());
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException4.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException2));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException3));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      assertNotNull(resettableIterator0);
      assertEquals(5, sQLFeatureNotSupportedExceptionArray0.length);
      
      Transformer<Object, SQLDataException> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      assertNotNull(nonePredicate0);
      assertEquals(1, predicateArray0.length);
      
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(nonePredicate0);
      assertNotNull(nullIsExceptionPredicate0);
      assertEquals(1, predicateArray0.length);
      
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, nullIsExceptionPredicate0);
      assertNotNull(transformedPredicate0);
      assertEquals(1, predicateArray0.length);
      
      boolean boolean1 = IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) transformedPredicate0);
      assertFalse(boolean1);
      assertEquals(1, predicateArray0.length);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MapIterator<SQLWarning, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLWarning, SQLSyntaxErrorException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertNotNull(mapIterator1);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      int int0 = IteratorUtils.size(mapIterator0);
      assertEquals(0, int0);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      
      String[] stringArray0 = new String[2];
      String string0 = "suffix may not be null";
      stringArray0[0] = "suffix may not be null";
      stringArray0[1] = "DsFu21p-C78IN>'";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      assertNotNull(resettableIterator0);
      assertEquals(2, stringArray0.length);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.IfTransformer", "");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.functors.IfTransformer", sQLNonTransientConnectionException0.toString());
      assertEquals("org.apache.commons.collections4.functors.IfTransformer", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("DsFu21p-C78IN>'", "", sQLNonTransientConnectionException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.commons.collections4.functors.IfTransformer", sQLNonTransientConnectionException0.toString());
      assertEquals("org.apache.commons.collections4.functors.IfTransformer", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: DsFu21p-C78IN>'", sQLTimeoutException0.toString());
      assertEquals("DsFu21p-C78IN>'", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("", sQLTimeoutException0.getSQLState());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 1, (-2745));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "tmFMsRa^U+TCs.Sc0i";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "tmFMsRa^U+TCs.Sc0i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.singletonIterator(locale_FilteringMode0);
      assertNotNull(resettableIterator0);
      
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      assertNotNull(properties1);
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertTrue(properties1.equals((Object)properties0));
      
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      assertNotNull(properties2);
      assertEquals(0, properties2.size());
      assertTrue(properties2.isEmpty());
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      
      propertiesArray0[2] = properties2;
      int int0 = 512;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((HashMap<Properties, IIOMetadataNode>[]) null, 1129, 1129);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTimeoutException0);
      assertNotNull(iterator0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      
      String string0 = "sxZ";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("sxZ", (String) null);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: sxZ", sQLSyntaxErrorException0.toString());
      assertEquals("sxZ", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      sQLTimeoutException0.addSuppressed(sQLSyntaxErrorException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: sxZ", sQLSyntaxErrorException0.toString());
      assertEquals("sxZ", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      Iterator<SQLTransientException> iterator1 = null;
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      String string1 = "org.apache.commons.collections4.iterators.ReverseListIterator";
      MockFile mockFile0 = new MockFile("org.apache.commons.collections4.iterators.ReverseListIterator");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "org.apache.commons.collections4.iterators.ReverseListIterator");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.collections4.iterators.ReverseListIterator
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>((Locale.FilteringMode) null);
      assertNotNull(singletonListIterator0);
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      assertNotNull(enumeration0);
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) enumeration0, (Collection<? super Locale.FilteringMode>) arrayDeque0);
      assertNotNull(iterator0);
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Iterator<Locale.FilteringMode> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Iterator<? extends Locale.FilteringMode>) singletonListIterator0);
      assertNotNull(iterator1);
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(iterator1.equals((Object)iterator0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = Locale.FilteringMode.values();
      assertNotNull(locale_FilteringModeArray0);
      assertEquals(5, locale_FilteringModeArray0.length);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("nD", "suffix may not be null");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("nD", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("suffix may not be null", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: nD", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      Iterator<?> iterator2 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator2);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLNonTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, Object>(orderedMapIterator0);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      MapIterator<SQLInvalidAuthorizationSpecException, Object> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, Object>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 1);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      InvokerTransformer<Object, SQLFeatureNotSupportedException> invokerTransformer0 = new InvokerTransformer<Object, SQLFeatureNotSupportedException>("", classArray0, classArray0);
      assertNotNull(invokerTransformer0);
      assertEquals(1, classArray0.length);
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      Predicate<SQLException> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super SQLException, ? extends SQLException>) invokerTransformer0, (Predicate<? super SQLException>) uniquePredicate0);
      assertNotNull(predicate0);
      assertEquals(1, classArray0.length);
      
      Predicate<SQLException> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) predicate0);
      assertNotNull(predicate1);
      assertEquals(1, classArray0.length);
      assertFalse(predicate1.equals((Object)predicate0));
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate1);
      assertFalse(boolean0);
      assertEquals(1, classArray0.length);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      
      Iterator<Object> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLNonTransientException, ?>) invokerTransformer0);
      assertNotNull(iterator0);
      assertEquals(1, classArray0.length);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      int int0 = 10;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null, 10, (Throwable) null);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(10, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      Iterator<?> iterator1 = IteratorUtils.getIterator(sQLSyntaxErrorException0);
      assertNotNull(iterator1);
      assertEquals(10, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      
      int int1 = 3716;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) classArray0, 10, 3716);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MapIterator<Properties, EnumSet<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) mapIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      SQLException sQLException0 = new SQLException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.functors.IfTransformer", (-949));
      SQLDataException sQLDataException0 = new SQLDataException("", "CuL~ h)wkF?)VPF(", 0, sQLException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("]", sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("]", "", sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null, "", sQLTransientConnectionException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLDataException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "", 9);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException4;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLFeatureNotSupportedException4);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException((String) null, "^X]67hNs0y8qL<JL", 0, sQLTimeoutException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException((String) null, sQLFeatureNotSupportedException4);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("LY2u*lmb", "", 9, sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException7;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException8 = new SQLFeatureNotSupportedException("", "", 0);
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException8;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException9 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[8] = sQLFeatureNotSupportedException9;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (-2401));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -2401
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      ResettableIterator<PriorityQueue<SQLClientInfoException>> resettableIterator0 = IteratorUtils.singletonIterator(priorityQueue0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      Transformer<Object, Properties> transformer0 = ConstantTransformer.constantTransformer(properties0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, (-2986), (-2986));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("u3=9!D)rVD5Hgk");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      sQLWarning0.printStackTrace((PrintWriter) mockPrintWriter0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLWarning0, (-1239), (-1239));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 8);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLClientInfoException>(orderedMapIterator0);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0;
      int int0 = 2325;
      ArrayListIterator<SQLFeatureNotSupportedException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLFeatureNotSupportedException>(abstractOrderedMapIteratorDecorator0, 2325);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.functors.AllPredicate", "", 872);
      DataTruncation dataTruncation0 = new DataTruncation((-2016), true, true, 872, 238, sQLTransientException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(2180, true, true, (-1), 2180);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(872, true, true, 238, 2180);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(2235, true, false, 0, 0);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(91, false, false, 238, 91, dataTruncation2);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(0, true, true, 100, 0);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(0, false, false, 0, (-2016), dataTruncation5);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(2180, true, false, (-2294), (-1));
      dataTruncationArray0[7] = dataTruncation7;
      DataTruncation dataTruncation8 = new DataTruncation(10, true, false, 0, 16);
      dataTruncationArray0[8] = dataTruncation8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 2180, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) iterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((String[]) null, 764);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "m2K=`w( Y(";
      stringArray0[1] = "org.apache.commons.collections4.list.CursorableLinkedList$Cursor";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLSyntaxErrorException[]) null, 4069);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTimeoutException>) resettableListIterator0, 2103);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2103
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }
}
