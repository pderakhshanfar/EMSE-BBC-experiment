/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 11:39:33 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      DataTruncation dataTruncation0 = new DataTruncation(10, false, false, 600, (-1));
      dataTruncationArray0[0] = dataTruncation0;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(factory0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) factoryTransformer0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) listIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 4);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>(987);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) priorityQueue0);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) resettableIterator0;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[5];
      SQLException sQLException0 = new SQLException("h'LYye$Ih&s+l", "+FSwm<Trdf@", 987);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("h'LYye$Ih&s+l", sQLException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("+FSwm<Trdf@", "T)E0k7`d;v<", 987);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLRecoverableException1);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("+FSwm<Trdf@", sQLException0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      iteratorArray0[1] = (Iterator<SQLRecoverableException>) resettableListIterator0;
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[2] = (Iterator<SQLRecoverableException>) orderedIterator0;
      ResettableIterator<SQLRecoverableException> resettableIterator1 = IteratorUtils.emptyIterator();
      iteratorArray0[3] = (Iterator<SQLRecoverableException>) resettableIterator1;
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 2);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("T)E0k7`d;v<", (Class<?>[]) classArray0, (Object[]) classArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Predicate<SQLException> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) zippingIterator0, (Predicate<? super SQLRecoverableException>) predicate2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'T)E0k7`d;v<' on 'class java.sql.SQLRecoverableException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Predicate must not be null");
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, 0);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("4fsSWdmEV02r[[;C&B");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLRecoverableException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("suffix may not be null", "suffix may not be null", sQLTransientConnectionException0);
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("zZ0]vyq67,[x`7", (Class<?>[]) null, (Object[]) null);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'zZ0]vyq67,[x`7' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("uiE3", "");
      linkedHashSet0.add(sQLRecoverableException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) linkedHashSet0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableIterator0, 32);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 1, 1, (Throwable) null);
      dataTruncationArray0[0] = dataTruncation0;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0, 1);
      IteratorUtils.toList((Iterator<? extends SQLWarning>) resettableListIterator0, 1);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLClientInfoException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, 0);
      ArrayDeque<SQLTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 8);
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLTransientConnectionException> arrayDeque1 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<SQLTransientConnectionException> arrayDeque2 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<SQLTransientConnectionException> arrayDeque3 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<SQLTransientConnectionException> arrayDeque4 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<SQLTransientConnectionException> arrayDeque5 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[5] = arrayDeque5;
      ArrayDeque<SQLTransientConnectionException> arrayDeque6 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDequeArray0[6] = arrayDeque6;
      ArrayDeque<SQLTransientConnectionException> arrayDeque7 = new ArrayDeque<SQLTransientConnectionException>();
      arrayDeque7.removeAll(arrayDeque5);
      arrayDequeArray0[7] = arrayDeque7;
      IteratorUtils.arrayIterator(arrayDequeArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toString((Iterator<ServiceLoader<Hashtable>>) mapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[]");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      NonePredicate<SQLException> nonePredicate0 = new NonePredicate<SQLException>((Predicate<? super SQLException>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLNonTransientConnectionException>) resettableIterator0, (Predicate<? super SQLNonTransientConnectionException>) nonePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null);
      IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) iterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.getIterator("");
      Stack<String> stack0 = new Stack<String>();
      stack0.add((String) null);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(stack0);
      // Undeclared exception!
      IteratorUtils.size(loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      StringTokenizer stringTokenizer0 = new StringTokenizer("Pg?J()5l?6t+]X", "");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<Object> enumeration0 = IteratorUtils.asEnumeration((Iterator<?>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      OrPredicate<IIOMetadataNode> orPredicate0 = new OrPredicate<IIOMetadataNode>(predicate0, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) orPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      IteratorUtils.emptyIterator();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (-1), intArray0, sQLInvalidAuthorizationSpecException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) singletonIterator0, (Transformer<? super BatchUpdateException, ? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 8);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLTransientConnectionException> class2 = SQLTransientConnectionException.class;
      classArray0[2] = class2;
      Class<SQLTransientConnectionException> class3 = SQLTransientConnectionException.class;
      classArray0[3] = class3;
      Class<SQLTransientConnectionException> class4 = SQLTransientConnectionException.class;
      classArray0[4] = class4;
      Class<SQLTransientConnectionException> class5 = SQLTransientConnectionException.class;
      classArray0[5] = class5;
      Class<SQLTransientConnectionException> class6 = SQLTransientConnectionException.class;
      classArray0[6] = class6;
      Class<SQLTransientConnectionException> class7 = SQLTransientConnectionException.class;
      classArray0[7] = class7;
      InvokerTransformer<Object, SQLIntegrityConstraintViolationException> invokerTransformer0 = new InvokerTransformer<Object, SQLIntegrityConstraintViolationException>("* IFeS[", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) null, (Transformer<? super BatchUpdateException, ? extends SQLIntegrityConstraintViolationException>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", hashMap0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLClientInfoException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.getIterator(resettableIterator0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) treeSet0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = InvokerTransformer.invokerTransformer("2v<nyv#3|$#");
      IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) resettableIterator1, (Transformer<? super BatchUpdateException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator1, 8);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) list0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("2v<nyv#3|$#", (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("remove() method is not supported", sQLTransientConnectionException0);
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) null, (Predicate<? super SQLRecoverableException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.getIterator(resettableIterator0);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) treeSet0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = InvokerTransformer.invokerTransformer("2v<nyv#3|$#");
      IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) resettableIterator1, (Transformer<? super BatchUpdateException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      String string0 = null;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, 1770, sQLNonTransientException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("2v<nyv#3|$#");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("bG,JIuH{|+vGAc]v", (String) null, 104, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0, (-47), 1359);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      int int0 = 599;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 599);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("8 G5Jc~", "8 G5Jc~");
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("8 G5Jc~", "", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException(">a59RT6w# ");
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException((String) null, "8nuxD7:zJ/Fz", (-1493), sQLFeatureNotSupportedException5);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) objectArrayListIterator0);
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator1 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      // Undeclared exception!
      try { 
        objectArrayListIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IteratorUtils.getIterator("~(");
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableIterator0);
      ResettableIterator<IIOMetadataNode> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableIterator1, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      SQLException[] sQLExceptionArray0 = new SQLException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", (String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "org.apache.commons.collections4.map.Flat3Map$KeySetIterator", sQLSyntaxErrorException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", "NodeList must not be null", (-1), sQLTimeoutException0);
      sQLExceptionArray0[0] = (SQLException) sQLTimeoutException1;
      ObjectArrayIterator<SQLException> objectArrayIterator0 = new ObjectArrayIterator<SQLException>(sQLExceptionArray0);
      IteratorUtils.isEmpty(objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[6];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[4] = clientInfoStatus4;
      ClientInfoStatus clientInfoStatus5 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[5] = clientInfoStatus5;
      ObjectArrayIterator<ClientInfoStatus> objectArrayIterator0 = new ObjectArrayIterator<ClientInfoStatus>(clientInfoStatusArray0);
      Predicate<ClientInfoStatus> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) objectArrayIterator0, (Predicate<? super ClientInfoStatus>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, String>) transformer0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null, (Collection<? super SQLNonTransientConnectionException>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OrderedIterator<Iterator<TreeSet<Properties>>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends Iterator<TreeSet<Properties>>>) orderedIterator0);
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      Enumeration<SQLTransactionRollbackException> enumeration0 = stack0.elements();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      OrderedMapIterator<SQLDataException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(factory0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TransformerPredicate<SQLDataException> transformerPredicate0 = new TransformerPredicate<SQLDataException>(factoryTransformer0);
      IteratorUtils.find((Iterator<SQLDataException>) orderedMapIterator0, (Predicate<? super SQLDataException>) transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 2196);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      IteratorUtils.getIterator("a");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 1);
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<Integer>) resettableIterator0;
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) iteratorArray0);
      IteratorUtils.toString(iterator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      ExceptionTransformer.exceptionTransformer();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("elementsToSkip parameter must not be negative.");
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.size(listIterator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "-;f|8f'wh{+e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      EmptyListIterator.resettableEmptyListIterator();
      ConstantTransformer.constantTransformer((StringTokenizer) null);
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>((StringTokenizer) null);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      IteratorUtils.matchesAny((Iterator<StringTokenizer>) singletonIterator0, (Predicate<? super StringTokenizer>) nullIsTruePredicate0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Iterator<DataTruncation> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableListIterator0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) equalPredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator1, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      Properties properties0 = new Properties();
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) properties0, (Transformer<? super Object, ?>) null);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super Object>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAll((Iterator<TreeSet<HashMap>>) iterator0, (Predicate<? super TreeSet<HashMap>>) predicate1);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[5];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ak$JuV_GQ+", "PD\u0006g%Vw~lj", 715);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", ",CuE<*\")3sW% j ax", 715, sQLTimeoutException0);
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("ak$JuV_GQ+", sQLTransientException0);
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTimeoutException1;
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("ak$JuV_GQ+", "6qA7r8A", sQLDataException0);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("eB", sQLDataException0);
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTimeoutException3;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("PD\u0006g%Vw~lj", sQLTimeoutException1);
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransactionRollbackException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientExceptionArray0, 312, 312);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      EmptyListIterator.resettableEmptyListIterator();
      ConstantTransformer.constantTransformer((StringTokenizer) null);
      Iterator<StringTokenizer> iterator0 = new SingletonIterator<StringTokenizer>((StringTokenizer) null);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAny(iterator0, (Predicate<? super StringTokenizer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      ExceptionTransformer.exceptionTransformer();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-2459), false, false, (-2459), (-338), sQLSyntaxErrorException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1076, false, false, (-2459), (-2459), sQLSyntaxErrorException0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-338), true, false, 1076, 1076);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-338), true, true, 1076, (-2459));
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-2459), true, true, 1076, (-338), dataTruncation1);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(786, true, true, (-338), 44);
      dataTruncationArray0[5] = dataTruncation5;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) objectArrayIterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, String>) transformer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Integer integer0 = new Integer(2346);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      IteratorUtils.toList((Iterator<?>) resettableIterator0, 205);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 167;
      Integer integer0 = new Integer(167);
      IteratorUtils.getIterator(integer0);
      Comparator<Object> comparator0 = null;
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) resettableListIterator0, (Equator<Object>) defaultEquator0);
      IteratorUtils.filteredIterator((Iterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      OnePredicate.onePredicate((Predicate<? super ClientInfoStatus>[]) predicateArray0);
      ExceptionClosure.exceptionClosure();
      EntrySetMapIterator<SQLClientInfoException, SQLClientInfoException> entrySetMapIterator0 = null;
      try {
        entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, SQLClientInfoException>((Map<SQLClientInfoException, SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("M#R VTI");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("M#R VTI");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredIterator(iterator0, (Predicate<? super Object>) uniquePredicate0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 6);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, (int) 46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      EmptyIterator.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K#WRzqL");
      IteratorUtils.getIterator("G");
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      DataTruncation dataTruncation0 = new DataTruncation(1068, false, false, 1068, 750);
      SQLDataException sQLDataException0 = new SQLDataException("G", dataTruncation0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("er", "K#WRzqL", 0, dataTruncation0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException(sQLDataException1);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("K#WRzqL");
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("");
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("G");
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("er", "%ZuGr@ 7");
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException("%ZuGr@ 7", "^N%d88^K8G}1Oy", (-2664), sQLDataException2);
      sQLDataExceptionArray0[7] = sQLDataException7;
      IteratorUtils.arrayIterator(sQLDataExceptionArray0, 0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ListIterator<LinkedList<String>> listIterator0 = EmptyListIterator.emptyListIterator();
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends LinkedList<String>>) listIterator0, (Predicate<? super LinkedList<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      EmptyListIterator.resettableEmptyListIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("$x&q0;=&;@w");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLTransientException0, comparator0, comparatorPredicate_Criterion0);
      comparatorPredicate0.evaluate((Object) null);
      IteratorUtils.matchesAll((Iterator<Object>) null, (Predicate<? super Object>) comparatorPredicate0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[0] = predicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.matchesAll((Iterator<PriorityQueue<SQLFeatureNotSupportedException>>) null, (Predicate<? super PriorityQueue<SQLFeatureNotSupportedException>>) allPredicate0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("PvZe]:");
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueue0.add(sQLNonTransientConnectionException0);
      SingletonListIterator<PriorityQueue<SQLNonTransientConnectionException>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<SQLNonTransientConnectionException>>((PriorityQueue<SQLNonTransientConnectionException>) null);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      IteratorUtils.find((Iterator<PriorityQueue<SQLNonTransientConnectionException>>) singletonListIterator0, (Predicate<? super PriorityQueue<SQLNonTransientConnectionException>>) identityPredicate0);
      SQLWarning sQLWarning0 = new SQLWarning("fW=xS5C5LTXwhslN3Ha", "fW=xS5C5LTXwhslN3Ha", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 507, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Hashtable<ClientInfoStatus, ComparatorPredicate.Criterion> hashtable0 = new Hashtable<ClientInfoStatus, ComparatorPredicate.Criterion>();
      EntrySetMapIterator<ClientInfoStatus, ComparatorPredicate.Criterion> entrySetMapIterator0 = new EntrySetMapIterator<ClientInfoStatus, ComparatorPredicate.Criterion>(hashtable0);
      IteratorUtils.peekingIterator((Iterator<? extends ClientInfoStatus>) entrySetMapIterator0);
      Closure<ClientInfoStatus> closure0 = ExceptionClosure.exceptionClosure();
      int int0 = 1107;
      ForClosure.forClosure(1107, (Closure<? super ClientInfoStatus>) null);
      IteratorUtils.apply((Iterator<ClientInfoStatus>) entrySetMapIterator0, (Closure<? super ClientInfoStatus>) closure0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.IteratorUtils", "C,P", 2);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      int int1 = 93;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, 93);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 92
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) listIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, (String) null, "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      Transformer<SQLClientInfoException, String> transformer0 = ConstantTransformer.constantTransformer("VN`zfr 3Fi$");
      IteratorUtils.toString((Iterator<SQLClientInfoException>) singletonIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "f:/*^E^il6GE&H", "j-rn{1[v8N 6C", ":(S2L;#K}CG&");
      ExceptionClosure.exceptionClosure();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) loopingIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      int int0 = 750;
      DataTruncation dataTruncation0 = new DataTruncation((-1962), true, true, (-1962), 750);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) singletonListIterator0, (Transformer<? super DataTruncation, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, String>) transformer0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableListIterator0, 5);
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) iterator0);
      IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) list0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) null, 2709, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLNonTransientConnectionException>();
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue2 = new PriorityQueue<SQLNonTransientConnectionException>(arrayList0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue3 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue4 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException>[] priorityQueueArray0 = (PriorityQueue<SQLNonTransientConnectionException>[]) Array.newInstance(PriorityQueue.class, 4);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("PvZe]:");
      priorityQueue2.add(sQLNonTransientConnectionException0);
      priorityQueueArray0[0] = priorityQueue4;
      priorityQueueArray0[1] = priorityQueue0;
      priorityQueueArray0[2] = priorityQueue2;
      ResettableListIterator<PriorityQueue<SQLNonTransientConnectionException>> resettableListIterator0 = new SingletonListIterator<PriorityQueue<SQLNonTransientConnectionException>>(priorityQueue2);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(arrayList0);
      IteratorUtils.find((Iterator<PriorityQueue<SQLNonTransientConnectionException>>) resettableListIterator0, (Predicate<? super PriorityQueue<SQLNonTransientConnectionException>>) identityPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 10, (-2749));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      ConstantTransformer.constantTransformer("9;");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) singletonIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "9;", "9;", "9;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<BatchUpdateException, ServiceLoader<Stack>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) mapIterator0);
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(list0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) loopingIterator0, (Iterator<? extends BatchUpdateException>) mapIterator0);
      SkippingIterator<BatchUpdateException> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 0L);
      IteratorUtils.toString((Iterator<BatchUpdateException>) skippingIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "", "", "IX*wNTM|8C_");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<SQLClientInfoException, String> transformer0 = ConstantTransformer.constantTransformer("9;");
      IteratorUtils.toString((Iterator<SQLClientInfoException>) resettableIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "9;", "9;", "9;");
      IteratorUtils.emptyOrderedMapIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator1);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("9;");
      ExceptionTransformer.exceptionTransformer();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Transformer<SQLClientInfoException, String> transformer0 = new ConstantTransformer<SQLClientInfoException, String>((String) null);
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      LoopingIterator<SQLClientInfoException> loopingIterator0 = new LoopingIterator<SQLClientInfoException>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) loopingIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "5cU6ShAX9iNE OMF~", (String) null, "7E>&u<py");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>(treeSet0);
      Closure<ClientInfoStatus> closure0 = ForClosure.forClosure((-505), (Closure<? super ClientInfoStatus>) null);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[5];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[3] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[4] = clientInfoStatus3;
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.arrayListIterator(clientInfoStatusArray0, 4);
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) resettableListIterator0);
      TreeSet<ClientInfoStatus> treeSet1 = new TreeSet<ClientInfoStatus>();
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) treeSet1);
      Iterator<ClientInfoStatus> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends ClientInfoStatus>) iterator0);
      IteratorUtils.apply(iterator1, (Closure<? super ClientInfoStatus>) closure0);
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLNonTransientConnectionException>((Collection<? extends SQLNonTransientConnectionException>) priorityQueue0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue2 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue3 = new PriorityQueue<SQLNonTransientConnectionException>();
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((PriorityQueue<SQLNonTransientConnectionException>[]) null, 0, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>(treeSet0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Closure<ClientInfoStatus> closure0 = ForClosure.forClosure((-505), (Closure<? super ClientInfoStatus>) null);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[5];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      clientInfoStatusArray0[2] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[4] = clientInfoStatus2;
      ForClosure.forClosure(1, (Closure<? super ClientInfoStatus>) closure0);
      IteratorUtils.apply((Iterator<ClientInfoStatus>) null, (Closure<? super ClientInfoStatus>) closure0);
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLDataException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Predicate<SQLTransientConnectionException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      Closure<ClientInfoStatus> closure0 = ExceptionClosure.exceptionClosure();
      Closure<ClientInfoStatus> closure1 = ForClosure.forClosure(100, (Closure<? super ClientInfoStatus>) closure0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) closure1, (Equator<Object>) defaultEquator0);
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super Object>) predicate0);
      OrderedIterator<ClientInfoStatus> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[5] = predicate1;
      Predicate<ClientInfoStatus> predicate2 = OnePredicate.onePredicate((Predicate<? super ClientInfoStatus>[]) predicateArray0);
      IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) orderedIterator0, (Predicate<? super ClientInfoStatus>) predicate2);
      IteratorUtils.peekingIterator((Iterator<? extends ClientInfoStatus>) orderedIterator0);
      Closure<ClientInfoStatus> closure2 = ExceptionClosure.exceptionClosure();
      Closure<ClientInfoStatus> closure3 = ForClosure.forClosure(100, (Closure<? super ClientInfoStatus>) closure2);
      IteratorUtils.apply((Iterator<ClientInfoStatus>) orderedIterator0, (Closure<? super ClientInfoStatus>) closure3);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>(treeSet0);
      Closure<ClientInfoStatus> closure0 = ForClosure.forClosure((-505), (Closure<? super ClientInfoStatus>) null);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[5];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[4] = clientInfoStatus4;
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.arrayListIterator(clientInfoStatusArray0, 4);
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) resettableListIterator0);
      TreeSet<ClientInfoStatus> treeSet1 = new TreeSet<ClientInfoStatus>();
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) treeSet1);
      Iterator<ClientInfoStatus> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends ClientInfoStatus>) iterator0);
      IteratorUtils.apply(iterator1, (Closure<? super ClientInfoStatus>) closure0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      Closure<ClientInfoStatus> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure.forClosure(100, (Closure<? super ClientInfoStatus>) closure0);
      ListIterator<ClientInfoStatus> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends ClientInfoStatus>) listIterator0, (Predicate<? super ClientInfoStatus>) predicate1);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      ForClosure.forClosure(100, (Closure<? super ClientInfoStatus>) closure0);
      IteratorUtils.apply((Iterator<ClientInfoStatus>) listIterator0, (Closure<? super ClientInfoStatus>) closure0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      Closure<Object> closure1 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<Vector<LinkedHashSet>>) listIterator0, (Closure<? super Vector<LinkedHashSet>>) closure1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, 0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableListIterator0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) equalPredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator1, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) resettableListIterator1);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Predicate<Object> predicate0 = null;
      ResettableIterator<Object> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue2 = new PriorityQueue<SQLNonTransientConnectionException>();
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue3 = new PriorityQueue<SQLNonTransientConnectionException>(arrayList0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue4 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue5 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException>[] priorityQueueArray0 = (PriorityQueue<SQLNonTransientConnectionException>[]) Array.newInstance(PriorityQueue.class, 4);
      priorityQueueArray0[0] = priorityQueue5;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      iIOMetadataNodeArray0[4] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[6] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      iIOMetadataNodeArray0[7] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode();
      iIOMetadataNodeArray0[8] = iIOMetadataNode7;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.contains((Iterator<IIOMetadataNode>) resettableListIterator0, (Object) iIOMetadataNode4);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) priorityQueue5, 1, 1494);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ListIterator<LinkedList<String>> listIterator0 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      assertNotNull(allPredicate0);
      
      ListIterator<LinkedList<String>> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends LinkedList<String>>) listIterator0, (Predicate<? super LinkedList<String>>) allPredicate0);
      assertNotNull(listIterator1);
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      
      OrderedMapIterator<String, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, IIOMetadataNode>(orderedMapIterator0);
      IteratorUtils.toListIterator((Iterator<? extends String>) abstractOrderedMapIteratorDecorator0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue2 = new PriorityQueue<SQLNonTransientConnectionException>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(vector0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) reverseListIterator0);
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) listIterator0, (Iterator<? extends DataTruncation>) listIterator0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(priorityQueue1);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) equalPredicate0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator1, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) iterator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, String>) transformer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[]");
      IteratorUtils.toList((Iterator<?>) resettableListIterator0, 3079);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>(3079);
      ResettableListIterator<SQLException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLException>) arrayList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLException>) resettableListIterator1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, 0L);
      IteratorUtils.emptyMapIterator();
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[9];
      StringTokenizer stringTokenizer0 = new StringTokenizer("8Lp1oJmVdTGm_K");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("Ff8WJ.T5");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("Ff8WJ.T5");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("Ff8WJ.T5", "Ff8WJ.T5");
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("8Lp1oJmVdTGm_K", "Ff8WJ.T5");
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("Iterator must not be null");
      stringTokenizerArray0[5] = stringTokenizer5;
      StringTokenizer stringTokenizer6 = new StringTokenizer("Ff8WJ.T5", "Q'`vfEhR^IaV<");
      stringTokenizerArray0[6] = stringTokenizer6;
      StringTokenizer stringTokenizer7 = new StringTokenizer("8Lp1oJmVdTGm_K", "j]KKm%b|=lppM", true);
      stringTokenizerArray0[7] = stringTokenizer7;
      String string0 = "$\"}n039x}5h5fH)\\u";
      StringTokenizer stringTokenizer8 = new StringTokenizer(string0);
      stringTokenizerArray0[8] = stringTokenizer8;
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) resettableIterator0);
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 1L);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) skippingIterator0);
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) listIterator0);
      IteratorUtils.loopingListIterator(list0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ListIterator<ClientInfoStatus> listIterator0 = EmptyListIterator.emptyListIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedMapIterator<Integer, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      BoundedIterator<Integer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Integer>) orderedMapIterator0, 1757L, 1757L);
      IteratorUtils.asIterable((Iterator<? extends Integer>) boundedIterator0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends ClientInfoStatus>) listIterator0);
      Closure<ClientInfoStatus> closure0 = ExceptionClosure.exceptionClosure();
      Closure<ClientInfoStatus> closure1 = ForClosure.forClosure(10, (Closure<? super ClientInfoStatus>) closure0);
      IteratorUtils.apply(iterator0, (Closure<? super ClientInfoStatus>) closure1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      Closure<ClientInfoStatus> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure.forClosure(100, (Closure<? super ClientInfoStatus>) closure0);
      ListIterator<ClientInfoStatus> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends ClientInfoStatus>) listIterator0, (Predicate<? super ClientInfoStatus>) predicate1);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator1, (Iterator<? extends BatchUpdateException>) resettableListIterator1);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("BVzEP08VG");
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Hashtable<ClientInfoStatus, ComparatorPredicate.Criterion> hashtable0 = new Hashtable<ClientInfoStatus, ComparatorPredicate.Criterion>();
      EntrySetMapIterator<ClientInfoStatus, ComparatorPredicate.Criterion> entrySetMapIterator0 = new EntrySetMapIterator<ClientInfoStatus, ComparatorPredicate.Criterion>(hashtable0);
      IteratorUtils.peekingIterator((Iterator<? extends ClientInfoStatus>) entrySetMapIterator0);
      ExceptionClosure.exceptionClosure();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("_qXlZ&mw");
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableIterator0);
      ResettableIterator<IIOMetadataNode> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableIterator1, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      EmptyIterator.resettableEmptyIterator();
      Iterator<IIOMetadataNode> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<SQLClientInfoException, String> transformer0 = ConstantTransformer.constantTransformer("");
      IteratorUtils.toString((Iterator<SQLClientInfoException>) resettableIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "<E!ifj$5^IIJj<~_x", "", "");
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      int int0 = 10;
      Iterator<BatchUpdateException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      EmptyIterator.resettableEmptyIterator();
      ConstantTransformer.constantTransformer("9;");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("9;", (String) null, 0, (int[]) null, sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "NodeList must not be null");
      IteratorUtils.getIterator("9;");
      IteratorUtils.emptyOrderedIterator();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) loopingIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 100
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<SQLTransientConnectionException>[] linkedListArray0 = (LinkedList<SQLTransientConnectionException>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      LinkedList<SQLTransientConnectionException> linkedList1 = new LinkedList<SQLTransientConnectionException>();
      IteratorUtils.arrayListIterator(linkedListArray0, 0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<SQLNonTransientException> forClosure0 = new ForClosure<SQLNonTransientException>(0, closure0);
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Closure<? super SQLSyntaxErrorException>) forClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Vector<SQLRecoverableException>, SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<SQLTransientConnectionException>[] linkedListArray0 = (LinkedList<SQLTransientConnectionException>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      LinkedList<SQLTransientConnectionException> linkedList1 = new LinkedList<SQLTransientConnectionException>();
      IteratorUtils.arrayListIterator(linkedListArray0, 0);
      IteratorUtils.emptyIterator();
      ExceptionClosure.exceptionClosure();
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) properties0);
      IteratorUtils.find((Iterator<EnumSet<ComparatorPredicate.Criterion>>) null, (Predicate<? super EnumSet<ComparatorPredicate.Criterion>>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      MapIterator<IIOMetadataNode, Predicate<Properties>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      IteratorUtils.contains((Iterator<IIOMetadataNode>) mapIterator0, (Object) locale_FilteringMode0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<SQLTransientConnectionException>[] linkedListArray0 = (LinkedList<SQLTransientConnectionException>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      LinkedList<SQLTransientConnectionException> linkedList1 = new LinkedList<SQLTransientConnectionException>();
      IteratorUtils.arrayListIterator(linkedListArray0, 0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<SQLNonTransientException> forClosure0 = new ForClosure<SQLNonTransientException>(0, closure0);
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Closure<? super SQLSyntaxErrorException>) forClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, 0L);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("qVUi", (String) null, 100, (int[]) null, sQLNonTransientConnectionException0);
      IteratorUtils.getIterator(batchUpdateException0);
      IteratorUtils.emptyOrderedIterator();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) loopingIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 100
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<SQLTransientConnectionException>[] linkedListArray0 = (LinkedList<SQLTransientConnectionException>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      linkedListArray0[1] = linkedList0;
      LinkedList<SQLTransientConnectionException> linkedList1 = new LinkedList<SQLTransientConnectionException>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.IteratorUtils");
      linkedList1.clone();
      linkedListArray0[2] = linkedList1;
      IteratorUtils.arrayListIterator(linkedListArray0, 0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<SQLNonTransientException> forClosure0 = new ForClosure<SQLNonTransientException>(0, closure0);
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Closure<? super SQLSyntaxErrorException>) forClosure0);
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<DataTruncation, SQLDataException> hashMap0 = new HashMap<DataTruncation, SQLDataException>();
      EntrySetMapIterator<DataTruncation, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLDataException>(hashMap0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) entrySetMapIterator0, (Iterator<? extends DataTruncation>) entrySetMapIterator0);
      SkippingIterator<DataTruncation> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, (long) 0);
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<DataTruncation>) skippingIterator0, (Transformer<? super DataTruncation, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, String>) transformer0);
      Comparator<SQLException> comparator0 = null;
      Iterator<SQLException>[] iteratorArray0 = (Iterator<SQLException>[]) Array.newInstance(Iterator.class, 7);
      MapIterator<SQLException, LinkedHashSet<ArrayDeque>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLException>) mapIterator0;
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) null, (Iterator<? extends SQLException>) iteratorArray0[0], (Iterator<? extends SQLException>) orderedIterator0);
      iteratorArray0[1] = iterator0;
      Iterator<SQLException> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<SQLException>) mapIterator0);
      iteratorArray0[2] = iterator1;
      Iterator<SQLException> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) resettableListIterator0, (Iterator<? extends SQLException>) mapIterator0);
      iteratorArray0[3] = iterator2;
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) iterator2, (-1811L), (-1811L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<SQLClientInfoException, String> transformer0 = ConstantTransformer.constantTransformer("9;");
      IteratorUtils.toString((Iterator<SQLClientInfoException>) resettableIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "9;", "9;", "9;");
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[2] = iterator0;
      iteratorArray0[3] = (Iterator<BatchUpdateException>) resettableListIterator0;
      iteratorArray0[4] = iterator0;
      iteratorArray0[5] = iterator0;
      int int0 = 10;
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator0, 10);
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(list0);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) loopingIterator0);
      iteratorArray0[6] = iterator1;
      iteratorArray0[7] = (Iterator<BatchUpdateException>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.getIterator(orderedIterator0);
      EmptyIterator.emptyIterator();
      Iterable<SQLTimeoutException> iterable0 = new PriorityQueue<SQLTimeoutException>();
      SQLException sQLException0 = new SQLException("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator", "*r uzEh");
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("i,h8,ZUb@fgEPpDZ5_", "!,Y6-eeWjBH4RZ/4*", sQLTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Qm/3C", "Collection must not be null", (-1255), sQLIntegrityConstraintViolationException0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) singletonListIterator0, class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, 1203, 1203);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E-UHglv/");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      DataTruncation dataTruncation0 = new DataTruncation(1, false, false, 1, 1);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, (long) 0);
      IteratorUtils.getIterator((Object) null);
      IteratorUtils.emptyOrderedIterator();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(vector0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<SQLClientInfoException, String> transformer0 = ConstantTransformer.constantTransformer("9;");
      IteratorUtils.toString((Iterator<SQLClientInfoException>) resettableIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "9;", "9;", "9;");
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = (Iterator<BatchUpdateException>) resettableListIterator0;
      iteratorArray0[2] = iterator0;
      iteratorArray0[3] = (Iterator<BatchUpdateException>) resettableListIterator0;
      iteratorArray0[4] = iterator0;
      iteratorArray0[5] = iterator0;
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iterator0, 10);
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(list0);
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) loopingIterator0);
      iteratorArray0[6] = iterator1;
      iteratorArray0[7] = (Iterator<BatchUpdateException>) resettableListIterator0;
      IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, (long) 10);
      UniquePredicate.uniquePredicate();
      Integer integer0 = new Integer(100);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      EqualPredicate.equalPredicate((Object) "9;9;");
      IteratorUtils.singletonListIterator((SQLNonTransientException) sQLNonTransientConnectionException0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLException>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<SQLTransientConnectionException>[] linkedListArray0 = (LinkedList<SQLTransientConnectionException>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      linkedListArray0[1] = linkedList0;
      LinkedList<SQLTransientConnectionException> linkedList1 = new LinkedList<SQLTransientConnectionException>();
      linkedList1.clone();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("A37qy~g|W/i2!");
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      ExceptionClosure.exceptionClosure();
      ForClosure.forClosure(10, (Closure<? super ClientInfoStatus>) null);
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) orderedIterator0, 0L);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      String string0 = "";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      String string1 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) singletonIterator0, (Transformer<? super SQLClientInfoException, String>) null, "", "", "Predicate must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ListIterator<ClientInfoStatus> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ClientInfoStatus>) listIterator0, (Predicate<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      EmptyIterator.resettableEmptyIterator();
      ConstantTransformer.constantTransformer("9;");
      int int0 = 100;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("9;", (String) null, 0, (int[]) null, sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "NodeList must not be null");
      IteratorUtils.getIterator("9;");
      IteratorUtils.emptyOrderedIterator();
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>();
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(vector0);
      loopingIterator0.reset();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<SQLTransientConnectionException>[] linkedListArray0 = (LinkedList<SQLTransientConnectionException>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLTransientConnectionException> linkedList1 = new LinkedList<SQLTransientConnectionException>();
      linkedListArray0[1] = linkedList1;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      LinkedHashSet<String> linkedHashSet2 = new LinkedHashSet<String>();
      LinkedHashSet<String> linkedHashSet3 = new LinkedHashSet<String>();
      LinkedHashSet<String> linkedHashSet4 = new LinkedHashSet<String>();
      LinkedHashSet<String>[] linkedHashSetArray0 = (LinkedHashSet<String>[]) Array.newInstance(LinkedHashSet.class, 6);
      LinkedHashSet<String> linkedHashSet5 = new LinkedHashSet<String>();
      linkedHashSetArray0[0] = linkedHashSet5;
      linkedHashSetArray0[1] = linkedHashSet1;
      linkedHashSetArray0[2] = linkedHashSet2;
      linkedHashSetArray0[3] = linkedHashSet1;
      LinkedHashSet<String> linkedHashSet6 = new LinkedHashSet<String>();
      linkedHashSetArray0[4] = linkedHashSet6;
      linkedHashSetArray0[5] = linkedHashSet1;
      IteratorUtils.arrayIterator(linkedHashSetArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<SQLNonTransientException> forClosure0 = new ForClosure<SQLNonTransientException>(4, closure0);
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Closure<? super SQLSyntaxErrorException>) closure0);
      OrderedMapIterator<String, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<String, Integer>) orderedMapIterator0);
      Transformer<SQLNonTransientConnectionException, ClientInfoStatus>[] transformerArray0 = (Transformer<SQLNonTransientConnectionException, ClientInfoStatus>[]) Array.newInstance(Transformer.class, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(transformerArray0, 0, 1352);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1526);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      int int0 = (-1005);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (-1005));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue2 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue3 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue4 = new PriorityQueue<SQLNonTransientConnectionException>((Collection<? extends SQLNonTransientConnectionException>) priorityQueue3);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue5 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue6 = new PriorityQueue<SQLNonTransientConnectionException>();
      PriorityQueue<SQLNonTransientConnectionException>[] priorityQueueArray0 = (PriorityQueue<SQLNonTransientConnectionException>[]) Array.newInstance(PriorityQueue.class, 3);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue7 = new PriorityQueue<SQLNonTransientConnectionException>();
      priorityQueueArray0[0] = priorityQueue7;
      priorityQueueArray0[1] = priorityQueue1;
      priorityQueueArray0[2] = priorityQueue3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(priorityQueueArray0, 0, (-1057));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("G04?7cU.T;");
      Transformer<SQLClientInfoException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      IteratorUtils.toString((Iterator<SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, String>) transformer0, "", "", "G04?7cU.T;");
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      iteratorArray0[0] = iterator0;
      IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, 0L);
      UniquePredicate.uniquePredicate();
      Integer integer0 = new Integer((-372));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) iterator1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      LinkedList<SQLTransientConnectionException>[] linkedListArray0 = (LinkedList<SQLTransientConnectionException>[]) Array.newInstance(LinkedList.class, 5);
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>(arrayList0);
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLTransientConnectionException> linkedList1 = new LinkedList<SQLTransientConnectionException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLTransientConnectionException> linkedList2 = new LinkedList<SQLTransientConnectionException>();
      linkedListArray0[2] = linkedList2;
      LinkedList<SQLTransientConnectionException> linkedList3 = new LinkedList<SQLTransientConnectionException>();
      linkedListArray0[3] = linkedList3;
      LinkedList<SQLTransientConnectionException> linkedList4 = new LinkedList<SQLTransientConnectionException>();
      linkedListArray0[4] = linkedList4;
      IteratorUtils.arrayListIterator(linkedListArray0, 0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<SQLNonTransientException> forClosure0 = new ForClosure<SQLNonTransientException>(10, closure0);
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Closure<? super SQLSyntaxErrorException>) closure0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      EntrySetMapIterator<SQLTimeoutException, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLDataException>(hashMap0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) entrySetMapIterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      MapIterator<String, HashSet<Integer>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      MapIterator<IIOMetadataNode, Integer> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) mapIterator1);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
      String string0 = "";
      int int0 = 2196;
      SQLDataException sQLDataException0 = new SQLDataException("IL", (String) null, 2196);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OrderedMapIterator<String, HashSet<Integer>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, HashSet<Integer>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, HashSet<Integer>>(orderedMapIterator0);
      String string0 = "ExceptionClosure invoked";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ExceptionClosure invoked");
      iIOMetadataNode0.getAttributeNode("]#KE{4&Ys},6");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Transformer<String, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("]#KE{4&Ys},6", (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.isEmpty(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("A37qy~g|W/i2!");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("Cannot remove from list until next() or previous() called", "A37qy~g|W/i2!");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<SQLRecoverableException>) null, (Object) nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      iIOMetadataNode0.setUserObject(sQLIntegrityConstraintViolationException0);
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      iIOMetadataNodeArray0[4] = iIOMetadataNode0;
      iIOMetadataNodeArray0[5] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[6] = iIOMetadataNode1;
      iIOMetadataNodeArray0[8] = iIOMetadataNode0;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("Index cannot be negative: ");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      IteratorUtils.toArray((Iterator<?>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientException, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLNonTransientException, Locale.FilteringMode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, Locale.FilteringMode>) orderedMapIterator0);
      ListIterator<SQLNonTransientException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) mapIterator0, (Iterator<? extends SQLException>) orderedMapIterator0, (Iterator<? extends SQLException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      EmptyIterator.resettableEmptyIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, ComparatorPredicate.Criterion> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, ComparatorPredicate.Criterion> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, ComparatorPredicate.Criterion>(orderedMapIterator0);
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, 1L);
      IteratorUtils.emptyMapIterator();
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) skippingIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", "MhR0Z\"7@I`zQ3{", 371, intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, (-439));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedMapIterator<String, HashSet<Integer>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, HashSet<Integer>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, HashSet<Integer>>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<String, HashSet<Integer>>) abstractOrderedMapIteratorDecorator0);
      MapIterator<IIOMetadataNode, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) mapIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
      String string0 = "";
      String string1 = "";
      int int0 = 2196;
      SQLDataException sQLDataException0 = new SQLDataException("", "", 2196);
      Iterator<SQLFeatureNotSupportedException> iterator1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLSyntaxErrorException: ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertNotNull(mapIterator1);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator1, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      assertNotNull(iterator0);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OrderedMapIterator<String, HashSet<Integer>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<String, HashSet<Integer>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, HashSet<Integer>>(orderedMapIterator0);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      MapIterator<String, HashSet<Integer>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, HashSet<Integer>>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      MapIterator<IIOMetadataNode, Integer> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator1);
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) mapIterator1);
      assertNotNull(enumeration0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertNotNull(iterator0);
      
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      SQLDataException sQLDataException0 = new SQLDataException("", "", 2196);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals(2196, sQLDataException0.getErrorCode());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", "delimiter may not be null");
      assertNotNull(nodeList0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, HashMap<ArrayList, Hashtable>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<StringTokenizer>) linkedList0);
      assertNotNull(resettableListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      assertNotNull(predicate0);
      
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      MapIterator<SQLRecoverableException, StringTokenizer> mapIterator1 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator1);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (String) null, (-504));
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals((-504), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      
      MockThrowable mockThrowable0 = new MockThrowable("", sQLTransactionRollbackException0);
      assertNotNull(mockThrowable0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Transformer must not be null", mockThrowable0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals((-504), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Transformer must not be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Transformer must not be null", sQLIntegrityConstraintViolationException0.getMessage());
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException0, (Equator<Object>) defaultEquator0);
      assertNotNull(predicate1);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals((-504), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Transformer must not be null", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("Transformer must not be null", sQLIntegrityConstraintViolationException0.getMessage());
      
      predicateArray0[2] = predicate1;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 2);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer(">6\"");
      assertNotNull(transformer0);
      
      transformerArray0[0] = transformer0;
      Class<String> class0 = String.class;
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0, classArray0, classArray0);
      assertNotNull(instantiateFactory0);
      assertEquals(0, classArray0.length);
      
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(instantiateFactory0);
      assertNotNull(factoryTransformer0);
      assertEquals(0, classArray0.length);
      
      transformerArray0[1] = (Transformer<Object, String>) factoryTransformer0;
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, transformerArray0[1]);
      assertNotNull(switchTransformer0);
      assertEquals(2, transformerArray0.length);
      assertEquals(5, predicateArray0.length);
      
      String string0 = IteratorUtils.toString((Iterator<Vector<SQLInvalidAuthorizationSpecException>>) null, (Transformer<? super Vector<SQLInvalidAuthorizationSpecException>, String>) switchTransformer0, "", "", "org.apache.commons.collections4.functors.WhileClosure");
      assertNotNull(string0);
      assertEquals("org.apache.commons.collections4.functors.WhileClosure", string0);
      assertEquals(2, transformerArray0.length);
      assertEquals(5, predicateArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<SQLTransientConnectionException>[] linkedListArray0 = (LinkedList<SQLTransientConnectionException>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLTransientConnectionException> linkedList1 = new LinkedList<SQLTransientConnectionException>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLTransientConnectionException> linkedList2 = new LinkedList<SQLTransientConnectionException>();
      assertNotNull(linkedList2);
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertEquals(0, linkedList2.size());
      
      LinkedList linkedList3 = (LinkedList)linkedList2.clone();
      assertNotNull(linkedList3);
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertEquals(0, linkedList2.size());
      assertEquals(0, linkedList3.size());
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList2, linkedList0);
      
      linkedListArray0[2] = linkedList2;
      ResettableListIterator<LinkedList<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedListArray0, 0);
      assertNotNull(resettableListIterator0);
      assertEquals(3, linkedListArray0.length);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      assertNotNull(closure0);
      
      ForClosure<SQLNonTransientException> forClosure0 = new ForClosure<SQLNonTransientException>(0, closure0);
      assertNotNull(forClosure0);
      assertEquals(0, forClosure0.getCount());
      
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Closure<? super SQLSyntaxErrorException>) forClosure0);
      assertEquals(0, forClosure0.getCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("G04?7cU.T;");
      assertNotNull(constantFactory0);
      
      Transformer<SQLClientInfoException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, String>) transformer0, "", "", "G04?7cU.T;");
      assertNotNull(string0);
      assertEquals("G04?7cU.T;", string0);
      
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      assertNotNull(iterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      iteratorArray0[0] = iterator0;
      Iterator<Object> iterator1 = IteratorUtils.chainedIterator((Iterator<?>[]) iteratorArray0);
      assertNotNull(iterator1);
      assertEquals(1, iteratorArray0.length);
      
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, 0L);
      assertNotNull(skippingIterator0);
      
      Iterator<?> iterator2 = IteratorUtils.getIterator(skippingIterator0);
      assertNotNull(iterator2);
      
      OrderedIterator<SQLException> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator1);
      
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 4096);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 4096
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[6];
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("RIy73M`", "RIy73M`", (-8), sQLDataException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals((-8), sQLTimeoutException0.getErrorCode());
      assertEquals("RIy73M`", sQLTimeoutException0.getMessage());
      assertEquals("RIy73M`", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: RIy73M`", sQLTimeoutException0.toString());
      
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("Predicate must not be null", "RIy73M`", sQLDataException0);
      assertNotNull(sQLTimeoutException1);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("RIy73M`", sQLTimeoutException1.getSQLState());
      assertEquals("Predicate must not be null", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Predicate must not be null", sQLTimeoutException1.toString());
      
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("Index: ", sQLTimeoutException0);
      assertNotNull(sQLTimeoutException2);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals((-8), sQLTimeoutException0.getErrorCode());
      assertEquals("RIy73M`", sQLTimeoutException0.getMessage());
      assertEquals("RIy73M`", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: RIy73M`", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertNull(sQLTimeoutException2.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Index: ", sQLTimeoutException2.toString());
      assertEquals("Index: ", sQLTimeoutException2.getMessage());
      
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("Predicate must not be null", "RIy73M`");
      assertNotNull(sQLTimeoutException3);
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException0));
      assertEquals("Predicate must not be null", sQLTimeoutException3.getMessage());
      assertEquals(0, sQLTimeoutException3.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Predicate must not be null", sQLTimeoutException3.toString());
      assertEquals("RIy73M`", sQLTimeoutException3.getSQLState());
      
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("Predicate must not be null", ":z", (-8), sQLTimeoutException3);
      assertNotNull(sQLTimeoutException4);
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException4.equals((Object)sQLTimeoutException2));
      assertEquals("Predicate must not be null", sQLTimeoutException3.getMessage());
      assertEquals(0, sQLTimeoutException3.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Predicate must not be null", sQLTimeoutException3.toString());
      assertEquals("RIy73M`", sQLTimeoutException3.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Predicate must not be null", sQLTimeoutException4.toString());
      assertEquals(":z", sQLTimeoutException4.getSQLState());
      assertEquals("Predicate must not be null", sQLTimeoutException4.getMessage());
      assertEquals((-8), sQLTimeoutException4.getErrorCode());
      
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("&%twr;(GC1d", sQLTimeoutException2);
      assertNotNull(sQLTimeoutException5);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException4));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException3));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException2));
      assertFalse(sQLTimeoutException5.equals((Object)sQLTimeoutException1));
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals((-8), sQLTimeoutException0.getErrorCode());
      assertEquals("RIy73M`", sQLTimeoutException0.getMessage());
      assertEquals("RIy73M`", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: RIy73M`", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertNull(sQLTimeoutException2.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Index: ", sQLTimeoutException2.toString());
      assertEquals("Index: ", sQLTimeoutException2.getMessage());
      assertEquals(0, sQLTimeoutException5.getErrorCode());
      assertEquals("&%twr;(GC1d", sQLTimeoutException5.getMessage());
      assertEquals("java.sql.SQLTimeoutException: &%twr;(GC1d", sQLTimeoutException5.toString());
      assertNull(sQLTimeoutException5.getSQLState());
      
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0);
      assertNotNull(resettableListIterator0);
      assertEquals(6, sQLTimeoutExceptionArray0.length);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      String string0 = "_'J\\L xO^?X1j}U";
      Attr attr0 = iIOMetadataNode0.getAttributeNode("_'JL xO^?X1j}U");
      assertNull(attr0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) orderedIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      assertNotNull(iterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      assertNotNull(instantiateFactory0);
      
      Transformer<SQLNonTransientException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, String>) transformer0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      ArrayList<ClientInfoStatus> arrayList0 = new ArrayList<ClientInfoStatus>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends ClientInfoStatus>) arrayList0);
      assertNotNull(resettableIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(orderedIterator0);
      assertTrue(boolean0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagNameNS("A37qy~g|W/i2!", "A37qy~g|W/i2!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Hashtable<DataTruncation, StringTokenizer> hashtable0 = new Hashtable<DataTruncation, StringTokenizer>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      EntrySetMapIterator<DataTruncation, StringTokenizer> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, StringTokenizer>(hashtable0);
      assertNotNull(entrySetMapIterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      AbstractMapIteratorDecorator<DataTruncation, StringTokenizer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, StringTokenizer>(entrySetMapIterator0);
      assertNotNull(abstractMapIteratorDecorator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) abstractMapIteratorDecorator0, (Iterator<? extends DataTruncation>) entrySetMapIterator0);
      assertNotNull(zippingIterator0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      String string0 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "D_#pR~{J]");
      assertNotNull(sQLSyntaxErrorException1);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertEquals("", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException1.toString());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("D_#pR~{J]", sQLSyntaxErrorException1.getSQLState());
      
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0);
      assertNotNull(resettableIterator0);
      assertEquals(2, sQLSyntaxErrorExceptionArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = properties0.put(object0, object0);
      assertNull(object1);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      assertNotNull(resettableIterator0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) resettableIterator0);
      assertNotNull(predicate0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      
      Iterator<Properties> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Properties>) resettableIterator0, (Predicate<? super Properties>) predicate0);
      assertNotNull(iterator0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      
      MapIterator<BatchUpdateException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) mapIterator0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      int int0 = 0;
      LinkedList<SQLTransientConnectionException>[] linkedListArray0 = (LinkedList<SQLTransientConnectionException>[]) Array.newInstance(LinkedList.class, 8);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLTransientConnectionException> linkedList1 = new LinkedList<SQLTransientConnectionException>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLTransientConnectionException> linkedList2 = new LinkedList<SQLTransientConnectionException>();
      assertNotNull(linkedList2);
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertEquals(0, linkedList2.size());
      
      linkedListArray0[2] = linkedList2;
      LinkedList<SQLTransientConnectionException> linkedList3 = new LinkedList<SQLTransientConnectionException>();
      assertNotNull(linkedList3);
      assertTrue(linkedList3.equals((Object)linkedList0));
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertTrue(linkedList3.equals((Object)linkedList2));
      assertEquals(0, linkedList3.size());
      
      linkedListArray0[3] = linkedList3;
      LinkedList<SQLTransientConnectionException> linkedList4 = new LinkedList<SQLTransientConnectionException>();
      assertNotNull(linkedList4);
      assertTrue(linkedList4.equals((Object)linkedList0));
      assertTrue(linkedList4.equals((Object)linkedList1));
      assertTrue(linkedList4.equals((Object)linkedList2));
      assertTrue(linkedList4.equals((Object)linkedList3));
      assertEquals(0, linkedList4.size());
      
      linkedListArray0[4] = linkedList4;
      LinkedList<SQLTransientConnectionException> linkedList5 = new LinkedList<SQLTransientConnectionException>();
      assertNotNull(linkedList5);
      assertTrue(linkedList5.equals((Object)linkedList3));
      assertTrue(linkedList5.equals((Object)linkedList2));
      assertTrue(linkedList5.equals((Object)linkedList0));
      assertTrue(linkedList5.equals((Object)linkedList1));
      assertTrue(linkedList5.equals((Object)linkedList4));
      assertEquals(0, linkedList5.size());
      
      linkedListArray0[5] = linkedList5;
      LinkedList<SQLTransientConnectionException> linkedList6 = new LinkedList<SQLTransientConnectionException>();
      assertNotNull(linkedList6);
      assertTrue(linkedList6.equals((Object)linkedList3));
      assertTrue(linkedList6.equals((Object)linkedList5));
      assertTrue(linkedList6.equals((Object)linkedList1));
      assertTrue(linkedList6.equals((Object)linkedList2));
      assertTrue(linkedList6.equals((Object)linkedList4));
      assertTrue(linkedList6.equals((Object)linkedList0));
      assertEquals(0, linkedList6.size());
      
      linkedListArray0[6] = linkedList6;
      LinkedList<SQLTransientConnectionException> linkedList7 = new LinkedList<SQLTransientConnectionException>();
      assertNotNull(linkedList7);
      assertTrue(linkedList7.equals((Object)linkedList6));
      assertTrue(linkedList7.equals((Object)linkedList1));
      assertTrue(linkedList7.equals((Object)linkedList0));
      assertTrue(linkedList7.equals((Object)linkedList5));
      assertTrue(linkedList7.equals((Object)linkedList3));
      assertTrue(linkedList7.equals((Object)linkedList4));
      assertTrue(linkedList7.equals((Object)linkedList2));
      assertEquals(0, linkedList7.size());
      
      linkedListArray0[7] = linkedList7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(linkedListArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Iterator<Object> iterator0 = null;
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Iterator<Properties> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedIterator<Predicate<Object>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      SkippingIterator<Predicate<Object>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Predicate<Object>>) orderedIterator0, 1L);
      assertNotNull(skippingIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
      
      Iterator<SQLTimeoutException> iterator1 = EmptyIterator.emptyIterator();
      assertNotNull(iterator1);
      
      Iterable<SQLTimeoutException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) iterator1);
      assertNotNull(iterable0);
      
      int int0 = (-1238);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterable0, (-3085), (-1238));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode3);
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("Index cannot be negative: ");
      assertNotNull(iIOMetadataNode4);
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode2, 1812, (-127));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<SQLTransientConnectionException>[] linkedListArray0 = (LinkedList<SQLTransientConnectionException>[]) Array.newInstance(LinkedList.class, 3);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedListArray0[1] = linkedList0;
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",&");
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode2);
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode3);
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode4);
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode5);
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode3));
      
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode6);
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode5));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode6.equals((Object)iIOMetadataNode4));
      
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode7);
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode5));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode6));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode7.equals((Object)iIOMetadataNode1));
      
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      assertNotNull(resettableListIterator0);
      assertEquals(8, iIOMetadataNodeArray0.length);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      
      IIOMetadataNode iIOMetadataNode8 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode8);
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode5));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode6));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode8.equals((Object)iIOMetadataNode7));
      
      // Undeclared exception!
      try { 
        iIOMetadataNode2.getElementsByTagNameNS("&jh~Hr", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "IY";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      assertNotNull(resettableListIterator0);
      assertEquals(1, stringArray0.length);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      int int0 = 1537;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "IY", 1537, 1537);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null, 424);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLNonTransientException>) null, (Closure<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNotNull(sQLWarning0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Iterator must not be null", "5%T", sQLWarning0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals("Iterator must not be null", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Iterator must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals("5%T", sQLNonTransientConnectionException0.getSQLState());
      
      DataTruncation dataTruncation0 = new DataTruncation(1721, true, true, 0, 0, sQLNonTransientConnectionException0);
      assertNotNull(dataTruncation0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals("Iterator must not be null", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Iterator must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals("5%T", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      sQLWarning0.addSuppressed(sQLNonTransientConnectionException0);
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals("Iterator must not be null", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Iterator must not be null", sQLNonTransientConnectionException0.toString());
      assertEquals("5%T", sQLNonTransientConnectionException0.getSQLState());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, 0, (-1551));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PriorityQueue<SQLNonTransientConnectionException>[] priorityQueueArray0 = (PriorityQueue<SQLNonTransientConnectionException>[]) Array.newInstance(PriorityQueue.class, 9);
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue1 = new PriorityQueue<SQLNonTransientConnectionException>();
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue1.size());
      
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue2 = new PriorityQueue<SQLNonTransientConnectionException>();
      assertNotNull(priorityQueue2);
      assertFalse(priorityQueue2.equals((Object)priorityQueue1));
      assertFalse(priorityQueue2.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue2.size());
      
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue3 = new PriorityQueue<SQLNonTransientConnectionException>();
      assertNotNull(priorityQueue3);
      assertFalse(priorityQueue3.equals((Object)priorityQueue1));
      assertFalse(priorityQueue3.equals((Object)priorityQueue0));
      assertFalse(priorityQueue3.equals((Object)priorityQueue2));
      assertEquals(0, priorityQueue3.size());
      
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue4 = new PriorityQueue<SQLNonTransientConnectionException>();
      assertNotNull(priorityQueue4);
      assertFalse(priorityQueue4.equals((Object)priorityQueue0));
      assertFalse(priorityQueue4.equals((Object)priorityQueue2));
      assertFalse(priorityQueue4.equals((Object)priorityQueue3));
      assertFalse(priorityQueue4.equals((Object)priorityQueue1));
      assertEquals(0, priorityQueue4.size());
      
      priorityQueueArray0[4] = priorityQueue4;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue5 = new PriorityQueue<SQLNonTransientConnectionException>();
      assertNotNull(priorityQueue5);
      assertFalse(priorityQueue5.equals((Object)priorityQueue0));
      assertFalse(priorityQueue5.equals((Object)priorityQueue2));
      assertFalse(priorityQueue5.equals((Object)priorityQueue1));
      assertFalse(priorityQueue5.equals((Object)priorityQueue3));
      assertFalse(priorityQueue5.equals((Object)priorityQueue4));
      assertEquals(0, priorityQueue5.size());
      
      priorityQueueArray0[5] = priorityQueue5;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue6 = new PriorityQueue<SQLNonTransientConnectionException>((Collection<? extends SQLNonTransientConnectionException>) priorityQueue0);
      assertNotNull(priorityQueue6);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue0.equals((Object)priorityQueue4));
      assertFalse(priorityQueue0.equals((Object)priorityQueue3));
      assertFalse(priorityQueue0.equals((Object)priorityQueue2));
      assertFalse(priorityQueue0.equals((Object)priorityQueue5));
      assertFalse(priorityQueue6.equals((Object)priorityQueue4));
      assertFalse(priorityQueue6.equals((Object)priorityQueue1));
      assertFalse(priorityQueue6.equals((Object)priorityQueue2));
      assertFalse(priorityQueue6.equals((Object)priorityQueue5));
      assertFalse(priorityQueue6.equals((Object)priorityQueue0));
      assertFalse(priorityQueue6.equals((Object)priorityQueue3));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue6.size());
      
      priorityQueueArray0[6] = priorityQueue6;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue7 = new PriorityQueue<SQLNonTransientConnectionException>();
      assertNotNull(priorityQueue7);
      assertFalse(priorityQueue7.equals((Object)priorityQueue4));
      assertFalse(priorityQueue7.equals((Object)priorityQueue6));
      assertFalse(priorityQueue7.equals((Object)priorityQueue5));
      assertFalse(priorityQueue7.equals((Object)priorityQueue0));
      assertFalse(priorityQueue7.equals((Object)priorityQueue2));
      assertFalse(priorityQueue7.equals((Object)priorityQueue3));
      assertFalse(priorityQueue7.equals((Object)priorityQueue1));
      assertEquals(0, priorityQueue7.size());
      
      priorityQueueArray0[7] = priorityQueue7;
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue8 = new PriorityQueue<SQLNonTransientConnectionException>();
      assertNotNull(priorityQueue8);
      assertFalse(priorityQueue8.equals((Object)priorityQueue3));
      assertFalse(priorityQueue8.equals((Object)priorityQueue6));
      assertFalse(priorityQueue8.equals((Object)priorityQueue4));
      assertFalse(priorityQueue8.equals((Object)priorityQueue7));
      assertFalse(priorityQueue8.equals((Object)priorityQueue1));
      assertFalse(priorityQueue8.equals((Object)priorityQueue2));
      assertFalse(priorityQueue8.equals((Object)priorityQueue0));
      assertFalse(priorityQueue8.equals((Object)priorityQueue5));
      assertEquals(0, priorityQueue8.size());
      
      priorityQueueArray0[8] = priorityQueue8;
      int int0 = 0;
      ResettableListIterator<PriorityQueue<SQLNonTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(priorityQueueArray0, 0, 0);
      assertNotNull(resettableListIterator0);
      assertEquals(9, priorityQueueArray0.length);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(priorityQueue3);
      assertNotNull(identityPredicate0);
      assertFalse(priorityQueue3.equals((Object)priorityQueue8));
      assertFalse(priorityQueue3.equals((Object)priorityQueue1));
      assertFalse(priorityQueue3.equals((Object)priorityQueue7));
      assertFalse(priorityQueue3.equals((Object)priorityQueue4));
      assertFalse(priorityQueue3.equals((Object)priorityQueue6));
      assertFalse(priorityQueue3.equals((Object)priorityQueue0));
      assertFalse(priorityQueue3.equals((Object)priorityQueue2));
      assertFalse(priorityQueue3.equals((Object)priorityQueue5));
      assertEquals(0, priorityQueue3.size());
      
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) identityPredicate0);
      assertNotNull(predicate0);
      assertFalse(priorityQueue3.equals((Object)priorityQueue8));
      assertFalse(priorityQueue3.equals((Object)priorityQueue1));
      assertFalse(priorityQueue3.equals((Object)priorityQueue7));
      assertFalse(priorityQueue3.equals((Object)priorityQueue4));
      assertFalse(priorityQueue3.equals((Object)priorityQueue6));
      assertFalse(priorityQueue3.equals((Object)priorityQueue0));
      assertFalse(priorityQueue3.equals((Object)priorityQueue2));
      assertFalse(priorityQueue3.equals((Object)priorityQueue5));
      assertEquals(0, priorityQueue3.size());
      assertNotSame(priorityQueue3, priorityQueue8);
      assertNotSame(priorityQueue3, priorityQueue1);
      assertNotSame(priorityQueue3, priorityQueue7);
      assertNotSame(priorityQueue3, priorityQueue4);
      assertNotSame(priorityQueue3, priorityQueue6);
      assertNotSame(priorityQueue3, priorityQueue0);
      assertNotSame(priorityQueue3, priorityQueue2);
      assertNotSame(priorityQueue3, priorityQueue5);
      
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue9 = IteratorUtils.find((Iterator<PriorityQueue<SQLNonTransientConnectionException>>) resettableListIterator0, (Predicate<? super PriorityQueue<SQLNonTransientConnectionException>>) predicate0);
      assertNull(priorityQueue9);
      assertFalse(priorityQueue3.equals((Object)priorityQueue8));
      assertFalse(priorityQueue3.equals((Object)priorityQueue1));
      assertFalse(priorityQueue3.equals((Object)priorityQueue7));
      assertFalse(priorityQueue3.equals((Object)priorityQueue4));
      assertFalse(priorityQueue3.equals((Object)priorityQueue6));
      assertFalse(priorityQueue3.equals((Object)priorityQueue0));
      assertFalse(priorityQueue3.equals((Object)priorityQueue2));
      assertFalse(priorityQueue3.equals((Object)priorityQueue5));
      assertEquals(9, priorityQueueArray0.length);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, priorityQueue3.size());
      assertNotSame(priorityQueue3, priorityQueue8);
      assertNotSame(priorityQueue3, priorityQueue1);
      assertNotSame(priorityQueue3, priorityQueue7);
      assertNotSame(priorityQueue3, priorityQueue4);
      assertNotSame(priorityQueue3, priorityQueue6);
      assertNotSame(priorityQueue3, priorityQueue0);
      assertNotSame(priorityQueue3, priorityQueue2);
      assertNotSame(priorityQueue3, priorityQueue5);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(1228);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1228, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1228);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(1228, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1228);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(1228, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[2]);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer4));
      assertEquals(1228, (int)integer5);
      assertEquals(6, integerArray0.length);
      
      integerArray0[5] = integer5;
      int int1 = 1056;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 891, 1056);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      int int0 = 0;
      int int1 = 1073741824;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0, 1073741824);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OrderedMapIterator<String, HashSet<Integer>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<String, HashSet<Integer>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, HashSet<Integer>>(orderedMapIterator0);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      MapIterator<String, HashSet<Integer>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, HashSet<Integer>>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      MapIterator<IIOMetadataNode, Integer> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator1);
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) mapIterator1);
      assertNotNull(enumeration0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertNotNull(iterator0);
      
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string0 = "";
      SQLDataException sQLDataException0 = new SQLDataException("", "", 2196);
      assertNotNull(sQLDataException0);
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals(2196, sQLDataException0.getErrorCode());
      
      int int0 = 417;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null, 417);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(orderedIterator0);
      assertTrue(boolean0);
      
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "_'J\\L xO^?X1j}U";
      Transformer<String, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("_'JL xO^?X1j}U", (Transformer<? super String, ? extends String>) transformer0);
      assertNotNull(iterator0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends String>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OrderedMapIterator<String, HashSet<Integer>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      AbstractOrderedMapIteratorDecorator<String, HashSet<Integer>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, HashSet<Integer>>(orderedMapIterator0);
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      MapIterator<String, HashSet<Integer>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, HashSet<Integer>>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      
      MapIterator<IIOMetadataNode, Integer> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator1);
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) mapIterator1);
      assertNotNull(enumeration0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertNotNull(iterator0);
      
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = "";
      SQLDataException sQLDataException0 = new SQLDataException("", "", 2196);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(2196, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException0.getMessage());
      assertEquals("", sQLDataException0.getSQLState());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      assertNotNull(sQLRecoverableExceptionArray0);
      assertEquals(0, sQLRecoverableExceptionArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 109, 109);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      assertNotNull(sQLRecoverableExceptionArray0);
      assertEquals(0, sQLRecoverableExceptionArray0.length);
      
      int int0 = 65;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 65, 65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) priorityQueue0);
      assertNotNull(resettableIterator0);
      assertEquals(0, priorityQueue0.size());
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (-68L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 796);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      int int0 = 599;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransientConnectionException>) null, 599);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      assertNotNull(resettableIterator0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertNotNull(listIterator0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      boolean boolean0 = IteratorUtils.contains((Iterator<IIOMetadataNode>) listIterator0, (Object) null);
      assertFalse(boolean0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("<{c>68l=;Ld_50G ");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: <{c>68l=;Ld_50G ", sQLTimeoutException0.toString());
      assertEquals("<{c>68l=;Ld_50G ", sQLTimeoutException0.getMessage());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("<{c>68l=;Ld_50G ", (String) null, sQLTimeoutException0);
      assertNotNull(sQLTransientException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: <{c>68l=;Ld_50G ", sQLTimeoutException0.toString());
      assertEquals("<{c>68l=;Ld_50G ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTransientException: <{c>68l=;Ld_50G ", sQLTransientException0.toString());
      assertEquals("<{c>68l=;Ld_50G ", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("<{c>68l=;Ld_50G ", intArray0, sQLTransientException0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: <{c>68l=;Ld_50G ", sQLTimeoutException0.toString());
      assertEquals("<{c>68l=;Ld_50G ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTransientException: <{c>68l=;Ld_50G ", sQLTransientException0.toString());
      assertEquals("<{c>68l=;Ld_50G ", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: <{c>68l=;Ld_50G ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("<{c>68l=;Ld_50G ", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(221, false, true, 221, 221);
      assertNotNull(dataTruncation0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = dataTruncation0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(13, stackTraceElementArray0.length);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      Spliterator<Throwable> spliterator0 = dataTruncation0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dataTruncation0.forEach(consumer0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      int int0 = dataTruncation0.getTransferSize();
      assertEquals(221, int0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 221);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Properties properties0 = new Properties();
      Object object0 = new Object();
      properties0.put(object0, object0);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) resettableIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends Properties>) resettableIterator0, (Predicate<? super Properties>) predicate0);
      MapIterator<BatchUpdateException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toString((Iterator<BatchUpdateException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }
}
