/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 18:02:24 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) listIterator0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) listIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<SQLClientInfoException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) resettableListIterator0, (Iterator<? extends SQLClientInfoException>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 100, (-1830));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(stack0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("ExceptionFactory invoked", "Tdd37!cHYA0");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("ExceptionFactory invoked", sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLFeatureNotSupportedException0);
      stack0.add(sQLDataException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) loopingListIterator0);
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(stack0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) loopingListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SkippingIterator<SQLTransactionRollbackException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTransactionRollbackException>) orderedMapIterator0, 0L);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 9);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", (Class<?>[]) classArray0, (Object[]) classArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) skippingIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("LW7GI5!|GpPO", (String) null, 4091);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) listIterator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      HashMap<SQLIntegrityConstraintViolationException, SQLNonTransientException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLNonTransientException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 1037);
      hashMap0.put(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException0);
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, SQLNonTransientException>(hashMap0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) entrySetMapIterator0, class0);
      assertEquals(1, sQLIntegrityConstraintViolationExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(512);
      vector0.add(integer0);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) vector0);
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, 0);
      assertNull(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Stack<SQLTransientConnectionException>[] stackArray0 = (Stack<SQLTransientConnectionException>[]) Array.newInstance(Stack.class, 5);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      stackArray0[0] = stack0;
      ResettableListIterator<Stack<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(stackArray0);
      Stack<SQLTransientConnectionException> stack1 = IteratorUtils.find((Iterator<Stack<SQLTransientConnectionException>>) resettableListIterator0, (Predicate<? super Stack<SQLTransientConnectionException>>) uniquePredicate0);
      assertTrue(stack1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashSet<SQLTransientConnectionException>[] hashSetArray0 = (HashSet<SQLTransientConnectionException>[]) Array.newInstance(HashSet.class, 6);
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      hashSetArray0[0] = (HashSet<SQLTransientConnectionException>) linkedHashSet0;
      ResettableListIterator<HashSet<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashSetArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<HashSet<SQLTransientConnectionException>>) resettableListIterator0, (Object) linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/DAi#q.", "d@=g#&YQqzAu>MJ_Y*o", 2037);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) listIterator0;
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashSet<SQLInvalidAuthorizationSpecException>[] hashSetArray0 = (HashSet<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(HashSet.class, 0);
      ResettableListIterator<HashSet<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashSetArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0, (int) integerArray0[0], 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 3);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLException, SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) null, (Transformer<? super SQLNonTransientConnectionException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Factory<SQLDataException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLDataException> factoryTransformer0 = new FactoryTransformer<Object, SQLDataException>(factory0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.SingletonMap$SingletonValues", "", 24, sQLInvalidAuthorizationSpecException0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      LoopingIterator<SQLNonTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLNonTransientConnectionException>(arrayList0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      arrayList0.add(sQLNonTransientConnectionException0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) loopingIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Object>) resettableListIterator0, (long) (-557));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      arrayList0.add((IIOMetadataNode) null);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) arrayList0);
      // Undeclared exception!
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("NodeList must not be null", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.SingletonMap$SingletonValues", "org.apache.commons.collections4.map.SingletonMap$SingletonValues", 24, sQLInvalidAuthorizationSpecException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.SingletonMap$SingletonValues", "delimiter may not be null", 12, sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("{#", "org.apache.commons.collections4.iterators.IteratorChain", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "org.apache.commons.collections4.iterators.IteratorChain", sQLTransientException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, true);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Predicate<? super SQLFeatureNotSupportedException>) nullIsTruePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException("", "!,}I7}yh{Ox]}SylN", sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, true);
      Predicate<SQLNonTransientException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLDataException>) singletonIterator0, (Predicate<? super SQLDataException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("NodeList must not be null", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.SingletonMap$SingletonValues", "org.apache.commons.collections4.map.SingletonMap$SingletonValues", 24, sQLInvalidAuthorizationSpecException0);
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      linkedList0.add(sQLIntegrityConstraintViolationException0);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>(linkedList0);
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(vector0);
      vector0.add(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) reverseListIterator0, (Object) null);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OrderedMapIterator<Properties, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) orderedMapIterator0, (-883L), (-883L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) orderedIterator0, (-22L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, 0, 2753);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 25, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(clientInfoStatusArray0, 162);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((HashSet<SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 943);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 0, (-4714));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[8];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 1562, 1562);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 56;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLWarning[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 2454, 2454);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("MapIterator must not be null", "org.apache.commons.collections4.functors.ChainedTransformer", 100);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLIntegrityConstraintViolationException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("vQ7n", "MapIterator must not be null", 0, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, (-3114));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("J,wU", ") greater than the size of the ");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null, 0, sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "NodeList must not be null", 44);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>((String) null);
      Transformer<SQLException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) listIterator0, (Transformer<? super SQLDataException, String>) transformer0, "", "gktca]fuK4)/`", "");
      assertFalse(listIterator0.hasNext());
      assertEquals("gktca]fuK4)/`null", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("b<oxrpW1UbrsK-", "", 12);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      Transformer<SQLException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) listIterator0, (Transformer<? super SQLDataException, String>) transformer0, "", "Closure must not be null", "Set must not be null");
      assertFalse(listIterator0.hasNext());
      assertEquals("Closure must not be nullSet must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("jqSzpg=5Rla: RzeD7", sQLInvalidAuthorizationSpecException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLRecoverableException0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(equalPredicate0, transformer0, transformer0);
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) null, (Transformer<? super SQLDataException, String>) ifTransformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      Transformer<Locale.Category, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Locale.Category>) singletonListIterator0, (Transformer<? super Locale.Category, String>) transformer0, "", "nsp}0dW(&O(]m\\", "nsp}0dW(&O(]m\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.Locale$Category' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      List<SQLWarning> list0 = IteratorUtils.toList((Iterator<? extends SQLWarning>) resettableListIterator0, 4558);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      List<SQLWarning> list0 = IteratorUtils.toList((Iterator<? extends SQLWarning>) listIterator0, 44);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("Transformers must not be null", "Transformers must not be null", 13);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("tIISY_{$<hF5]:}&!z", "", sQLDataException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      String string0 = IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) singletonListIterator0);
      assertFalse(singletonListIterator0.hasNext());
      assertEquals("[java.sql.SQLFeatureNotSupportedException: tIISY_{$<hF5]:}&!z]", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("l2D9[{j3x\"_W", (String) null, 4091);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("*Qd=,B(1z5?");
      Transformer<SQLException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) listIterator0, (Transformer<? super SQLDataException, String>) transformer0, "Closure must not be null", "Set must not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Transformer<SQLDataException, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) null, (Transformer<? super SQLDataException, String>) transformer0, "", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      ListIterator<HashSet<Integer>> listIterator0 = IteratorUtils.singletonListIterator((HashSet<Integer>) linkedHashSet0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(uniquePredicate0, (Transformer<? super Object, ? extends String>) null, (Transformer<? super Object, ? extends String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashSet<Integer>>) listIterator0, (Transformer<? super HashSet<Integer>, String>) ifTransformer0, (String) null, "", " 9?q1x2@9sN5j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) loopingListIterator0, (Transformer<? super SQLDataException, String>) null, "org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator", "[", "transformer may not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashSet<SQLInvalidAuthorizationSpecException>[] hashSetArray0 = (HashSet<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(HashSet.class, 8);
      ResettableListIterator<HashSet<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashSetArray0);
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 9
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("List must not be null", "List must not be null", hashtable0, sQLNonTransientException0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("'<qkI-6)]", "'<qkI-6)]");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("'<qkI-6)]", "hc#ck", sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, false);
      Predicate<SQLFeatureNotSupportedException> predicate0 = NullPredicate.nullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashSet<Predicate<Object>> hashSet0 = new HashSet<Predicate<Object>>();
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLException>>) hashSet0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("hc#ck", "hc#ck");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("hc#ck", "hc#ck", (-1925), sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("hc#ck", "hc#ck", sQLNonTransientConnectionException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, false);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("a{Nb)M d_HS", (String) null, 2372);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("a{Nb)M d_HS", sQLDataException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, false);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      Transformer<ClientInfoStatus, ClientInfoStatus> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.objectGraphIterator(clientInfoStatus0, (Transformer<? super ClientInfoStatus, ? extends ClientInfoStatus>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) onePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayList<Closure<Object>> arrayList0 = new ArrayList<Closure<Object>>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(arrayList0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLNonTransientException) sQLSyntaxErrorException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) listIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) objectArrayIterator0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<String>) null, (Predicate<? super String>) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MapIterator<SQLNonTransientException, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) mapIterator0, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = IteratorUtils.find((Iterator<IIOMetadataNode>) orderedIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      assertNull(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Vector<EnumSet> vector0 = IteratorUtils.find((Iterator<Vector<EnumSet>>) null, (Predicate<? super Vector<EnumSet>>) uniquePredicate0);
      assertNull(vector0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<IIOMetadataNode>) orderedIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ArrayList<Closure<Object>> arrayList0 = new ArrayList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) arrayList0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) objectArrayListIterator0, (Closure<? super SQLSyntaxErrorException>) closure0);
      assertEquals(5, objectArrayListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ArrayList<Closure<Object>> arrayList0 = new ArrayList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) arrayList0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) resettableIterator0, (Closure<? super SQLSyntaxErrorException>) closure0);
      assertFalse(arrayList0.contains(closure0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Closure<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TreeSet<Closure<Object>> treeSet0 = new TreeSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) treeSet0);
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) null, (Closure<? super SQLSyntaxErrorException>) closure0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<SQLIntegrityConstraintViolationException, SQLNonTransientException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLNonTransientException>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.OnePredicate", "");
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      Iterator<?> iterator1 = IteratorUtils.getIterator(iterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      SQLDataException sQLDataException0 = new SQLDataException("Ctp/8\"__", "Ctp/8\"__");
      arrayDeque0.add(sQLDataException0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayDeque0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLWarning>) listIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      HashMap<SQLIntegrityConstraintViolationException, SQLNonTransientException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLNonTransientException>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, SQLNonTransientException> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, SQLNonTransientException>(hashMap0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) entrySetMapIterator0, class0);
      assertEquals(0, sQLIntegrityConstraintViolationExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Class<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Integer integer0 = new Integer((-1555));
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) singletonIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      Iterable<SQLClientInfoException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLClientInfoException>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterable<SQLTransactionRollbackException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) null, (Collection<? super SQLRecoverableException>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) arrayDeque0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) orderedIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("J,wU");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<ArrayList<Stack>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayDeque0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      Predicate<SQLException> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLException>>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ListIterator<BatchUpdateException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) uniquePredicate0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      Iterator<String> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends String>) resettableIterator0, (Predicate<? super String>) nullIsTruePredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.loopingListIterator((List<String>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) resettableListIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(stack0);
      Transformer<SQLNonTransientException, SQLRecoverableException> transformer0 = InvokerTransformer.invokerTransformer("The predicate to call must not be null");
      Iterator<SQLException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) loopingListIterator0, (Transformer<? super SQLNonTransientException, ? extends SQLException>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends IIOMetadataNode>) null, (Transformer<? super IIOMetadataNode, ? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MapIterator<SQLNonTransientException, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) mapIterator0, (Transformer<? super SQLNonTransientException, ? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLSyntaxErrorException>) objectArrayIterator0, (Transformer<? super SQLSyntaxErrorException, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<StringTokenizer> treeSet0 = new TreeSet<StringTokenizer>(comparator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) treeSet0, 44, (-448));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLSyntaxErrorException[]) null, 608);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, Object> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, Object>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Object>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(uniquePredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Iterator<? extends SQLNonTransientException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      OrderedMapIterator<Properties, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<Properties, SQLClientInfoException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Properties, SQLClientInfoException>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientException>) objectArrayIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (String) null, 91);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertNull(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0, (-427));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Locale.LanguageRange[]) null, 1497, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>((BatchUpdateException) null);
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) singletonListIterator0, 0L);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) boundedIterator0, (Iterator<? extends BatchUpdateException>) singletonListIterator0, (Iterator<? extends BatchUpdateException>) boundedIterator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) zippingIterator0);
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("#d>|AW", "4gG@f$GFH~v_)@v", 0, intArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("4gG@f$GFH~v_)@v", hashtable0, batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 100, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 2);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>(linkedList0);
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(vector0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) reverseListIterator0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) uniquePredicate0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, String>(orderedMapIterator0);
      BoundedIterator<SQLTimeoutException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTimeoutException>) abstractOrderedMapIteratorDecorator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 133);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) orderedIterator0);
      assertNotNull(iterator0);
  }
}
