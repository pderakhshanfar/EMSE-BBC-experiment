/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 03:04:56 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Stack<Boolean> stack0 = new Stack<Boolean>();
      ReverseListIterator<Boolean> reverseListIterator0 = new ReverseListIterator<Boolean>(stack0);
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(stack0);
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>) reverseListIterator0, (Iterator<? extends Boolean>) reverseListIterator0, (Iterator<? extends Boolean>) loopingIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Vector<Boolean> vector0 = new Vector<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(vector0);
      Iterator<Boolean> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Boolean>) loopingIterator0);
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>) loopingIterator0, (Iterator<? extends Boolean>) iterator0, (Iterator<? extends Boolean>) loopingIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator1 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Iterator<? extends IIOMetadataNode>) resettableListIterator1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, (Iterator<? extends SQLNonTransientConnectionException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      MapIterator<String, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<String>) mapIterator0;
      ResettableIterator<String> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[1] = (Iterator<String>) resettableIterator0;
      iteratorArray0[2] = (Iterator<String>) resettableIterator0;
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      iteratorArray0[3] = (Iterator<String>) singletonListIterator0;
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      ListIterator<Integer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) objectArrayListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, class0);
      assertNotSame(sQLInvalidAuthorizationSpecExceptionArray0, sQLInvalidAuthorizationSpecExceptionArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      IteratorUtils.toString((Iterator<Integer>) listIterator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      stack0.add(sQLInvalidAuthorizationSpecException0);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) stack0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[5];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      clientInfoStatusArray0[1] = clientInfoStatusArray0[0];
      clientInfoStatusArray0[3] = clientInfoStatusArray0[1];
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.arrayListIterator(clientInfoStatusArray0, 0);
      IteratorUtils.get((Iterator<ClientInfoStatus>) resettableListIterator0, 3);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[5];
      SQLDataException sQLDataException0 = new SQLDataException("", "", 7);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLDataException0);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      Predicate<SQLNonTransientException> predicate0 = EqualPredicate.equalPredicate(sQLNonTransientExceptionArray0[4]);
      SQLNonTransientException sQLNonTransientException0 = IteratorUtils.find((Iterator<SQLNonTransientException>) objectArrayIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertNotNull(sQLNonTransientException0);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("");
      iteratorArray0[0] = (Iterator<String>) listIterator0;
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("");
      iteratorArray0[1] = (Iterator<String>) singletonIterator0;
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) iteratorArray0[1], 0L, 2618L);
      iteratorArray0[2] = (Iterator<String>) boundedIterator0;
      iteratorArray0[3] = (Iterator<String>) singletonIterator0;
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[7];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 1, 1);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[9];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      Vector<Boolean> vector0 = new Vector<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(vector0);
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>) loopingIterator0, (Iterator<? extends Boolean>) loopingIterator0, (Iterator<? extends Boolean>) loopingIterator0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLWarning0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLDataException0, comparator0, comparatorPredicate_Criterion0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(comparatorPredicate0);
      PredicateTransformer<Properties> predicateTransformer0 = new PredicateTransformer<Properties>(notPredicate0);
      Properties properties0 = new Properties();
      Boolean boolean0 = predicateTransformer0.transform(properties0);
      vector0.add(boolean0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Boolean>) zippingIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MapIterator<DataTruncation, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<DataTruncation>) mapIterator0, (-1940L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) singletonIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.isEmpty(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null, 9, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, 895);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Stack<SQLException>[]) null, 2555);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Properties[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("");
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLDataException0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) listIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "k%YEpboftk_R", ", ", ", ");
      assertEquals(", , ", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("");
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) transformer0, "wK\"IY|0;SC2W\"h0Sa", "", "wK\"IY|0;SC2W\"h0Sa");
      assertEquals("wK\"IY|0;SC2W\"h0Sa", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Integer>) null, (Predicate<? super Integer>) anyPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) objectArrayListIterator0, 348);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OrderedMapIterator<SQLDataException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) orderedMapIterator0, 677);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OrderedMapIterator<Integer, Stack<Iterator<Predicate<Object>>>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Integer>) orderedMapIterator0, 0L, (-833L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Hashtable<SQLTimeoutException, String> hashtable0 = new Hashtable<SQLTimeoutException, String>();
      EntrySetMapIterator<SQLTimeoutException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, String>(hashtable0);
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLTimeoutException>) entrySetMapIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0, "[]", "[]", "[]");
      assertEquals("[][]", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) transformer0, (String) null, "c24>j-Wuw4>", "{=-Nt.(m@L;;Y(L]*:c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MapIterator<LinkedHashSet<ClientInfoStatus>, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<ClientInfoStatus>>) mapIterator0, (Transformer<? super LinkedHashSet<ClientInfoStatus>, String>) null, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator(iIOMetadataNode0);
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) singletonIterator0, 819);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 818
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OrderedMapIterator<SQLDataException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(orderedMapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      boolean boolean0 = IteratorUtils.isEmpty(singletonIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(singletonIterator0);
      MapIterator<Integer, EnumSet<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Integer>) mapIterator0, (Predicate<? super Integer>) identityPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OrderedMapIterator<Integer, Stack<HashMap>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Integer>) orderedMapIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[5];
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      Predicate<SQLNonTransientException> predicate0 = EqualPredicate.equalPredicate(sQLNonTransientExceptionArray0[4]);
      IteratorUtils.find((Iterator<SQLNonTransientException>) objectArrayIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      assertTrue(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0, 0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.find((Iterator<Object>) objectArrayIterator0, (Predicate<? super Object>) identityPredicate0);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<SQLTransientException> linkedList0 = new LinkedList<SQLTransientException>();
      LoopingListIterator<SQLTransientException> loopingListIterator0 = new LoopingListIterator<SQLTransientException>(linkedList0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("se.SX");
      linkedList0.add((SQLTransientException) sQLTransactionRollbackException0);
      Predicate<SQLTransientException> predicate0 = TruePredicate.truePredicate();
      AndPredicate<SQLTransientException> andPredicate0 = new AndPredicate<SQLTransientException>(predicate0, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransientException>) loopingListIterator0, (Predicate<? super SQLTransientException>) andPredicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Object object0 = IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) predicate0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      BoundedIterator<SQLInvalidAuthorizationSpecException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0, 557L);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) boundedIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<HashMap<Predicate, StringTokenizer>>) null, (Closure<? super HashMap<Predicate, StringTokenizer>>) closure0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTimeoutException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(anyPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vector<Closure<Object>> vector0 = new Vector<Closure<Object>>();
      LoopingIterator<Closure<Object>> loopingIterator0 = new LoopingIterator<Closure<Object>>(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Closure<Object>>) loopingIterator0, (-17));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      SQLDataException[] sQLDataExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLDataException>) orderedMapIterator0, class0);
      assertEquals(0, sQLDataExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OrderedIterator<EnumSet<Locale.FilteringMode>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterable<EnumSet<Locale.FilteringMode>> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OrderedMapIterator<ClientInfoStatus, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<ClientInfoStatus> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration0, (Collection<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>((-459));
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null, (Collection<? super Properties>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      Iterator<SQLException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Predicate must not be null");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      int int0 = IteratorUtils.size(nodeListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.functors.IdentityPredicate", "|t744Hs@PY");
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) listIterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      NullIsTruePredicate<SQLWarning> nullIsTruePredicate0 = new NullIsTruePredicate<SQLWarning>(comparatorPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) nullIsTruePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Transformer<? super SQLSyntaxErrorException, ? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<SQLSyntaxErrorException, ServiceLoader<IIOMetadataNode>> hashMap0 = new HashMap<SQLSyntaxErrorException, ServiceLoader<IIOMetadataNode>>();
      EntrySetMapIterator<SQLSyntaxErrorException, ServiceLoader<IIOMetadataNode>> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, ServiceLoader<IIOMetadataNode>>(hashMap0);
      Transformer<SQLException, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) entrySetMapIterator0, (Transformer<? super SQLSyntaxErrorException, ? extends Properties>) transformer0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) iterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Transformer<Object, String>>) null, (Iterator<? extends Transformer<Object, String>>) null, (Iterator<? extends Transformer<Object, String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      ObjectArrayIterator<SQLNonTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) objectArrayIterator0);
      assertFalse(objectArrayIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MapIterator<DataTruncation, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SkippingIterator<DataTruncation> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<DataTruncation>) mapIterator0, 0L);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 9);
      iteratorArray0[0] = (Iterator<DataTruncation>) skippingIterator0;
      iteratorArray0[1] = (Iterator<DataTruncation>) mapIterator0;
      iteratorArray0[2] = (Iterator<DataTruncation>) skippingIterator0;
      iteratorArray0[3] = (Iterator<DataTruncation>) skippingIterator0;
      iteratorArray0[4] = (Iterator<DataTruncation>) skippingIterator0;
      iteratorArray0[5] = (Iterator<DataTruncation>) mapIterator0;
      iteratorArray0[6] = (Iterator<DataTruncation>) skippingIterator0;
      iteratorArray0[7] = (Iterator<DataTruncation>) mapIterator0;
      iteratorArray0[8] = (Iterator<DataTruncation>) skippingIterator0;
      Iterator<Object> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<Object>) objectArrayListIterator0, (Transformer<? super Object, String>) transformer0);
      assertFalse(listIterator0.hasNext());
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(">xgm`|#?>I", ">xgm`|#?>I", 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 2454);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.singletonIterator(sQLWarning0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResettableIterator<Predicate<Object>> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[7];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0);
      Iterator<Properties> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Properties>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedHashSet0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, (-2974), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0, 428);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ConstantTransformer<SQLException, DataTruncation> constantTransformer0 = new ConstantTransformer<SQLException, DataTruncation>((DataTruncation) null);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator((DataTruncation) null, (Transformer<? super DataTruncation, ? extends DataTruncation>) constantTransformer0);
      SkippingIterator<DataTruncation> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 0L);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) skippingIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<Object> iterator1 = IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) stack0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Integer>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[4];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("pWW", "pWW", batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<Object> iterator0 = IteratorUtils.pushbackIterator((Iterator<?>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("q[c", "org.apache.commons.collections4.functors.IdentityPredicate", (-1424));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("|t744Hs@PY", "NodeList must not be null", sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, (-1424), (-520));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[5];
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.arrayListIterator(clientInfoStatusArray0, 0);
      IteratorUtils.get((Iterator<ClientInfoStatus>) resettableListIterator0, 3);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = IteratorUtils.contains((Iterator<TreeSet<SQLNonTransientConnectionException>>) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0, (-1358));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLDataException0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      ListIterator<SQLRecoverableException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) listIterator0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("Enumeration must not be null", "Enumeration must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0, (-3027));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedMapIterator<SQLDataException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(orderedMapIterator0);
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) stack0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      ListIterator<SQLNonTransientException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasPrevious());
  }
}
