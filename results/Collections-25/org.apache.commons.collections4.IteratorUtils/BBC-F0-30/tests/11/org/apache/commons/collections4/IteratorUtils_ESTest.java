/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 03:03:56 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.UserDataHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLFeatureNotSupportedException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator1, class0);
      MapIterator<SQLInvalidAuthorizationSpecException, SQLException> mapIterator2 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator2, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      EmptyListIterator.emptyListIterator();
      Class<SQLSyntaxErrorException>[] classArray0 = (Class<SQLSyntaxErrorException>[]) Array.newInstance(Class.class, 6);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      classArray0[0] = class0;
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      classArray0[1] = class1;
      Class<SQLSyntaxErrorException> class2 = SQLSyntaxErrorException.class;
      classArray0[2] = class2;
      Class<SQLSyntaxErrorException> class3 = SQLSyntaxErrorException.class;
      classArray0[3] = class3;
      Class<SQLSyntaxErrorException> class4 = SQLSyntaxErrorException.class;
      classArray0[4] = class4;
      Class<SQLSyntaxErrorException> class5 = SQLSyntaxErrorException.class;
      classArray0[5] = class5;
      Transformer<Object, Object> transformer0 = InvokerTransformer.invokerTransformer("jM.n>YCm>t;q0", (Class<?>[]) classArray0, (Object[]) classArray0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.apply((Iterator<Properties>) resettableListIterator0, (Closure<? super Properties>) closure0);
      ArrayDeque<SQLTransientException>[] arrayDequeArray0 = (ArrayDeque<SQLTransientException>[]) Array.newInstance(ArrayDeque.class, 3);
      ArrayDeque<SQLTransientException> arrayDeque0 = new ArrayDeque<SQLTransientException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLTransientException> arrayDeque1 = new ArrayDeque<SQLTransientException>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<SQLTransientException> arrayDeque2 = new ArrayDeque<SQLTransientException>();
      arrayDequeArray0[2] = arrayDeque2;
      ObjectArrayListIterator<ArrayDeque<SQLTransientException>> objectArrayListIterator0 = new ObjectArrayListIterator<ArrayDeque<SQLTransientException>>(arrayDequeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<ArrayDeque<SQLTransientException>>) objectArrayListIterator0, (Closure<? super ArrayDeque<SQLTransientException>>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'jM.n>YCm>t;q0' on 'class java.util.ArrayDeque' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>(predicate0);
      Comparator<SQLRecoverableException> comparator0 = null;
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLFeatureNotSupportedException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(instanceofPredicate0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, SQLRecoverableException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLInvalidAuthorizationSpecException, ? extends SQLRecoverableException>) orderedMapIterator0);
      notPredicate0.evaluate("");
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator1, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator1, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) zippingIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) notPredicate0);
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLFeatureNotSupportedException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator1, class0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyMapIterator();
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) zippingIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      String string0 = null;
      // Undeclared exception!
      try { 
        iIOMetadataNode1.getElementsByTagName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransactionRollbackException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0);
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDeque0.clone();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLFeatureNotSupportedException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>((Predicate<? super SQLNonTransientException>) null);
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingListIterator0);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Factory<BatchUpdateException> factory0 = ConstantFactory.constantFactory((BatchUpdateException) null);
      Transformer<Object, BatchUpdateException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends BatchUpdateException>) factory0);
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("9uG+|Z/D", "9uG+|Z/D", sQLTransientConnectionException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLTransactionRollbackException1);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      predicateArray0[0] = (Predicate<Object>) transformedPredicate0;
      AllPredicate<SQLNonTransientException> allPredicate0 = new AllPredicate<SQLNonTransientException>(predicateArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) allPredicate0);
      assertNull(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(stack0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) notPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertNull(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<SQLTransientConnectionException, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, EnumSet<Locale.Category>> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientConnectionException, ? extends EnumSet<Locale.Category>>) mapIterator0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) mapIterator1, (Iterator<? extends SQLTransientConnectionException>) mapIterator0);
      Properties properties1 = new Properties();
      IteratorUtils.size(orderedMapIterator0);
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Properties properties0 = new Properties();
      Object object0 = new Object();
      Properties properties1 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Properties properties0 = new Properties();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransactionRollbackException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet2 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet3 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet4 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet5 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<Properties>) null, (Closure<? super Properties>) closure0);
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, true, (-1), (-708), sQLClientInfoException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Properties properties0 = new Properties();
      ConstantFactory<Properties> constantFactory0 = new ConstantFactory<Properties>(properties0);
      ConstantFactory<Properties> constantFactory1 = new ConstantFactory<Properties>(properties0);
      FactoryTransformer<Object, Properties> factoryTransformer0 = new FactoryTransformer<Object, Properties>(constantFactory1);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 4);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[2] = class2;
      Class<Properties> class3 = Properties.class;
      classArray0[3] = class3;
      InvokerTransformer<Properties, Properties> invokerTransformer0 = new InvokerTransformer<Properties, Properties>(",b_/", classArray0, classArray0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) invokerTransformer0);
      IteratorUtils.chainedIterator((Iterator<?>) iterator0, (Iterator<?>) iterator0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.isEmpty(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ',b_/' on 'class java.util.Properties' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>(predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) nullIsExceptionPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("BVq&$+${~}P+!FI");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransactionRollbackException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0);
      Properties properties0 = new Properties();
      ExceptionFactory.exceptionFactory();
      Factory<SQLTimeoutException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<SQLTimeoutException> predicate1 = OrPredicate.orPredicate((Predicate<? super SQLTimeoutException>) predicate0, (Predicate<? super SQLTimeoutException>) predicate0);
      Hashtable<SQLWarning, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLWarning, SQLTransactionRollbackException>();
      hashtable0.elements();
      Iterator<SQLTransactionRollbackException> iterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 1);
      ArrayIterator<IIOMetadataNode> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<IIOMetadataNode>(predicate1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLFeatureNotSupportedException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator1, class0);
      int int0 = (-308);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[]", "[]", (-308));
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(class0, (Equator<Object>) null);
      IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) singletonListIterator0, (Predicate<? super SQLTransactionRollbackException>) equalPredicate0);
      ArrayIterator<IIOMetadataNode> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<IIOMetadataNode>(equalPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, InstanceofPredicate> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends InstanceofPredicate>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator1);
      Properties properties0 = new Properties();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator1);
      Factory<SQLTimeoutException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      OrPredicate.orPredicate((Predicate<? super SQLTimeoutException>) predicate0, (Predicate<? super SQLTimeoutException>) predicate0);
      Hashtable<SQLWarning, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLWarning, SQLTransactionRollbackException>();
      hashtable0.elements();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "C8)Ee>3P?gJ#us@$3W", (-308));
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) singletonListIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      ArrayIterator<IIOMetadataNode> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<IIOMetadataNode>(hashtable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransactionRollbackException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      OrPredicate.orPredicate((Predicate<? super SQLTimeoutException>) predicate0, (Predicate<? super SQLTimeoutException>) predicate0);
      Hashtable<SQLWarning, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLWarning, SQLTransactionRollbackException>();
      Enumeration<SQLTransactionRollbackException> enumeration0 = hashtable0.elements();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      IteratorUtils.matchesAll((Iterator<SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      ListIteratorWrapper<InstanceofPredicate> listIteratorWrapper0 = null;
      try {
        listIteratorWrapper0 = new ListIteratorWrapper<InstanceofPredicate>((Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.ListIteratorWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, InstanceofPredicate> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends InstanceofPredicate>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("|L^_=~_YDgY~");
      SQLDataException sQLDataException0 = new SQLDataException("|L^_=~_YDgY~", "", sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, false);
      Factory<SQLTimeoutException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      OrPredicate.orPredicate((Predicate<? super SQLTimeoutException>) predicate0, (Predicate<? super SQLTimeoutException>) predicate0);
      Hashtable<SQLWarning, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLWarning, SQLTransactionRollbackException>();
      Enumeration<SQLTransactionRollbackException> enumeration0 = hashtable0.elements();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      boolean boolean0 = IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      assertTrue(boolean0);
      
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("|L^_=~_YDgY~", sQLDataException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "%EQX+jODUR=qq&Q", sQLDataException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("D3L@o", "", 0, sQLDataException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException(sQLInvalidAuthorizationSpecException0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("");
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("|L^_=~_YDgY~");
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException("", "n<cD}\"S#");
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLFeatureNotSupportedException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("-Burj^T", "QeTwQ'");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("w7Zsl&vT3 u", "w7Zsl&vT3 u", 93, sQLRecoverableException0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, true);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonIterator0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) zippingIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransactionRollbackException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientConnectionException>) iterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLTransientConnectionException0, comparator1, comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) comparatorPredicate0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransactionRollbackException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      EmptyListIterator.emptyListIterator();
      IteratorUtils.size(iterator0);
      Object object0 = new Object();
      StringTokenizer stringTokenizer0 = new StringTokenizer("Closure must not be null", "");
      Iterator<?> iterator1 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(linkedList0);
      String string0 = "";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 2937);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      IteratorUtils.toArray(iterator0);
      IteratorUtils.isEmpty(iterator0);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet2 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet3 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet4 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      String string1 = "~|!PG";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("~|!PG");
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, 2937, 2083);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLFeatureNotSupportedException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      IteratorUtils.matchesAny(iterator1, (Predicate<? super SQLInvalidAuthorizationSpecException>) notPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Iterator<?> iterator2 = IteratorUtils.getIterator(fileSystemHandling0);
      assertNotNull(iterator2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransactionRollbackException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      ListIterator<Object> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.size(listIterator0);
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0);
      Iterable<SQLTransientConnectionException> iterable0 = new Vector<SQLTransientConnectionException>();
      IteratorUtils.emptyOrderedIterator();
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) iterator0, 512);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Factory<SQLTimeoutException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("W3trK+f=agrR6*WC", "#$");
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, true);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_Category0);
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) equalPredicate0, (Predicate<? super Object>) equalPredicate0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = FalsePredicate.falsePredicate();
      predicateArray0[2] = predicate2;
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      predicateArray0[4] = (Predicate<Object>) notPredicate0;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicateArray0[4]);
      predicateArray0[5] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate3 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      NullIsExceptionPredicate<SQLInvalidAuthorizationSpecException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLInvalidAuthorizationSpecException>(predicate3);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) nullIsExceptionPredicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IteratorUtils.emptyIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Factory<SQLTimeoutException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      OrderedIterator<InstanceofPredicate> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Predicate<Object>>) orderedIterator0, (Transformer<? super Predicate<Object>, ? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("5x[_9y*Fah)L[p@~nN", "2", sQLTimeoutException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayIterator0, class0);
      EntrySetMapIterator<DataTruncation, SQLNonTransientException> entrySetMapIterator0 = null;
      try {
        entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLNonTransientException>((Map<DataTruncation, SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.emptyOrderedIterator();
      Factory<SQLTimeoutException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      IteratorUtils.emptyOrderedIterator();
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[5];
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<Integer> class1 = Integer.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      Class<SQLException> class2 = SQLException.class;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[4] = instanceofPredicate4;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0, 0, 0);
      IteratorUtils.transformedIterator((Iterator<? extends Predicate<Object>>) resettableListIterator0, (Transformer<? super Predicate<Object>, ? extends SQLTimeoutException>) factoryTransformer0);
      NotNullPredicate.notNullPredicate();
      FalsePredicate.falsePredicate();
      OrderedMapIterator<Class<SQLException>, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 3);
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLWarning>) orderedIterator0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Properties properties0 = new Properties();
      ConstantFactory<Properties> constantFactory0 = new ConstantFactory<Properties>(properties0);
      FactoryTransformer<Object, Properties> factoryTransformer0 = new FactoryTransformer<Object, Properties>(constantFactory0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) factoryTransformer0);
      IteratorUtils.chainedIterator((Iterator<?>) iterator0, (Iterator<?>) iterator0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet2 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet3 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet4 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet5 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet6 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("~|!PG");
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      IteratorUtils.peekingIterator((Iterator<? extends Properties>) iterator0);
      TransformerClosure.transformerClosure((Transformer<? super Object, ?>) factoryTransformer0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<Properties> closure0 = ChainedClosure.chainedClosure((Closure<? super Properties>[]) closureArray0);
      IteratorUtils.apply(iterator0, (Closure<? super Properties>) closure0);
      MapIterator<InstanceofPredicate, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<InstanceofPredicate, Properties> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Properties properties0 = new Properties();
      ConstantFactory<Properties> constantFactory0 = new ConstantFactory<Properties>(properties0);
      FactoryTransformer<Object, Properties> factoryTransformer0 = new FactoryTransformer<Object, Properties>(constantFactory0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) factoryTransformer0);
      Iterator<Object> iterator1 = IteratorUtils.chainedIterator((Iterator<?>) iterator0, (Iterator<?>) iterator0);
      IteratorUtils.emptyIterator();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      IteratorUtils.toArray(iterator0);
      IteratorUtils.isEmpty(iterator1);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet2 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet3 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet4 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet5 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet6 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("~|!PG", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("~|!PG", "mjr)2`Ps|N9s8D/s", 1, sQLClientInfoException1);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientConnectionException>) listIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("~|!PG");
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      Iterator<Properties> iterator2 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) iterator0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) factoryTransformer0);
      IteratorUtils.apply(iterator2, (Closure<? super Properties>) closure0);
      assertFalse(iterator2.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(linkedList0);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      IteratorUtils.toArray(iterator0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertTrue(boolean0);
      
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet2 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet3 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet4 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet5 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet6 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      sQLClientInfoException1.getFailedProperties();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("list (", hashtable0, sQLClientInfoException1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("~|!PG", "mjr)2`Ps|N9s8D/s", 2937, sQLClientInfoException1);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientConnectionException>) listIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("~|!PG");
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      ResettableListIterator<Properties> resettableListIterator1 = IteratorUtils.arrayListIterator(propertiesArray0, 1, 1);
      Iterator<Properties> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) resettableListIterator1);
      Hashtable<Object, Properties> hashtable1 = new Hashtable<Object, Properties>();
      Transformer<Object, Properties> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Properties>) hashtable1);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply(iterator1, (Closure<? super Properties>) closure0);
      assertFalse(resettableListIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedIterator0, 512);
      iIOMetadataNode1.getNextSibling();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IteratorUtils.emptyIterator();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.emptyOrderedIterator();
      Factory<SQLTimeoutException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      OrderedIterator<InstanceofPredicate> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Predicate<Object>>) orderedIterator0, (Transformer<? super Predicate<Object>, ? extends SQLTimeoutException>) factoryTransformer0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      OrPredicate.orPredicate((Predicate<? super SQLTimeoutException>) predicate0, (Predicate<? super SQLTimeoutException>) predicate0);
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      SQLTimeoutException sQLTimeoutException0 = IteratorUtils.find(iterator0, (Predicate<? super SQLTimeoutException>) predicate1);
      assertNull(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
      assertNull(sQLInvalidAuthorizationSpecException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IteratorUtils.emptyIterator();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iIOMetadataNode0.normalize();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedIterator0, 512);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (-2102));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransactionRollbackException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientConnectionException>) iterator0);
      IteratorUtils.emptyOrderedIterator();
      Hashtable<SQLWarning, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLWarning, SQLTransactionRollbackException>();
      Enumeration<SQLTransactionRollbackException> enumeration0 = hashtable0.elements();
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      Iterator<SQLTransactionRollbackException> iterator2 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) iterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll(iterator2, (Predicate<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.getIterator(linkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNextSibling();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException>(orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException(">`fJb?TKa/", (Throwable) null);
      sQLDataException0.addSuppressed(sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, true);
      Factory<SQLTimeoutException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      OrPredicate.orPredicate((Predicate<? super SQLTimeoutException>) predicate0, (Predicate<? super SQLTimeoutException>) predicate0);
      Hashtable<SQLWarning, SQLTransactionRollbackException> hashtable0 = new Hashtable<SQLWarning, SQLTransactionRollbackException>();
      Enumeration<SQLTransactionRollbackException> enumeration0 = hashtable0.elements();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      boolean boolean0 = IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLTransactionRollbackException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.getIterator(linkedList0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 2937);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      BoundedIterator<SQLInvalidAuthorizationSpecException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, (long) 2937);
      Integer integer0 = new Integer(2937);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer0, defaultEquator0);
      Predicate<SQLNonTransientException> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLNonTransientException>) equalPredicate0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) boundedIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0, defaultEquator0);
      EqualPredicate.equalPredicate((Object) listIterator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) listIterator0, (Predicate<? super SQLTransientException>) nullIsExceptionPredicate0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0, (Collection<? super SQLNonTransientConnectionException>) linkedList0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, (Iterator<? extends SQLNonTransientConnectionException>) iteratorArray0[0]);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.bidimap.TreeBidiMap$Inverse", "", sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, sQLTransientException0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator1 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator1, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      reverseListIterator0.reset();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(notPredicate0, notPredicate0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("z:4|ptR5+");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(andPredicate0, transformer0, transformer0);
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedIterator0, 512);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Properties properties0 = new Properties();
      ConstantFactory<Properties> constantFactory0 = new ConstantFactory<Properties>(properties0);
      ConstantFactory<Properties> constantFactory1 = new ConstantFactory<Properties>(properties0);
      FactoryTransformer<Object, Properties> factoryTransformer0 = new FactoryTransformer<Object, Properties>(constantFactory1);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) factoryTransformer0);
      Iterator<Object> iterator1 = IteratorUtils.chainedIterator((Iterator<?>) iterator0, (Iterator<?>) iterator0);
      IteratorUtils.emptyIterator();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      IteratorUtils.toArray(iterator1);
      IteratorUtils.isEmpty(iterator1);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet2 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet3 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet4 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet5 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet6 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransactionRollbackException0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientConnectionException> iterator2 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) singletonListIterator0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0, (Iterator<? extends SQLTransientConnectionException>) iterator2);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientConnectionException>) singletonListIterator0);
      IteratorUtils.emptyOrderedIterator();
      MapIterator<ArrayList<Object>, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ArrayList<Object>>) mapIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 100
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      HashMap<SQLClientInfoException, Integer> hashMap0 = new HashMap<SQLClientInfoException, Integer>();
      EntrySetMapIterator<SQLClientInfoException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, Integer>(hashMap0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      MapIterator<ServiceLoader<SQLNonTransientException>, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      boolean boolean0 = IteratorUtils.contains((Iterator<ServiceLoader<SQLNonTransientException>>) mapIterator0, (Object) orderedMapIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
      assertFalse(boolean0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.printStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Collection must not be null", mockThrowable0);
      linkedList0.add(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode2);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) arrayList0);
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) resettableListIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.getIterator(resettableIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(", ", "Predicate must not be null", (-1168), sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("", "Predicate must not be null", sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("3y=ybh\"=@tR/#$z", "", (-3431));
      Iterator<SQLDataException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate((Object) listIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("4lyFEJ^e`_e,Dw Z");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      LoopingIterator<DataTruncation> loopingIterator0 = new LoopingIterator<DataTruncation>(priorityQueue0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) loopingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0, (Collection<? super SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLWarning[]) null, (-1731));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      linkedList0.add(sQLInvalidAuthorizationSpecException0);
      reverseListIterator0.reset();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) notPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode1.getChildNodes();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      ConstantTransformer.nullTransformer();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      ListIterator<LinkedHashSet<SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(linkedHashSet0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/9icQR$'I5UQrv]?}", (String) null);
      linkedHashSet0.add(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<SQLFeatureNotSupportedException>>) listIterator0, (Transformer<? super LinkedHashSet<SQLFeatureNotSupportedException>, String>) null, "Iterator must not be null", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      reverseListIterator0.reset();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(notPredicate0, notPredicate0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("z:4|ptR5+");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(andPredicate0, transformer0, transformer0);
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedIterator0, 512);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLFeatureNotSupportedException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator1, class0);
      EntrySetMapIterator<DataTruncation, SQLNonTransientException> entrySetMapIterator0 = null;
      try {
        entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLNonTransientException>((Map<DataTruncation, SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0, defaultEquator0);
      EqualPredicate.equalPredicate((Object) listIterator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) listIterator0, (Predicate<? super SQLTransientException>) nullIsExceptionPredicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(".)5/{", ".)5/{", (-1));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("4lyFEJ^e`_e,Dw Z");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      EnumSet.copyOf(enumSet0);
      Hashtable<SQLRecoverableException, EnumSet<Locale.Category>> hashtable0 = new Hashtable<SQLRecoverableException, EnumSet<Locale.Category>>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("+b", sQLTransactionRollbackException0);
      sQLRecoverableException0.spliterator();
      hashtable0.put(sQLRecoverableException0, enumSet0);
      Enumeration<EnumSet<Locale.Category>> enumeration0 = hashtable0.elements();
      IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.Category>>) enumeration0);
      // Undeclared exception!
      try { 
        UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) zippingIterator0, 0L);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 3);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "0", hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLClientInfoException0);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)61;
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      linkedList0.add(sQLInvalidAuthorizationSpecException0);
      reverseListIterator0.reset();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) zippingIterator0, 0L);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 3);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      String string0 = "";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLClientInfoException0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException1);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) listIterator0;
      Integer integer0 = new Integer(67);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", "5/R+I5RBMn=g'iF.", hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      iteratorArray0[2] = (Iterator<SQLClientInfoException>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      DefaultEquator.defaultEquator();
      IteratorUtils.getIterator((Object) null);
      StringTokenizer stringTokenizer0 = new StringTokenizer("_[trAb\"R[AJ#%z", "U+78e@L@l{qQNghU", false);
      StringTokenizer stringTokenizer1 = new StringTokenizer("U+78e@L@l{qQNghU", (String) null);
      IteratorUtils.singletonIterator(stringTokenizer1);
      Properties properties0 = new Properties();
      IteratorUtils.singletonIterator(properties0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException("", sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, true);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) singletonIterator0);
      TreeSet<SQLNonTransientException> treeSet0 = new TreeSet<SQLNonTransientException>();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) singletonIterator0);
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      Node node0 = iIOMetadataNode1.replaceChild(iIOMetadataNode0, iIOMetadataNode0);
      NodeListIterator nodeListIterator1 = IteratorUtils.nodeListIterator(node0);
      assertNotSame(nodeListIterator1, nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      int int0 = 280;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 280, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) zippingIterator0, 0L);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 3);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      String string0 = "0";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "0", hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLClientInfoException0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException1);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) listIterator0;
      HashMap<SQLClientInfoException, Integer> hashMap1 = new HashMap<SQLClientInfoException, Integer>();
      EntrySetMapIterator<SQLClientInfoException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, Integer>(hashMap1);
      Integer integer0 = new Integer(67);
      // Undeclared exception!
      try { 
        entrySetMapIterator0.setValue(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      Properties properties0 = new Properties();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IteratorUtils.singletonIterator(properties0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.getIterator(resettableIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "", (-3431), sQLTransactionRollbackException0);
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(", ");
      assertEquals(", ", sQLIntegrityConstraintViolationException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      Iterator<SQLSyntaxErrorException> iterator0 = arrayDeque0.iterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Iterator<? extends SQLSyntaxErrorException>) iterator0, (Iterator<? extends SQLSyntaxErrorException>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagName("Iterator setValue() can only be called after next() and before remove()");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      ListIterator<LinkedHashSet<SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(linkedHashSet0);
      IteratorUtils.toString((Iterator<LinkedHashSet<SQLFeatureNotSupportedException>>) listIterator0, (Transformer<? super LinkedHashSet<SQLFeatureNotSupportedException>, String>) transformer0, "org.apache.commons.collections4.collection.UnmodifiableCollection", "Array class must not be null", "c4ii_S2xPq");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2740));
      ConstantTransformer.nullTransformer();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      IteratorUtils.singletonListIterator(linkedHashSet1);
      Transformer<Object, String> transformer1 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<LinkedHashSet<SQLFeatureNotSupportedException>>) listIterator0, (Transformer<? super LinkedHashSet<SQLFeatureNotSupportedException>, String>) transformer1, "c4ii_S2xPq", "org.apache.commons.collections4.functors.PrototypeFactory", "Array class must not be nullnullc4ii_S2xPq");
      assertTrue(listIterator0.hasPrevious());
      assertEquals("org.apache.commons.collections4.functors.PrototypeFactoryArray class must not be nullnullc4ii_S2xPq", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("z}");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      IteratorUtils.singletonIterator((StringTokenizer) null);
      Properties properties0 = new Properties();
      IteratorUtils.singletonIterator(properties0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException("Dm[xEH_]{&n~b!2o", sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>((SQLDataException) null, false);
      Iterator<SQLDataException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) singletonIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) singletonIterator0);
      TreeSet<SQLNonTransientException> treeSet0 = new TreeSet<SQLNonTransientException>();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iterator0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) treeSet0);
      int int0 = IteratorUtils.size(iterator1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 0, sQLClientInfoException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) listIterator0, (Iterator<? extends SQLTransientConnectionException>) listIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientConnectionException>) iterator0);
      IteratorUtils.emptyOrderedIterator();
      MapIterator<ArrayList<Object>, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ArrayList<Object>>) mapIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      Properties properties0 = new Properties();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("2cE`94|]m)Ve", "");
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0);
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(arrayDeque0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientConnectionException>) loopingIterator0);
      IteratorUtils.emptyOrderedIterator();
      MapIterator<ArrayList<Object>, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ArrayList<Object>>) mapIterator0, 91);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 91
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, InstanceofPredicate> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends InstanceofPredicate>) orderedMapIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[8];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      String string0 = "suffix may not be null";
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("suffix may not be null");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("suffix may not be null");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("suffix may not be null");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      IIOMetadataNode iIOMetadataNode6 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[6] = iIOMetadataNode6;
      String string1 = "org.apache.commons.collections4.functors.InstantiateFactory";
      IIOMetadataNode iIOMetadataNode7 = new IIOMetadataNode("org.apache.commons.collections4.functors.InstantiateFactory");
      iIOMetadataNodeArray0[7] = iIOMetadataNode7;
      int int0 = 2696;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 2696);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Properties properties0 = new Properties();
      Factory<Properties> factory0 = new ConstantFactory<Properties>(properties0);
      FactoryTransformer<Object, Properties> factoryTransformer0 = new FactoryTransformer<Object, Properties>(factory0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) factoryTransformer0);
      Iterator<Object> iterator1 = IteratorUtils.chainedIterator((Iterator<?>) iterator0, (Iterator<?>) iterator0);
      IteratorUtils.emptyIterator();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      IteratorUtils.toArray(iterator0);
      IteratorUtils.isEmpty(iterator1);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet2 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet3 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet4 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet5 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet6 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("~|!PG", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("~|!PG", "mjr)2`Ps|N9s8D/s", 1, sQLClientInfoException1);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientConnectionException>) listIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("~|!PG");
      ListIterator<SQLIntegrityConstraintViolationException> listIterator1 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<Properties>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("4a{", "4a{", 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("4a{", (String) null, true);
      IteratorUtils.singletonIterator(stringTokenizer0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1329);
      Integer integer2 = new Integer(10);
      ConstantTransformer.nullTransformer();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      ListIterator<LinkedHashSet<SQLFeatureNotSupportedException>> listIterator0 = IteratorUtils.singletonListIterator(linkedHashSet0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<SQLFeatureNotSupportedException>>) listIterator0, (Transformer<? super LinkedHashSet<SQLFeatureNotSupportedException>, String>) transformer0, "4a{", (String) null, "4a{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.getIterator(resettableIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "", (-3431), sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(", ", "Predicate must not be null", (-1168), sQLTransactionRollbackException1);
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("", "Predicate must not be null", sQLTransactionRollbackException1);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray1 = new SQLTransactionRollbackException[2];
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("3y=ybh\"=@tR/#$z", "", (-3431));
      sQLTransactionRollbackExceptionArray1[0] = sQLTransactionRollbackException6;
      sQLTransactionRollbackExceptionArray1[1] = sQLTransactionRollbackException3;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray1);
      List<SQLTransactionRollbackException> list0 = new LinkedList<SQLTransactionRollbackException>();
      IteratorUtils.loopingListIterator(list0);
      Factory<SQLTimeoutException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLTimeoutException> factoryTransformer0 = new FactoryTransformer<Object, SQLTimeoutException>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Predicate<Object>>) null, (Transformer<? super Predicate<Object>, ? extends SQLTimeoutException>) factoryTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Estimated size must be greater than 0");
      int int0 = 3576;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 3576);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 0, sQLClientInfoException0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      String string0 = IteratorUtils.toString((Iterator<LinkedHashSet<SQLFeatureNotSupportedException>>) null, (Transformer<? super LinkedHashSet<SQLFeatureNotSupportedException>, String>) constantTransformer0, "~t qR9vKeL~ K", "", "Dy Iy%yb&-KEd5`;IF");
      assertEquals("Dy Iy%yb&-KEd5`;IF", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Factory<BatchUpdateException> factory0 = ConstantFactory.constantFactory((BatchUpdateException) null);
      Transformer<Object, BatchUpdateException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends BatchUpdateException>) factory0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.apply((Iterator<Properties>) resettableListIterator0, (Closure<? super Properties>) closure0);
      HashMap<BatchUpdateException, Iterator<BatchUpdateException>> hashMap0 = new HashMap<BatchUpdateException, Iterator<BatchUpdateException>>();
      EntrySetMapIterator<BatchUpdateException, Iterator<BatchUpdateException>> entrySetMapIterator0 = new EntrySetMapIterator<BatchUpdateException, Iterator<BatchUpdateException>>(hashMap0);
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) entrySetMapIterator0, (Iterator<? extends BatchUpdateException>) entrySetMapIterator0, (Iterator<? extends BatchUpdateException>) entrySetMapIterator0);
      Transformer<SQLClientInfoException, String> transformer1 = ConstantTransformer.constantTransformer("jn-*xQk*v nk2");
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, String>) transformer1);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Iterator<Closure<Object>> iterator0 = null;
      OrderedMapIterator<ArrayDeque<IIOMetadataNode>, Closure<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Integer integer0 = new Integer(1073741824);
      IteratorUtils.singletonIterator(integer0);
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) arrayDeque0);
      OrderedMapIterator<ArrayDeque<IIOMetadataNode>, Closure<Object>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<ArrayDeque<IIOMetadataNode>, ? extends Closure<Object>>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<ArrayDeque<IIOMetadataNode>, Closure<Object>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ArrayDeque<IIOMetadataNode>, Closure<Object>>(orderedMapIterator1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      MapIterator<SQLException, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLException>) mapIterator0, (long) (-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<Properties>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("4a{", "4a{", 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      sQLNonTransientException0.setNextException(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.emptyMapIterator();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet2 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet3 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet4 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet5 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet6 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet7 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet8 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException>[] linkedHashSetArray0 = (LinkedHashSet<SQLFeatureNotSupportedException>[]) Array.newInstance(LinkedHashSet.class, 1);
      linkedHashSetArray0[0] = linkedHashSet5;
      ResettableIterator<LinkedHashSet<SQLFeatureNotSupportedException>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0, 0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<SQLFeatureNotSupportedException>>) resettableIterator0, (Transformer<? super LinkedHashSet<SQLFeatureNotSupportedException>, String>) constantTransformer0, "V}P", "vP.[2", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "*$O%3r>gD";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("*$O%3r>gD");
      SQLDataException sQLDataException0 = new SQLDataException("*$O%3r>gD", sQLInvalidAuthorizationSpecException0);
      IteratorUtils.getIterator(sQLDataException0);
      String string1 = "_[trAb\"R[AJ#%z";
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "_[trAb\"R[AJ#%z", true);
      IteratorUtils.singletonIterator(stringTokenizer0);
      int int0 = (-209);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-209));
      int int1 = 0;
      Integer integer2 = new Integer(1095);
      Hashtable<String, ClientInfoStatus> hashtable0 = null;
      try {
        hashtable0 = new Hashtable<String, ClientInfoStatus>(0, (-209));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load: -209.0
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Set<Object> set0 = properties0.keySet();
      IteratorUtils.singletonIterator(properties0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException("NodeList must not be null", sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, false);
      Iterator<SQLDataException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) singletonIterator0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iterator0);
      TreeSet<SQLNonTransientException> treeSet0 = new TreeSet<SQLNonTransientException>();
      Iterator<SQLDataException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) set0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Pc44ad(E)Z`!G", "Pc44ad(E)Z`!G");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Predicate must not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      BoundedIterator<Properties> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Properties>) singletonListIterator0, 0L);
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) boundedIterator0);
      int int0 = (-1210);
      ArrayListIterator<SQLIntegrityConstraintViolationException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLIntegrityConstraintViolationException>(sQLTransactionRollbackException2, (-1210));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OrderedMapIterator<ArrayDeque<IIOMetadataNode>, Closure<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<ArrayDeque<IIOMetadataNode>, Closure<Object>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<ArrayDeque<IIOMetadataNode>, ? extends Closure<Object>>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<ArrayDeque<IIOMetadataNode>, Closure<Object>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ArrayDeque<IIOMetadataNode>, Closure<Object>>(orderedMapIterator1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      MapIterator<SQLException, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLException>) mapIterator0, (long) (-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(">D!b*S,c", sQLInvalidAuthorizationSpecException0);
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException1, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) notPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      properties0.keySet();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(stack0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) notPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.isEmpty(nodeListIterator0);
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      String string0 = "adPe#s/z2hr+";
      int int0 = 67;
      String string1 = "'$:+:x >kd:v__";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("'$:+:x >kd:v__", "adPe#s/z2hr+", 1, hashtable0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLClientInfoException0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 67;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 67;
      intArray0[6] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("adPe#s/z2hr+", intArray0, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) nodeListIterator0, 1238, 67);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) null, (Predicate<? super SQLTransientException>) nullIsExceptionPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Iterator<Closure<Object>> iterator0 = null;
      int int0 = (-4);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Closure<Object>>) null, (-4));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -4
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) null, 2603L, (-1377L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(stack0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) notPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.emptyMapIterator();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet2 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet3 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet4 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet5 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet6 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet7 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet8 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException>[] linkedHashSetArray0 = (LinkedHashSet<SQLFeatureNotSupportedException>[]) Array.newInstance(LinkedHashSet.class, 4);
      linkedHashSetArray0[0] = linkedHashSet0;
      linkedHashSetArray0[1] = linkedHashSet4;
      linkedHashSetArray0[2] = linkedHashSet7;
      linkedHashSetArray0[3] = linkedHashSet0;
      ResettableIterator<LinkedHashSet<SQLFeatureNotSupportedException>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0, 0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<SQLFeatureNotSupportedException>>) resettableIterator0, (Transformer<? super LinkedHashSet<SQLFeatureNotSupportedException>, String>) constantTransformer0, (String) null, "3v{(Yl'E>", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(stack0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) notPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.isEmpty(nodeListIterator0);
      int int0 = 1;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>(1, 1);
      int int1 = 67;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("adPe#s/z2hr+", "adPe#s/z2hr+", 67, hashtable0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0, 1, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Properties properties0 = new Properties();
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Properties> factoryTransformer0 = new FactoryTransformer<Object, Properties>(factory0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) factoryTransformer0);
      IteratorUtils.chainedIterator((Iterator<?>) iterator0, (Iterator<?>) iterator0);
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyMapIterator();
      LinkedHashSet<SQLFeatureNotSupportedException>[] linkedHashSetArray0 = (LinkedHashSet<SQLFeatureNotSupportedException>[]) Array.newInstance(LinkedHashSet.class, 9);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Properties properties0 = new Properties();
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Properties> factoryTransformer0 = new FactoryTransformer<Object, Properties>(factory0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) factoryTransformer0);
      IteratorUtils.chainedIterator((Iterator<?>) iterator0, (Iterator<?>) iterator0);
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyMapIterator();
      LinkedHashSet<SQLFeatureNotSupportedException>[] linkedHashSetArray0 = (LinkedHashSet<SQLFeatureNotSupportedException>[]) Array.newInstance(LinkedHashSet.class, 9);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[1] = linkedHashSet1;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0, defaultEquator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) listIterator0, (Predicate<? super SQLTransientException>) nullIsExceptionPredicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(".)5/{", "Sb?N\")0{voNi0;V#", 0);
      UserDataHandler userDataHandler0 = mock(UserDataHandler.class, new ViolatedAssumptionAnswer());
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("4lyFEJ^e`_e,Dw Z");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("b,$d[ WhE)I_UOd?", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      IteratorUtils.unmodifiableIterator((Iterator<InstanceofPredicate>) resettableListIterator0);
      LoopingIterator<DataTruncation> loopingIterator0 = null;
      try {
        loopingIterator0 = new LoopingIterator<DataTruncation>((Collection<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collection must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Class<Locale.Category> class0 = Locale.Category.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("uBIx.5h", "uBIx.5h");
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<HashMap<ServiceLoader, Hashtable>, BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("z}");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      Properties properties0 = new Properties();
      IteratorUtils.singletonIterator(properties0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException("Dm[xEH_]{&n~b!2o", sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>((SQLDataException) null, false);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) singletonIterator0);
      TreeSet<SQLNonTransientException> treeSet0 = new TreeSet<SQLNonTransientException>();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) singletonIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) treeSet0);
      IteratorUtils.size(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 2);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0;
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) listIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 2);
      IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, SQLIntegrityConstraintViolationException>[] transformerArray0 = (Transformer<Object, SQLIntegrityConstraintViolationException>[]) Array.newInstance(Transformer.class, 1);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Predicate<? super Object>[]) predicateArray0, (Transformer<? super Object, ? extends SQLIntegrityConstraintViolationException>[]) transformerArray0, (Transformer<? super Object, ? extends SQLIntegrityConstraintViolationException>) transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The transformer array must not contain a null transformer, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<Properties>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("4a{", "4a{", 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      sQLNonTransientException0.setNextException(sQLInvalidAuthorizationSpecException0);
      MapIterator<String, Hashtable<SQLNonTransientConnectionException, Properties>> mapIterator0 = IteratorUtils.emptyMapIterator();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      IteratorUtils.boundedIterator((Iterator<? extends String>) mapIterator0, 1521L, (long) 0);
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class2);
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class1);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[7];
      instanceofPredicateArray0[0] = instanceofPredicate1;
      instanceofPredicateArray0[1] = instanceofPredicate2;
      instanceofPredicateArray0[2] = instanceofPredicate2;
      instanceofPredicateArray0[3] = instanceofPredicate0;
      instanceofPredicateArray0[4] = instanceofPredicate0;
      instanceofPredicateArray0[5] = instanceofPredicate1;
      instanceofPredicateArray0[6] = instanceofPredicate1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(instanceofPredicateArray0, 14, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[7];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Pc44ad(E)Z`!G", "Pc44ad(E)Z`!G");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Predicate must not be null");
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("L==+", "tb5#T4", 0, sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("org.apache.commons.collections4.iterators.EmptyListIterator", ", ", 0, sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException(", ", sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("`wHe,!?VRrV,`g~Efi", "`wHe,!?VRrV,`g~Efi", sQLTransactionRollbackException4);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0);
      IteratorUtils.loopingListIterator(list0);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Properties properties0 = new Properties();
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Properties> factoryTransformer0 = new FactoryTransformer<Object, Properties>(factory0);
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) factoryTransformer0);
      IteratorUtils.chainedIterator((Iterator<?>) iterator0, (Iterator<?>) iterator0);
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyMapIterator();
      LinkedHashSet<SQLFeatureNotSupportedException>[] linkedHashSetArray0 = (LinkedHashSet<SQLFeatureNotSupportedException>[]) Array.newInstance(LinkedHashSet.class, 9);
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet2 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet3 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[3] = linkedHashSet3;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet4 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[4] = linkedHashSet4;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet5 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[5] = linkedHashSet5;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet6 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[6] = linkedHashSet6;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet7 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[7] = linkedHashSet7;
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet8 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      linkedHashSetArray0[8] = linkedHashSet8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(linkedHashSetArray0, (-1940));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      ListIteratorWrapper<SQLException> listIteratorWrapper0 = new ListIteratorWrapper<SQLException>(resettableIterator0);
      listIteratorWrapper0.hasNext();
      IteratorUtils.skippingIterator((Iterator<SQLException>) listIteratorWrapper0, 606L);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, 2165);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Integer[] integerArray0 = new Integer[6];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-150));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-150));
      integerArray0[5] = integer5;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.getIterator(resettableIterator0);
      StringTokenizer stringTokenizer0 = null;
      try {
        stringTokenizer0 = new StringTokenizer((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.getIterator(linkedList0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 2937);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, 2937, sQLTransientConnectionException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) objectArrayListIterator0, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0, defaultEquator0);
      EqualPredicate.equalPredicate((Object) listIterator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) listIterator0, (Predicate<? super SQLTransientException>) nullIsExceptionPredicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(".)5/{", ".)5/{", 0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("4lyFEJ^e`_e,Dw Z");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("b,$d[ WhE)I_UOd?", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      IteratorUtils.unmodifiableIterator((Iterator<InstanceofPredicate>) resettableListIterator0);
      LoopingIterator<DataTruncation> loopingIterator0 = null;
      try {
        loopingIterator0 = new LoopingIterator<DataTruncation>((Collection<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collection must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0, defaultEquator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) listIterator0, (Predicate<? super SQLTransientException>) nullIsExceptionPredicate0);
      String string0 = ".)5/{";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(".)5/{");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(".)5/{", "Sb?N\")0{voNi0;V#", 0);
      UserDataHandler userDataHandler0 = mock(UserDataHandler.class, new ViolatedAssumptionAnswer());
      try { 
        iIOMetadataNode0.setUserData("", sQLTransactionRollbackException0, userDataHandler0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(object0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TreeSet<String>[] treeSetArray0 = (TreeSet<String>[]) Array.newInstance(TreeSet.class, 7);
      Comparator<Object> comparator0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>((Comparator<? super String>) null);
      treeSetArray0[0] = treeSet0;
      TreeSet<String> treeSet1 = new TreeSet<String>((Comparator<? super String>) null);
      treeSetArray0[1] = treeSet1;
      TreeSet<String> treeSet2 = new TreeSet<String>();
      String string0 = "org.apache.commons.collections4.functors.IdentityPredicate";
      treeSet2.add("org.apache.commons.collections4.functors.IdentityPredicate");
      treeSetArray0[2] = treeSet2;
      TreeSet<String> treeSet3 = new TreeSet<String>();
      treeSetArray0[3] = treeSet3;
      TreeSet<String> treeSet4 = new TreeSet<String>();
      treeSetArray0[4] = treeSet4;
      TreeSet<String> treeSet5 = new TreeSet<String>();
      treeSetArray0[5] = treeSet5;
      TreeSet<String> treeSet6 = new TreeSet<String>();
      treeSetArray0[6] = treeSet6;
      int int0 = 0;
      ObjectArrayListIterator<TreeSet<String>> objectArrayListIterator0 = new ObjectArrayListIterator<TreeSet<String>>(treeSetArray0, 0, 0);
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) null);
      treeSet3.addAll(treeSet5);
      IteratorUtils.toString((Iterator<TreeSet<String>>) objectArrayListIterator0, (Transformer<? super TreeSet<String>, String>) transformer0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        Locale.Category.valueOf("[]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.Category.[]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLFeatureNotSupportedException, ? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(arrayList0);
      loopingIterator0.size();
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) loopingIterator0, (Iterator<? extends SQLTransientConnectionException>) loopingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("M", hashMap0, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 0, sQLClientInfoException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>) listIterator0, (Iterator<? extends SQLTransientConnectionException>) listIterator0);
      Iterable<SQLTransientConnectionException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientConnectionException>) iterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      List<Iterator<Integer>> list0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Iterator<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 5);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null, 565, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) linkedList0);
      String string0 = "Mjc]PR.IJot1Zabx";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Mjc]PR.IJot1Zabx");
      try { 
        iIOMetadataNode0.getBaseURI();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", "");
      IteratorUtils.nodeListIterator(nodeList0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) nodeList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      vector0.remove((Object) null);
      ReverseListIterator<SQLWarning> reverseListIterator0 = new ReverseListIterator<SQLWarning>(vector0);
      int int0 = 16;
      int int1 = (-2125);
      DataTruncation dataTruncation0 = new DataTruncation(16, false, false, (-2125), (-2125));
      reverseListIterator0.add(dataTruncation0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) reverseListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) reverseListIterator0, (-2125));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(">D!b*S,c", ">D!b*S,c", 0, (Map<String, ClientInfoStatus>) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(">D!b*S,c", ">D!b*S,c", sQLClientInfoException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("I/5>!J", ">D!b*S,c", 3540);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException(sQLClientInfoException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("delimiter may not be null", (Map<String, ClientInfoStatus>) null, sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("I/5>!J", "I/5>!J", 3540, sQLTransientConnectionException3);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) listIterator0, (Iterator<? extends SQLTransientConnectionException>) listIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientConnectionException>) listIterator0);
      OrderedMapIterator<SQLDataException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, Integer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends Integer>) orderedMapIterator0);
      MapIterator<SQLDataException, Integer> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, Integer>) orderedMapIterator1);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) mapIterator0);
      TreeSet<SQLNonTransientException> treeSet0 = new TreeSet<SQLNonTransientException>();
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) treeSet0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 4);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 4);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class2;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      classArray0[2] = class3;
      Class<SQLFeatureNotSupportedException> class4 = SQLFeatureNotSupportedException.class;
      classArray0[3] = class4;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("]", classArray0, classArray0);
      Transformer<Object, String> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) instanceofPredicate0, (Transformer<? super Object, ? extends String>) invokerTransformer0, (Transformer<? super Object, ? extends String>) invokerTransformer0);
      transformerArray0[0] = transformer0;
      Transformer<Object, String> transformer1 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[1] = transformer1;
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("]");
      transformerArray0[2] = (Transformer<Object, String>) constantTransformer0;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[2] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[4] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[5] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[6] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[7] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[8] = (Predicate<Object>) instanceofPredicate0;
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, transformerArray0[2]);
      transformerArray0[3] = (Transformer<Object, String>) switchTransformer0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(transformerArray0, 4362, (-864));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) notPredicate0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(">D!b*S,c", ">D!b*S,c", 0, (Map<String, ClientInfoStatus>) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(">D!b*S,c", ">D!b*S,c", sQLClientInfoException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("I/5>!J", ">D!b*S,c", 3540);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException(sQLClientInfoException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("delimiter may not be null", "", sQLTransientConnectionException2);
      sQLTransientConnectionException2.setNextException(sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) objectArrayListIterator0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>[]) iteratorArray0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientConnectionException2);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLTransientConnectionException3);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("", "delimiter may not be null", sQLTransientConnectionException0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 3540, 3540);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(stack0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) notPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.isEmpty(nodeListIterator0);
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) null, 419);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Closure<Object>>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("z}");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      StringTokenizer stringTokenizer0 = null;
      IteratorUtils.singletonIterator((StringTokenizer) null);
      Properties properties0 = new Properties();
      IteratorUtils.singletonIterator(properties0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException("Dm[xEH_]{&n~b!2o", sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>((SQLDataException) null, false);
      Iterator<SQLDataException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) singletonIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) singletonIterator0);
      TreeSet<SQLNonTransientException> treeSet0 = new TreeSet<SQLNonTransientException>();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) treeSet0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "z}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[7];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Pc44ad(E)Z`!G", "Pc44ad(E)Z`!G");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Predicate must not be null");
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("L==+", "tb5#T4", (-262), sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      sQLTransactionRollbackException2.printStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("org.apache.commons.collections4.iterators.EmptyListIterator", ", ", (-262), sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException(", ", sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("`wHe,!?VRrV,`g~Efi", "`wHe,!?VRrV,`g~Efi", sQLTransactionRollbackException4);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      IteratorUtils.size(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<Properties>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      int int0 = IteratorUtils.size(orderedMapIterator0);
      assertEquals(0, int0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("4a{", "4a{", 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      sQLNonTransientException0.setNextException(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.emptyMapIterator();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet0 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet1 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet2 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet3 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet4 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet5 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet6 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet7 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException> linkedHashSet8 = new LinkedHashSet<SQLFeatureNotSupportedException>();
      LinkedHashSet<SQLFeatureNotSupportedException>[] linkedHashSetArray0 = (LinkedHashSet<SQLFeatureNotSupportedException>[]) Array.newInstance(LinkedHashSet.class, 3);
      linkedHashSetArray0[0] = linkedHashSet0;
      linkedHashSetArray0[1] = linkedHashSet0;
      linkedHashSetArray0[2] = linkedHashSet0;
      ResettableIterator<LinkedHashSet<SQLFeatureNotSupportedException>> resettableIterator0 = IteratorUtils.arrayIterator(linkedHashSetArray0, 0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      String string0 = IteratorUtils.toString((Iterator<LinkedHashSet<SQLFeatureNotSupportedException>>) resettableIterator0, (Transformer<? super LinkedHashSet<SQLFeatureNotSupportedException>, String>) constantTransformer0, ":!gGc%ZC@@`\"3Yw", ", size=", "");
      assertEquals(", size=null:!gGc%ZC@@`\"3Ywnull:!gGc%ZC@@`\"3Ywnull", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, LinkedList<Properties>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      String string0 = "4a{";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("4a{", "4a{", 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      sQLNonTransientException0.setNextException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("ListIterator must not be null", "", 5);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0, 1045);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
