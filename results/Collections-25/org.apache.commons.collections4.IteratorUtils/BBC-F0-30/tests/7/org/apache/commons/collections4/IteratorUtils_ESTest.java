/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 03:00:10 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<SQLRecoverableException, String> hashMap0 = new HashMap<SQLRecoverableException, String>();
      EntrySetMapIterator<SQLRecoverableException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, String>(hashMap0);
      MapIterator<SQLRecoverableException, String> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, String>) entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) mapIterator0, (Iterator<? extends SQLRecoverableException>) entrySetMapIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) singletonListIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, (-3746), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ArrayList<Iterator<Properties>> arrayList0 = new ArrayList<Iterator<Properties>>();
      SingletonIterator<ArrayList<Iterator<Properties>>> singletonIterator0 = new SingletonIterator<ArrayList<Iterator<Properties>>>(arrayList0, true);
      Iterator<ArrayList<Iterator<Properties>>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<ArrayList<Iterator<Properties>>>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) arrayList0);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 3);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) resettableListIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Yv-OD");
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonIterator0);
      assertTrue(list0.contains(sQLInvalidAuthorizationSpecException0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, false);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(3489, true, true, 3489, 3489);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLWarning>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      DataTruncation dataTruncation0 = new DataTruncation((-34), true, false, (-4573), 512);
      stack0.add(dataTruncation0);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-243), true, true, 1273, 1273);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      DataTruncation dataTruncation1 = IteratorUtils.get((Iterator<DataTruncation>) singletonIterator0, 0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Iterator<EnumSet<Locale.Category>>[] iteratorArray0 = (Iterator<EnumSet<Locale.Category>>[]) Array.newInstance(Iterator.class, 3);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 7);
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.arrayIterator(enumSetArray0);
      iteratorArray0[0] = (Iterator<EnumSet<Locale.Category>>) resettableIterator0;
      OrderedMapIterator<EnumSet<Locale.Category>, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[1] = (Iterator<EnumSet<Locale.Category>>) orderedMapIterator0;
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[2] = (Iterator<EnumSet<Locale.Category>>) resettableListIterator0;
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends EnumSet<Locale.Category>>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashSet<Iterator<Properties>>[] hashSetArray0 = (HashSet<Iterator<Properties>>[]) Array.newInstance(HashSet.class, 0);
      ResettableListIterator<HashSet<Iterator<Properties>>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashSetArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("suffix may not be null");
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("tZP$[{;m<U", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) listIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, ", ", "Max parameter must not be negative.", "org.apache.commons.collections4.map.Flat3Map$EntryIterator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'tZP$[{;m<U' on 'class java.sql.SQLRecoverableException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) arrayList0);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 3);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 31, hashtable0);
      arrayList0.add(sQLClientInfoException0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) resettableListIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException((String) null, ".iXKfFVLyO", 8);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      NullIsFalsePredicate<SQLDataException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLDataException>((Predicate<? super SQLDataException>) null);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) singletonListIterator0, (Predicate<? super SQLDataException>) nullIsFalsePredicate0);
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLDataException>) listIterator0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsFalsePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Locale.Category>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>((StringTokenizer) null);
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<StringTokenizer>) singletonIterator0, (Predicate<? super StringTokenizer>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>((SQLRecoverableException) null, true);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(onePredicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsExceptionPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLRecoverableException>) singletonIterator0, (Predicate<? super SQLRecoverableException>) nonePredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MapIterator<SQLNonTransientException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) comparator0, (Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) mapIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Iterator<EnumSet<Locale.Category>>[] iteratorArray0 = (Iterator<EnumSet<Locale.Category>>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends EnumSet<Locale.Category>>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      LoopingIterator<SQLClientInfoException> loopingIterator0 = new LoopingIterator<SQLClientInfoException>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) loopingIterator0, 862L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(objectArray0, 3, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, (-1878));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 123, (-3587));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 3769);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, (-2806));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ServiceLoader<SQLNonTransientException>[] serviceLoaderArray0 = (ServiceLoader<SQLNonTransientException>[]) Array.newInstance(ServiceLoader.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(serviceLoaderArray0, 2504);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Integer integer0 = new Integer(428);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0, 428);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      SingletonListIterator<LinkedHashSet<Properties>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<Properties>>((LinkedHashSet<Properties>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<LinkedHashSet<Properties>>) singletonListIterator0, (Closure<? super LinkedHashSet<Properties>>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("");
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedMapIterator0, (Transformer<? super SQLRecoverableException, String>) constantTransformer0, "org.apache.commons.collections4.map.Flat3Map", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MapIterator<SQLRecoverableException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) mapIterator0, (Transformer<? super SQLRecoverableException, String>) null, "org.apache.commons.collections4.functors.ExceptionTransformer", "yHe*", "l-jTJdB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLInvalidAuthorizationSpecException0, comparator0, comparatorPredicate_Criterion0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<PriorityQueue<SQLWarning>>) null, (Predicate<? super PriorityQueue<SQLWarning>>) comparatorPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      List<SQLNonTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) objectArrayIterator0, 31);
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) resettableIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "0W$MV", "\"|@R6a", "a?KeshAwH+*8ymB,7->");
      assertEquals("\"|@R6anulla?KeshAwH+*8ymB,7->", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) transformer0, "", "RVH9qVG^/P~", "");
      assertEquals("RVH9qVG^/P~", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("]}i$qZ)", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedMapIterator0, (Transformer<? super SQLRecoverableException, String>) invokerTransformer0, "0W$MV", "]}i$qZ)", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("Predicate must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedMapIterator0, (Transformer<? super SQLRecoverableException, String>) constantTransformer0, "/H", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("[");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedMapIterator0, (Transformer<? super SQLRecoverableException, String>) constantTransformer0, (String) null, (String) null, "jP)`lwM]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("83N-TBP>S.hEN)5", "", sQLTransientException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>(stringArray0[0]);
      String string0 = IteratorUtils.get((Iterator<String>) singletonIterator0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1, true, false, 1, 1);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OrderedIterator<LinkedList<SQLRecoverableException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      boolean boolean0 = IteratorUtils.isEmpty(orderedIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("AWeQX", "AWeQX", true);
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      StringTokenizer stringTokenizer1 = new StringTokenizer("AWeQX");
      IdentityPredicate<StringTokenizer> identityPredicate0 = new IdentityPredicate<StringTokenizer>(stringTokenizer1);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<StringTokenizer>) singletonIterator0, (Predicate<? super StringTokenizer>) identityPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("AWeQX", "AWeQX", true);
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      IdentityPredicate<StringTokenizer> identityPredicate0 = new IdentityPredicate<StringTokenizer>(stringTokenizer0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<StringTokenizer>) singletonIterator0, (Predicate<? super StringTokenizer>) identityPredicate0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>((StringTokenizer) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<StringTokenizer>) singletonIterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("{", "{", true);
      IdentityPredicate<StringTokenizer> identityPredicate0 = new IdentityPredicate<StringTokenizer>(stringTokenizer0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<StringTokenizer>) null, (Predicate<? super StringTokenizer>) identityPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      PriorityQueue<SQLIntegrityConstraintViolationException> priorityQueue0 = new PriorityQueue<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("u:7(hFd?:E*>zv", "?n{y6YdBH0");
      priorityQueue0.add(sQLIntegrityConstraintViolationException0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) priorityQueue0);
      // Undeclared exception!
      IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Object) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      PriorityQueue<SQLIntegrityConstraintViolationException> priorityQueue0 = new PriorityQueue<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) priorityQueue0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Object) linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLTransactionRollbackException>) loopingListIterator0, (Predicate<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("0W$MV", "0W$MV");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("0W$MV", "", sQLNonTransientException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("0W$MV", (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLClientInfoException0, defaultEquator0);
      SQLDataException sQLDataException0 = new SQLDataException();
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(equalPredicate0);
      Boolean boolean0 = predicateTransformer0.transform(sQLDataException0);
      SingletonIterator<Boolean> singletonIterator0 = new SingletonIterator<Boolean>(boolean0);
      IteratorUtils.find((Iterator<Boolean>) singletonIterator0, (Predicate<? super Boolean>) equalPredicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      Boolean boolean0 = IteratorUtils.find((Iterator<Boolean>) null, (Predicate<? super Boolean>) predicate0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashSet<SQLIntegrityConstraintViolationException> hashSet0 = new HashSet<SQLIntegrityConstraintViolationException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = hashSet0.iterator();
      BoundedIterator<Object> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<?>) iterator0, 2701L);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) boundedIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      closureArray0[0] = closure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      SingletonListIterator<LinkedHashSet<Properties>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<Properties>>(linkedHashSet0);
      IteratorUtils.apply((Iterator<LinkedHashSet<Properties>>) singletonListIterator0, (Closure<? super LinkedHashSet<Properties>>) chainedClosure0);
      assertFalse(singletonListIterator0.hasNext());
      assertTrue(singletonListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 7);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("Transformer must not be null", classArray0, classArray0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) invokerTransformer0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0, closure0);
      IteratorUtils.apply((Iterator<IIOMetadataNode>) null, (Closure<? super IIOMetadataNode>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      SingletonListIterator<LinkedHashSet<Properties>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<Properties>>(linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<LinkedHashSet<Properties>>) singletonListIterator0, (Closure<? super LinkedHashSet<Properties>>) closureArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      SingletonListIterator<LinkedHashSet<Properties>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<Properties>>(linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<LinkedHashSet<Properties>>) singletonListIterator0, (Closure<? super LinkedHashSet<Properties>>) chainedClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("Y=Q%.7{y#uG");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("0W$MV");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTransientConnectionException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableIterator<Vector<StringTokenizer>> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1, true, false, 1, 1);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      Class<DataTruncation> class0 = DataTruncation.class;
      DataTruncation[] dataTruncationArray0 = IteratorUtils.toArray((Iterator<? extends DataTruncation>) resettableIterator0, class0);
      assertEquals(1, dataTruncationArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) objectArrayIterator0, (-3746));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLDataException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      SQLDataException[] sQLDataExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLDataException>) iterator0, class0);
      assertEquals(0, sQLDataExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<SQLDataException, HashSet<SQLTransientConnectionException>> hashMap0 = new HashMap<SQLDataException, HashSet<SQLTransientConnectionException>>();
      EntrySetMapIterator<SQLDataException, HashSet<SQLTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, HashSet<SQLTransientConnectionException>>(hashMap0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(arrayList0);
      Iterable<SQLFeatureNotSupportedException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) reverseListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "Collection must not be null", 794, sQLClientInfoException0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) null);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0, (Collection<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(hashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.Category>>) null, (Collection<? super EnumSet<Locale.Category>>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(arrayList0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) loopingListIterator0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>((SQLRecoverableException) null, true);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) singletonIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) loopingListIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLTransactionRollbackException>(orderedMapIterator0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<SQLWarning> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLWarning>>) linkedHashSet0);
      ListIterator<SQLWarning> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLWarning>) listIterator0, (Predicate<? super SQLWarning>) predicate0);
      ListIterator<SQLWarning> listIterator2 = IteratorUtils.unmodifiableListIterator(listIterator1);
      assertFalse(listIterator2.hasNext());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) null, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLTransactionRollbackException>(orderedMapIterator0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(abstractOrderedMapIteratorDecorator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Predicate<? super DataTruncation>) equalPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends String>) null, (Transformer<? super String, ? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<String, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<String, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<String, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLInvalidAuthorizationSpecException>(hashMap0);
      Transformer<Object, SQLRecoverableException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends String>) entrySetMapIterator0, (Transformer<? super String, ? extends SQLRecoverableException>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Comparator<SQLInvalidAuthorizationSpecException> comparator0 = (Comparator<SQLInvalidAuthorizationSpecException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<SQLDataException, HashSet<SQLTransientConnectionException>> hashMap0 = new HashMap<SQLDataException, HashSet<SQLTransientConnectionException>>();
      EntrySetMapIterator<SQLDataException, HashSet<SQLTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, HashSet<SQLTransientConnectionException>>(hashMap0);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) entrySetMapIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) arrayList0);
      SkippingIterator<SQLNonTransientConnectionException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, 1L);
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLNonTransientConnectionException>) skippingIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ResettableIterator<Object> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) resettableIterator0, (Transformer<? super Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("h]qqj");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("9l6bH#->D)dC4^cb", "h]qqj", (-2220), hashtable0, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0, 0, (-3118));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) resettableIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 9
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = arrayList0.listIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MapIterator<SQLRecoverableException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, 0L, (long) 3770);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) resettableIterator0, 568);
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends String>) loopingIterator0, (Transformer<? super String, ? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<SQLDataException, HashSet<SQLTransientConnectionException>> hashMap0 = new HashMap<SQLDataException, HashSet<SQLTransientConnectionException>>();
      EntrySetMapIterator<SQLDataException, HashSet<SQLTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, HashSet<SQLTransientConnectionException>>(hashMap0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) entrySetMapIterator0, (Iterator<? extends SQLNonTransientException>) entrySetMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, (-2499), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      String string0 = IteratorUtils.toString((Iterator<Locale.Category>) resettableIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Array class must not be null", "org.apache.commons.collections4.iterators.ReverseListIterator");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(34, false, false, 3770, 34);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      Iterator<SQLException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[6];
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, (long) (-56));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) constantTransformer0, 568);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OrderedIterator<LinkedList<SQLRecoverableException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(orderedIterator0, defaultEquator0);
      SQLDataException sQLDataException0 = new SQLDataException();
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(equalPredicate0);
      Boolean boolean0 = predicateTransformer0.transform(sQLDataException0);
      SingletonIterator<Boolean> singletonIterator0 = new SingletonIterator<Boolean>(boolean0);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      IteratorUtils.find((Iterator<Boolean>) singletonIterator0, (Predicate<? super Boolean>) predicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("suffix may not be null");
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      ListIterator<SQLRecoverableException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertTrue(listIterator1.hasNext());
  }
}
