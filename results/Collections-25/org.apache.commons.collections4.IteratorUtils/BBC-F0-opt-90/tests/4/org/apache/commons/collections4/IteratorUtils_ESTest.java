/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 21:01:12 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 8);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      Class<String> class6 = String.class;
      classArray0[6] = class6;
      Class<String> class7 = String.class;
      classArray0[7] = class7;
      ResettableIterator<Class<String>> resettableIterator0 = IteratorUtils.arrayIterator(classArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>((Predicate<? super Object>) null);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(nullIsTruePredicate0, (Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Class<String>>) resettableIterator0, (Predicate<? super Class<String>>) orPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLRecoverableException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, (Class<SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("-E~8q&%|5dsLBIrM><%");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonListIterator0.forEachRemaining(consumer0);
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) singletonListIterator0);
      IteratorUtils.toString((Iterator<String>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-1031), true, false, 2056, (-1031));
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      Iterator<SQLWarning> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) singletonIterator0, (Iterator<? extends SQLWarning>) singletonIterator0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLWarning, String>) transformer0, "", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[41];
      IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", (-1199));
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLDataException>) resettableIterator0, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) iterator0, class0);
      String string0 = "=?<48hFA";
      int int0 = (-457);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[cxd!_?z", "=?<48hFA", (-457));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("=?<48hFA", "[cxd!_?z", sQLIntegrityConstraintViolationException0);
      Transformer<SQLException, SQLFeatureNotSupportedException> transformer0 = InvokerTransformer.invokerTransformer("T");
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      Predicate<SQLException> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<SQLException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) predicate0);
      NullIsTruePredicate<SQLException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLException>(predicate1);
      Predicate<SQLException> predicate2 = NotPredicate.notPredicate((Predicate<? super SQLException>) nullIsTruePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator1, (Predicate<? super SQLFeatureNotSupportedException>) predicate2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'T' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) iterator0, class0);
      IteratorUtils.arrayListIterator((SQLException[]) sQLRecoverableExceptionArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      UniquePredicate<SQLDataException> uniquePredicate0 = new UniquePredicate<SQLDataException>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet.of(locale_Category0);
      OrderedMapIterator<SQLSyntaxErrorException, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, SQLTimeoutException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends SQLTimeoutException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLTimeoutException>(orderedMapIterator1);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0, 1073741811);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[41];
      IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      SQLDataException sQLDataException0 = new SQLDataException();
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) nullIsTruePredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[41];
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      int int0 = 6;
      IteratorUtils.get((Iterator<SQLTransactionRollbackException>) resettableListIterator0, 6);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("u1J", "[", (Throwable) null);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("[", "");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "[", sQLSyntaxErrorException1);
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException(" UCNr-[)1GB`pVq", "e", 2436, sQLDataException0);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException((String) null, "[");
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("");
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      SQLSyntaxErrorException sQLSyntaxErrorException8 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[8] = sQLSyntaxErrorException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 6, (-43));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[41];
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransactionRollbackException>) resettableListIterator0, 6);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) resettableListIterator0);
      ListIteratorWrapper<Closure<Object>> listIteratorWrapper0 = null;
      try {
        listIteratorWrapper0 = new ListIteratorWrapper<Closure<Object>>((Iterator<? extends Closure<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.ListIteratorWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IteratorUtils.emptyOrderedMapIterator();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("'$");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("'$", "'$", (-1395));
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("\"xTiAo&\"!#%ocR");
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("\"xTiAo&\"!#%ocR", "'$", 3);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 3, (-1395));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException0;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransactionRollbackException>) resettableListIterator0, 0);
      EmptyMapIterator.emptyMapIterator();
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 4, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[36];
      IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      DefaultEquator<SQLSyntaxErrorException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLSyntaxErrorException> equalPredicate0 = new EqualPredicate<SQLSyntaxErrorException>((SQLSyntaxErrorException) null, defaultEquator0);
      SingletonListIterator<SQLSyntaxErrorException> singletonListIterator0 = new SingletonListIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException) null);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) singletonListIterator0, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
      OrderedMapIterator<IIOMetadataNode, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, Boolean>) orderedMapIterator0);
      IteratorUtils.toString((Iterator<IIOMetadataNode>) orderedMapIterator0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>(instanceofPredicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      ConstantTransformer.constantTransformer((SQLTransientException) sQLTransientConnectionException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      ConstantTransformer.constantTransformer(sQLTransientException0);
      IteratorUtils.objectGraphIterator((Predicate<Object>) null, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) constantTransformer0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TreeSet<SQLException> treeSet0 = new TreeSet<SQLException>();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null, (Throwable) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException((String) null, "*P78tH:uLIsEl=[{", (-1504), (Map<String, ClientInfoStatus>) null, (Throwable) null);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("*P78tH:uLIsEl=[{", "lHuM8R#D", (-1504), (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException((String) null, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException((String) null, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException8;
      SQLClientInfoException sQLClientInfoException9 = new SQLClientInfoException("w!", "", (Map<String, ClientInfoStatus>) null, sQLClientInfoException3);
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException9;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) nonePredicate0);
      AnyPredicate<SQLClientInfoException> anyPredicate0 = new AnyPredicate<SQLClientInfoException>((Predicate<? super SQLClientInfoException>[]) null);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) anyPredicate0);
      ResettableListIterator<DataTruncation> resettableListIterator1 = IteratorUtils.emptyListIterator();
      ListIterator<SQLWarning> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) resettableListIterator1);
      IteratorUtils.skippingIterator((Iterator<SQLWarning>) listIterator1, 0L);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[");
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("g:$j|n+");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0, "iYTA@", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<DataTruncation, TreeSet<SQLWarning>> hashMap0 = new HashMap<DataTruncation, TreeSet<SQLWarning>>();
      hashMap0.clear();
      EntrySetMapIterator<DataTruncation, TreeSet<SQLWarning>> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, TreeSet<SQLWarning>>(hashMap0);
      entrySetMapIterator0.reset();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) entrySetMapIterator0, (Transformer<? super DataTruncation, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Iterator<BatchUpdateException> iterator0 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", sQLTransientConnectionException0);
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLDataException0);
      IteratorUtils.find((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException0;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ResettableIterator<SQLWarning> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<Iterator<SQLWarning>> listIterator0 = IteratorUtils.singletonListIterator((Iterator<SQLWarning>) resettableIterator0);
      IteratorUtils.toString((Iterator<Iterator<SQLWarning>>) listIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ListIterator<SQLRecoverableException> listIterator1 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 8);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      classArray0[4] = class0;
      Class<String> class4 = String.class;
      classArray0[5] = class4;
      Class<String> class5 = String.class;
      classArray0[6] = class5;
      Class<String> class6 = String.class;
      classArray0[7] = class6;
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("[org.apache.commons.collections4.iterators.EmptyIterator@2]", (Class<?>[]) classArray0, (Object[]) classArray0);
      Predicate<SQLException> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super SQLException, Boolean>) transformer0);
      ListIterator<SQLRecoverableException> listIterator2 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) listIterator1, (Predicate<? super SQLRecoverableException>) predicate0);
      Class<SQLRecoverableException> class7 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) listIterator2, class7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '[org.apache.commons.collections4.iterators.EmptyIterator@2]' on 'class java.sql.SQLRecoverableException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      InvokerTransformer.invokerTransformer("r0Q@");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) orderedIterator0, (Transformer<? super SQLRecoverableException, ? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OrderedMapIterator<Iterator<SQLTimeoutException>, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      EqualPredicate.equalPredicate((Object) orderedMapIterator0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<Object>) null, (Closure<? super Object>) closure0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ConstantTransformer.nullTransformer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Iterator<SQLTimeoutException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) transformerClosure0;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Object>) resettableIterator0, (Closure<? super Object>) transformerClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      InvokerTransformer.invokerTransformer("Closure must not be null");
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator");
      SQLDataException sQLDataException0 = new SQLDataException(sQLInvalidAuthorizationSpecException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLDataException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Closure must not be null", "Gk4?%GkK)x", 325, sQLDataException0);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Transformer<SQLNonTransientException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLNonTransientException>) objectArrayListIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator", ";NQ(%thOi=", "\"jOY=i~)");
      MapIterator<BatchUpdateException, Object> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<BatchUpdateException, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<BatchUpdateException, Object>(mapIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) abstractMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) listIterator1);
      EmptyMapIterator.emptyMapIterator();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(listIterator1);
      Properties properties0 = new Properties();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(properties0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) identityPredicate0, (Closure<? super Object>) closure0, (Closure<? super Object>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Object>) singletonIterator0, (Closure<? super Object>) closure1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[8];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLDataException sQLDataException0 = new SQLDataException("l`y-=;GI_Wl(2!4$|");
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, sQLDataException0);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("l`y-=;GI_Wl(2!4$|", "", sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null, "?C)*]{'d=g+P");
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLFeatureNotSupportedException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("l`y-=;GI_Wl(2!4$|", "iC%~KQ}2mEg(]'Xi", 1);
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "", 586, sQLNonTransientExceptionArray0[5]);
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLIntegrityConstraintViolationException1;
      SQLDataException sQLDataException1 = new SQLDataException("", sQLNonTransientExceptionArray0[5]);
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLDataException1;
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      IteratorUtils.filteredIterator((Iterator<?>) objectArrayIterator0, (Predicate<? super Object>) equalPredicate0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) objectArrayIterator0, (Iterator<? extends SQLNonTransientException>) objectArrayIterator0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) objectArrayIterator0, (Predicate<? super SQLNonTransientException>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      ListIterator<DataTruncation> listIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      IteratorUtils.find((Iterator<Iterator<SQLTimeoutException>>) null, (Predicate<? super Iterator<SQLTimeoutException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      MapIterator<SQLIntegrityConstraintViolationException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 123, (Throwable) null);
      ConstantFactory<SQLTimeoutException> constantFactory0 = new ConstantFactory<SQLTimeoutException>(sQLTimeoutException0);
      Transformer<Object, SQLTransientException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTransientException>) constantFactory0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mapIterator0;
      objectArray0[1] = (Object) nodeListIterator0;
      objectArray0[2] = (Object) sQLTimeoutException0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) nodeListIterator0;
      objectArray0[6] = (Object) sQLTimeoutException0;
      objectArray0[7] = (Object) constantFactory0;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      IteratorUtils.apply((Iterator<Object>) resettableIterator0, (Closure<? super Object>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 1;
      String string0 = "z";
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 8);
      OrderedMapIterator<DataTruncation, ClientInfoStatus> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, ClientInfoStatus> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, ClientInfoStatus>(orderedMapIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) abstractOrderedMapIteratorDecorator0;
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<DataTruncation>) orderedIterator0;
      OrderedIterator<DataTruncation> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[2] = (Iterator<DataTruncation>) orderedIterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "7Qej!J", 1);
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.emptyIterator();
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Locale.Category>) resettableIterator0);
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      DataTruncation dataTruncation0 = new DataTruncation(1312, true, true, 1312, (-2633));
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) dataTruncation0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      ResettableIterator<Iterator<SQLTimeoutException>> resettableIterator0 = IteratorUtils.singletonIterator((Iterator<SQLTimeoutException>) objectArrayIterator0);
      List<Iterator<SQLTimeoutException>> list0 = IteratorUtils.toList((Iterator<? extends Iterator<SQLTimeoutException>>) resettableIterator0);
      ResettableListIterator<Iterator<SQLTimeoutException>> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      IteratorUtils.find((Iterator<Iterator<SQLTimeoutException>>) resettableListIterator0, (Predicate<? super Iterator<SQLTimeoutException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OrderedMapIterator<Iterator<SQLTimeoutException>, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedMapIterator0);
      IteratorUtils.find((Iterator<Iterator<SQLTimeoutException>>) orderedMapIterator0, (Predicate<? super Iterator<SQLTimeoutException>>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLException>) null, (Predicate<? super SQLException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OrderedMapIterator<Boolean, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      BoundedIterator<Boolean> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Boolean>) orderedMapIterator0, 0L, 813L);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getChildNodes();
      ListIterator<DataTruncation> listIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qaEGO~=NP");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 1, sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, sQLTransactionRollbackException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("qaEGO~=NP", "", 1);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[4];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException1;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransactionRollbackException>) resettableListIterator0, 1);
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The method to invoke must not be null
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MapIterator<LinkedList<SQLNonTransientConnectionException>, LinkedHashSet<Boolean>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("Estimated size must be greater than 0");
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>(treeSet0);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedList0);
      IteratorUtils.toString((Iterator<Integer>) resettableIterator0, (Transformer<? super Integer, String>) transformer0, "org.apache.commons.collections4.iterators.LazyIteratorChain", "Estimated size must be greater than 0", "~q=JV");
      EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      IteratorUtils.getIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      InvokerTransformer.invokerTransformer("");
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0);
      IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) equalPredicate0);
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("suffix may not be null", "suffix may not be null", 1817, sQLTransactionRollbackException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("suffix may not be null", "kqS=^e[p)oho>un");
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("yD`lhK4", "kqS=^e[p)oho>un", 1817, (Throwable) null);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(objectArrayListIterator0);
      ResettableIterator<Iterator<SQLTimeoutException>> resettableIterator0 = IteratorUtils.singletonIterator((Iterator<SQLTimeoutException>) objectArrayListIterator0);
      listIteratorWrapper0.hasNext();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      IteratorUtils.find((Iterator<Iterator<SQLTimeoutException>>) resettableIterator0, (Predicate<? super Iterator<SQLTimeoutException>>) equalPredicate0);
      IteratorUtils.zippingIterator((Iterator<?>) nodeListIterator0, (Iterator<?>) resettableIterator0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<Iterator<SQLTimeoutException>>) resettableIterator0, (Transformer<? super Iterator<SQLTimeoutException>, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0);
      Iterator<Object> iterator0 = IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) equalPredicate0);
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      DefaultEquator<Vector<SQLTransactionRollbackException>> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(vector0, (Equator<Vector<SQLTransactionRollbackException>>) defaultEquator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("\"tN2q8V&K&zv");
      Vector<IIOMetadataNode> vector1 = new Vector<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector1);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.chainedIterator((Iterator<?>) iterator1, (Iterator<?>) iterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OrderedMapIterator<Iterator<SQLTimeoutException>, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedMapIterator0);
      IteratorUtils.find((Iterator<Iterator<SQLTimeoutException>>) orderedMapIterator0, (Predicate<? super Iterator<SQLTimeoutException>>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0);
      Hashtable<EnumSet<Locale.Category>, EnumSet<Locale.Category>> hashtable0 = new Hashtable<EnumSet<Locale.Category>, EnumSet<Locale.Category>>();
      DefaultEquator<Hashtable<EnumSet<Locale.Category>, EnumSet<Locale.Category>>> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(hashtable0, (Equator<Hashtable<EnumSet<Locale.Category>, EnumSet<Locale.Category>>>) defaultEquator0);
      IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) equalPredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.chainedIterator((Iterator<?>) iterator0, (Iterator<?>) resettableIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0, "", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("PrototypeCloneFactory: The clone method must exist and be public ");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "7Qej!J", 1);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException0;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) resettableIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      String string0 = "P{,q7`'";
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("P{,q7`'");
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = null;
      int int0 = 512;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException[]) null, 512);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MapIterator<SQLTimeoutException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.singletonIterator((PriorityQueue<SQLSyntaxErrorException>) null);
      IteratorUtils.isEmpty(mapIterator0);
      OrderedMapIterator<String, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, String>(orderedMapIterator0);
      String string0 = "P{,q7`'";
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractOrderedMapIteratorDecorator0.forEachRemaining(consumer0);
      ConstantTransformer<String, String> constantTransformer0 = new ConstantTransformer<String, String>("P{,q7`'");
      IteratorUtils.toString((Iterator<String>) abstractOrderedMapIteratorDecorator0, (Transformer<? super String, String>) constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Transformer<BatchUpdateException, BatchUpdateException>, SQLTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qaEGO~=NP");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 1, sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, sQLTransactionRollbackException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("qaEGO~=NP", "", 1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.chainedIterator((Iterator<?>) iterator0, (Iterator<?>) resettableIterator0);
      ConstantTransformer.constantTransformer("!ZPgw[]!;?VA`,|");
      EmptyIterator.emptyIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransactionRollbackException1);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qaEGO~=NP");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 1, sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, sQLTransactionRollbackException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("qaEGO~=NP", "", 1);
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException0;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      ListIteratorWrapper<SQLTimeoutException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTimeoutException>(objectArrayListIterator0);
      ResettableIterator<Iterator<SQLTimeoutException>> resettableIterator0 = IteratorUtils.singletonIterator((Iterator<SQLTimeoutException>) listIteratorWrapper0);
      listIteratorWrapper0.hasNext();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      IteratorUtils.find((Iterator<Iterator<SQLTimeoutException>>) resettableIterator0, (Predicate<? super Iterator<SQLTimeoutException>>) predicate0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) listIteratorWrapper0, (Iterator<?>) listIteratorWrapper0);
      assertNotNull(zippingIterator0);
      
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("", sQLTransactionRollbackException2);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator0 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) objectArrayIterator0, (Iterator<? extends SQLRecoverableException>) objectArrayIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 958);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      NotNullPredicate.notNullPredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) resettableListIterator0, (Iterator<? extends SQLDataException>) resettableListIterator0);
      ResettableIterator<Iterator<SQLTimeoutException>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) resettableListIterator0);
      ResettableIterator<Iterator<SQLTimeoutException>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0);
      IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) equalPredicate0);
      IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0);
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) equalPredicate0);
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("transformer may not be null");
      linkedHashSet0.add(iIOMetadataNode1);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      String string0 = "";
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray1[0] = predicate0;
      predicateArray1[1] = predicate0;
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray1);
      predicateArray0[0] = predicate1;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      predicateArray0[6] = predicate0;
      predicateArray0[7] = predicate0;
      predicateArray0[8] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) null, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "", (Throwable) null);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, true);
      singletonIterator0.next();
      IteratorUtils.size(singletonIterator0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.objectGraphIterator(instanceofPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class org.apache.commons.collections4.functors.InstanceofPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0);
      IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) equalPredicate0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) listIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0);
      IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) zippingIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      OrderedMapIterator<Integer, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, ClientInfoStatus>) abstractOrderedMapIteratorDecorator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) resettableIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) linkedList0);
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(iterator0);
      IteratorUtils.size(listIteratorWrapper0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "%=^";
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("%=^");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>) null, (Iterator<? extends String>) listIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.singletonIterator(sQLWarning0);
      HashSet<DataTruncation> hashSet0 = new HashSet<DataTruncation>();
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) hashSet0);
      Iterator<DataTruncation> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) iterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      NotNullPredicate.notNullPredicate();
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Locale.Category>[]) iteratorArray0);
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(iterator0);
      IteratorUtils.size(resettableListIterator0);
      Transformer<Object, SQLNonTransientException> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "goW]pEN$SY";
      stringArray0[1] = "goW]pEN$SY";
      stringArray0[2] = "RuMZXvG.HLfsV,B";
      stringArray0[3] = "goW]pEN$SY";
      stringArray0[2] = "goW]pEN$SY";
      stringArray0[5] = "goW]pEN$SY";
      stringArray0[6] = "goW]pEN$SY";
      stringArray0[7] = "goW]pEN$SY";
      stringArray0[8] = "goW]pEN$SY";
      IteratorUtils.arrayIterator(stringArray0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<SQLRecoverableException> arrayList2 = new ArrayList<SQLRecoverableException>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Iterator<SQLRecoverableException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OrderedMapIterator<SQLTransactionRollbackException, ClientInfoStatus> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 4);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientException0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLFeatureNotSupportedException0);
      IteratorUtils.filteredIterator((Iterator<?>) orderedMapIterator0, (Predicate<? super Object>) identityPredicate0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, 243L);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) boundedIterator0, (Iterator<? extends SQLNonTransientException>) boundedIterator0);
      IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) zippingIterator0, (Predicate<? super SQLNonTransientException>) identityPredicate0);
      OrderedMapIterator<Integer, ClientInfoStatus> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus>(orderedMapIterator1);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, ClientInfoStatus>) abstractOrderedMapIteratorDecorator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      intArray0[1] = 0;
      intArray0[2] = 4;
      intArray0[3] = 0;
      intArray0[4] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTransientException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0);
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) identityPredicate0);
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientException0, 0, 527);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, ClientInfoStatus> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) zippingIterator0, 243L);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) resettableListIterator0);
      IteratorUtils.skippingIterator((Iterator<SQLWarning>) listIterator0, 243L);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Tg/wNYd<g45SFt");
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.chainedIterator((Iterator<?>) resettableListIterator0, (Iterator<?>) iterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer((String) null);
      IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0, ":NsZ<ieM]6+Z0$+gg", "", "");
      EmptyIterator.emptyIterator();
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) iterator0);
      assertSame(iterator0, iterator1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OrderedMapIterator<SQLTransactionRollbackException, ClientInfoStatus> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0);
      BoundedIterator<SQLTransactionRollbackException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) zippingIterator0, 243L);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) resettableListIterator0);
      IteratorUtils.skippingIterator((Iterator<SQLWarning>) listIterator0, 243L);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("X}dPaeE#aL");
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.chainedIterator((Iterator<?>) resettableIterator0, (Iterator<?>) boundedIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("g:$j|n+");
      IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0, "g:$j|n+", "X+QE%@Bf", "X}dPaeE#aL");
      EmptyIterator.emptyIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) iterator0);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) resettableIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) linkedList0);
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(iterator0);
      IteratorUtils.size(listIteratorWrapper0);
      SQLDataException sQLDataException0 = new SQLDataException("", "odu*Fb&bB,9g3B}EN");
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLDataException1);
      SQLDataException sQLDataException2 = new SQLDataException("=n9xohRmA<;|", "", 125, sQLClientInfoException0);
      SQLDataException sQLDataException3 = new SQLDataException("Predicate must not be null", sQLDataException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLDataException sQLDataException4 = new SQLDataException("odu*Fb&bB,9g3B}EN", "", 93, sQLTransientException0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException1;
      sQLDataExceptionArray0[2] = sQLDataException4;
      sQLDataExceptionArray0[3] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException();
      sQLDataExceptionArray0[4] = sQLDataException5;
      sQLDataExceptionArray0[5] = sQLDataException2;
      sQLDataExceptionArray0[6] = sQLDataException3;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      Transformer<SQLException, String> transformer0 = new ConstantTransformer<SQLException, String>("Predicate must not be null");
      IteratorUtils.toString((Iterator<SQLDataException>) objectArrayIterator0, (Transformer<? super SQLDataException, String>) transformer0);
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator1);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "3Pp\"+&Ei<", sQLDataException5);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("=n9xohRmA<;|", "5!~^SH88TA64]", (Throwable) null);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("B=,^");
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLWarning sQLWarning0 = new SQLWarning("Closure must not be null", sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("", sQLWarning0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "{}", 10);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", sQLTransactionRollbackException1);
      sQLTransactionRollbackException2.addSuppressed(sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", "zX>>TWg#Qy7d&", 10);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<SQLRecoverableException> arrayList1 = new ArrayList<SQLRecoverableException>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator((SQLRecoverableException) null);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class0);
      assertEquals(1, sQLRecoverableExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("T", "{}", 10);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", "zX>>TWg#Qy7d&", 10);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException(sQLTransactionRollbackException3);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException4;
      Stack<Transformer<Object, BatchUpdateException>> stack0 = new Stack<Transformer<Object, BatchUpdateException>>();
      OrderedMapIterator<SQLDataException, InstanceofPredicate> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, InstanceofPredicate> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, InstanceofPredicate>(orderedMapIterator0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T");
      arrayList0.iterator();
      Transformer<Object, SQLNonTransientException> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      MapIterator<SQLClientInfoException, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) mapIterator0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) iterator0);
      ListIterator<SQLClientInfoException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.equals((Object)listIterator0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLTransactionRollbackException>) listIterator0, (Object) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Predicate<BatchUpdateException>, EnumSet<Locale.Category>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      IteratorUtils.toString((Iterator<Properties>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<?>) null, (-1781L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qaEGO~=NP");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 1, sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, sQLTransactionRollbackException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException((String) null, sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException();
      sQLDataException2.getLocalizedMessage();
      sQLDataExceptionArray0[3] = sQLDataException3;
      IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 1);
      OrderedMapIterator<InstanceofPredicate, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<InstanceofPredicate, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<InstanceofPredicate, SQLNonTransientException>(orderedMapIterator0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) abstractOrderedMapIteratorDecorator0, 1);
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) list0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("e{Ih{g:v<jTmw\"$");
      arrayList0.iterator();
      OrderedIterator<Object> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, SQLNonTransientException> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Object>) orderedIterator0, (Closure<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qaEGO~=NP");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 1, sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, sQLTransactionRollbackException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("qaEGO~=NP", "", 1);
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("qaEGO~=NP", "P49Z)S#", sQLTransactionRollbackException2);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[4];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException3;
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException3;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException2;
      IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      TreeSet<SQLNonTransientConnectionException> treeSet0 = new TreeSet<SQLNonTransientConnectionException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "prefix may not be null", 100, (Map<String, ClientInfoStatus>) null);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLClientInfoException0);
      Integer integer0 = new Integer((-342));
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("prefix may not be null", "' cannot be accessed");
      int[] intArray0 = new int[4];
      intArray0[0] = 100;
      intArray0[1] = (-342);
      intArray0[2] = 1;
      intArray0[3] = 100;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTransactionRollbackException4);
      boolean boolean0 = IteratorUtils.contains((Iterator<Transformer<HashSet, Properties>>) null, (Object) batchUpdateException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) resettableIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) linkedList0);
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(iterator0);
      IteratorUtils.size(listIteratorWrapper0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "%=^";
      stringArray0[2] = "remove() method is not supported for an ObjectArrayIterator";
      stringArray0[3] = "uj2w^1zo-,pH\n`!Y";
      stringArray0[5] = "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator";
      IteratorUtils.arrayIterator(stringArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.iterator();
      ArrayList<SQLRecoverableException> arrayList1 = new ArrayList<SQLRecoverableException>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("uj2w^1zo-,pH\n`!Y", hashtable0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLClientInfoException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator", sQLSyntaxErrorException0);
      arrayList1.add(sQLRecoverableException0);
      ResettableIterator<SQLRecoverableException> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) arrayList1);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator1, class0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 7);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[3] = class2;
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      IteratorUtils.arrayIterator(stringArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<String> iterator0 = arrayList0.iterator();
      ArrayList<SQLRecoverableException> arrayList1 = new ArrayList<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) arrayList1);
      Class<SQLRecoverableException> class3 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) resettableIterator0, class3);
      IteratorUtils.size((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0);
      IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) equalPredicate0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) listIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0);
      IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) zippingIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      OrderedMapIterator<Integer, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, ClientInfoStatus>) abstractOrderedMapIteratorDecorator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0);
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) equalPredicate0);
      assertTrue(listIterator0.hasPrevious());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[`", "[`", 0);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      Vector<Object> vector0 = new Vector<Object>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      OrderedMapIterator<SQLRecoverableException, SQLRecoverableException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) orderedMapIterator1, class0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "{}", 10);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", "zX>>TWg#Qy7d&", 10);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException(sQLTransactionRollbackException3);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      Stack<Transformer<Object, BatchUpdateException>> stack0 = new Stack<Transformer<Object, BatchUpdateException>>();
      OrderedMapIterator<SQLDataException, InstanceofPredicate> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, InstanceofPredicate> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, InstanceofPredicate>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, InstanceofPredicate>) abstractOrderedMapIteratorDecorator0);
      LinkedList<SQLTransientException> linkedList0 = new LinkedList<SQLTransientException>();
      LinkedList<SQLTransientException> linkedList1 = new LinkedList<SQLTransientException>();
      IteratorUtils.loopingListIterator((List<SQLTransientException>) linkedList1);
      Iterator<?> iterator0 = IteratorUtils.getIterator("zX>>TWg#Qy7d&");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) resettableIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) linkedList0);
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(iterator0);
      IteratorUtils.size(listIteratorWrapper0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "%=^";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "remove() method is not supported for an ObjectArrayIterator";
      stringArray0[3] = "uj2w^1zo-,pH\n`!Y";
      stringArray0[5] = "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator";
      IteratorUtils.arrayIterator(stringArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("uj2w^1zo-,pH\n`!Y");
      arrayList1.iterator();
      OrderedIterator<Object> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, SQLNonTransientException> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply((Iterator<Object>) orderedIterator0, (Closure<? super Object>) transformerClosure0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 6);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("R>x!v\"KWeC;?E)ar~");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("R>x!v\"KWeC;?E)ar~", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLRecoverableException1);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException(sQLRecoverableException1);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      ResettableIterator<SQLRecoverableException> resettableIterator1 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) resettableIterator1;
      OrderedIterator<SQLRecoverableException> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<SQLRecoverableException>) orderedIterator1;
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) resettableIterator1);
      iteratorArray0[2] = (Iterator<SQLRecoverableException>) listIterator0;
      int int0 = 1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("%=^", "uj2w^1zo-,pH\n`!Y", 1, sQLRecoverableException3);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 8);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      classArray0[2] = class2;
      Class<IIOMetadataNode> class3 = IIOMetadataNode.class;
      classArray0[3] = class3;
      Class<IIOMetadataNode> class4 = IIOMetadataNode.class;
      classArray0[4] = class4;
      Class<IIOMetadataNode> class5 = IIOMetadataNode.class;
      classArray0[5] = class5;
      Class<IIOMetadataNode> class6 = IIOMetadataNode.class;
      classArray0[6] = class6;
      Class<IIOMetadataNode> class7 = IIOMetadataNode.class;
      classArray0[7] = class7;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      OrderedMapIterator<SQLDataException, Iterator<SQLTimeoutException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<SQLDataException>) orderedMapIterator0, (Transformer<? super SQLDataException, String>) invokerTransformer0);
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, 5, 121);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0);
      IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) equalPredicate0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) listIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0);
      IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) zippingIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      OrderedMapIterator<Integer, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, ClientInfoStatus>) abstractOrderedMapIteratorDecorator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0);
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) equalPredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[`", "[`", 0);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      Vector<Object> vector0 = new Vector<Object>();
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      InvokerTransformer.invokerTransformer("[`");
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedIterator0, 682, 2414);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("[", (Class<?>[]) null, (Object[]) null);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLDataException sQLDataException0 = new SQLDataException("=n9xohRmA<;|", "");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException((String) null, "=n9xohRmA<;|", 5);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("Predicate must not be null", "=n9xohRmA<;|", 9, sQLDataException1);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("=n9xohRmA<;|", sQLDataException0);
      SQLDataException sQLDataException5 = new SQLDataException("", "i ~YUTag.!u3h(o", 3573, sQLDataException4);
      sQLDataExceptionArray0[4] = sQLDataException5;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) objectArrayIterator0, (Transformer<? super SQLDataException, String>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '[' on 'class java.sql.SQLDataException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "{}", 10);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, classArray0, classArray0);
      IteratorUtils.toString((Iterator<SQLDataException>) orderedIterator0, (Transformer<? super SQLDataException, String>) invokerTransformer0);
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      Hashtable<SQLInvalidAuthorizationSpecException, Stack<DataTruncation>> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, Stack<DataTruncation>>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Stack<DataTruncation>> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Stack<DataTruncation>>(hashtable0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) resettableIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) linkedList0);
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(iterator0);
      IteratorUtils.size(listIteratorWrapper0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "%=^";
      stringArray0[2] = "remove() method is not supported for an ObjectArrayIterator";
      stringArray0[3] = "uj2w^1zo-,pH\n`!Y";
      stringArray0[5] = "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator";
      IteratorUtils.arrayIterator(stringArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("uj2w^1zo-,pH\n`!Y");
      arrayList1.iterator();
      OrderedIterator<Object> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, SQLNonTransientException> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply((Iterator<Object>) orderedIterator0, (Closure<? super Object>) transformerClosure0);
      OrderedMapIterator<ClientInfoStatus, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<ClientInfoStatus, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<ClientInfoStatus, DataTruncation>(orderedMapIterator0);
      OrderedMapIterator<ClientInfoStatus, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<ClientInfoStatus, ? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      Enumeration<ClientInfoStatus> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) orderedMapIterator1);
      Iterator<ClientInfoStatus> iterator1 = IteratorUtils.asIterator((Enumeration<? extends ClientInfoStatus>) enumeration1);
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) iterator1, class0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qaEGO~=NP");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 1, sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, sQLTransactionRollbackException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("qaEGO~=NP", "", 1);
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("qaEGO~=NP", "P49Z)S#", sQLTransactionRollbackException2);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[4];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException3;
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException3;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException2;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransactionRollbackException>) resettableListIterator0, 1);
      TreeSet<SQLNonTransientConnectionException> treeSet0 = new TreeSet<SQLNonTransientConnectionException>();
      TreeSet<SQLNonTransientConnectionException> treeSet1 = new TreeSet<SQLNonTransientConnectionException>();
      TreeSet<SQLNonTransientConnectionException> treeSet2 = new TreeSet<SQLNonTransientConnectionException>();
      TreeSet<SQLNonTransientConnectionException> treeSet3 = new TreeSet<SQLNonTransientConnectionException>();
      TreeSet<SQLNonTransientConnectionException> treeSet4 = new TreeSet<SQLNonTransientConnectionException>();
      TreeSet<SQLNonTransientConnectionException> treeSet5 = new TreeSet<SQLNonTransientConnectionException>();
      TreeSet<SQLNonTransientConnectionException> treeSet6 = new TreeSet<SQLNonTransientConnectionException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((TreeSet<SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0);
      IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) equalPredicate0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) listIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0);
      IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) zippingIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      OrderedMapIterator<Integer, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, ClientInfoStatus>) abstractOrderedMapIteratorDecorator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0);
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) equalPredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[`", "[`", 0);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      Vector<Object> vector0 = new Vector<Object>();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedList<SQLTransientException> linkedList0 = new LinkedList<SQLTransientException>();
      IteratorUtils.loopingListIterator((List<SQLTransientException>) linkedList0);
      DataTruncation dataTruncation0 = new DataTruncation(187, false, false, (-528), 0, (Throwable) null);
      IteratorUtils.getIterator(dataTruncation0);
      Iterator<Integer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Integer>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0);
      IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) equalPredicate0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) listIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0);
      IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) zippingIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      OrderedMapIterator<Integer, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, ClientInfoStatus>) abstractOrderedMapIteratorDecorator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0);
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) equalPredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[`", "[`", 0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) resettableListIterator0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0, (Iterator<? extends SQLDataException>) orderedIterator0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", "{}", 10);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", "zX>>TWg#Qy7d&", 10);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException(sQLTransactionRollbackException3);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("", "transformer may not be null", sQLTransactionRollbackException3);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransactionRollbackException>) resettableListIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 4
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qaEGO~=NP");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 1, sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, sQLTransactionRollbackException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException0;
      SQLDataException sQLDataException2 = new SQLDataException((String) null, sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException();
      sQLDataException2.getLocalizedMessage();
      sQLDataExceptionArray0[3] = sQLDataException3;
      IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 1);
      OrderedMapIterator<InstanceofPredicate, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<InstanceofPredicate, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<InstanceofPredicate, SQLNonTransientException>(orderedMapIterator0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) abstractOrderedMapIteratorDecorator0, 1);
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) list0);
      Class<ClientInfoStatus>[] classArray0 = (Class<ClientInfoStatus>[]) Array.newInstance(Class.class, 6);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      classArray0[0] = class0;
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      classArray0[1] = class1;
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      classArray0[2] = class2;
      MapIterator<IIOMetadataNode, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<IIOMetadataNode> list1 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) mapIterator0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) list1);
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      OrderedMapIterator<ClientInfoStatus, SQLException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<ClientInfoStatus>) orderedMapIterator1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OrderedMapIterator<SQLTransactionRollbackException, ClientInfoStatus> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0);
      BoundedIterator<SQLTransactionRollbackException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) zippingIterator0, 243L);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) resettableListIterator0);
      IteratorUtils.skippingIterator((Iterator<SQLWarning>) listIterator0, 243L);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.IteratorUtils", "X}dPaeE#aL");
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.chainedIterator((Iterator<?>) resettableIterator0, (Iterator<?>) boundedIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("g:$j|n+");
      IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0, "g:$j|n+", "X+QE%@Bf", "X}dPaeE#aL");
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      BatchUpdateException[] batchUpdateExceptionArray0 = IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) iterator0, class0);
      assertEquals(0, batchUpdateExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Transformer<SQLIntegrityConstraintViolationException, Transformer<SQLDataException, Transformer<Object, BatchUpdateException>>> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.getIterator(transformer0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0, false);
      singletonIterator0.next();
      IteratorUtils.toListIterator((Iterator<? extends Locale.Category>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<SQLWarning> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) listIterator0, (Iterator<? extends SQLWarning>) listIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) zippingIterator0);
      EmptyIterator.emptyIterator();
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      Vector<Transformer<Object, BatchUpdateException>> vector1 = new Stack<Transformer<Object, BatchUpdateException>>();
      OrderedMapIterator<SQLDataException, InstanceofPredicate> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, InstanceofPredicate> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, InstanceofPredicate>(orderedMapIterator0);
      MapIterator<SQLDataException, InstanceofPredicate> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, InstanceofPredicate>) abstractOrderedMapIteratorDecorator0);
      LinkedList<SQLTransientException> linkedList0 = new LinkedList<SQLTransientException>();
      IteratorUtils.loopingListIterator((List<SQLTransientException>) linkedList0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[9];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Mf7\")H@Zjv", "Mf7\")H@Zjv", 2300);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[8] = (SQLNonTransientException) sQLDataException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Mf7\")H@Zjv", "&1^`,A,1+4");
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(") less than zero.", "", sQLIntegrityConstraintViolationException0);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(") less than zero.", "transformer may not be null", 2815);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(sQLNonTransientExceptionArray0[4]);
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLSyntaxErrorException2;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" cannot be null", "&1^`,A,1+4", 0);
      sQLNonTransientExceptionArray0[7] = sQLNonTransientException0;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException(sQLNonTransientException0);
      sQLNonTransientExceptionArray0[8] = (SQLNonTransientException) sQLSyntaxErrorException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, (-20));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) resettableIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      InvokerTransformer.invokerTransformer("List must not be null");
      IteratorUtils.emptyOrderedIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.singletonIterator(sQLWarning0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(") greater than the size of the ", "org.apache.commons.collections4.functors.ConstantTransformer", sQLWarning0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.ConstantTransformer", (String) null);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLNonTransientException) sQLIntegrityConstraintViolationException0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstantiateFactory<SQLIntegrityConstraintViolationException> instantiateFactory0 = new InstantiateFactory<SQLIntegrityConstraintViolationException>(class0);
      Transformer<SQLException, SQLException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLException>) instantiateFactory0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      TransformedPredicate<SQLException> transformedPredicate0 = new TransformedPredicate<SQLException>(transformer0, uniquePredicate0);
      Predicate<SQLException> predicate0 = AndPredicate.andPredicate((Predicate<? super SQLException>) transformedPredicate0, (Predicate<? super SQLException>) uniquePredicate0);
      IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) listIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      OrderedMapIterator<Integer, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus>(abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, ClientInfoStatus>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0);
      IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) equalPredicate0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) listIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0);
      IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) zippingIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      OrderedMapIterator<Integer, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, ClientInfoStatus>) abstractOrderedMapIteratorDecorator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      int int0 = 0;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0);
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) equalPredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[`", "[`", 0);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      Vector<Object> vector0 = new Vector<Object>();
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) vector0);
      IteratorUtils.matchesAny(iterator1, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 7);
      List<Properties> list0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      String string0 = "qaEGO~=N\\P";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qaEGO~=NP");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 1, sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, sQLTransactionRollbackException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException((String) null, sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException();
      sQLDataException2.getLocalizedMessage();
      sQLDataExceptionArray0[3] = sQLDataException3;
      IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 1);
      Iterator<SQLTimeoutException> iterator0 = null;
      OrderedMapIterator<InstanceofPredicate, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<InstanceofPredicate, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<InstanceofPredicate, SQLNonTransientException>(orderedMapIterator0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) abstractOrderedMapIteratorDecorator0, 1);
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) list0);
      String string1 = "";
      Class<ClientInfoStatus>[] classArray0 = (Class<ClientInfoStatus>[]) Array.newInstance(Class.class, 6);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      classArray0[0] = class0;
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      classArray0[1] = class1;
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      classArray0[2] = class2;
      Class<ClientInfoStatus> class3 = ClientInfoStatus.class;
      classArray0[3] = class3;
      Class<ClientInfoStatus> class4 = ClientInfoStatus.class;
      classArray0[4] = class4;
      Class<ClientInfoStatus> class5 = ClientInfoStatus.class;
      classArray0[5] = class5;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) sQLDataExceptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) resettableIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) linkedList0);
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(iterator0);
      IteratorUtils.size(listIteratorWrapper0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "%=^";
      stringArray0[1] = "k";
      stringArray0[2] = "remove() method is not supported for an ObjectArrayIterator";
      stringArray0[3] = "uj2w^1zo-,pH\n`!Y";
      stringArray0[5] = "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator";
      stringArray0[6] = "n>BLU8l\"ML@Mv";
      stringArray0[7] = "";
      ResettableIterator<String> resettableIterator1 = IteratorUtils.arrayIterator(stringArray0);
      iteratorArray0[0] = (Iterator<String>) resettableIterator1;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.spliterator();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException1, (-2435), 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MapIterator<String, ArrayDeque<SQLFeatureNotSupportedException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      predicateArray0[1] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.matchesAny((Iterator<String>) mapIterator0, (Predicate<? super String>) allPredicate0);
      InvokerTransformer.invokerTransformer("Closure must not be null");
      LinkedList<SQLTransientException> linkedList0 = new LinkedList<SQLTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends ClientInfoStatus>) null, 0L, (-2039L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IteratorUtils.emptyOrderedIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 1);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) sQLClientInfoExceptionArray0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<SQLDataException>) null, (Transformer<? super SQLDataException, String>) invokerTransformer0);
      ArrayListIterator<Properties> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Properties>("[]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      InvokerTransformer.invokerTransformer("Closure must not be null");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 139, hashMap0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLClientInfoException0);
      Integer integer0 = new Integer(139);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLIntegrityConstraintViolationException>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.singletonIterator(sQLWarning0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(") greater than the size of the ", ") greater than the size of the ", sQLWarning0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException(") greater than the size of the ", ") greater than the size of the ", 0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException(sQLTransientConnectionException2);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, ? extends IIOMetadataNode>) constantTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 7);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      classArray0[4] = class4;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      classArray0[5] = class5;
      Class<SQLClientInfoException> class6 = SQLClientInfoException.class;
      classArray0[6] = class6;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, classArray0, classArray0);
      InvokerTransformer.invokerTransformer("org.apache.commons.collections4.map.Flat3Map$Values");
      IteratorUtils.toString((Iterator<SQLDataException>) resettableListIterator0, (Transformer<? super SQLDataException, String>) invokerTransformer0);
      ArrayListIterator<Properties> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Properties>((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "IVW7]gN\"lDy`\"&!vG1", "transformer may not be null", 2);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "transformer may not be null", "</a+k%eTZ`", 3);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("L]\"`Hbl3^[", "L]\"`Hbl3^[", "org.apache.commons.collections4.map.AbstractReferenceMap$SoftRef", 100);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("IVW7]gN\"lDy`\"&!vG1", "", "i4#tg$N&RSR", 100);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "p-%$isw", "Collection must not be null", 100);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("</a+k%eTZ`", "p-%$isw", "Collection must not be null", 3);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("", "Hks", "Hks", 100);
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("org.apache.commons.collections4.map.AbstractReferenceMap$SoftRef", "", "Collection must not be null", 2);
      stackTraceElementArray0[7] = stackTraceElement7;
      sQLRecoverableException0.setStackTrace(stackTraceElementArray0);
      sQLRecoverableException0.spliterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0, (-771), (-771));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IteratorUtils.emptyOrderedIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 1);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) sQLClientInfoExceptionArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IteratorUtils.matchesAll((Iterator<HashSet<String>>) null, (Predicate<? super HashSet<String>>) predicate0);
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.getOwnerDocument();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newChild == null!
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MapIterator<LinkedList<SQLNonTransientConnectionException>, LinkedHashSet<Boolean>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) orderedIterator0, (Iterator<? extends Integer>) orderedIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("U\"vEIQ7n6(NV0?)J", (String) null);
      SQLException sQLException0 = new SQLException((String) null, sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("", "", sQLException0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException2;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) objectArrayListIterator0, (Transformer<? super SQLRecoverableException, ? extends IIOMetadataNode>) transformer0);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      PredicateTransformer<StringTokenizer> predicateTransformer0 = new PredicateTransformer<StringTokenizer>(predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.iterators.EmptyListIterator");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      SQLWarning sQLWarning0 = new SQLWarning();
      DataTruncation dataTruncation0 = new DataTruncation(32, false, false, 1, 0);
      IteratorUtils.singletonIterator((SQLWarning) dataTruncation0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("2PSzxIt", "~|4G#vZDpnoA0$G2", dataTruncation0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(dataTruncation0);
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("b!'", "%[tCj", 1);
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException(sQLWarning0);
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) list0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OrderedMapIterator<Iterator<SQLTimeoutException>, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedMapIterator0);
      IteratorUtils.find((Iterator<Iterator<SQLTimeoutException>>) orderedMapIterator0, (Predicate<? super Iterator<SQLTimeoutException>>) predicate0);
      EmptyIterator.resettableEmptyIterator();
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator0, 10, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.singletonIterator(sQLWarning0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(") greater than the size of the ", ") greater than the size of the ", sQLWarning0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException(") greater than the size of the ", ") greater than the size of the ", 0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException(sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      ArrayList<SQLTransientException> arrayList0 = new ArrayList<SQLTransientException>();
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientException>) arrayList0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      String string0 = "Closure must not be null";
      Transformer<SQLException, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("Closure must not be null");
      IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) orderedIterator0, (Transformer<? super SQLRecoverableException, ? extends IIOMetadataNode>) transformer0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "Closure must not be null", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.singletonIterator(sQLWarning0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(") greater than the size of the ", ") greater than the size of the ", sQLWarning0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException(") greater than the size of the ", ") greater than the size of the ", 0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException(sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, ClientInfoStatus> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) zippingIterator0, 243L);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) resettableListIterator0);
      IteratorUtils.skippingIterator((Iterator<SQLWarning>) listIterator0, 243L);
      IteratorUtils.emptyMapIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.IteratorUtils", "X}dPaeE#aL");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("G808", "org.apache.commons.collections4.IteratorUtils", 2643);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("Tl?M^/q(", "X}dPaeE#aL");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("G808");
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("Uxz4X", "S<?}?ahTa$QH", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("#|52;;4yMU", "[LCs");
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNode("X}dPaeE#aL");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) resettableIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) linkedList0);
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(iterator0);
      IteratorUtils.size(listIteratorWrapper0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "%=^";
      stringArray0[1] = "k";
      stringArray0[2] = "remove() method is not supported for an ObjectArrayIterator";
      stringArray0[3] = "uj2w^1zo-,pH\n`!Y";
      stringArray0[4] = "1PC~z5gfLC+\"/";
      stringArray0[5] = "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator";
      stringArray0[6] = "n>BLU8l\"ML@Mv";
      stringArray0[7] = "";
      ResettableIterator<String> resettableIterator1 = IteratorUtils.arrayIterator(stringArray0);
      iteratorArray0[0] = (Iterator<String>) resettableIterator1;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.iterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) listIterator0, (Iterator<? extends SQLWarning>) listIterator0);
      Iterable<SQLException> iterable0 = new HashSet<SQLException>();
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Vector<Transformer<Object, BatchUpdateException>>>) null, (-1464));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1464
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TreeSet<SQLException> treeSet0 = new TreeSet<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) null, (Collection<? super SQLTransactionRollbackException>) treeSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Iterator<Locale.Category> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) resettableIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) linkedList0);
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(iterator0);
      IteratorUtils.size(listIteratorWrapper0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "%=^";
      stringArray0[1] = "k";
      stringArray0[2] = "remove() method is not supported for an ObjectArrayIterator";
      stringArray0[3] = "uj2w^1zo-,pH\n`!Y";
      stringArray0[4] = "1PC~z5gfLC+\"/";
      stringArray0[5] = "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator";
      stringArray0[6] = "n>BLU8l\"ML@Mv";
      stringArray0[7] = "";
      ResettableIterator<String> resettableIterator1 = IteratorUtils.arrayIterator(stringArray0);
      iteratorArray0[0] = (Iterator<String>) resettableIterator1;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<String> iterator1 = arrayList0.iterator();
      iteratorArray0[1] = iterator1;
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>[]) iteratorArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[1] = predicate1;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) nonePredicate0;
      Predicate<Object> predicate2 = UniquePredicate.uniquePredicate();
      predicateArray0[3] = predicate2;
      Transformer<Object, Properties>[] transformerArray0 = (Transformer<Object, Properties>[]) Array.newInstance(Transformer.class, 3);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 8);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      classArray0[4] = class4;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      classArray0[5] = class5;
      Class<SQLClientInfoException> class6 = SQLClientInfoException.class;
      classArray0[6] = class6;
      Class<SQLClientInfoException> class7 = SQLClientInfoException.class;
      classArray0[7] = class7;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer("%=^", (Class<?>[]) classArray0, (Object[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) resettableIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) linkedList0);
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(iterator0);
      IteratorUtils.size(listIteratorWrapper0);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "%=^";
      stringArray0[1] = "k";
      stringArray0[2] = "remove() method is not supported for an ObjectArrayIterator";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[3] = "uj2w^1zo-,pH\n`!Y";
      stringArray0[5] = "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapEntryIterator";
      stringArray0[0] = "n>BLU8l\"ML@Mv";
      stringArray0[7] = "";
      ResettableIterator<String> resettableIterator1 = IteratorUtils.arrayIterator(stringArray0);
      iteratorArray0[0] = (Iterator<String>) resettableIterator1;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<String> iterator1 = arrayList0.iterator();
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      IteratorUtils.singletonListIterator(stack0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<SQLException, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("Closure must not be null");
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) orderedIterator0, (Transformer<? super SQLRecoverableException, ? extends IIOMetadataNode>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("-e\"`%dT", "~ B9z~S+U");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("-e\"`%dT", sQLInvalidAuthorizationSpecException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("~V>LJIQNcfAqQHn27", "suffix may not be null", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("_Fe#Xc:-cn", "Predicate must not be null", 0, sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("FrTgPG)fkMol4hK$C", "+9K>O3s^", (-585));
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("~ B9z~S+U", "~ B9z~S+U", 0);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 93, (-585));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ResettableIterator<SQLWarning> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIterator<Iterator<SQLWarning>> listIterator0 = IteratorUtils.singletonListIterator((Iterator<SQLWarning>) resettableIterator0);
      IteratorUtils.toString((Iterator<Iterator<SQLWarning>>) listIterator0);
      OrderedMapIterator<SQLTransactionRollbackException, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLTransientException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<SQLWarning> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>) listIterator0, (Iterator<? extends SQLWarning>) listIterator0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) zippingIterator0);
      MapIterator<SQLIntegrityConstraintViolationException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) mapIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedMapIterator<String, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<String, SQLRecoverableException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<String, SQLRecoverableException>) orderedMapIterator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0);
      HashMap<DataTruncation, SQLTransactionRollbackException> hashMap0 = new HashMap<DataTruncation, SQLTransactionRollbackException>();
      EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLTransactionRollbackException>(hashMap0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, SQLTransactionRollbackException>) entrySetMapIterator0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Node must not be null";
      stringArray0[1] = "org.apache.commons.collections4.functors.NOPClosure";
      stringArray0[2] = "I%|}+-,^?``4#g+0B";
      IteratorUtils.arrayIterator(stringArray0, 0, 0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.NOPClosure", (String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.functors.NOPClosure", "Node must not be null", 0, intArray0, sQLSyntaxErrorException0);
      arrayList0.add(batchUpdateException0);
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) arrayList0);
      Object[] objectArray1 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      NotNullPredicate.notNullPredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<String>) null, (Predicate<? super String>) predicateArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.singletonIterator(sQLWarning0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(") greater than the size of the ", ") greater than the size of the ", sQLWarning0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException(") greater than the size of the ", ") greater than the size of the ", 0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException(sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>((IIOMetadataNode) nodeList0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) list0);
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, singletonListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, (Throwable) null);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("NodeList must not be null", (String) null, map0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException1, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Hashtable<TreeSet, ArrayDeque>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      MapIterator<String, ArrayDeque<SQLFeatureNotSupportedException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      predicateArray0[1] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.matchesAny((Iterator<String>) mapIterator0, (Predicate<? super String>) allPredicate0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Class<String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, HashMap<StringTokenizer, Transformer<Object, BatchUpdateException>>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.skippingIterator((Iterator<SQLTransientException>) orderedMapIterator0, 1L);
      SQLException[] sQLExceptionArray0 = new SQLException[5];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLExceptionArray0[0] = (SQLException) sQLInvalidAuthorizationSpecException0;
      SQLException sQLException0 = new SQLException("", "", sQLInvalidAuthorizationSpecException0);
      sQLExceptionArray0[1] = sQLException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, sQLException0);
      sQLExceptionArray0[2] = (SQLException) sQLSyntaxErrorException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("IQftsLw`3S%#,To!?h", (String) null, 2072, sQLException0);
      sQLExceptionArray0[3] = (SQLException) sQLTimeoutException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLException0);
      sQLExceptionArray0[4] = (SQLException) sQLIntegrityConstraintViolationException0;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) listIterator0);
      EntrySetToMapIteratorAdapter<Integer, SQLClientInfoException> entrySetToMapIteratorAdapter0 = null;
      try {
        entrySetToMapIteratorAdapter0 = new EntrySetToMapIteratorAdapter<Integer, SQLClientInfoException>((Set<Map.Entry<Integer, SQLClientInfoException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) listIterator0);
      EntrySetToMapIteratorAdapter<Integer, SQLClientInfoException> entrySetToMapIteratorAdapter0 = null;
      try {
        entrySetToMapIteratorAdapter0 = new EntrySetToMapIteratorAdapter<Integer, SQLClientInfoException>((Set<Map.Entry<Integer, SQLClientInfoException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0);
      IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) equalPredicate0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) listIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) zippingIterator0, (Transformer<? super SQLNonTransientException, String>) null, "Entry does not exist: ", "Entry does not exist: ", "Entry does not exist: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "+iu=F2 C";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("+iu=F2 C");
      DataTruncation dataTruncation0 = new DataTruncation((-1130), true, true, (-2022), (-1130));
      sQLTransactionRollbackException0.setNextException(dataTruncation0);
      sQLTransactionRollbackException0.spliterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("+iu=F2 C", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qaEGO~=NP");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 1, sQLTimeoutException0);
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) orderedIterator0, (Iterator<? extends Integer>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Hashtable<TreeSet, ArrayDeque>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLException>) iterator0);
      MapIterator<SQLIntegrityConstraintViolationException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.skippingIterator((Iterator<SQLIntegrityConstraintViolationException>) mapIterator0, 0L);
      Iterator<SQLTimeoutException> iterator1 = EmptyIterator.emptyIterator();
      IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) iterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Vector<Transformer<Object, BatchUpdateException>>>) null, (-1464));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1464
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 5);
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) orderedIterator0;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(":~?Z;\"'n6om~");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLNonTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "zUN$dk+.;xAO%V`");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException1;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0, false);
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) singletonIterator0;
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) iteratorArray0[1], (Iterator<? extends SQLNonTransientConnectionException>) iteratorArray0[0]);
      iteratorArray0[3] = iterator0;
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException1);
      iteratorArray0[4] = (Iterator<SQLNonTransientConnectionException>) singletonListIterator0;
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MapIterator<LinkedList<SQLNonTransientConnectionException>, LinkedHashSet<Boolean>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends Integer>) orderedIterator0, (Iterator<? extends Integer>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, ClientInfoStatus> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) zippingIterator0, 243L);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) resettableListIterator0);
      IteratorUtils.skippingIterator((Iterator<SQLWarning>) listIterator0, 480L);
      IteratorUtils.emptyMapIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.IteratorUtils", "X}dPaeE#aL");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("G808", "org.apache.commons.collections4.IteratorUtils", 2643);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("Tl?M^/q(", "X}dPaeE#aL");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("G808");
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("Uxz4X", "S<?}?ahTa$QH", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("#|52;;4yMU", "[LCs");
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 3);
      String string0 = "<2BO4`Ugj]`j6u";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("<2BO4`Ugj]`j6u", "Attempt to make an ArrayIterator that ");
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0;
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, LinkedList<SQLDataException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, LinkedList<SQLDataException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, LinkedList<SQLDataException>>(orderedMapIterator0);
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) abstractMapIteratorDecorator0;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      iteratorArray0[2] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Locale.Category> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.Category>) resettableIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Locale.Category> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Locale.Category>) enumeration0, (Collection<? super Locale.Category>) linkedList0);
      ListIteratorWrapper<Locale.Category> listIteratorWrapper0 = new ListIteratorWrapper<Locale.Category>(iterator0);
      IteratorUtils.size(listIteratorWrapper0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "%=^";
      stringArray0[2] = "remove() method is not supported for an ObjectArrayIterator";
      stringArray0[3] = "uj2w^1zo-,pH\n`!Y";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>(">", classArray0, stringArray0);
      OrderedMapIterator<SQLDataException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, String> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends String>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLDataException, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, String>(orderedMapIterator1);
      IteratorUtils.toString((Iterator<SQLDataException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLDataException, String>) invokerTransformer0);
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedHashSet0);
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) orderedMapIterator1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(listIterator0);
      IteratorUtils.filteredIterator((Iterator<?>) listIterator0, (Predicate<? super Object>) equalPredicate0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) listIterator0, (Iterator<? extends SQLNonTransientException>) listIterator0);
      IteratorUtils.matchesAll((Iterator<SQLNonTransientException>) zippingIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      OrderedMapIterator<Integer, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, ClientInfoStatus>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, ClientInfoStatus>) abstractOrderedMapIteratorDecorator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0, 0);
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) equalPredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[`", "[`", 0);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      Vector<Object> vector0 = new Vector<Object>();
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) vector0);
      IteratorUtils.matchesAny(iterator1, (Predicate<? super SQLSyntaxErrorException>) equalPredicate0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.singletonIterator(sQLWarning0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(") greater than the size of the ", ") greater than the size of the ", sQLWarning0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException(") greater than the size of the ", ") greater than the size of the ", 0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException(sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 3384, (-3246));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      PredicateTransformer<StringTokenizer> predicateTransformer0 = new PredicateTransformer<StringTokenizer>(predicate0);
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      Boolean boolean0 = predicateTransformer0.transform(stringTokenizer0);
      IteratorUtils.singletonIterator(boolean0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[9];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Mf7\")H@Zjv", "Mf7\")H@Zjv", 2300);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLDataException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Mf7\")H@Zjv", "&1^`,A,1+4");
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(") less than zero.", "", sQLIntegrityConstraintViolationException0);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(") less than zero.", "transformer may not be null", 2815);
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException(sQLNonTransientExceptionArray0[4]);
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLSyntaxErrorException2;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" cannot be null", "&1^`,A,1+4", 0);
      sQLNonTransientExceptionArray0[7] = sQLNonTransientException0;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException(sQLNonTransientException0);
      sQLNonTransientExceptionArray0[8] = (SQLNonTransientException) sQLSyntaxErrorException3;
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.emptyIterator();
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) resettableIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      int int0 = 0;
      IteratorUtils.arrayIterator(sQLWarningArray0, 0, 0);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>(0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashtable0.put("\"x(D", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("\"x(D", hashtable0, (Throwable) null);
      vector0.add(sQLClientInfoException0);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>(vector0);
      // Undeclared exception!
      try { 
        priorityQueue0.add(sQLClientInfoException0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLClientInfoException cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<InstanceofPredicate, Transformer<SQLException, BatchUpdateException>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<SQLException, BatchUpdateException>>();
      Transformer<BatchUpdateException, BatchUpdateException> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super BatchUpdateException>, ? extends Transformer<? super BatchUpdateException, ? extends BatchUpdateException>>) hashMap0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator((BatchUpdateException) null, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLRecoverableException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 100;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Locale.Category[]) null, 100, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "transformer may not be null";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("transformer may not be null", sQLSyntaxErrorException0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) listIterator0, (Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 2);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLDataException sQLDataException0 = new SQLDataException("ijtH3SCLGSbhmr", "ijtH3SCLGSbhmr", sQLIntegrityConstraintViolationException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(sQLIntegrityConstraintViolationException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }
}
