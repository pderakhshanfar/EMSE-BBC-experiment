/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 10 12:37:18 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException("", "", 2002);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException0);
      sQLDataException0.initCause(sQLNonTransientConnectionException0);
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("NodeList must not be null");
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iterator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Enumeration must not be null");
      Iterator<SQLDataException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) iterator1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'NodeList must not be null' on 'class java.sql.SQLDataException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedMapIterator<Properties, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Properties, InstanceofPredicate> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, InstanceofPredicate>(orderedMapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends Properties>) abstractMapIteratorDecorator0);
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      int int1 = 0;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int1);
      integerArray0[4] = integer4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, 4, (-1575));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) orderedIterator0;
      objectArray0[1] = (Object) orderedIterator0;
      objectArray0[2] = (Object) orderedIterator0;
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashSet<LinkedHashSet>>) resettableListIterator0, (Transformer<? super HashSet<LinkedHashSet>, String>) transformer0, (String) null, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Locale.Category>) singletonListIterator0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLClientInfoException>(hashMap0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      intArray0[1] = (-462);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Closures must not be null", "Closures must not be null", 10, intArray0, sQLSyntaxErrorException0);
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      stack0.add(batchUpdateException0);
      Stack<Object> stack1 = new Stack<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) stack1);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<Object>) resettableListIterator0, (Transformer<? super Object, String>) transformer0);
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category1;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[6] = locale_Category2;
      IteratorUtils.arrayListIterator(locale_CategoryArray0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Node must not be null", "Closures must not be null", 1458, sQLSyntaxErrorException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Node must not be null", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      ResettableListIterator<SQLRecoverableException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) resettableListIterator1);
      LoopingListIterator<SQLRecoverableException> loopingListIterator0 = new LoopingListIterator<SQLRecoverableException>(list0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      SQLRecoverableException sQLRecoverableException2 = IteratorUtils.find((Iterator<SQLRecoverableException>) loopingListIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      IteratorUtils.arrayListIterator((Object) sQLRecoverableException2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ResettableListIterator<Iterator<SQLTransactionRollbackException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      IteratorUtils.get((Iterator<DataTruncation>) singletonIterator0, 0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("m~'0.`Bx");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("m~'0.`Bx", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("", "", 1159);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("m~'0.`Bx");
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("", "", sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ResettableListIterator<Iterator<SQLTransactionRollbackException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("fh5lXeD3o4(zsR<e", "", (-1689));
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("5VNZX,sVD$", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("", "IteratorChain cannot be changed after the first use of a method from the Iterator interface", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("IteratorChain cannot be changed after the first use of a method from the Iterator interface", (String) null);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("IteratorChain cannot be changed after the first use of a method from the Iterator interface");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      Closure<SQLNonTransientException> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLNonTransientConnectionException>) resettableListIterator1, (Closure<? super SQLNonTransientConnectionException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>((DataTruncation) null);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) singletonIterator0);
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) listIterator1, 3548);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.get((Iterator<DataTruncation>) resettableListIterator0, 3548);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) singletonIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[1];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("VK_>B|VQ8=@0iVb?", "VK_>B|VQ8=@0iVb?", 859);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("VK_>B|VQ8=@0iVb?", sQLNonTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("VK_>B|VQ8=@0iVb?", "VK_>B|VQ8=@0iVb?", sQLInvalidAuthorizationSpecException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableIterator0, (Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResettableListIterator<Iterator<SQLTransactionRollbackException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) transformer0);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((String[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResettableListIterator<Iterator<SQLTransactionRollbackException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>((IIOMetadataNode) null);
      UniquePredicate.uniquePredicate();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = AndPredicate.andPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) singletonListIterator0, (Predicate<? super IIOMetadataNode>) predicate2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ResettableListIterator<Iterator<SQLTransactionRollbackException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>((IIOMetadataNode) null);
      Predicate<IIOMetadataNode> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) singletonListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(linkedList0);
      ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) loopingListIterator0, (Transformer<? super Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "[");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) singletonIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vector<LinkedHashSet<SQLRecoverableException>> vector0 = new Vector<LinkedHashSet<SQLRecoverableException>>();
      IteratorUtils.loopingListIterator((List<LinkedHashSet<SQLRecoverableException>>) vector0);
      Boolean[] booleanArray0 = new Boolean[6];
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      PredicateTransformer<SQLFeatureNotSupportedException> predicateTransformer0 = new PredicateTransformer<SQLFeatureNotSupportedException>(predicate0);
      DataTruncation dataTruncation0 = new DataTruncation(230, false, false, 1073741824, 230);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", dataTruncation0);
      Boolean boolean0 = predicateTransformer0.transform(sQLFeatureNotSupportedException0);
      booleanArray0[0] = boolean0;
      predicateTransformer0.transform(sQLFeatureNotSupportedException0);
      PredicateTransformer<SQLFeatureNotSupportedException> predicateTransformer1 = new PredicateTransformer<SQLFeatureNotSupportedException>(predicate0);
      predicateTransformer1.transform(sQLFeatureNotSupportedException0);
      predicateTransformer0.transform(sQLFeatureNotSupportedException0);
      predicateTransformer0.transform(sQLFeatureNotSupportedException0);
      predicateTransformer1.transform(sQLFeatureNotSupportedException0);
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0);
      SQLWarning sQLWarning0 = new SQLWarning("", "", dataTruncation0);
      IteratorUtils.contains((Iterator<Boolean>) objectArrayListIterator0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vector<LinkedHashSet<SQLRecoverableException>> vector0 = new Vector<LinkedHashSet<SQLRecoverableException>>();
      IteratorUtils.loopingListIterator((List<LinkedHashSet<SQLRecoverableException>>) vector0);
      Boolean[] booleanArray0 = new Boolean[8];
      UniquePredicate<SQLFeatureNotSupportedException> uniquePredicate0 = new UniquePredicate<SQLFeatureNotSupportedException>();
      PredicateTransformer<SQLFeatureNotSupportedException> predicateTransformer0 = new PredicateTransformer<SQLFeatureNotSupportedException>(uniquePredicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Yj}FFgd`[E]^]BWV^");
      Boolean boolean0 = predicateTransformer0.transform(sQLFeatureNotSupportedException0);
      booleanArray0[0] = boolean0;
      PredicateTransformer<SQLFeatureNotSupportedException> predicateTransformer1 = new PredicateTransformer<SQLFeatureNotSupportedException>(uniquePredicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      Boolean boolean1 = predicateTransformer1.transform(sQLFeatureNotSupportedException1);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer1.transform(sQLFeatureNotSupportedException1);
      booleanArray0[2] = boolean2;
      Boolean boolean3 = predicateTransformer0.transform(sQLFeatureNotSupportedException0);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = predicateTransformer0.transform(sQLFeatureNotSupportedException1);
      booleanArray0[4] = boolean4;
      Boolean boolean5 = predicateTransformer0.transform(sQLFeatureNotSupportedException1);
      booleanArray0[5] = boolean5;
      Boolean boolean6 = predicateTransformer0.transform(sQLFeatureNotSupportedException1);
      booleanArray0[6] = boolean6;
      Boolean boolean7 = predicateTransformer1.transform(sQLFeatureNotSupportedException0);
      booleanArray0[7] = boolean7;
      ObjectArrayListIterator<Boolean> objectArrayListIterator0 = new ObjectArrayListIterator<Boolean>(booleanArray0);
      SQLWarning sQLWarning0 = new SQLWarning("Yj}FFgd`[E]^]BWV^", "", sQLFeatureNotSupportedException1);
      IteratorUtils.contains((Iterator<Boolean>) objectArrayListIterator0, (Object) sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector<LinkedHashSet<SQLRecoverableException>> vector0 = new Vector<LinkedHashSet<SQLRecoverableException>>();
      ResettableListIterator<LinkedHashSet<SQLRecoverableException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<LinkedHashSet<SQLRecoverableException>>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<LinkedHashSet<SQLRecoverableException>>) resettableListIterator0, (Predicate<? super LinkedHashSet<SQLRecoverableException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ChainedClosure<SQLNonTransientException> chainedClosure0 = new ChainedClosure<SQLNonTransientException>((Closure<? super SQLNonTransientException>[]) null);
      IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) null, (Closure<? super SQLInvalidAuthorizationSpecException>) chainedClosure0);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Closure<Object>>) null, (Predicate<? super Closure<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vector<LinkedHashSet<SQLRecoverableException>> vector0 = new Stack<LinkedHashSet<SQLRecoverableException>>();
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>();
      SingletonListIterator<LinkedHashSet<SQLRecoverableException>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<SQLRecoverableException>>(linkedHashSet0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.size(singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((EnumSet<Locale.Category>[]) null, 3295, 3295);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ResettableListIterator<Iterator<SQLTransactionRollbackException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      IteratorUtils.get((Iterator<DataTruncation>) singletonIterator0, 0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      String string0 = "GXOx";
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("GXOx", "{*c/D?|w C_s/K", 0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 0);
      ArrayListIterator<SQLNonTransientConnectionException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException1, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResettableListIterator<Iterator<SQLTransactionRollbackException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      singletonIterator0.reset();
      IteratorUtils.get((Iterator<DataTruncation>) singletonIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector<LinkedHashSet<SQLRecoverableException>> vector0 = new Vector<LinkedHashSet<SQLRecoverableException>>();
      IteratorUtils.loopingListIterator((List<LinkedHashSet<SQLRecoverableException>>) vector0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.AbstractHashedMap", "|wd/p6&,", 16);
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.AbstractHashedMap", "org.apache.commons.collections4.map.AbstractHashedMap", 16, sQLIntegrityConstraintViolationException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("e9y", (String) null, sQLIntegrityConstraintViolationException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      sQLDataException1.getLocalizedMessage();
      SQLDataException sQLDataException2 = new SQLDataException((String) null, "|wd/p6&,", 16, sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) objectArrayListIterator0);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("7mG*R[9");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) uniquePredicate0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply(iterator0, (Closure<? super IIOMetadataNode>) closure0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.functors.WhileClosure", "");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.AbstractReferenceMap$SoftRef", "org.apache.commons.collections4.functors.ComparatorPredicate$1");
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("wa)hYT/zs\">B", sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("\"{C\"H|*");
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      int int0 = 2004;
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0, 2004);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) iteratorArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MapIterator<Boolean, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.contains((Iterator<Boolean>) mapIterator0, (Object) mapIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 5);
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(linkedList0);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<StringTokenizer>) reverseListIterator0);
      iteratorArray0[0] = (Iterator<StringTokenizer>) listIterator0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(linkedList0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>) iteratorArray0[0], (Iterator<? extends StringTokenizer>) loopingIterator0);
      iteratorArray0[1] = iterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, HashMap<InstanceofPredicate, SQLException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ChainedClosure<SQLNonTransientException> chainedClosure0 = new ChainedClosure<SQLNonTransientException>((Closure<? super SQLNonTransientException>[]) null);
      IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) orderedMapIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) chainedClosure0);
      IteratorUtils.isEmpty(orderedMapIterator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("transformer may not be null");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("0)\"D/5)px-s _[c3s.", hashMap0, sQLTransientConnectionException0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      ChainedClosure<SQLClientInfoException> chainedClosure1 = new ChainedClosure<SQLClientInfoException>((Closure<? super SQLClientInfoException>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLClientInfoException>) singletonListIterator0, (Closure<? super SQLClientInfoException>) chainedClosure1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("underlying nodeList has no more elements", "", 917);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException(sQLDataException2);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("_#>VY>S", "", 917, sQLDataException3);
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("underlying nodeList has no more elements");
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException();
      sQLDataExceptionArray0[7] = sQLDataException7;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      OrderedMapIterator<DataTruncation, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLTimeoutException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLTimeoutException>) orderedMapIterator0);
      AbstractMapIteratorDecorator<DataTruncation, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<DataTruncation, SQLTimeoutException>(orderedMapIterator1);
      Iterator<DataTruncation> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) abstractMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) iterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("transformer may not be null", "", 32);
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) iterator0, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      IteratorUtils.toList((Iterator<?>) resettableListIterator0, 352);
      Stack<Object> stack0 = new Stack<Object>();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("hdnhuPgCMeG+3,Nsw");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      predicateArray0[0] = (Predicate<Object>) nullIsFalsePredicate0;
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) predicateArray0[0], (Predicate<? super Object>) predicateArray0[0]);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super HashMap<String, ArrayDeque<Properties>>>) predicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate1 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      predicateArray0[1] = (Predicate<Object>) nullIsFalsePredicate1;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      nonePredicate0.getPredicates();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nonePredicate0, (Predicate<? super Object>) null);
      IteratorUtils.matchesAny((Iterator<ArrayList<SQLTimeoutException>>) null, (Predicate<? super ArrayList<SQLTimeoutException>>) andPredicate0);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(mockThrowable0);
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      int int0 = 2815;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 2815, 128);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>();
      SingletonListIterator<LinkedHashSet<SQLRecoverableException>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<SQLRecoverableException>>(linkedHashSet0);
      IteratorUtils.matchesAll((Iterator<LinkedHashSet<SQLRecoverableException>>) singletonListIterator0, (Predicate<? super LinkedHashSet<SQLRecoverableException>>) predicate1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) arrayDeque0, 136, 136);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>();
      SingletonListIterator<LinkedHashSet<SQLRecoverableException>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<SQLRecoverableException>>(linkedHashSet0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.matchesAll((Iterator<LinkedHashSet<SQLRecoverableException>>) singletonListIterator0, (Predicate<? super LinkedHashSet<SQLRecoverableException>>) notPredicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>();
      SingletonListIterator<LinkedHashSet<SQLRecoverableException>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<SQLRecoverableException>>(linkedHashSet0);
      IteratorUtils.matchesAll((Iterator<LinkedHashSet<SQLRecoverableException>>) singletonListIterator0, (Predicate<? super LinkedHashSet<SQLRecoverableException>>) predicate1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Stack<LinkedHashSet<SQLRecoverableException>> stack0 = new Stack<LinkedHashSet<SQLRecoverableException>>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("YqlI`C}", "@2Hq^`7!^;V", sQLClientInfoException0);
      sQLTimeoutException0.printStackTrace();
      IteratorUtils.getIterator(sQLTimeoutException0);
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      SingletonIterator<LinkedHashSet<SQLDataException>> singletonIterator0 = new SingletonIterator<LinkedHashSet<SQLDataException>>(linkedHashSet0);
      IteratorUtils.toString((Iterator<LinkedHashSet<SQLDataException>>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(vector0);
      IteratorUtils.matchesAny((Iterator<SQLTransientConnectionException>) reverseListIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Set must not be null");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      DataTruncation dataTruncation0 = new DataTruncation((-1334), true, false, (-1334), (-1334), sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("33A.=z Zp9uA6{At", "YqlI`C}", dataTruncation0);
      sQLTimeoutException0.printStackTrace();
      IteratorUtils.getIterator((Object) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("33A.=z Zp9uA6{At", "$<", dataTruncation0);
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, (-1334), (-1334));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResettableListIterator<Iterator<SQLTransactionRollbackException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      String string0 = "Set must not be null";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Set must not be null");
      IteratorUtils.size(resettableListIterator0);
      Stack<LinkedHashSet<SQLRecoverableException>> stack0 = new Stack<LinkedHashSet<SQLRecoverableException>>();
      ResettableListIterator<LinkedHashSet<SQLRecoverableException>> resettableListIterator1 = IteratorUtils.loopingListIterator((List<LinkedHashSet<SQLRecoverableException>>) stack0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>();
      stack0.add(linkedHashSet0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(instanceofPredicate0);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableListIterator1, class1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EmptyMapIterator.emptyMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ArrayList<EnumSet<Locale.Category>> arrayList0 = new ArrayList<EnumSet<Locale.Category>>();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends ClientInfoStatus>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResettableListIterator<Iterator<SQLTransactionRollbackException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Set must not be null");
      IteratorUtils.size(resettableListIterator0);
      Stack<LinkedHashSet<SQLRecoverableException>> stack0 = new Stack<LinkedHashSet<SQLRecoverableException>>();
      ResettableListIterator<LinkedHashSet<SQLRecoverableException>> resettableListIterator1 = IteratorUtils.loopingListIterator((List<LinkedHashSet<SQLRecoverableException>>) stack0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedHashSet<SQLRecoverableException> linkedHashSet0 = new LinkedHashSet<SQLRecoverableException>();
      stack0.add(linkedHashSet0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(instanceofPredicate0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<LinkedHashSet<SQLRecoverableException>>) resettableListIterator1, (Predicate<? super LinkedHashSet<SQLRecoverableException>>) identityPredicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, 0L, 992L);
      Hashtable<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = hashtable0.elements();
      Stack<SQLException> stack0 = new Stack<SQLException>();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) stack0);
      Transformer<Object, StringTokenizer> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply(iterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) transformerClosure0);
      BoundedIterator<SQLNonTransientException> boundedIterator1 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) iterator0, 992L, 0L);
      IteratorUtils.toList((Iterator<?>) boundedIterator1, 940);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) boundedIterator0, 0L, 2657L);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      ArrayDeque<SQLSyntaxErrorException> arrayDeque1 = new ArrayDeque<SQLSyntaxErrorException>();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayDeque1);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) zippingIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      IteratorUtils.matchesAll((Iterator<SQLException>) null, (Predicate<? super SQLException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      Hashtable<SQLException, SQLIntegrityConstraintViolationException>[] hashtableArray0 = (Hashtable<SQLException, SQLIntegrityConstraintViolationException>[]) Array.newInstance(Hashtable.class, 2);
      Hashtable<SQLException, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<SQLException, SQLIntegrityConstraintViolationException>();
      hashtableArray0[0] = hashtable0;
      Hashtable<SQLException, SQLIntegrityConstraintViolationException> hashtable1 = new Hashtable<SQLException, SQLIntegrityConstraintViolationException>();
      hashtableArray0[1] = hashtable1;
      ObjectArrayListIterator<Hashtable<SQLException, SQLIntegrityConstraintViolationException>> objectArrayListIterator0 = new ObjectArrayListIterator<Hashtable<SQLException, SQLIntegrityConstraintViolationException>>(hashtableArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Hashtable<SQLException, SQLIntegrityConstraintViolationException>>) objectArrayListIterator0, (Transformer<? super Hashtable<SQLException, SQLIntegrityConstraintViolationException>, String>) null, ",/j", ",/j", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Iterator<SQLTimeoutException> iterator0 = null;
      HashMap<SQLException, String> hashMap0 = new HashMap<SQLException, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashMap0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("v#fag(L%yl0StZHX", "<cSeZ6W@x[");
      hashMap0.put(sQLTransactionRollbackException0, "dup76+OpwqUMyYO");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      hashMap0.put(sQLRecoverableException0, "");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) null, (Transformer<? super SQLTimeoutException, String>) transformer0, "", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Hashtable<SQLTransactionRollbackException, PriorityQueue<DataTruncation>> hashtable0 = new Hashtable<SQLTransactionRollbackException, PriorityQueue<DataTruncation>>();
      EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<DataTruncation>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, PriorityQueue<DataTruncation>>(hashtable0);
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) entrySetMapIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 14, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) mapIterator0, (Iterator<?>) mapIterator1, (Iterator<?>) mapIterator0);
      IteratorUtils.toString((Iterator<Object>) zippingIterator0, (Transformer<? super Object, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, PriorityQueue<BatchUpdateException>>(mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, 0L, 992L);
      Hashtable<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      Hashtable<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> hashtable1 = new Hashtable<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      hashtable1.elements();
      Stack<SQLException> stack0 = new Stack<SQLException>();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) abstractMapIteratorDecorator0, 940);
      IteratorUtils.loopingListIterator(list0);
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((BatchUpdateException[]) null, 940);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MapIterator<Boolean, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.contains((Iterator<Boolean>) mapIterator0, (Object) mapIterator0);
      EmptyMapIterator.emptyMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ArrayList<EnumSet<Locale.Category>> arrayList0 = new ArrayList<EnumSet<Locale.Category>>();
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) linkedHashSet0);
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 1);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      InvokerTransformer<SQLException, Integer> invokerTransformer0 = new InvokerTransformer<SQLException, Integer>("%", classArray0, classArray0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) listIterator0, (Transformer<? super SQLTransientException, ? extends Integer>) invokerTransformer0);
      Iterator<SQLTimeoutException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Iterator<InstanceofPredicate> iterator0 = EmptyIterator.emptyIterator();
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) iterator0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) list0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<Predicate<Object>>) null, (Predicate<? super Predicate<Object>>) predicate1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("&", "{P*TudO3+6o;UF^,F2P", 55, (long[]) null, sQLIntegrityConstraintViolationException0);
      stack0.add(batchUpdateException0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>(list0);
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayList0);
      NullPredicate.nullPredicate();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("org.apache.commons.collections4.map.Flat3Map$EntryIterator");
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException1;
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException0;
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OrderedMapIterator<InstanceofPredicate, Stack<Stack>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) orderedMapIterator0, (Iterator<? extends InstanceofPredicate>) orderedMapIterator0, (Iterator<? extends InstanceofPredicate>) orderedMapIterator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate1);
      IteratorUtils.find((Iterator<Predicate<Object>>) singletonIterator0, (Predicate<? super Predicate<Object>>) predicate0);
      String string0 = "`*";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("`*", "`*");
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, PriorityQueue<BatchUpdateException>>(mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, 0L, 992L);
      Hashtable<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      Hashtable<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> hashtable1 = new Hashtable<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      hashtable1.elements();
      Stack<SQLException> stack0 = new Stack<SQLException>();
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>((Predicate<Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Predicate<Object>>) singletonIterator0, (Predicate<? super Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OrderedMapIterator<InstanceofPredicate, Stack<Stack>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) orderedMapIterator0, (Iterator<? extends InstanceofPredicate>) orderedMapIterator0, (Iterator<? extends InstanceofPredicate>) orderedMapIterator0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate1);
      IteratorUtils.find((Iterator<Predicate<Object>>) singletonIterator0, (Predicate<? super Predicate<Object>>) predicate0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      IteratorUtils.contains((Iterator<LinkedHashSet<SQLNonTransientConnectionException>>) null, (Object) zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      ArrayDeque<SQLSyntaxErrorException> arrayDeque1 = new ArrayDeque<SQLSyntaxErrorException>();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayDeque1);
      SQLDataException sQLDataException0 = new SQLDataException("3g)VB");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "[Cmx8 ", sQLDataException0);
      arrayDeque1.add(sQLSyntaxErrorException0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.NOPClosure");
      DataTruncation dataTruncation0 = new DataTruncation(940, true, true, 940, 715, sQLSyntaxErrorException0);
      SingletonIterator<DataTruncation> singletonIterator1 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      Class<Properties> class0 = Properties.class;
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("oDF=gg.3(h,#P", (Class<?>[]) classArray0, (Object[]) classArray0);
      IfTransformer.ifTransformer((Predicate<? super DataTruncation>) predicate0, (Transformer<? super DataTruncation, ? extends String>) transformer0, (Transformer<? super DataTruncation, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) singletonIterator1, (Transformer<? super DataTruncation, String>) transformer0, "org.apache.commons.collections4.functors.NOPClosure", "", "}+^]Qp~df-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'oDF=gg.3(h,#P' on 'class java.sql.DataTruncation' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("InstantiateTransformer: Constructor must be public", ";o?", sQLClientInfoException0);
      sQLTimeoutException0.printStackTrace();
      IteratorUtils.getIterator(hashMap0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getChildNodes();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ResettableListIterator<Iterator<SQLTransactionRollbackException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      IteratorUtils.get((Iterator<DataTruncation>) singletonIterator0, 0);
      SQLDataException sQLDataException0 = new SQLDataException("Mp");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getChildNodes();
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tCuN");
      Object[] objectArray0 = new Object[2];
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate0);
      String string0 = "org.apache.commons.collections4.functors.NOPClosure";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.NOPClosure");
      DataTruncation dataTruncation0 = new DataTruncation(940, true, true, 940, 715, sQLSyntaxErrorException0);
      SingletonIterator<DataTruncation> singletonIterator1 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) singletonIterator1, 715);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 714
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ki04{%h[4~t8");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(";o?", ";o?", sQLClientInfoException0);
      sQLTimeoutException0.printStackTrace();
      IteratorUtils.getIterator("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<SQLTimeoutException> iterator0 = null;
      Transformer<SQLException, Integer> transformer0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) orPredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate1);
      AllPredicate<SQLNonTransientException> allPredicate0 = new AllPredicate<SQLNonTransientException>((Predicate<? super SQLNonTransientException>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) orPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayDeque0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Transformer<SQLIntegrityConstraintViolationException, SQLException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator1, 992L, 1L);
      Hashtable<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      hashtable0.elements();
      Stack<SQLException> stack0 = new Stack<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) null, (Collection<? super SQLInvalidAuthorizationSpecException>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      IteratorUtils.singletonIterator(stack0);
      Stack<Object> stack1 = new Stack<Object>();
      int[] intArray0 = new int[20];
      intArray0[3] = 2561;
      LoopingListIterator<Object> loopingListIterator0 = new LoopingListIterator<Object>(stack1);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Predicate<Object>>) singletonIterator0, (Predicate<? super Predicate<Object>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(";o?", "YqlI`C}", sQLClientInfoException0);
      sQLTimeoutException0.printStackTrace();
      IteratorUtils.getIterator("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<SQLTimeoutException> iterator0 = null;
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) listIterator0, (Transformer<? super SQLTransientException, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("]");
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(instanceofPredicate0);
      IteratorUtils.find((Iterator<Predicate<Object>>) singletonIterator0, (Predicate<? super Predicate<Object>>) instanceofPredicate0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = (-1180);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1180));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      String string0 = "YqlI`C}";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Transformer must not be null", "YqlI`C}", sQLClientInfoException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("D uMp", sQLClientInfoException0);
      sQLTimeoutException0.printStackTrace();
      StringTokenizer stringTokenizer0 = new StringTokenizer("Factory must not be null", "D uMp");
      IteratorUtils.getIterator(stringTokenizer0);
      EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, 0L, 992L);
      Hashtable<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      LoopingIterator<InstanceofPredicate> loopingIterator0 = new LoopingIterator<InstanceofPredicate>(hashSet0);
      Iterator<InstanceofPredicate> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) loopingIterator0, (Iterator<? extends InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, 0L, 992L);
      Hashtable<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = hashtable0.elements();
      Stack<SQLException> stack0 = new Stack<SQLException>();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) stack0);
      Transformer<Object, StringTokenizer> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply(iterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) transformerClosure0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) iterator0, 992L, 0L);
      String string0 = "org.apache.commons.collections4.functors.NotNullPredicate";
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 7);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[3] = class3;
      Class<DataTruncation> class4 = DataTruncation.class;
      classArray0[4] = class4;
      Class<DataTruncation> class5 = DataTruncation.class;
      classArray0[5] = class5;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<DataTruncation> class6 = DataTruncation.class;
      classArray0[6] = class6;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("org.apache.commons.collections4.functors.NotNullPredicate", classArray0, classArray0);
      Iterator<SQLTimeoutException> iterator1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) null, (Transformer<? super SQLTransientException, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, PriorityQueue<BatchUpdateException>>(mapIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) abstractMapIteratorDecorator0, (long) 55, (long) 2561);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayDeque0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer1, transformer0);
      IteratorUtils.toString((Iterator<Iterator<LinkedList>>) resettableIterator0, (Transformer<? super Iterator<LinkedList>, String>) ifTransformer0, "", "", "");
      IteratorUtils.toArray(iterator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, 0L, 992L);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayDeque0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("S");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, PriorityQueue<BatchUpdateException>>(mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) abstractMapIteratorDecorator0, 12L, 1L);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayDeque0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayDeque0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.map.AbstractMapDecorator", (String) null, (-1522), hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLClientInfoException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null, (-1522), sQLClientInfoException1);
      ListIterator<SQLException> listIterator0 = IteratorUtils.singletonListIterator((SQLException) sQLNonTransientException0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer1, transformer0);
      IteratorUtils.toString((Iterator<Iterator<LinkedList>>) listIterator0, (Transformer<? super Iterator<LinkedList>, String>) ifTransformer0, "", "The list must not be null", "jh0[`**{b%a;x");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ResettableIterator<Stack<BatchUpdateException>> resettableIterator0 = IteratorUtils.singletonIterator(stack0);
      IteratorUtils.toList((Iterator<?>) resettableIterator0);
      int[] intArray0 = new int[4];
      intArray0[0] = 2561;
      intArray0[1] = 55;
      intArray0[2] = 2561;
      intArray0[3] = 2561;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[0] = predicate0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      predicateArray0[1] = (Predicate<Object>) orPredicate0;
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) orPredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicateArray0[1], predicate1);
      predicateArray0[2] = (Predicate<Object>) andPredicate0;
      AllPredicate<SQLNonTransientException> allPredicate0 = new AllPredicate<SQLNonTransientException>(predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) listIterator1, (Predicate<? super SQLNonTransientConnectionException>) allPredicate0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, PriorityQueue<BatchUpdateException>>(mapIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) abstractMapIteratorDecorator0, (long) 55, (long) 2561);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayDeque0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      IteratorUtils.singletonListIterator((SQLException) sQLSyntaxErrorException0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer1, transformer0);
      IteratorUtils.toString((Iterator<Iterator<LinkedList>>) resettableIterator0, (Transformer<? super Iterator<LinkedList>, String>) ifTransformer0, "", "pQY=IYt_", "");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      String string0 = "x95Jlg`OX\"h";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("x95Jlg`OX\"h", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, 1, 1);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("x95Jlg`OX\"h");
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0, 665, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("]");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.getParentNode();
      String string0 = ",xza*IAdRQYGY|0S8";
      String string1 = "MivTfN6JeA--`'P";
      iIOMetadataNode1.setNodeValue("MivTfN6JeA--`'P");
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      stack0.add(iIOMetadataNode0);
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) stack0);
      Iterator<DataTruncation> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 763);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 763
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      IteratorUtils.singletonIterator(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate0);
      IteratorUtils.find((Iterator<Predicate<Object>>) singletonIterator0, (Predicate<? super Predicate<Object>>) predicate0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      int int0 = 55;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.map.Flat3Map$EntryIterator", "", 55, (long[]) null, sQLSyntaxErrorException0);
      stack0.add(batchUpdateException0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>(stack0);
      IteratorUtils.loopingListIterator((List<Object>) linkedList0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.map.Flat3Map$EntryIterator");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Ks%q\"Y&_J3]''rMjJS", (String) null, (-946), hashMap0, sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLClientInfoException> singletonIterator1 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, true);
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) singletonIterator1);
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<Boolean, PriorityQueue<HashSet>> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Boolean>) mapIterator0, (long) (-946));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, PriorityQueue<BatchUpdateException>>(mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) abstractMapIteratorDecorator0, 12L, 1L);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("<9", "P0#1D", 3517);
      int[] intArray0 = new int[0];
      SQLException sQLException0 = new SQLException("org.apache.commons.collections4.iterators.EmptyOrderedMapIterator", "]");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`5N]1=4'>s4n?J/0t", "", 3517, intArray0, sQLException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("]", intArray0);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(intArray0);
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(batchUpdateException2);
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("", "org.apache.commons.collections4.IterableUtils$5", (int[]) null);
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("&8K|7TA_K &2n|", ";%zl2| /If", (int[]) null, batchUpdateException3);
      BatchUpdateException batchUpdateException6 = new BatchUpdateException(sQLSyntaxErrorException0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      batchUpdateExceptionArray0[0] = batchUpdateException4;
      batchUpdateExceptionArray0[1] = batchUpdateException4;
      batchUpdateExceptionArray0[2] = batchUpdateException1;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedMapIterator<InstanceofPredicate, Stack<Stack>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) orderedMapIterator0, (Iterator<? extends InstanceofPredicate>) orderedMapIterator0, (Iterator<? extends InstanceofPredicate>) orderedMapIterator0);
      IteratorUtils.isEmpty(zippingIterator0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MapIterator<Boolean, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.contains((Iterator<Boolean>) mapIterator0, (Object) mapIterator0);
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedIterator();
      Vector<Boolean> vector0 = new Vector<Boolean>();
      IteratorUtils.singletonListIterator(vector0);
      MapIterator<BatchUpdateException, SQLTransientException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator1);
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) stack0);
      IteratorUtils.getIterator(orderedIterator0);
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator2 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator3 = IteratorUtils.unmodifiableMapIterator(mapIterator2);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator3, 0L, 0L);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.loopingListIterator((List<Object>) linkedList0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("t%w3\"EwDymqUG3}nd");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("iterator", "`qx", sQLClientInfoException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLTimeoutException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", ";o?", 0, sQLTransientException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("iterator", hashMap0, sQLRecoverableException0);
      sQLTimeoutException0.printStackTrace();
      IteratorUtils.getIterator(sQLClientInfoException1);
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException1);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, 0L, (long) 0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      OrderedMapIterator<BatchUpdateException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<BatchUpdateException, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<BatchUpdateException, ?>) orderedMapIterator0);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) orderedMapIterator0;
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator1, (Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      IteratorUtils.isEmpty(iterator0);
      IteratorUtils.getIterator(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0, 0, (-843));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(";o?", "YqlI`C}", sQLClientInfoException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("D uMp", sQLClientInfoException0);
      sQLTimeoutException0.printStackTrace();
      IteratorUtils.getIterator("");
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("The predicate array must not contain a null predicate, index ", hashMap1);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException0;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) mapIterator0, 9);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0, (Collection<? super SQLClientInfoException>) list0);
      Predicate<SQLClientInfoException> predicate0 = IdentityPredicate.identityPredicate(sQLClientInfoException1);
      IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MapIterator<Boolean, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.contains((Iterator<Boolean>) mapIterator0, (Object) mapIterator0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedIterator();
      Vector<Boolean> vector0 = new Vector<Boolean>();
      ListIterator<Vector<Boolean>> listIterator0 = IteratorUtils.singletonListIterator(vector0);
      MapIterator<BatchUpdateException, SQLTransientException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator1);
      int[] intArray0 = new int[9];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = (-462);
      intArray0[3] = (-462);
      intArray0[4] = 10;
      intArray0[5] = (-462);
      intArray0[6] = 10;
      intArray0[7] = 10;
      intArray0[8] = 10;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Closures must not be null", "", (-462), intArray0, sQLNonTransientConnectionException0);
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      stack0.add(batchUpdateException0);
      Stack<Object> stack1 = new Stack<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) stack1);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<Object>) resettableListIterator0, (Transformer<? super Object, String>) transformer0);
      IteratorUtils.isEmpty(mapIterator1);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ResettableIterator<Stack<BatchUpdateException>> resettableIterator0 = IteratorUtils.singletonIterator(stack0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0);
      int[] intArray0 = new int[4];
      intArray0[0] = 2561;
      intArray0[1] = 55;
      intArray0[3] = 2561;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 2561, intArray0, sQLSyntaxErrorException0);
      stack0.add(batchUpdateException0);
      IteratorUtils.loopingListIterator(list0);
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLClientInfoException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator1 = new AbstractMapIteratorDecorator<SQLClientInfoException, PriorityQueue<BatchUpdateException>>(mapIterator0);
      long long0 = 1L;
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator1, 12L, 1L);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayDeque0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 3);
      Iterator<BatchUpdateException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0, (Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)25;
      byteArray0[8] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", "org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("\"87+", (String) null);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      // Undeclared exception!
      try { 
        sQLNonTransientConnectionException2.setStackTrace((StackTraceElement[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("iterator", "`qx", sQLClientInfoException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLTimeoutException0);
      sQLTimeoutException0.printStackTrace();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", ";o?", 0, sQLTransientException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("iterator", hashMap0, sQLRecoverableException0);
      sQLTimeoutException0.printStackTrace();
      IteratorUtils.getIterator(sQLClientInfoException1);
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException1);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, 0L, (long) 0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) boundedIterator0, (-843));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator1 = new AbstractMapIteratorDecorator<SQLClientInfoException, PriorityQueue<BatchUpdateException>>(mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator1, 0L, 0L);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayDeque0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) priorityQueue0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[7];
      int[] intArray0 = new int[2];
      intArray0[0] = 182;
      intArray0[1] = 182;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("`5N]1=4'>s4n?J/0t", "", 3517);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("<9", "`5N]1=4'>s4n?J/0t", 182, intArray0, sQLSyntaxErrorException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      int[] intArray1 = new int[3];
      intArray1[0] = 182;
      intArray1[1] = 182;
      intArray1[2] = 3517;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(intArray1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(batchUpdateException1);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("TwU-'m{<.n!", "", intArray1);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("Z#", "", intArray0, sQLSyntaxErrorException0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException(batchUpdateException1);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends BatchUpdateException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ResettableListIterator<Iterator<SQLTransactionRollbackException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.size(resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Locale.Category>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MapIterator<SQLRecoverableException, SQLException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, SQLException>) orderedMapIterator0);
      IteratorUtils.isEmpty(mapIterator0);
      Stack<LinkedHashSet<SQLRecoverableException>> stack0 = new Stack<LinkedHashSet<SQLRecoverableException>>();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      stack0.containsAll(vector0);
      ResettableListIterator<LinkedHashSet<SQLRecoverableException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<LinkedHashSet<SQLRecoverableException>>) stack0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) identityPredicate0);
      IteratorUtils.matchesAll((Iterator<LinkedHashSet<SQLRecoverableException>>) resettableListIterator0, (Predicate<? super LinkedHashSet<SQLRecoverableException>>) predicate0);
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 5);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      String string0 = "InvokerTransformer: The method '";
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("InvokerTransformer: The method '", "InvokerTransformer: The method '");
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      String string1 = "The predicate and closure arrays must be the same size";
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("The predicate and closure arrays must be the same size", "The predicate and closure arrays must be the same size", sQLNonTransientConnectionException3);
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[8] = sQLNonTransientConnectionException8;
      int int0 = (-843);
      int int1 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, (-843), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate0);
      IteratorUtils.find((Iterator<Predicate<Object>>) singletonIterator0, (Predicate<? super Predicate<Object>>) predicate0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      String string0 = "";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int int0 = 1561;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "@V6ra", 1561, sQLIntegrityConstraintViolationException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, sQLTransientConnectionException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.removeAll(hashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Hashtable<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("7IZ%bMUR");
      iIOMetadataNode0.getAttributeNodeNS("$H|ZU'D`PNB", "zZPy;|SHo");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-1357);
      String string0 = "r4icBJ#:Z";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Hashtable<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashtable1 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0);
      Iterator<Integer> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MapIterator<Boolean, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayDeque0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) mapIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.cloneNode(false);
      Node node1 = iIOMetadataNode0.replaceChild(node0, node0);
      IteratorUtils.nodeListIterator(node1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate0);
      singletonIterator0.next();
      IteratorUtils.find((Iterator<Predicate<Object>>) singletonIterator0, (Predicate<? super Predicate<Object>>) predicate0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "@V6ra", 1561, sQLIntegrityConstraintViolationException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, sQLTransientConnectionException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("$hXfp;I%ogIH", "", hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("i}", "AF@Hh]&", hashMap1, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("@V6ra", "List must not be null", hashMap0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("List must not be null", hashMap0);
      sQLClientInfoException4.addSuppressed(sQLClientInfoException1);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("@V6ra", ".[8Cm=xaKX6dseE?nc{");
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("", (String) null, hashtable0, sQLFeatureNotSupportedException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException5;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableListIterator0, (-843));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("iterator", "`qx", sQLClientInfoException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLTimeoutException0);
      sQLTimeoutException0.printStackTrace();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", ";o?", 0, sQLTransientException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("iterator", hashMap0, sQLRecoverableException0);
      sQLTimeoutException0.printStackTrace();
      IteratorUtils.getIterator(sQLClientInfoException1);
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.singletonIterator(sQLClientInfoException1);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 8);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[3] = class3;
      Class<SQLException> class4 = SQLException.class;
      classArray0[4] = class4;
      Class<SQLException> class5 = SQLException.class;
      classArray0[5] = class5;
      Class<SQLException> class6 = SQLException.class;
      classArray0[6] = class6;
      Class<SQLException> class7 = SQLException.class;
      classArray0[7] = class7;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) invokerTransformer0, "NR4aMiwjCK7jUi{", "h$>Vul.uc,C", "iterator");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ResettableIterator<Stack<BatchUpdateException>> resettableIterator0 = IteratorUtils.singletonIterator(stack0);
      IteratorUtils.toList((Iterator<?>) resettableIterator0);
      int[] intArray0 = new int[4];
      intArray0[0] = 2561;
      intArray0[1] = 55;
      intArray0[2] = 2561;
      intArray0[3] = 2561;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Class<ClientInfoStatus>[] classArray0 = (Class<ClientInfoStatus>[]) Array.newInstance(Class.class, 8);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      classArray0[0] = class0;
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      classArray0[1] = class1;
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      classArray0[2] = class2;
      Class<ClientInfoStatus> class3 = ClientInfoStatus.class;
      classArray0[3] = class3;
      Class<ClientInfoStatus> class4 = ClientInfoStatus.class;
      classArray0[4] = class4;
      Class<ClientInfoStatus> class5 = ClientInfoStatus.class;
      classArray0[5] = class5;
      Class<ClientInfoStatus> class6 = ClientInfoStatus.class;
      classArray0[6] = class6;
      Class<ClientInfoStatus> class7 = ClientInfoStatus.class;
      classArray0[7] = class7;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) class3, 55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate0);
      IteratorUtils.find((Iterator<Predicate<Object>>) singletonIterator0, (Predicate<? super Predicate<Object>>) predicate0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "@V6ra", 1561, sQLIntegrityConstraintViolationException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, sQLTransientConnectionException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("$hXfp;I%ogIH", "", hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      int[] intArray0 = new int[4];
      intArray0[0] = 1561;
      intArray0[1] = 1561;
      intArray0[2] = 1561;
      intArray0[3] = 1561;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "AF@Hh]&", 1561, intArray0, sQLClientInfoException0);
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      stack0.add(batchUpdateException0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) singletonIterator0);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<Object>) resettableListIterator0, (Transformer<? super Object, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate0);
      IteratorUtils.find((Iterator<Predicate<Object>>) singletonIterator0, (Predicate<? super Predicate<Object>>) predicate0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.map.Flat3Map$EntryIterator", "", 55, (long[]) null, sQLSyntaxErrorException0);
      stack0.add(batchUpdateException0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>(stack0);
      IteratorUtils.loopingListIterator((List<Object>) linkedList0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.map.Flat3Map$EntryIterator");
      OrderedMapIterator<Boolean, InstanceofPredicate> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Boolean, Predicate<Object>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends Predicate<Object>>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Boolean>) orderedMapIterator1, (-4547L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MapIterator<SQLWarning, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Hashtable<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLClientInfoException>(hashtable0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      int[] intArray0 = new int[9];
      intArray0[0] = 2561;
      intArray0[1] = 2561;
      intArray0[2] = 2561;
      intArray0[4] = (-462);
      intArray0[5] = 2561;
      intArray0[6] = 55;
      intArray0[7] = 2561;
      intArray0[8] = 2561;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Closures must not be null", "Closures must not be null", 55, intArray0, sQLSyntaxErrorException0);
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      stack0.add(batchUpdateException0);
      Stack<Object> stack1 = new Stack<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) stack1);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<Object>) resettableListIterator0, (Transformer<? super Object, String>) transformer0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      ResettableListIterator<ClientInfoStatus> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.skippingIterator((Iterator<ClientInfoStatus>) resettableListIterator1, 0L);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      singletonIterator0.next();
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientException0, 0, (-1517));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate0);
      IteratorUtils.find((Iterator<Predicate<Object>>) singletonIterator0, (Predicate<? super Predicate<Object>>) predicate0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "@V6ra", 1561, sQLIntegrityConstraintViolationException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, sQLTransientConnectionException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("$hXfp;I%ogIH", "", hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("i}", "AF@Hh]&", hashMap1, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("@V6ra", "List must not be null", hashMap0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("List must not be null", hashMap0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("@V6ra", ".[8Cm=xaKX6dseE?nc{");
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("", (String) null, hashtable0, sQLFeatureNotSupportedException0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableListIterator0, (-843));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      String string0 = ";o?";
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(";o?", "YqlI`C}", sQLClientInfoException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("D uMp", sQLClientInfoException0);
      sQLTimeoutException0.printStackTrace();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 1, sQLTimeoutException0);
      String string1 = "BO'cnGgNK?";
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("BO'cnGgNK?", hashMap0, sQLRecoverableException0);
      IteratorUtils.getIterator("");
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (-284L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ResettableIterator<Stack<BatchUpdateException>> resettableIterator0 = IteratorUtils.singletonIterator(stack0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0);
      int[] intArray0 = new int[4];
      intArray0[0] = 2561;
      intArray0[1] = 55;
      intArray0[2] = 2561;
      intArray0[3] = 2561;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      int[] intArray1 = new int[1];
      intArray1[0] = 3;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", (String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (String) null, 3, intArray1, sQLTimeoutException0);
      Stack<BatchUpdateException> stack1 = new Stack<BatchUpdateException>();
      stack1.add(batchUpdateException0);
      Stack<Object> stack2 = new Stack<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      OrderedIterator<Object> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<Object>) orderedIterator0, (Transformer<? super Object, String>) transformer0);
      IteratorUtils.isEmpty(resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MapIterator<SQLWarning, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Hashtable<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLClientInfoException>(hashtable0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      int[] intArray0 = new int[9];
      intArray0[0] = 2561;
      intArray0[1] = 2561;
      intArray0[2] = 2561;
      intArray0[4] = (-462);
      intArray0[5] = 2561;
      intArray0[6] = 55;
      intArray0[7] = 2561;
      intArray0[8] = 2561;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Closures must not be null", "Closures must not be null", 55, intArray0, sQLSyntaxErrorException0);
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      stack0.add(batchUpdateException0);
      Stack<Object> stack1 = new Stack<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) stack1);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<Object>) resettableListIterator0, (Transformer<? super Object, String>) transformer0);
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getPreviousSibling();
      iIOMetadataNode0.getNodeValue();
      iIOMetadataNode0.setNodeValue(",xza*IAdRQYGY|0S8");
      vector0.add(iIOMetadataNode0);
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      int int0 = 55;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      int[] intArray0 = new int[6];
      intArray0[0] = 55;
      intArray0[1] = 55;
      intArray0[2] = 16;
      intArray0[3] = 16;
      intArray0[4] = 16;
      intArray0[5] = 55;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("%)$}h)", "Closure must not be null", 16, intArray0, sQLSyntaxErrorException0);
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      stack0.add(batchUpdateException0);
      Stack<Object> stack1 = new Stack<Object>();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Object>) stack1);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<Object>) resettableListIterator0, (Transformer<? super Object, String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 2487;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 2487);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, SQLTimeoutException>(orderedMapIterator0);
      Consumer<SQLTransientException> consumer0 = (Consumer<SQLTransientException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractOrderedMapIteratorDecorator0.forEachRemaining(consumer0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 4);
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      iteratorArray0[0] = (Iterator<Properties>) resettableIterator0;
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getPreviousSibling();
      iIOMetadataNode0.getNodeValue();
      String string1 = ",xza*IAdRQYGY|0S8";
      iIOMetadataNode0.setNodeValue(",xza*IAdRQYGY|0S8");
      vector0.add(iIOMetadataNode0);
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      Iterator<DataTruncation> iterator0 = EmptyIterator.emptyIterator();
      int int0 = (-26);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, (-26));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -26
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MapIterator<Boolean, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.contains((Iterator<Boolean>) mapIterator0, (Object) mapIterator0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedIterator();
      Vector<Boolean> vector0 = new Vector<Boolean>();
      IteratorUtils.singletonListIterator(vector0);
      MapIterator<BatchUpdateException, SQLTransientException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator1);
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) stack0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(" cannot be null", "", (-265));
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("iterator");
      Iterator<Integer> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      Hashtable<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLClientInfoException>(hashtable0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("2YdI(/y8U^Gn:", "'#", 1561);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      hashtable0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("iterator", "`qx", sQLClientInfoException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLTimeoutException0);
      sQLTimeoutException0.printStackTrace();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", ";o?", 0, sQLTransientException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("iterator", hashMap0, sQLRecoverableException0);
      IteratorUtils.getIterator(sQLClientInfoException1);
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator1, 0L, 0L);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(";o?", sQLTransientException0);
      IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) null);
      Hashtable<SQLTransientException, SQLRecoverableException> hashtable0 = new Hashtable<SQLTransientException, SQLRecoverableException>();
      EntrySetMapIterator<SQLTransientException, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientException, SQLRecoverableException>(hashtable0);
      // Undeclared exception!
      try { 
        entrySetMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      List<SQLDataException> list0 = new Stack<SQLDataException>();
      OrderedMapIterator<InstanceofPredicate, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<InstanceofPredicate>) orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) loopingIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 5);
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Properties>) linkedList0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableListIterator0);
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) linkedList0);
      int int0 = 1901;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, 1901, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "S";
      stringArray0[1] = "S";
      stringArray0[2] = "S";
      stringArray0[3] = "m>cH($UpK0:#?m`S$xG";
      stringArray0[4] = "S";
      stringArray0[5] = "S";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(list0);
      IteratorUtils.loopingListIterator(list0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("m>cH($UpK0:#?m`S$xG");
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[8];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("S", "S");
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "S", "S", (-1));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("S", "List must not be null", "", (-1456));
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("S", "S", 0);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLSyntaxErrorException0;
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLSyntaxErrorException0;
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 0, 0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ResettableIterator<Stack<BatchUpdateException>> resettableIterator0 = IteratorUtils.singletonIterator(stack0);
      IteratorUtils.toList((Iterator<?>) resettableIterator0);
      int[] intArray0 = new int[4];
      intArray0[0] = 2561;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.NotNullPredicate", "org.apache.commons.collections4.functors.NotNullPredicate", 2561);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLSyntaxErrorException0.setStackTrace(stackTraceElementArray0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.apache.commons.collections4.functors.NotNullPredicate", "org.apache.commons.collections4.functors.NotNullPredicate", "org.apache.commons.collections4.functors.NotNullPredicate", 2561);
      sQLSyntaxErrorException0.setStackTrace(stackTraceElementArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("CX{%b(UW4O'N$p\u0000E", sQLSyntaxErrorException0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyListIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("T17pPh", sQLTimeoutException0);
      ConstantTransformer<Object, SQLTransactionRollbackException> constantTransformer0 = new ConstantTransformer<Object, SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLSyntaxErrorException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLDataException sQLDataException1 = new SQLDataException("prefix may not be null", "org.apache.commons.collections4.functors.NotNullPredicate", sQLNonTransientConnectionException0);
      ConstantTransformer.constantTransformer(sQLDataException1);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<Locale.Category> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>) resettableIterator0, (Iterator<? extends Locale.Category>) iterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[5];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLDataException0;
      int[] intArray0 = new int[5];
      intArray0[0] = (-916);
      intArray0[1] = 418;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1096;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("BS]-` Eg/e<iR;\"X1rg", intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, batchUpdateException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "whpWa^ZG`oD;40}-", sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLDataException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("#Wz", sQLSyntaxErrorException0);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLDataException sQLDataException2 = new SQLDataException((String) null, sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLDataException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 981, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLException[]) null, 66);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientException0);
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      linkedHashSet0.removeAll(hashSet0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) linkedHashSet0);
      IteratorUtils.emptyOrderedIterator();
      ServiceLoader<SQLException>[] serviceLoaderArray0 = (ServiceLoader<SQLException>[]) Array.newInstance(ServiceLoader.class, 5);
      Class<SQLException> class0 = SQLException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      serviceLoaderArray0[0] = serviceLoader0;
      Class<SQLException> class1 = SQLException.class;
      ServiceLoader<SQLException> serviceLoader1 = ServiceLoader.load(class1);
      serviceLoaderArray0[1] = serviceLoader1;
      Class<SQLException> class2 = SQLException.class;
      ServiceLoader<SQLException> serviceLoader2 = ServiceLoader.load(class2, classLoader0);
      serviceLoaderArray0[2] = serviceLoader2;
      ServiceLoader<SQLException> serviceLoader3 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[3] = serviceLoader3;
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader<SQLException> serviceLoader4 = ServiceLoader.load(class0, classLoader1);
      serviceLoaderArray0[4] = serviceLoader4;
      IteratorUtils.arrayListIterator(serviceLoaderArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MapIterator<SQLRecoverableException, SQLException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, SQLException>) orderedMapIterator0);
      IteratorUtils.isEmpty(mapIterator0);
      Stack<LinkedHashSet<SQLRecoverableException>> stack0 = new Stack<LinkedHashSet<SQLRecoverableException>>();
      ResettableListIterator<LinkedHashSet<SQLRecoverableException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<LinkedHashSet<SQLRecoverableException>>) stack0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) identityPredicate0);
      IteratorUtils.matchesAll((Iterator<LinkedHashSet<SQLRecoverableException>>) resettableListIterator0, (Predicate<? super LinkedHashSet<SQLRecoverableException>>) predicate0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      MapIterator<Integer, SQLNonTransientConnectionException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      Iterator<Integer> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Integer>) mapIterator1);
      IteratorUtils.toListIterator((Iterator<? extends Integer>) iterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/~84jf");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/~84jf", "Node must not be null", sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Node must not be null", "R?L6", 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(";%ZLq!;?Mrh^", ";%ZLq!;?Mrh^");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(";%ZLq!;?Mrh^", ";%ZLq!;?Mrh^", hashtable0, sQLTransientConnectionException0);
      sQLClientInfoException0.getSuppressed();
      sQLClientInfoException0.fillInStackTrace();
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      singletonListIterator0.reset();
      IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) singletonListIterator0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 1);
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MapIterator<Boolean, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.contains((Iterator<Boolean>) mapIterator0, (Object) mapIterator0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedIterator();
      Vector<Boolean> vector0 = new Vector<Boolean>();
      IteratorUtils.singletonListIterator(vector0);
      MapIterator<BatchUpdateException, SQLTransientException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator1);
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) stack0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Array class must not be null", " cannot be null", (-265));
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("0G{q;ac");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException(sQLRecoverableException0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException((String) null, "", (-265), sQLRecoverableException2);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("%:|", (String) null, 0);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException(" cannot be null", sQLRecoverableException3);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException((String) null);
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Integer integer0 = new Integer(676);
      IteratorUtils.singletonListIterator(integer0);
      ServiceLoader<SQLTransactionRollbackException>[] serviceLoaderArray0 = (ServiceLoader<SQLTransactionRollbackException>[]) Array.newInstance(ServiceLoader.class, 6);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLTransactionRollbackException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      serviceLoaderArray0[0] = serviceLoader0;
      ServiceLoader<SQLTransactionRollbackException> serviceLoader1 = ServiceLoader.load(class0, classLoader0);
      serviceLoaderArray0[1] = serviceLoader1;
      ServiceLoader<SQLTransactionRollbackException> serviceLoader2 = ServiceLoader.load(class0, classLoader0);
      Class<DataTruncation> class1 = DataTruncation.class;
      ServiceLoader.load(class1, classLoader0);
      serviceLoaderArray0[2] = serviceLoader2;
      ServiceLoader<SQLTransactionRollbackException> serviceLoader3 = ServiceLoader.load(class0);
      serviceLoaderArray0[3] = serviceLoader3;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      ServiceLoader.load(class2);
      Class<SQLTransactionRollbackException> class3 = SQLTransactionRollbackException.class;
      ServiceLoader<SQLTransactionRollbackException> serviceLoader4 = ServiceLoader.loadInstalled(class3);
      serviceLoaderArray0[4] = serviceLoader4;
      ServiceLoader<SQLTransactionRollbackException> serviceLoader5 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[5] = serviceLoader5;
      IteratorUtils.arrayIterator(serviceLoaderArray0, 0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "7!iWx8AiUkFgoFm.1#", 676, sQLRecoverableException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLRecoverableException1);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("p", "org.apache.commons.collections4.IteratorUtils", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", sQLRecoverableException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 676);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("qT&0o~tJ/Be8:t", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      batchUpdateException0.forEach(consumer0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", "U-:4kYtVZpI<Ac3g", (-1), sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException3.getStackTrace();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      batchUpdateException0.forEach(consumer1);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      SQLDataException sQLDataException0 = new SQLDataException(sQLInvalidAuthorizationSpecException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("Wy7XuG<", "Wy7XuG<", sQLInvalidAuthorizationSpecException2);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("U-:4kYtVZpI<Ac3g", "U-:4kYtVZpI<Ac3g", (-1));
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException();
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException();
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("Wy7XuG<", sQLInvalidAuthorizationSpecException0);
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("U-:4kYtVZpI<Ac3g");
      sQLDataExceptionArray0[6] = sQLDataException6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      DataTruncation dataTruncation0 = new DataTruncation((-1980), true, true, 0, 0, sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(415, true, true, 415, 0);
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertNotNull(dataTruncation1);
      
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, true, true, (-2029), 0, dataTruncation0);
      assertFalse(dataTruncation0.equals((Object)dataTruncation1));
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals(0, dataTruncation2.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals("01004", dataTruncation2.getSQLState());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertNotNull(dataTruncation2);
      
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(10, true, true, 10, 0);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-1980), false, true, (-1980), 0, dataTruncation2);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(0, false, false, 0, 0, dataTruncation2);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(0, false, false, (-2029), 10);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(7, true, false, 0, (-2029), dataTruncation2);
      dataTruncationArray0[7] = dataTruncation7;
      DataTruncation dataTruncation8 = new DataTruncation((-2029), false, true, 7, 10);
      dataTruncationArray0[8] = dataTruncation8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ResettableIterator<Stack<BatchUpdateException>> resettableIterator0 = IteratorUtils.singletonIterator(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(resettableIterator0);
      
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) resettableIterator0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2561;
      intArray0[1] = 55;
      intArray0[2] = 2561;
      intArray0[3] = 2561;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "`N\"py", 2561, intArray0, sQLSyntaxErrorException0);
      assertArrayEquals(new int[] {2561, 55, 2561, 2561}, intArray0);
      assertEquals(4, intArray0.length);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(2561, batchUpdateException0.getErrorCode());
      assertEquals("`N\"py", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      
      boolean boolean0 = stack0.add(batchUpdateException0);
      assertArrayEquals(new int[] {2561, 55, 2561, 2561}, intArray0);
      assertTrue(boolean0);
      assertTrue(stack0.contains(batchUpdateException0));
      assertEquals(4, intArray0.length);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[java.sql.BatchUpdateException: ]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(2561, batchUpdateException0.getErrorCode());
      assertEquals("`N\"py", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertTrue(stack0.contains(batchUpdateException0));
      assertFalse(list0.contains(55));
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[java.sql.BatchUpdateException: ]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) resettableListIterator0, (Transformer<? super Object, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = (-2719);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap1.put("FgW*k$pcR_", clientInfoStatus0);
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("FgW*k$pcR_", "", (-2719), hashMap1);
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertEquals((-2719), sQLClientInfoException0.getErrorCode());
      assertEquals("", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: FgW*k$pcR_", sQLClientInfoException0.toString());
      assertEquals("FgW*k$pcR_", sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLClientInfoException0, (-2719));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("suffix may not be null", "suffix may not be null", (-2702));
      assertEquals("suffix may not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: suffix may not be null", sQLTransactionRollbackException0.toString());
      assertEquals((-2702), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("suffix may not be null", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("suffix may not be null", "org.apache.commons.collections4.map.SingletonMap", sQLTransactionRollbackException0);
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertEquals("suffix may not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: suffix may not be null", sQLTransactionRollbackException0.toString());
      assertEquals((-2702), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("suffix may not be null", sQLTransactionRollbackException0.getMessage());
      assertEquals("org.apache.commons.collections4.map.SingletonMap", sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("suffix may not be null", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: suffix may not be null", sQLTransactionRollbackException1.toString());
      assertNotNull(sQLTransactionRollbackException1);
      
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientException) sQLTransactionRollbackException1);
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertEquals("suffix may not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: suffix may not be null", sQLTransactionRollbackException0.toString());
      assertEquals((-2702), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("suffix may not be null", sQLTransactionRollbackException0.getMessage());
      assertEquals("org.apache.commons.collections4.map.SingletonMap", sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("suffix may not be null", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: suffix may not be null", sQLTransactionRollbackException1.toString());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      assertNotSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertNotSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[0];
      int int0 = 3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientExceptionArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertNotNull(singletonListIterator0);
      
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Locale.Category>) singletonListIterator0);
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("7IZ%bMUR");
      assertNotNull(iIOMetadataNode0);
      
      String string0 = "D";
      Attr attr0 = iIOMetadataNode0.getAttributeNodeNS("D", "7IZ%bMUR");
      assertNull(attr0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Iterator<SQLTimeoutException> iterator0 = null;
      int int0 = 1660;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) null, 1660);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNode0.setAttributeNS("2G?lmz+*9| ,:", "2G?lmz+*9| ,:", "2G?lmz+*9| ,:");
      Node node0 = iIOMetadataNode0.getPreviousSibling();
      assertNull(node0);
      
      iIOMetadataNode0.normalize();
      int int0 = iIOMetadataNode0.getLength();
      assertEquals(0, int0);
      
      String string0 = iIOMetadataNode0.getPrefix();
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.getPreviousSibling();
      assertNull(node0);
      
      String string1 = iIOMetadataNode0.getNodeValue();
      assertNull(string1);
      
      String string2 = ",xza*IAdRQYGY|0S8";
      iIOMetadataNode0.setNodeValue(",xza*IAdRQYGY|0S8");
      boolean boolean0 = vector0.add(iIOMetadataNode0);
      assertTrue(boolean0);
      assertTrue(vector0.contains(iIOMetadataNode0));
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) vector0);
      assertTrue(vector0.contains(iIOMetadataNode0));
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertNotNull(resettableIterator0);
      
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Iterator<EnumSet<Locale.Category>>[] iteratorArray0 = (Iterator<EnumSet<Locale.Category>>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends EnumSet<Locale.Category>>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[1];
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      Class<Properties> class1 = Properties.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class1);
      assertNotNull(predicate0);
      assertSame(class1, class0);
      
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class2);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      assertNotSame(predicate1, predicate0);
      
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLInvalidAuthorizationSpecException> class3 = SQLInvalidAuthorizationSpecException.class;
      Predicate<Object> predicate2 = InstanceofPredicate.instanceOfPredicate(class3);
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate0);
      
      Class<IIOMetadataNode> class4 = IIOMetadataNode.class;
      Predicate<Object> predicate3 = InstanceofPredicate.instanceOfPredicate(class4);
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertNotNull(predicate3);
      assertNotSame(predicate3, predicate0);
      assertNotSame(predicate3, predicate2);
      assertNotSame(predicate3, predicate1);
      
      Class<SQLException> class5 = SQLException.class;
      Predicate<Object> predicate4 = InstanceofPredicate.instanceOfPredicate(class5);
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertNotNull(predicate4);
      assertNotSame(predicate4, predicate3);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate0);
      assertNotSame(predicate4, predicate1);
      
      Predicate<Object> predicate5 = InstanceofPredicate.instanceOfPredicate(class0);
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate4));
      assertNotNull(predicate5);
      assertSame(class0, class1);
      assertNotSame(predicate5, predicate3);
      assertNotSame(predicate5, predicate1);
      assertNotSame(predicate5, predicate0);
      assertNotSame(predicate5, predicate2);
      assertNotSame(predicate5, predicate4);
      
      Predicate<Object> predicate6 = InstanceofPredicate.instanceOfPredicate(class4);
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate0));
      assertNotNull(predicate6);
      assertNotSame(predicate6, predicate3);
      assertNotSame(predicate6, predicate5);
      assertNotSame(predicate6, predicate1);
      assertNotSame(predicate6, predicate4);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate6, predicate0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(instanceofPredicateArray0, 871, (-1158));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.IteratorUtils", (String) null);
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.IteratorUtils", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("08nt+a=I6]?p{`gvmwJ", "08nt+a=I6]?p{`gvmwJ", sQLTransientConnectionException0);
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.IteratorUtils", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("08nt+a=I6]?p{`gvmwJ", sQLTimeoutException0.getSQLState());
      assertEquals("08nt+a=I6]?p{`gvmwJ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: 08nt+a=I6]?p{`gvmwJ", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLTimeoutException0);
      assertEquals("org.apache.commons.collections4.IteratorUtils", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.IteratorUtils", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("08nt+a=I6]?p{`gvmwJ", sQLTimeoutException0.getSQLState());
      assertEquals("08nt+a=I6]?p{`gvmwJ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: 08nt+a=I6]?p{`gvmwJ", sQLTimeoutException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: 08nt+a=I6]?p{`gvmwJ", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTimeoutException: 08nt+a=I6]?p{`gvmwJ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(":n~cZu ", "org.apache.commons.collections4.IteratorUtils", (int[]) null);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertEquals("org.apache.commons.collections4.IteratorUtils", batchUpdateException1.getSQLState());
      assertEquals(":n~cZu ", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: :n~cZu ", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertNotNull(batchUpdateException1);
      
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException();
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertNull(batchUpdateException2.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException2.toString());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertNull(batchUpdateException2.getMessage());
      assertNotNull(batchUpdateException2);
      
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("ju09~$[x3T", "ju09~$[x3T", (int[]) null);
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException3.equals((Object)batchUpdateException1));
      assertEquals("ju09~$[x3T", batchUpdateException3.getMessage());
      assertEquals("ju09~$[x3T", batchUpdateException3.getSQLState());
      assertEquals(0, batchUpdateException3.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ju09~$[x3T", batchUpdateException3.toString());
      assertNotNull(batchUpdateException3);
      
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      long[] longArray0 = new long[6];
      longArray0[0] = 225L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException((String) null, (int[]) null);
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException0));
      assertNull(batchUpdateException4.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException4.toString());
      assertEquals(0, batchUpdateException4.getErrorCode());
      assertNull(batchUpdateException4.getMessage());
      assertNotNull(batchUpdateException4);
      
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("", "08nt+a=I6]?p{`gvmwJ", 0, longArray0, batchUpdateException4);
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException4.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException5.equals((Object)batchUpdateException1));
      assertArrayEquals(new long[] {225L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertNull(batchUpdateException4.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException4.toString());
      assertEquals(0, batchUpdateException4.getErrorCode());
      assertNull(batchUpdateException4.getMessage());
      assertEquals("08nt+a=I6]?p{`gvmwJ", batchUpdateException5.getSQLState());
      assertEquals(0, batchUpdateException5.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException5.toString());
      assertEquals("", batchUpdateException5.getMessage());
      assertNotNull(batchUpdateException5);
      
      batchUpdateExceptionArray0[4] = batchUpdateException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      BatchUpdateException batchUpdateException6 = new BatchUpdateException(sQLFeatureNotSupportedException0);
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException3));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException6.equals((Object)batchUpdateException0));
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLFeatureNotSupportedException", batchUpdateException6.toString());
      assertEquals(0, batchUpdateException6.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", batchUpdateException6.getMessage());
      assertNull(batchUpdateException6.getSQLState());
      assertNotNull(batchUpdateException6);
      
      batchUpdateExceptionArray0[5] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException((int[]) null, sQLFeatureNotSupportedException0);
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException5));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException6));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException4));
      assertFalse(batchUpdateException7.equals((Object)batchUpdateException3));
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLFeatureNotSupportedException", batchUpdateException7.toString());
      assertNull(batchUpdateException7.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", batchUpdateException7.getMessage());
      assertEquals(0, batchUpdateException7.getErrorCode());
      assertNotNull(batchUpdateException7);
      
      batchUpdateExceptionArray0[6] = batchUpdateException7;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      assertEquals(7, batchUpdateExceptionArray0.length);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      assertEquals(7, batchUpdateExceptionArray0.length);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(enumeration0);
      
      Stack<SQLException> stack0 = new Stack<SQLException>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) stack0);
      assertEquals(7, batchUpdateExceptionArray0.length);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 123;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 123, 123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-80);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-124), (byte)10, (byte)1, (byte) (-46), (byte)10, (byte) (-1), (byte) (-80)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      
      OrderedMapIterator<InstanceofPredicate, Stack<Stack>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) orderedMapIterator0, (Iterator<? extends InstanceofPredicate>) orderedMapIterator0, (Iterator<? extends InstanceofPredicate>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(zippingIterator0);
      
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      SingletonIterator<Predicate<Object>> singletonIterator0 = new SingletonIterator<Predicate<Object>>(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      Predicate<Object> predicate2 = IteratorUtils.find((Iterator<Predicate<Object>>) singletonIterator0, (Predicate<? super Predicate<Object>>) predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(singletonIterator0.hasNext());
      assertNull(predicate2);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      ZippingIterator<String> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends String>) resettableIterator0, (Iterator<? extends String>) resettableIterator0);
      assertNotNull(zippingIterator1);
      
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) zippingIterator1);
      assertNotNull(enumeration0);
      
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("@$S{G}(A.x", "@$S{G}(A.x", sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: @$S{G}(A.x", sQLTransientConnectionException0.toString());
      assertEquals("@$S{G}(A.x", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("@$S{G}(A.x", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, (-2864));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      SingletonListIterator<Locale.Category> singletonListIterator0 = new SingletonListIterator<Locale.Category>(locale_Category0);
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertNotNull(singletonListIterator0);
      
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Locale.Category>) singletonListIterator0);
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", 3684);
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(3684, stackTraceElement0.getLineNumber());
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", stackTraceElement0.getMethodName());
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", stackTraceElement0.getClassName());
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", stackTraceElement0.getFileName());
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator(org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator:3684)", stackTraceElement0.toString());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("CX{%b(UW4O'N$p\u0000E", "", "CX{%b(UW4O'N$p\u0000E", 3684);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("CX{%b(UW4O'N$p\u0000E", stackTraceElement1.getClassName());
      assertEquals("CX{%b(UW4O'N$p\u0000E.(CX{%b(UW4O'N$p\u0000E:3684)", stackTraceElement1.toString());
      assertEquals(3684, stackTraceElement1.getLineNumber());
      assertEquals("CX{%b(UW4O'N$p\u0000E", stackTraceElement1.getFileName());
      assertEquals("", stackTraceElement1.getMethodName());
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      OrderedMapIterator<SQLTransactionRollbackException, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      ResettableListIterator<LinkedHashSet<SQLTransientConnectionException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Hashtable<SQLTransientException, SQLRecoverableException> hashtable0 = new Hashtable<SQLTransientException, SQLRecoverableException>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<SQLTransientException, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientException, SQLRecoverableException>(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      // Undeclared exception!
      try { 
        entrySetMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0, (Iterator<? extends BatchUpdateException>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(zippingIterator0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 9);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLSyntaxErrorException>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      MapIterator<SQLNonTransientConnectionException, SQLSyntaxErrorException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(mapIterator0);
      
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) mapIterator0;
      OrderedMapIterator<SQLNonTransientConnectionException, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends SQLException>) abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLException>(orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(abstractMapIteratorDecorator0);
      
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) abstractMapIteratorDecorator0;
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, 1L);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(boundedIterator0);
      
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) boundedIterator0;
      ListIteratorWrapper<SQLNonTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientConnectionException>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIteratorWrapper0.hasPrevious());
      assertNotNull(listIteratorWrapper0);
      
      iteratorArray0[3] = (Iterator<SQLNonTransientConnectionException>) listIteratorWrapper0;
      ArrayIterator<SQLNonTransientConnectionException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLNonTransientConnectionException>(mapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MapIterator<SQLRecoverableException, SQLException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, SQLException>) orderedMapIterator0);
      IteratorUtils.isEmpty(mapIterator0);
      Stack<LinkedHashSet<SQLRecoverableException>> stack0 = new Stack<LinkedHashSet<SQLRecoverableException>>();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      stack0.containsAll(vector0);
      IteratorUtils.loopingListIterator((List<LinkedHashSet<SQLRecoverableException>>) stack0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1847);
      longArray0[1] = (long) (-1847);
      longArray0[2] = (long) (-1847);
      longArray0[3] = (long) (-1847);
      longArray0[4] = (long) (-1847);
      Stack<BatchUpdateException> stack1 = new Stack<BatchUpdateException>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(vector0);
      IteratorUtils.loopingListIterator((List<Object>) linkedList0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("GPhVfEQ");
      IteratorUtils.boundedIterator((Iterator<?>) mapIterator0, 0L);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      ArrayListIterator<IIOMetadataNode> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<IIOMetadataNode>(sQLIntegrityConstraintViolationException0, 2956, 2956);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, 0L, 992L);
      Hashtable<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = hashtable0.elements();
      Stack<SQLException> stack0 = new Stack<SQLException>();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) stack0);
      Transformer<Object, StringTokenizer> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply(iterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) transformerClosure0);
      BoundedIterator<SQLNonTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) iterator0, 992L, 0L);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) boundedIterator0, 940);
      IteratorUtils.loopingListIterator(list0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("F*XEKv%-7OHx{d$uLo");
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<?, ? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("iterator", "`qx", sQLClientInfoException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLTimeoutException0);
      sQLTimeoutException0.printStackTrace();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", ";o?", 0, sQLTransientException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("iterator", hashMap0, sQLRecoverableException0);
      IteratorUtils.getIterator(sQLClientInfoException1);
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLClientInfoException, PriorityQueue<BatchUpdateException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator1, 0L, 0L);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayDeque0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      assertNotNull(iterator0);
      
      MapIterator<LinkedList<SQLWarning>, HashSet<Integer>> mapIterator2 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator2);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Stack<LinkedHashSet<SQLRecoverableException>> stack0 = new Stack<LinkedHashSet<SQLRecoverableException>>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("IR", "^1)N@lIj,O68f:`");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>[]) iteratorArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) iterator0);
      Hashtable<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLClientInfoException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLClientInfoException>(hashtable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("2YdI(/y8U^Gn:", "'#", 1561);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      hashtable0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }
}
