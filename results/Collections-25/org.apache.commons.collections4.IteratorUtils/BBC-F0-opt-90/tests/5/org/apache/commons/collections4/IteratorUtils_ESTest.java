/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 16:48:22 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("]COU%XB/+G1e[*m");
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransientException) null);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(iterator0);
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(identityPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLTransientException>) listIterator0, (Predicate<? super SQLTransientException>) nullIsExceptionPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MapIterator<StringTokenizer, EnumSet<ClientInfoStatus>> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends StringTokenizer>) mapIterator0, (Class<StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ListIterator<StringTokenizer> listIterator0 = EmptyListIterator.emptyListIterator();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) listIterator0, class0);
      Integer integer0 = new Integer(91);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      singletonListIterator0.reset();
      IteratorUtils.toList((Iterator<? extends Integer>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientConnectionExceptionArray0[0]);
      IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 0);
      String string0 = "";
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      String string1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) null, (Transformer<? super SQLNonTransientException, String>) transformer0, "", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("4X", "4X");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", "4X", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      sQLTransientConnectionException2.fillInStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException((String) null, "keR|\"{j1eTrV", 2280, sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException("cd!e:^{", "", 10, sQLTransientConnectionException5);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException6;
      int int0 = 4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 4, (-774));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>((String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, sQLTransientException0);
      ConstantTransformer.constantTransformer(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) orderedIterator0, (Transformer<? super SQLNonTransientException, String>) constantTransformer0, ")", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientConnectionExceptionArray0[0]);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      IteratorUtils.get(iterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException("", "?;DqP", sQLTransientConnectionException0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, sQLDataException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.iterators.EnumerationIterator", sQLWarning0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLTransactionRollbackException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "prefix may not be null", sQLTransientConnectionException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("0yvSk+|V..'[\\_aGh", "p9E/", sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException((String) null, sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("?;DqP", "delimiter may not be null", sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.getIterator("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 16, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("W");
      SQLDataException sQLDataException0 = new SQLDataException();
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLNonTransientException) sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) resettableIterator0, (Transformer<? super SQLNonTransientException, String>) null, "\"", (String) null, ")>vF<|=4Que?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientConnectionExceptionArray0[0]);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(">&} jsk[(BQjLm", ".7//g|EpkiWRiM", 1143);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException0;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      IteratorUtils.get(iterator0, 0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", true);
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = ">XXnYVU&TLt";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">XXnYVU&TLt");
      IteratorUtils.emptyMapIterator();
      ResettableListIterator<Closure<Object>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Closure<Object>>) resettableListIterator0, (Predicate<? super Closure<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MapIterator<StringTokenizer, ArrayDeque<DataTruncation>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      ReverseListIterator<EnumSet<Locale.FilteringMode>> reverseListIterator0 = new ReverseListIterator<EnumSet<Locale.FilteringMode>>(arrayList0);
      EmptyOrderedIterator.emptyOrderedIterator();
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("prefix may not be null");
      IteratorUtils.toString((Iterator<SQLNonTransientException>) orderedIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "N&M[A<p;Xw/pdJS", "transformer may not be null", "Node must not be null");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[9];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "prefix may not be null");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 1, sQLInvalidAuthorizationSpecException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", "]", 112);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("Estimated size must be greater than 0", "", 1819);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("N&M[A<p;Xw/pdJS", "", sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("", "Estimated size must be greater than 0", 1114, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException("prefix may not be null", "org.apache.commons.collections4.functors.NullIsExceptionPredicate", sQLTransientConnectionException3);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException("N&M[A<p;Xw/pdJS", "+;8|-;m| }hp`)y&?", sQLTransientConnectionException6);
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      SQLTransientConnectionException sQLTransientConnectionException8 = new SQLTransientConnectionException("b2?0^W0", (Throwable) null);
      sQLTransientConnectionExceptionArray0[8] = sQLTransientConnectionException8;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 1);
      IteratorUtils.get((Iterator<SQLTransientConnectionException>) resettableIterator0, 1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 5);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) listIterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Locale.LanguageRange>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vector<Closure<Object>> vector0 = new Vector<Closure<Object>>();
      Vector<Closure<Object>> vector1 = new Vector<Closure<Object>>();
      ReverseListIterator<Closure<Object>> reverseListIterator0 = new ReverseListIterator<Closure<Object>>(vector1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.c&mmonsQcollections4.ap.SingletonMap$SingletonMapIterator");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) singletonIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("'wJ|3j", "'wJ|3j");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) singletonListIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Vector<Closure<Object>> vector0 = new Vector<Closure<Object>>();
      ReverseListIterator<Closure<Object>> reverseListIterator0 = new ReverseListIterator<Closure<Object>>(vector0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[12];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientConnectionExceptionArray0[0]);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      ArrayList<SQLNonTransientConnectionException>[] arrayListArray0 = (ArrayList<SQLNonTransientConnectionException>[]) Array.newInstance(ArrayList.class, 0);
      int int0 = (-2431);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(arrayListArray0, (-2431));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      UniquePredicate.uniquePredicate();
      OrderedIterator<Locale.LanguageRange> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends Locale.LanguageRange>) orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableIterator0, 93);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAny((Iterator<IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      OrderedIterator<Locale.LanguageRange> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends Locale.LanguageRange>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      ReverseListIterator<EnumSet<Locale.FilteringMode>> reverseListIterator0 = new ReverseListIterator<EnumSet<Locale.FilteringMode>>(arrayList0);
      Stack<ClientInfoStatus> stack0 = new Stack<ClientInfoStatus>();
      StringTokenizer stringTokenizer0 = new StringTokenizer(">U}Ba/fV;6");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer(">U}Ba/fV;6");
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[5];
      SQLWarning sQLWarning0 = new SQLWarning(">suwQBx", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTimeoutException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(">U}Ba/fV;6", batchUpdateException0);
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("", sQLNonTransientException0);
      sQLNonTransientExceptionArray0[1] = sQLNonTransientException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("<d#+Xx*l", "K40ud#;c|2)OqPib");
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLDataException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) objectArrayListIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "", "{)j", "]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '>U}Ba/fV;6' on 'class java.sql.SQLNonTransientException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      IteratorUtils.getIterator(locale_FilteringMode0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Y");
      IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>(hashMap0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Y", hashtable0, sQLFeatureNotSupportedException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y");
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLClientInfoException0, comparator0, comparatorPredicate_Criterion0);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 8);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[1] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[2] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[3] = class3;
      Class<SQLDataException> class4 = SQLDataException.class;
      classArray0[4] = class4;
      Class<SQLDataException> class5 = SQLDataException.class;
      classArray0[5] = class5;
      Class<SQLDataException> class6 = SQLDataException.class;
      classArray0[6] = class6;
      Class<SQLDataException> class7 = SQLDataException.class;
      classArray0[7] = class7;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("Y", classArray0, classArray0);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) invokerTransformer0, "", "E~&zFmvsp\"|eY-", "Y");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      ReverseListIterator<EnumSet<Locale.FilteringMode>> reverseListIterator0 = new ReverseListIterator<EnumSet<Locale.FilteringMode>>(arrayList0);
      EmptyOrderedIterator.emptyOrderedIterator();
      OrderedMapIterator<SQLNonTransientException, Iterator<SQLClientInfoException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("$C,gl6+");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) orderedMapIterator0, (Transformer<? super SQLNonTransientException, String>) constantTransformer0, (String) null, (String) null, "Equator must not be null.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      String string0 = "FYkC-\"dLW]NL1";
      ConstantTransformer<SQLException, String> constantTransformer0 = new ConstantTransformer<SQLException, String>("FYkC-\"dLW]NL1");
      String string1 = "remove() is not supported";
      IteratorUtils.toString((Iterator<SQLNonTransientException>) orderedIterator0, (Transformer<? super SQLNonTransientException, String>) constantTransformer0, "remove() is not supported", "]m", "FYkC-\"dLW]NL1");
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MapIterator<StringTokenizer, ArrayDeque<DataTruncation>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) mapIterator0, (Iterator<? extends StringTokenizer>) mapIterator0);
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_FilteringMode0, defaultEquator0);
      NotPredicate.notPredicate((Predicate<? super String>) equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) listIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      SQLDataException sQLDataException0 = new SQLDataException("Can't do that after next or hasNext has been called.");
      stack0.add(sQLDataException0);
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) stack0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_FilteringMode0, (Equator<Object>) null);
      ArrayList<Predicate<BatchUpdateException>> arrayList0 = new ArrayList<Predicate<BatchUpdateException>>();
      ResettableListIterator<Predicate<BatchUpdateException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Predicate<BatchUpdateException>>) arrayList0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) resettableListIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      NotPredicate.notPredicate((Predicate<? super String>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) null, (Predicate<? super String>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Class<Properties> class0 = Properties.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsFalsePredicate<SQLTransientException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLTransientException>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientException>) null, (Predicate<? super SQLTransientException>) nullIsFalsePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) stack0);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 2);
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>) resettableIterator0, (Iterator<? extends StringTokenizer>) resettableIterator0);
      iteratorArray0[0] = iterator0;
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0);
      iteratorArray0[1] = (Iterator<StringTokenizer>) zippingIterator0;
      ZippingIterator<StringTokenizer> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends StringTokenizer>) zippingIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) listIterator0, 2380);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 2380
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OrderedIterator<Vector<SQLDataException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(":Cf@7Uo7oK= ", (String) null, 1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("End index must not be less than start index", sQLInvalidAuthorizationSpecException0);
      IdentityPredicate<SQLIntegrityConstraintViolationException> identityPredicate0 = new IdentityPredicate<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("8R<", sQLInvalidAuthorizationSpecException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException((String) null, "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException((String) null);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException3;
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException1;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.matchesAny((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      HashMap<StringTokenizer, SQLRecoverableException> hashMap0 = new HashMap<StringTokenizer, SQLRecoverableException>(569);
      Hashtable<StringTokenizer, SQLRecoverableException> hashtable0 = new Hashtable<StringTokenizer, SQLRecoverableException>();
      EntrySetMapIterator<StringTokenizer, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<StringTokenizer, SQLRecoverableException>(hashtable0);
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) entrySetMapIterator0, 1);
      IteratorUtils.isEmpty(orderedIterator0);
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<IIOMetadataNode> priorityQueue0 = new PriorityQueue<IIOMetadataNode>(2465, comparator0);
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) priorityQueue0);
      IteratorUtils.emptyListIterator();
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      String string0 = "transformer may not be null";
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.noneOf(class0);
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (Transformer<? super Locale.FilteringMode, ? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator("Y");
      IteratorUtils.getIterator(iterator0);
      Vector<Closure<Object>> vector1 = new Vector<Closure<Object>>();
      ReverseListIterator<Closure<Object>> reverseListIterator0 = new ReverseListIterator<Closure<Object>>(vector1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLClientInfoException>>) null, (Transformer<? super Iterator<SQLClientInfoException>, ? extends SQLWarning>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Transformer<SQLClientInfoException, SQLNonTransientConnectionException> transformer0 = ConstantTransformer.constantTransformer((SQLNonTransientConnectionException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, ? extends SQLNonTransientConnectionException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.emptyOrderedIterator();
      String string0 = "mQ|~ `";
      InvokerTransformer.invokerTransformer("mQ|~ `");
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 5);
      String string1 = "b$G{Y=]!ewo6zNk<A|@";
      SQLTransientException sQLTransientException0 = new SQLTransientException("mQ|~ `", "b$G{Y=]!ewo6zNk<A|@", 28);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("b$G{Y=]!ewo6zNk<A|@", sQLTransientException0);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) singletonListIterator0);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) listIterator0;
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, (long) 28, (long) 28);
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) boundedIterator0;
      OrderedMapIterator<SQLNonTransientConnectionException, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator0;
      HashMap<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException>(28);
      EntrySetMapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException>(hashMap0);
      iteratorArray0[3] = (Iterator<SQLNonTransientConnectionException>) entrySetMapIterator0;
      SQLWarning sQLWarning0 = new SQLWarning(sQLTransientException0);
      ArrayIterator<SQLNonTransientConnectionException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLNonTransientConnectionException>(sQLWarning0, 28);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.getIterator("Y");
      OrderedMapIterator<IIOMetadataNode, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException>(orderedMapIterator0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      singletonListIterator0.reset();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<String>) singletonListIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      ReverseListIterator<EnumSet<Locale.FilteringMode>> reverseListIterator0 = new ReverseListIterator<EnumSet<Locale.FilteringMode>>(arrayList0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.singletonListIterator(clientInfoStatus0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends ClientInfoStatus>) listIterator0, (Iterator<? extends ClientInfoStatus>) listIterator0);
      List<ClientInfoStatus> list0 = IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) iterator0, 14);
      IteratorUtils.loopingListIterator(list0);
      IteratorUtils.emptyMapIterator();
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      OrderedIterator<Locale.LanguageRange> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends Locale.LanguageRange>) orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ResettableListIterator<Closure<Object>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends Closure<Object>>) resettableListIterator0, (Predicate<? super Closure<Object>>) predicate0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<Closure<Integer>>) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator("Y");
      IteratorUtils.getIterator(iterator0);
      Vector<Closure<Object>> vector1 = new Vector<Closure<Object>>();
      ReverseListIterator<Closure<Object>> reverseListIterator0 = new ReverseListIterator<Closure<Object>>(vector1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iterator0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Closure<Object>>) reverseListIterator0, (Predicate<? super Closure<Object>>) comparatorPredicate0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedIterator<Vector<SQLDataException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(":Cf@7Uo7oK= ", (String) null, 1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, sQLInvalidAuthorizationSpecException0);
      IdentityPredicate<SQLIntegrityConstraintViolationException> identityPredicate0 = new IdentityPredicate<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException((String) null, sQLFeatureNotSupportedException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException((String) null, (String) null);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException3;
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException0;
      sQLIntegrityConstraintViolationExceptionArray0[8] = sQLIntegrityConstraintViolationException0;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.matchesAny((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate1);
      HashMap<StringTokenizer, SQLRecoverableException> hashMap0 = new HashMap<StringTokenizer, SQLRecoverableException>(1);
      Hashtable<StringTokenizer, SQLRecoverableException> hashtable0 = new Hashtable<StringTokenizer, SQLRecoverableException>();
      EntrySetMapIterator<StringTokenizer, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<StringTokenizer, SQLRecoverableException>(hashtable0);
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) entrySetMapIterator0, 10);
      IteratorUtils.isEmpty(orderedIterator0);
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<IIOMetadataNode> priorityQueue0 = new PriorityQueue<IIOMetadataNode>(1, comparator0);
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) priorityQueue0);
      IteratorUtils.emptyListIterator();
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Hashtable<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException>(hashtable0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      String string0 = "";
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      singletonListIterator0.reset();
      IteratorUtils.find((Iterator<String>) singletonListIterator0, (Predicate<? super String>) predicate1);
      IteratorUtils.size(singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>(10);
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayList0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("j0Y`nL2QG+nIu.F", "UzoO[X{kee", 10);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) singletonIterator0, (Object) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      arrayList0.add((EnumSet<Locale.FilteringMode>) null);
      IteratorUtils.loopingListIterator((List<ArrayList<ArrayDeque>>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Locale.FilteringMode[]) null, 4725);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MapIterator<StringTokenizer, ArrayDeque<DataTruncation>> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("List must not be null");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Predicate must not be null", sQLInvalidAuthorizationSpecException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("List must not be null", "Predicate must not be null", sQLRecoverableException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("List must not be null", "", 1);
      IdentityPredicate<SQLIntegrityConstraintViolationException> identityPredicate0 = new IdentityPredicate<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.matchesAny((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) identityPredicate0);
      HashMap<StringTokenizer, SQLRecoverableException> hashMap0 = new HashMap<StringTokenizer, SQLRecoverableException>(1);
      EntrySetMapIterator<StringTokenizer, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<StringTokenizer, SQLRecoverableException>(hashMap0);
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) mapIterator0, 4372);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.singletonIterator(iIOMetadataNode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<IIOMetadataNode> priorityQueue0 = new PriorityQueue<IIOMetadataNode>(1, comparator0);
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) priorityQueue0);
      IteratorUtils.emptyListIterator();
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      StringTokenizer[] stringTokenizerArray0 = IteratorUtils.toArray((Iterator<? extends StringTokenizer>) entrySetMapIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) stringTokenizerArray0, (-510));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<ArrayList<ArrayDeque>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      Closure<IIOMetadataNode> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<IIOMetadataNode>) null, (Closure<? super IIOMetadataNode>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) properties0);
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      singletonListIterator0.reset();
      IteratorUtils.find((Iterator<String>) singletonListIterator0, (Predicate<? super String>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OrderedIterator<Iterator<SQLClientInfoException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<Iterator<SQLClientInfoException>> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Iterator<SQLClientInfoException>>) orderedIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Iterator<SQLClientInfoException>>) iterator0, (Iterator<? extends Iterator<SQLClientInfoException>>) orderedIterator0, (Iterator<? extends Iterator<SQLClientInfoException>>) orderedIterator0);
      EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 3051;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 100;
      intArray0[2] = 100;
      SQLDataException sQLDataException0 = new SQLDataException("{(c&ldD-P=vz#Wq%");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLDataException0);
      sQLDataException0.initCause(batchUpdateException0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      IteratorUtils.contains((Iterator<BatchUpdateException>) listIterator0, (Object) listIterator0);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLWarning, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLWarning, SQLRecoverableException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLWarning, SQLRecoverableException>(orderedMapIterator0);
      MapIterator<SQLWarning, SQLRecoverableException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLWarning, SQLRecoverableException>) abstractMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLWarning>) mapIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MapIterator<StringTokenizer, ArrayDeque<DataTruncation>> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<StringTokenizer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) mapIterator0, 0L);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) boundedIterator0, (Iterator<? extends StringTokenizer>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) null, 0L, (-1212L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayDeque0);
      EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.size(resettableIterator0);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[7];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[4] = clientInfoStatus4;
      ClientInfoStatus clientInfoStatus5 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[5] = clientInfoStatus5;
      ClientInfoStatus clientInfoStatus6 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[6] = clientInfoStatus6;
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.arrayListIterator(clientInfoStatusArray0, 0, 0);
      Transformer<ClientInfoStatus, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<ClientInfoStatus>) resettableListIterator0, (Transformer<? super ClientInfoStatus, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) hashSet0);
      EmptyOrderedIterator.emptyOrderedIterator();
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends SQLSyntaxErrorException>) mapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator1);
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<SQLNonTransientException>) orderedIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "You must invoke setComparator() to set a comparator first.", "", "");
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(transformer0, defaultEquator0);
      OrPredicate.orPredicate((Predicate<? super Object>) equalPredicate0, (Predicate<? super Object>) equalPredicate0);
      Predicate<String> predicate0 = NotPredicate.notPredicate((Predicate<? super String>) equalPredicate0);
      Iterator<String> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends String>) listIterator0, (Predicate<? super String>) predicate0);
      IteratorUtils.toString(iterator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ct[TC#@l,<");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ct[TC#@l,<");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Hashtable<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException>(hashtable0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("remove() method is not supported", "remove() method is not supported");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.iterators.EmptyOrderedMapIterator", (String) null);
      hashtable0.replace(sQLIntegrityConstraintViolationException1, sQLInvalidAuthorizationSpecException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException(";4");
      Predicate<SQLIntegrityConstraintViolationException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<SQLIntegrityConstraintViolationException>) entrySetMapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      HashMap<StringTokenizer, SQLRecoverableException> hashMap0 = new HashMap<StringTokenizer, SQLRecoverableException>(10);
      EntrySetMapIterator<StringTokenizer, SQLRecoverableException> entrySetMapIterator1 = new EntrySetMapIterator<StringTokenizer, SQLRecoverableException>(hashMap0);
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) entrySetMapIterator1, 10);
      IteratorUtils.isEmpty(entrySetMapIterator0);
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<IIOMetadataNode> priorityQueue0 = new PriorityQueue<IIOMetadataNode>(10, comparator0);
      IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) priorityQueue0);
      IteratorUtils.emptyListIterator();
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>();
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<ArrayList<ArrayDeque>>) stack0);
      Stack<SQLException> stack1 = new Stack<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) null, (Collection<? super SQLTransactionRollbackException>) stack1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.getIterator("Y");
      OrderedMapIterator<IIOMetadataNode, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException>(orderedMapIterator0);
      IteratorUtils.emptyOrderedIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("Y", "Y");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0, false);
      Vector<Object> vector1 = new Vector<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) null, (Collection<? super StringTokenizer>) vector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.getIterator("Y");
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<IIOMetadataNode, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException>(orderedMapIterator0);
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, SQLSyntaxErrorException>) orderedMapIterator0);
      OrderedIterator<SQLNonTransientException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("Y");
      IteratorUtils.toString((Iterator<SQLNonTransientException>) orderedIterator0, (Transformer<? super SQLNonTransientException, String>) transformer0, "p}(Ge<<*o8", "p}(Ge<<*o8", "Y");
      EmptyListIterator.emptyListIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLNonTransientConnectionException0, defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<IIOMetadataNode>) mapIterator0, (Closure<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      Hashtable<SQLClientInfoException, SQLClientInfoException> hashtable0 = new Hashtable<SQLClientInfoException, SQLClientInfoException>();
      IteratorUtils.singletonListIterator((Hashtable<Iterator, ServiceLoader>) hashtable0);
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<IIOMetadataNode, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Object>(orderedMapIterator0);
      Closure<IIOMetadataNode> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<IIOMetadataNode>) orderedMapIterator0, (Closure<? super IIOMetadataNode>) closure0);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      Stack<ClientInfoStatus> stack0 = new Stack<ClientInfoStatus>();
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLException>) orderedIterator0, (Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OrderedIterator<Vector<SQLDataException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) hashSet0);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedIterator0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate1);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      IteratorUtils.find((Iterator<String>) singletonListIterator0, (Predicate<? super String>) predicate0);
      IteratorUtils.size(singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, 2155);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("K#l)?>zZNu{", (String) null, sQLTransactionRollbackException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("K#l)?>zZNu{", sQLNonTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTimeoutException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("K#l)?>zZNu{", "K#l)?>zZNu{", 132, sQLNonTransientException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("Cannot remove from list until next() or previous() called", "org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", (-2212));
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "", (-1136), sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<PriorityQueue<Predicate>>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) hashSet0);
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-2495));
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) singletonIterator0, (Object) "33G!0}:F");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      IteratorUtils.emptyOrderedIterator();
      NOPClosure.nopClosure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<ClientInfoStatus> stack0 = new Stack<ClientInfoStatus>();
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<StringTokenizer> class0 = StringTokenizer.class;
      IteratorUtils.toArray((Iterator<? extends StringTokenizer>) orderedIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayDeque0);
      Hashtable<SQLException, ClientInfoStatus> hashtable0 = new Hashtable<SQLException, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      sQLSyntaxErrorException0.setNextException(sQLTimeoutException0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashtable0.put(sQLSyntaxErrorException0, clientInfoStatus0);
      IteratorUtils.singletonListIterator((Hashtable<Iterator, ServiceLoader>) hashtable0);
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<IIOMetadataNode, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Object>(orderedMapIterator0);
      Closure<IIOMetadataNode> closure0 = NOPClosure.nopClosure();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.apply((Iterator<IIOMetadataNode>) orderedMapIterator0, (Closure<? super IIOMetadataNode>) closure0);
      IteratorUtils.toArray((Iterator<?>) orderedIterator0);
      Stack<ClientInfoStatus> stack0 = new Stack<ClientInfoStatus>();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLDataException>) null);
      Hashtable<SQLException, ClientInfoStatus> hashtable0 = new Hashtable<SQLException, ClientInfoStatus>();
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) stack0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate1);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      IteratorUtils.find((Iterator<String>) singletonListIterator0, (Predicate<? super String>) predicate1);
      IteratorUtils.size(singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLDataException>) null);
      Hashtable<SQLException, ClientInfoStatus> hashtable0 = new Hashtable<SQLException, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("Estimated size must be greater than 0", "Estimated size must be greater than 0");
      sQLTransientException0.fillInStackTrace();
      sQLTransientException0.printStackTrace();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashtable0.put(sQLTransientException0, clientInfoStatus0);
      ListIterator<Hashtable<Iterator, ServiceLoader>> listIterator0 = IteratorUtils.singletonListIterator((Hashtable<Iterator, ServiceLoader>) hashtable0);
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<IIOMetadataNode, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, Object>(orderedMapIterator0);
      Closure<IIOMetadataNode> closure0 = NOPClosure.nopClosure();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.apply((Iterator<IIOMetadataNode>) abstractOrderedMapIteratorDecorator0, (Closure<? super IIOMetadataNode>) closure0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      Stack<ClientInfoStatus> stack0 = new Stack<ClientInfoStatus>();
      IteratorUtils.loopingListIterator((List<ClientInfoStatus>) stack0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("~IF)I");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("+*J-,X*.6Y", "~IF)I", sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLTransactionRollbackException0);
      SQLException sQLException0 = new SQLException("Y", sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLRecoverableException0);
      sQLTransientConnectionException0.printStackTrace();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sQLRecoverableException0.setNextException(sQLTransactionRollbackException0);
      sQLRecoverableException0.printStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("lz5/", sQLException0);
      sQLTimeoutException0.printStackTrace();
      IteratorUtils.getIterator("Y");
      sQLTimeoutException0.getSuppressed();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("+*J-,X*.6Y", "", sQLRecoverableException0);
      sQLNonTransientConnectionException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ResettableListIterator<IIOMetadataNode> resettableListIterator1 = IteratorUtils.emptyListIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableListIterator1);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableListIterator1);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) list0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.loopingListIterator((List<ArrayList<ArrayDeque>>) list0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("1j[^]iN^4Ic\"l9`@U&", "1j[^]iN^4Ic\"l9`@U&", 1);
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.constantTransformer(sQLTimeoutException0);
      IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate1);
      IteratorUtils.find((Iterator<String>) resettableListIterator0, (Predicate<? super String>) predicate2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.item(10);
      iIOMetadataNode0.getAttributes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      UniquePredicate.uniquePredicate();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Integer integer0 = new Integer((-1051));
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(constantFactory0);
      Transformer<Object, Integer> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends Integer>) factoryTransformer0, (Transformer<? super Object, ? extends Integer>) factoryTransformer0);
      Iterator<Integer> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) orderedIterator0, (Transformer<? super SQLTransientException, ? extends Integer>) transformer0);
      Transformer<Object, String> transformer1 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString(iterator0, (Transformer<? super Integer, String>) transformer1, "YfgiD}'$ELTGR!9~Y", "YfgiD}'$ELTGR!9~Y", "b(id!S$HR-wjm");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      locale_FilteringModeArray0[4] = locale_FilteringMode0;
      locale_FilteringModeArray0[5] = locale_FilteringMode0;
      locale_FilteringModeArray0[6] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 8);
      enumSetArray0[0] = enumSet0;
      enumSetArray0[1] = enumSet0;
      enumSetArray0[2] = enumSet0;
      enumSetArray0[3] = enumSet0;
      enumSetArray0[4] = enumSet0;
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.complementOf(enumSet0);
      enumSetArray0[5] = enumSet1;
      enumSetArray0[6] = enumSet0;
      enumSetArray0[7] = enumSet0;
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableListIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<String>) resettableListIterator0, (Closure<? super String>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) null, 2142);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 1);
      ObjectArrayListIterator<Iterator<SQLClientInfoException>> objectArrayListIterator0 = new ObjectArrayListIterator<Iterator<SQLClientInfoException>>(iteratorArray0, 0);
      vector0.spliterator();
      ConstantTransformer.nullTransformer();
      IteratorUtils.isEmpty(resettableIterator0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      ArrayDeque<SQLDataException> arrayDeque1 = new ArrayDeque<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) arrayDeque1);
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.size(resettableIterator0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) zippingIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      SQLDataException sQLDataException0 = new SQLDataException("", "Z</xiXg''Jh>4_hD", 192, (Throwable) null);
      SQLDataException sQLDataException1 = new SQLDataException("Z</xiXg''Jh>4_hD", "]", sQLDataException0);
      vector0.add(sQLDataException1);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 3);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableListIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 1);
      int int0 = 0;
      ObjectArrayListIterator<Iterator<SQLClientInfoException>> objectArrayListIterator0 = new ObjectArrayListIterator<Iterator<SQLClientInfoException>>(iteratorArray0, 0);
      ConstantTransformer.nullTransformer();
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      EntrySetMapIterator<SQLRecoverableException, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, SQLTransientConnectionException>(hashMap0);
      ListIteratorWrapper<SQLRecoverableException> listIteratorWrapper0 = new ListIteratorWrapper<SQLRecoverableException>(entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) listIteratorWrapper0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      UniquePredicate.uniquePredicate();
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.emptyIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Iterator<SQLClientInfoException>>[] iteratorArray0 = (Iterator<Iterator<SQLClientInfoException>>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Iterator<SQLClientInfoException>> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Iterator<SQLClientInfoException>>) comparator0, (Iterator<? extends Iterator<SQLClientInfoException>>[]) iteratorArray0);
      IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLClientInfoException>>) iterator0, (Transformer<? super Iterator<SQLClientInfoException>, ? extends SQLWarning>) transformer0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MapIterator<StringTokenizer, ArrayDeque<DataTruncation>> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) mapIterator0, (-48L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      ConstantTransformer.nullTransformer();
      IteratorUtils.isEmpty(resettableIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      sQLRecoverableException0.setNextException((SQLException) null);
      sQLRecoverableException0.printStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLSyntaxErrorException0);
      sQLTimeoutException0.printStackTrace();
      IteratorUtils.getIterator((Object) null);
      sQLTimeoutException0.getSuppressed();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, "The prototype must be cloneable via a public clone method");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException1, 66, 192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("~IF)I");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("+*J-,X*.6Y", "~IF)I", sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLTransactionRollbackException0);
      SQLException sQLException0 = new SQLException("Y", sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLRecoverableException0);
      sQLTransientConnectionException0.printStackTrace();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sQLRecoverableException0.setNextException(sQLTransactionRollbackException0);
      sQLRecoverableException0.printStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("lz5/", sQLException0);
      sQLTimeoutException0.printStackTrace();
      IteratorUtils.getIterator("Y");
      sQLTimeoutException0.getSuppressed();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("+*J-,X*.6Y", "", sQLRecoverableException0);
      sQLNonTransientConnectionException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0, (-281), 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      PredicateTransformer<IIOMetadataNode> predicateTransformer0 = new PredicateTransformer<IIOMetadataNode>(nullIsTruePredicate0);
      Boolean boolean0 = predicateTransformer0.transform((IIOMetadataNode) null);
      booleanArray0[0] = boolean0;
      PredicateTransformer<IIOMetadataNode> predicateTransformer1 = new PredicateTransformer<IIOMetadataNode>(nullIsTruePredicate0);
      Boolean boolean1 = predicateTransformer1.transform((IIOMetadataNode) null);
      booleanArray0[1] = boolean1;
      PredicateTransformer.predicateTransformer((Predicate<? super SQLRecoverableException>) nullIsTruePredicate0);
      Boolean boolean2 = predicateTransformer0.transform((IIOMetadataNode) null);
      booleanArray0[2] = boolean2;
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Integer>) uniquePredicate0);
      IteratorUtils.arrayListIterator(booleanArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Stack<Predicate<Object>> stack0 = new Stack<Predicate<Object>>();
      stack0.iterator();
      Predicate<Integer> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Integer>>) stack0);
      IteratorUtils.find((Iterator<Integer>) null, (Predicate<? super Integer>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<String>) resettableListIterator0, (Closure<? super String>) closure0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "d@$";
      stringArray0[1] = "!Q u^8t(te< T*w9`L*";
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer((-1126));
      int[] intArray0 = new int[1];
      intArray0[0] = (-1126);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNode("d@$");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator((SQLInvalidAuthorizationSpecException) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      uniquePredicate0.evaluate((SQLNonTransientException) null);
      IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) orderedIterator0, (Object) orderedIterator0);
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((EnumSet<Locale.FilteringMode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) orderedIterator0, (Object) sQLTimeoutException0);
      IteratorUtils.size(orderedIterator0);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator");
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(arrayDeque0);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) priorityQueue0);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-21);
      Locale.FilteringMode.values();
      byteArray0[3] = (byte) (-51);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      linkedList0.push(locale_FilteringMode0);
      IteratorUtils.singletonListIterator((LinkedList<Closure>) linkedList0);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((byte) (-77));
      integerArray0[0] = integer0;
      int int0 = 10;
      Integer integer1 = new Integer(10);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(10);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1984);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((byte) (-21));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((byte) (-51));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      integerArray0[7] = integer7;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Integer, String> transformer0 = MapTransformer.mapTransformer((Map<? super Integer, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<Integer>) objectArrayListIterator0, (Transformer<? super Integer, String>) transformer0, "YfgiD}'$ELTGR!9~Y", "YfgiD}'$ELTGR!9~Y", "YfgiD}'$ELTGR!9~Y");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Hashtable<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException>(hashtable0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("remove() method is not supported", "remove() method is not supported");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.iterators.EmptyOrderedMapIterator", (String) null);
      hashtable0.replace(sQLIntegrityConstraintViolationException1, sQLInvalidAuthorizationSpecException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException(";4");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", ";4", sQLIntegrityConstraintViolationException2);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.iterators.EnumerationIterator", sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException3);
      hashtable0.put(sQLIntegrityConstraintViolationException2, sQLInvalidAuthorizationSpecException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(":Cf@7Uo7oK= ", "org.apache.commons.collections4.iterators.EnumerationIterator", 1);
      hashtable0.put(sQLIntegrityConstraintViolationException3, sQLInvalidAuthorizationSpecException2);
      Predicate<SQLIntegrityConstraintViolationException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<SQLIntegrityConstraintViolationException>) entrySetMapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      HashMap<StringTokenizer, SQLRecoverableException> hashMap0 = new HashMap<StringTokenizer, SQLRecoverableException>(10);
      EntrySetMapIterator<StringTokenizer, SQLRecoverableException> entrySetMapIterator1 = new EntrySetMapIterator<StringTokenizer, SQLRecoverableException>(hashMap0);
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) entrySetMapIterator1, 10);
      IteratorUtils.isEmpty(entrySetMapIterator0);
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<IIOMetadataNode> priorityQueue0 = new PriorityQueue<IIOMetadataNode>(10, comparator0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) priorityQueue0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "org.apache.commons.collections4.iterators.EmptyOrderedMapIterator";
      objectArray0[1] = (Object) resettableIterator0;
      objectArray0[2] = (Object) ":Cf@7Uo7oK= ";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) sQLIntegrityConstraintViolationException2;
      objectArray0[5] = (Object) sQLIntegrityConstraintViolationException2;
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 1);
      IteratorUtils.toString((Iterator<Object>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      ObjectArrayListIterator<Iterator<SQLClientInfoException>> objectArrayListIterator0 = new ObjectArrayListIterator<Iterator<SQLClientInfoException>>(iteratorArray0, 0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("XL/[kgpV3 `");
      IteratorUtils.toString((Iterator<EnumSet<Locale.FilteringMode>>) null, (Transformer<? super EnumSet<Locale.FilteringMode>, String>) transformer0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("XL/[kgpV3 `", "[]");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("Y;9AE!H `M3W_8", defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 8);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      classArray0[0] = class0;
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      classArray0[1] = class1;
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      classArray0[2] = class2;
      Class<SQLTimeoutException> class3 = SQLTimeoutException.class;
      classArray0[3] = class3;
      Class<SQLTimeoutException> class4 = SQLTimeoutException.class;
      classArray0[4] = class4;
      Class<SQLTimeoutException> class5 = SQLTimeoutException.class;
      classArray0[5] = class5;
      Class<SQLTimeoutException> class6 = SQLTimeoutException.class;
      classArray0[6] = class6;
      Class<SQLTimeoutException> class7 = SQLTimeoutException.class;
      classArray0[7] = class7;
      InvokerTransformer<Object, SQLIntegrityConstraintViolationException> invokerTransformer0 = new InvokerTransformer<Object, SQLIntegrityConstraintViolationException>("Y;9AE!H `M3W_8", classArray0, iteratorArray0);
      IfTransformer<SQLException, SQLIntegrityConstraintViolationException> ifTransformer0 = new IfTransformer<SQLException, SQLIntegrityConstraintViolationException>(allPredicate0, invokerTransformer0, invokerTransformer0);
      IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) ifTransformer0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      PredicateTransformer<IIOMetadataNode> predicateTransformer0 = new PredicateTransformer<IIOMetadataNode>(nullIsTruePredicate0);
      Boolean boolean0 = predicateTransformer0.transform((IIOMetadataNode) null);
      booleanArray0[0] = boolean0;
      PredicateTransformer<IIOMetadataNode> predicateTransformer1 = new PredicateTransformer<IIOMetadataNode>(nullIsTruePredicate0);
      Boolean boolean1 = predicateTransformer1.transform((IIOMetadataNode) null);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform((IIOMetadataNode) null);
      booleanArray0[2] = boolean2;
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Integer>) uniquePredicate0);
      ResettableListIterator<Boolean> resettableListIterator0 = new SingletonListIterator<Boolean>(boolean0);
      IteratorUtils.toListIterator((Iterator<? extends Boolean>) resettableListIterator0);
      IteratorUtils.isEmpty(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator((SQLInvalidAuthorizationSpecException) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      Predicate<SQLNonTransientException> predicate0 = new UniquePredicate<SQLNonTransientException>();
      IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedMapIterator<Object, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Object, SQLTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Object, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLTransientConnectionException>) orderedMapIterator1);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      Properties properties0 = new Properties();
      properties0.keys();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) orderedIterator0, (Object) listIterator0);
      ListIterator<DataTruncation> listIterator1 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      Properties properties0 = new Properties();
      Collection<IIOMetadataNode> collection0 = null;
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      ConstantTransformer.nullTransformer();
      IteratorUtils.isEmpty(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagNameNS("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OrderedMapIterator<Object, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Object, SQLTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Object, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLTransientConnectionException>) orderedMapIterator1);
      int int0 = 0;
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 4);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[0];
      EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      PredicateTransformer<IIOMetadataNode> predicateTransformer0 = new PredicateTransformer<IIOMetadataNode>(nullIsTruePredicate0);
      predicateTransformer0.transform((IIOMetadataNode) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[4];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 0);
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0);
      IteratorUtils.chainedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableListIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "UB]l_sxX~6R!@C";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("UB]l_sxX~6R!@C", "", sQLTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("UB]l_sxX~6R!@C", sQLTransactionRollbackException0);
      SQLException sQLException0 = new SQLException("", sQLRecoverableException0);
      sQLTransientConnectionException0.initCause(sQLTransactionRollbackException0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sQLRecoverableException0.setNextException(sQLTransientConnectionException0);
      sQLException0.printStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLException0);
      sQLTimeoutException0.printStackTrace();
      IteratorUtils.getIterator(sQLTimeoutException0);
      sQLTimeoutException0.getSuppressed();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, (-2742), (-281));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Vector<SQLTransientException>[]) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<String>) resettableListIterator0, (Closure<? super String>) closure0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "d@$";
      stringArray0[1] = "!Q u^8t(te< T*w9`L*";
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer((-1126));
      int[] intArray0 = new int[1];
      intArray0[0] = (-1126);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.functors.ExceptionTransformer", ":=z:qA.plB}0=X6\"&");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("!Q u^8t(te< T*w9`L*", intArray0, sQLNonTransientException0);
      MockThrowable mockThrowable0 = new MockThrowable(batchUpdateException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(mockThrowable0);
      ConstantFactory<SQLRecoverableException> constantFactory0 = new ConstantFactory<SQLRecoverableException>(sQLRecoverableException0);
      FactoryTransformer<Object, SQLRecoverableException> factoryTransformer0 = new FactoryTransformer<Object, SQLRecoverableException>(constantFactory0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException1, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) factoryTransformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Iterator<SQLRecoverableException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) iterator0, (Predicate<? super SQLRecoverableException>) allPredicate0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLRecoverableException>) iterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "!Q u^8t(te< T*w9`L*", (-1126), 5720);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 3);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      enumSetArray0[0] = enumSet0;
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.copyOf(enumSet0);
      enumSetArray0[1] = enumSet1;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      enumSet1.stream();
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      locale_FilteringModeArray0[4] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet2 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      enumSetArray0[2] = enumSet2;
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0);
      IteratorUtils.chainedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableListIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableListIterator0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Closure must not be null", (String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Closure must not be null", sQLInvalidAuthorizationSpecException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Closure must not be null", sQLNonTransientConnectionException0);
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      NotNullPredicate.notNullPredicate();
      IteratorUtils.emptyOrderedMapIterator();
      ResettableListIterator<Vector<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableIterator((Iterator<Vector<Locale.FilteringMode>>) resettableListIterator0);
      Iterator<Object>[] iteratorArray0 = (Iterator<Object>[]) Array.newInstance(Iterator.class, 5);
      Hashtable<SQLFeatureNotSupportedException, SQLTransientConnectionException> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, SQLTransientConnectionException>();
      Hashtable<Object, SQLTransientConnectionException> hashtable1 = new Hashtable<Object, SQLTransientConnectionException>(hashtable0);
      EntrySetMapIterator<Object, SQLTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<Object, SQLTransientConnectionException>(hashtable1);
      iteratorArray0[0] = (Iterator<Object>) entrySetMapIterator0;
      MapIterator<Object, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[2] = (Iterator<Object>) mapIterator0;
      MapIterator<SQLSyntaxErrorException, Locale.FilteringMode> mapIterator1 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) mapIterator1);
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      iteratorArray0[3] = iterator0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) sQLRecoverableException0);
      iteratorArray0[4] = (Iterator<Object>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Object>) null, (Iterator<?>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 3);
      MapIterator<SQLInvalidAuthorizationSpecException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, DataTruncation> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) mapIterator1;
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iteratorArray0[0]);
      iteratorArray0[1] = iterator0;
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[2] = (Iterator<SQLInvalidAuthorizationSpecException>) orderedIterator1;
      IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "h!+A2$SLMOWI}B", hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 3);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      iteratorArray0[0] = (Iterator<SQLDataException>) singletonIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) iteratorArray0[0], (Iterator<? extends SQLDataException>) singletonIterator0);
      iteratorArray0[1] = iterator0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator1, (Iterator<? extends SQLDataException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IteratorUtils.emptyIterator();
      MapIterator<SQLFeatureNotSupportedException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("LTyq}vlHe4p5", "", 915);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "Set must not be null", 915, sQLRecoverableException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("LTyq}vlHe4p5", "", 100, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("", "");
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("#o.&e", "Set must not be null", (-266));
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("G1*cv,", "", 915, sQLInvalidAuthorizationSpecException4);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      PredicateTransformer<IIOMetadataNode> predicateTransformer0 = new PredicateTransformer<IIOMetadataNode>(nullIsTruePredicate0);
      Boolean boolean0 = predicateTransformer0.transform((IIOMetadataNode) null);
      booleanArray0[0] = boolean0;
      PredicateTransformer<IIOMetadataNode> predicateTransformer1 = new PredicateTransformer<IIOMetadataNode>(nullIsTruePredicate0);
      Boolean boolean1 = predicateTransformer1.transform((IIOMetadataNode) null);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform((IIOMetadataNode) null);
      booleanArray0[2] = boolean2;
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Integer>) uniquePredicate0);
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      IteratorUtils.toListIterator((Iterator<? extends Boolean>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 3);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      enumSetArray0[0] = enumSet0;
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.copyOf(enumSet0);
      enumSetArray0[1] = enumSet1;
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      LinkedList<EnumSet<Locale.FilteringMode>> linkedList0 = new LinkedList<EnumSet<Locale.FilteringMode>>();
      ReverseListIterator<EnumSet<Locale.FilteringMode>> reverseListIterator0 = new ReverseListIterator<EnumSet<Locale.FilteringMode>>(linkedList0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      SingletonListIterator<EnumSet<Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.FilteringMode>>(enumSet1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<EnumSet<Locale.FilteringMode>>) singletonListIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.RegularEnumSet' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      String string0 = ")Mn>Ec5=-KD)R;";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLDataException sQLDataException0 = new SQLDataException("c\"[9kL~Pm$X", ")Mn>Ec5=-KD)R;", sQLTransactionRollbackException0);
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MapIterator<StringTokenizer, ArrayDeque<DataTruncation>> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<StringTokenizer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) mapIterator0, 42L);
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) boundedIterator0, (Iterator<? extends StringTokenizer>) mapIterator0);
      OrderedMapIterator<SQLSyntaxErrorException, ArrayList<SQLSyntaxErrorException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, ArrayList<SQLSyntaxErrorException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, ArrayList<SQLSyntaxErrorException>>(orderedMapIterator0);
      Consumer<SQLNonTransientException> consumer0 = (Consumer<SQLNonTransientException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractOrderedMapIteratorDecorator0.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      ReverseListIterator<EnumSet<Locale.FilteringMode>> reverseListIterator0 = new ReverseListIterator<EnumSet<Locale.FilteringMode>>(arrayList0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<EnumSet<Locale.FilteringMode>>) reverseListIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[7];
      StringTokenizer stringTokenizer0 = new StringTokenizer("&erB:51q~p>");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("&erB:51q~p>", "&erB:51q~p>");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("&erB:51q~p>", "&erB:51q~p>", false);
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("&erB:51q~p>", "Cannot store a duplicate key (\"");
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("");
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("](>`oxO", "", false);
      stringTokenizerArray0[5] = stringTokenizer5;
      StringTokenizer stringTokenizer6 = new StringTokenizer("");
      stringTokenizerArray0[6] = stringTokenizer6;
      IteratorUtils.arrayIterator(stringTokenizerArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = new int[0];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("c\"[9kL~Pm$X", intArray0, sQLTransactionRollbackException0);
      batchUpdateException0.getNextException();
      SQLWarning sQLWarning0 = new SQLWarning("c\"[9kL~Pm$X", "c\"[9kL~Pm$X", 3508, (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      SQLDataException sQLDataException1 = new SQLDataException("Closure must not be null", "The map size must be 1", 3508);
      SQLDataException sQLDataException2 = new SQLDataException();
      SQLDataException sQLDataException3 = new SQLDataException("Closure must not be null", (Throwable) null);
      SQLDataException sQLDataException4 = new SQLDataException("org.apache.commons.collections4.iterators.PeekingIterator", "", 3508, sQLDataException3);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null, 1073741824, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      ReverseListIterator<EnumSet<Locale.FilteringMode>> reverseListIterator0 = new ReverseListIterator<EnumSet<Locale.FilteringMode>>(arrayList0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "", (-502));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", (String) null, 1, sQLSyntaxErrorException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLSyntaxErrorException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "46}\"&;lQQqhf", 0, sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("UZ1?dSR,:1&S", "b4Z%/5b=R", 1103, sQLNonTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", sQLDataException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("2[AQ}~QH5$u]sZ61`", sQLRecoverableException0);
      sQLRecoverableException0.spliterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("}N<d@'0pUpiHH", "org.apache.commons.collections4.map.Flat3Map", (-502), sQLRecoverableException1);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLException[]) null, 0, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      int int0 = 210;
      int int1 = (-647);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((TreeSet<IIOMetadataNode>[]) null, 210, (-647));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.singletonListIterator(properties0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 3);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 0);
      ObjectArrayListIterator<Iterator<SQLClientInfoException>> objectArrayListIterator0 = new ObjectArrayListIterator<Iterator<SQLClientInfoException>>(iteratorArray0, 0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLClientInfoException>>) objectArrayListIterator0, (Transformer<? super Iterator<SQLClientInfoException>, ? extends SQLWarning>) transformer0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OrderedMapIterator<ArrayList<Properties>, LinkedList<EnumSet>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<ArrayList<Properties>>) orderedMapIterator0, (Predicate<? super ArrayList<Properties>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      ReverseListIterator<EnumSet<Locale.FilteringMode>> reverseListIterator0 = new ReverseListIterator<EnumSet<Locale.FilteringMode>>(arrayList0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) list0);
      OrderedMapIterator<IIOMetadataNode, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(linkedList0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) reverseListIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) linkedList0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      SQLException sQLException0 = new SQLException((String) null, (String) null, 100);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("=g&8|D&p", sQLException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLFeatureNotSupportedException0, comparator0);
      predicateArray0[0] = predicate0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      predicateArray0[1] = (Predicate<Object>) orPredicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray0[2] = predicate1;
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Predicate<Object> predicate2 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      predicateArray0[3] = predicate2;
      Predicate<Object> predicate3 = AndPredicate.andPredicate((Predicate<? super Object>) predicate2, (Predicate<? super Object>) orPredicate0);
      predicateArray0[4] = predicate3;
      Class<SQLTransientException> class0 = SQLTransientException.class;
      Predicate<Object> predicate4 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[5] = predicate4;
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "", 100);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransientException0, defaultEquator0);
      predicateArray0[6] = (Predicate<Object>) equalPredicate0;
      AllPredicate<BatchUpdateException> allPredicate0 = new AllPredicate<BatchUpdateException>(predicateArray0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super BatchUpdateException>) allPredicate0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      SQLException sQLException1 = new SQLException("ni^3Mj", (String) null, (-649), sQLTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", (String) null, sQLException1);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLDataException sQLDataException0 = new SQLDataException("", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLDataException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException((String) null);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException((String) null, "ni^3Mj", (-1));
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("", "LESS", (-1), sQLTimeoutException1);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("", (String) null);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException("Predicate must not be null", sQLTimeoutException4);
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      SQLTimeoutException sQLTimeoutException8 = new SQLTimeoutException("ni^3Mj", "", (-1271));
      sQLTimeoutExceptionArray0[8] = sQLTimeoutException8;
      IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Iterator<SQLClientInfoException>>) null, (Iterator<? extends Iterator<SQLClientInfoException>>) null, (Iterator<? extends Iterator<SQLClientInfoException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      ArrayList<Properties>[] arrayListArray0 = (ArrayList<Properties>[]) Array.newInstance(ArrayList.class, 6);
      ArrayList<Properties> arrayList0 = new ArrayList<Properties>();
      arrayListArray0[0] = arrayList0;
      ArrayList<Properties> arrayList1 = new ArrayList<Properties>(arrayList0);
      arrayListArray0[1] = arrayList1;
      ArrayList<Properties> arrayList2 = new ArrayList<Properties>();
      arrayListArray0[2] = arrayList2;
      ArrayList<Properties> arrayList3 = new ArrayList<Properties>();
      arrayListArray0[3] = arrayList3;
      ArrayList<Properties> arrayList4 = new ArrayList<Properties>();
      arrayList4.iterator();
      arrayListArray0[4] = arrayList4;
      ArrayList<Properties> arrayList5 = null;
      try {
        arrayList5 = new ArrayList<Properties>((-494));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -494
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Integer integer0 = new Integer(1);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0, true);
      Iterator<Integer> iterator0 = new SingletonIterator<Integer>(integer0, true);
      IteratorUtils.size(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer integer0 = new Integer(1);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0, true);
      Iterator<Integer> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Integer>) singletonIterator0);
      IteratorUtils.size(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 3);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      enumSetArray0[0] = enumSet0;
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.copyOf(enumSet0);
      enumSetArray0[1] = enumSet1;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      locale_FilteringModeArray0[4] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet2 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      enumSetArray0[2] = enumSet2;
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0);
      IteratorUtils.chainedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableListIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(3508, false, false, 3508, 1073741824);
      dataTruncation0.getSuppressed();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) resettableIterator0);
      EmptyOrderedIterator.emptyOrderedIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLClientInfoException>(orderedMapIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<String>) resettableListIterator0, (Closure<? super String>) closure0);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "!Q u^8t(te< T*w9`L*";
      Vector<Integer> vector0 = new Vector<Integer>();
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) arrayList0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "";
      int int0 = 16;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "ppgL", 16);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.functors.ClosureTransformer", "", sQLNonTransientConnectionException0);
      boolean boolean0 = true;
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, true);
      singletonIterator0.reset();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      sQLNonTransientConnectionException0.getSuppressed();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) singletonIterator0);
      IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) zippingIterator0, (Iterator<? extends DataTruncation>) resettableListIterator0);
      EmptyIterator.resettableEmptyIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = IdentityPredicate.identityPredicate((Object) null);
      predicateArray0[1] = predicate1;
      // Undeclared exception!
      try { 
        NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 2 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IteratorUtils.getIterator("\"");
      Iterator<SQLNonTransientConnectionException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Transformer must not be null", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("Transformer must not be null", (Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("", "", 0, (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException7;
      IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ListIterator<Object> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) listIterator0, (Transformer<? super Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MapIterator<TreeSet<IIOMetadataNode>, Class<IIOMetadataNode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      IteratorUtils.matchesAll((Iterator<TreeSet<IIOMetadataNode>>) mapIterator0, (Predicate<? super TreeSet<IIOMetadataNode>>) predicate0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1600);
      intArray0[1] = 0;
      intArray0[2] = 2539;
      intArray0[3] = 478;
      intArray0[4] = (-1);
      intArray0[5] = 2079;
      intArray0[6] = 362;
      intArray0[7] = 0;
      SQLException sQLException0 = new SQLException("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLException0);
      IteratorUtils.singletonListIterator(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) stack0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      OrderedMapIterator<Object, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Object, SQLTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Object, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLTransientConnectionException>) orderedMapIterator1);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      ReverseListIterator<EnumSet<Locale.FilteringMode>> reverseListIterator0 = new ReverseListIterator<EnumSet<Locale.FilteringMode>>(arrayList0);
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      ResettableIterator<StringTokenizer> resettableIterator1 = IteratorUtils.singletonIterator(stringTokenizer0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-653), closure0);
      IteratorUtils.apply((Iterator<StringTokenizer>) resettableIterator1, (Closure<? super StringTokenizer>) forClosure0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<String>) resettableListIterator0, (Closure<? super String>) closure0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "d@$";
      stringArray0[1] = "!Q u^8t(te< T*w9`L*";
      IteratorUtils.arrayIterator(stringArray0);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1086));
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1086));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2536);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, (-1086), (-1631));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<String>) resettableListIterator0, (Closure<? super String>) closure0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "d@$";
      stringArray0[1] = "!Q u^8t(te< T*w9`L*";
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer((-1126));
      vector0.add(integer0);
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLInvalidAuthorizationSpecException) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(1041);
      vector0.add(integer0);
      IteratorUtils.loopingListIterator((List<ArrayList<ArrayDeque>>) vector0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(3508, false, false, 3508, 1073741824);
      dataTruncation0.getSuppressed();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      iIOMetadataNode0.getAttributes();
      IteratorUtils.nodeListIterator(nodeList0);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      Predicate<SQLNonTransientException> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 2249;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Hashtable<EnumSet, ArrayList>>) null, 2249);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      MockThrowable mockThrowable0 = new MockThrowable("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "{9#EZCMb", mockThrowable0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ExceptionFactory invoked", (String) null, 329, sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("ExceptionFactory invoked", sQLTransactionRollbackException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 707);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      String string0 = null;
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) singletonIterator0, (Iterator<? extends String>) singletonIterator0, (Iterator<? extends String>) singletonIterator0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) zippingIterator0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer((String) null, (Class<?>[]) null, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The method to invoke must not be null
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[1] = predicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      Transformer<Integer, Integer> transformer1 = IfTransformer.ifTransformer((Predicate<? super Integer>) anyPredicate0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) transformer1);
      SkippingIterator<Integer> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, (long) 0);
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) skippingIterator0, (Predicate<? super Integer>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) transformer1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[6];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Zmt'm C?85I+;T8dmT_", "Zmt'm C?85I+;T8dmT_", 0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Zmt'm C?85I+;T8dmT_", "transformer may not be null", 0, sQLIntegrityConstraintViolationException0);
      sQLNonTransientExceptionArray0[1] = sQLNonTransientException0;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("", "transformer may not be null", 4318);
      sQLNonTransientExceptionArray0[2] = sQLNonTransientException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("A/]2?6<?", "transformer may not be null", sQLNonTransientException1);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLIntegrityConstraintViolationException1;
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLDataException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Zmt'm C?85I+;T8dmT_", "transformer may not be null", 0);
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-404));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      int int0 = (-1892);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, (-1892), (-1892));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      OrderedMapIterator<IIOMetadataNode, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException>(orderedMapIterator0);
      IteratorUtils.emptyOrderedIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer(",`");
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>(stringTokenizer0);
      int int0 = 4839;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) singletonIterator0, 4839);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 4838
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 3);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      enumSetArray0[0] = enumSet0;
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.copyOf(enumSet0);
      enumSetArray0[1] = enumSet1;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      MapIterator<Properties, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<Properties> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) mapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) iterator0);
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) iterator0);
      IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      String string0 = "S,qI^Al+";
      int int0 = (-970);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-970));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("aq7", "S,qI^Al+", sQLTransientConnectionException0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLIntegrityConstraintViolationException> iterator1 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0, (-5753));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      int int0 = (-2768);
      // Undeclared exception!
      try { 
        linkedList0.listIterator((-2768));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2768, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MapIterator<StringTokenizer, ArrayDeque<DataTruncation>> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<StringTokenizer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) mapIterator0, 0L);
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) boundedIterator0, (Iterator<? extends StringTokenizer>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) zippingIterator0, 62);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 62
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      PredicateTransformer<IIOMetadataNode> predicateTransformer0 = new PredicateTransformer<IIOMetadataNode>(nullIsTruePredicate0);
      Boolean boolean0 = predicateTransformer0.transform((IIOMetadataNode) null);
      booleanArray0[0] = boolean0;
      PredicateTransformer<IIOMetadataNode> predicateTransformer1 = new PredicateTransformer<IIOMetadataNode>(nullIsTruePredicate0);
      Boolean boolean1 = predicateTransformer1.transform((IIOMetadataNode) null);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform((IIOMetadataNode) null);
      booleanArray0[2] = boolean2;
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Integer>) uniquePredicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super IIOMetadataNode>) nullIsTruePredicate0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>((SQLDataException) null);
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) singletonListIterator0, 985L);
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(singletonListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator((SQLInvalidAuthorizationSpecException) null);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, 100, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 0);
      int int0 = (-797);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(classArray0, (-797), (-797));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.keys();
      IteratorUtils.singletonListIterator(properties0);
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLTransientConnectionException>) orderedIterator0, (Object) orderedIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLClientInfoException> mapIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Comparator<StringTokenizer> comparator0 = (Comparator<StringTokenizer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 7);
      ResettableIterator<StringTokenizer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<StringTokenizer>) resettableIterator0;
      String string0 = "org.apache.commons.collections4.iterators.LoopingIterator";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.iterators.LoopingIterator");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.LoopingIterator", "org.apache.commons.collections4.iterators.LoopingIterator", 4, sQLInvalidAuthorizationSpecException0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 4, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLTimeoutException0.addSuppressed(sQLNonTransientException0);
      int int0 = 3998;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 3998, 3998);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
