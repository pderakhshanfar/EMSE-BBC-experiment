/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 09 10:38:41 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ArrayList<SQLWarning> arrayList0 = new ArrayList<SQLWarning>();
      DataTruncation dataTruncation0 = new DataTruncation(3505, true, true, 3505, 904);
      dataTruncation0.getNextWarning();
      arrayList0.add((SQLWarning) null);
      LoopingListIterator<SQLWarning> loopingListIterator0 = new LoopingListIterator<SQLWarning>(arrayList0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLWarning>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyIterator();
      int int0 = 0;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 101;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("2!HV`**fD", "2!HV`**fD");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Closures must not be null", "Closures must not be null", 101, longArray0, sQLNonTransientException0);
      MockThrowable mockThrowable0 = new MockThrowable(batchUpdateException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("2!HV`**fD", mockThrowable0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", sQLNonTransientException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0, (-1926));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyIterator();
      Integer integer0 = new Integer((-1337));
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) resettableIterator0);
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>((Predicate<? super Object>) null);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("Transformer must not be null");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(nullIsTruePredicate0, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Integer, String>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[14];
      IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.FilteringMode>>(enumSet0, true);
      FactoryTransformer<Object, SQLInvalidAuthorizationSpecException> factoryTransformer0 = new FactoryTransformer<Object, SQLInvalidAuthorizationSpecException>((Factory<? extends SQLInvalidAuthorizationSpecException>) null);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonIterator0, (Transformer<? super EnumSet<Locale.FilteringMode>, ? extends SQLInvalidAuthorizationSpecException>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[14];
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "Array class must not be null", 99);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLTransientException0);
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTransientException sQLTransientException1 = new SQLTransientException("Array class must not be null", sQLTransientExceptionArray0[0]);
      sQLTransientExceptionArray0[1] = sQLTransientException1;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Array class must not be null", "", 1);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransactionRollbackException1;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientExceptionArray0[0]);
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("w?ZFp>e0GQ-RPw'PE", (String) null, sQLTransientException0);
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTimeoutException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(sQLTransientExceptionArray0[3]);
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransactionRollbackException2;
      SQLTransientException sQLTransientException2 = new SQLTransientException((String) null, "", sQLTimeoutException0);
      sQLTransientExceptionArray0[6] = sQLTransientException2;
      IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 1);
      Integer integer0 = new Integer(10);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.getIterator((Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      Iterator<StringTokenizer> iterator1 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0);
      IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>) iterator1, (Iterator<? extends StringTokenizer>) iterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>((Predicate<? super Object>) null, transformer0, transformer0);
      IteratorUtils.toString((Iterator<ClientInfoStatus>) null, (Transformer<? super ClientInfoStatus, String>) ifTransformer0, "", "", "");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, ComparatorPredicate.Criterion> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, 1073741821);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      EmptyIterator.emptyIterator();
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) linkedList0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Class<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("J7S!.>r\"l}}jg>aN", "");
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      ExceptionClosure.exceptionClosure();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(singletonIterator0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(identityPredicate0);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 4);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[2] = class2;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      classArray0[3] = class3;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) singletonIterator0;
      objectArray0[3] = (Object) class0;
      Transformer<Object, SQLWarning> transformer0 = InvokerTransformer.invokerTransformer("r(|[H", (Class<?>[]) classArray0, objectArray0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) nullIsFalsePredicate0, (Closure<? super Object>) closure0);
      IteratorUtils.apply((Iterator<SQLIntegrityConstraintViolationException>) singletonIterator0, (Closure<? super SQLIntegrityConstraintViolationException>) closure1);
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.getIterator(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, SQLRecoverableException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TreeSet<SQLSyntaxErrorException> treeSet0 = new TreeSet<SQLSyntaxErrorException>();
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(treeSet0);
      IteratorUtils.size(loopingIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (long) 0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) boundedIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("4F1?J;rCI>", "4F1?J;rCI>", sQLNonTransientConnectionException0);
      IteratorUtils.contains(iterator0, (Object) sQLRecoverableException0);
      SQLException sQLException0 = new SQLException("z9V26k", (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning("rsb^pEw kS", (Throwable) null);
      int int0 = 0;
      Integer integer0 = new Integer(4920);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      int[] intArray0 = new int[1];
      intArray0[0] = 1261;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("x=]U0_kD)", intArray0);
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("x=]U0_kD)");
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 1261);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'x=]U0_kD)' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(":sx?I_");
      Transformer<SQLException, SQLNonTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) transformer0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("LQ]=?dCNPBhzC", "$nTRJ'eG(FlgZxCtYD");
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException0;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("LQ]=?dCNPBhzC", "$nTRJ'eG(FlgZxCtYD");
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException0;
      String[] stringArray0 = new String[0];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<?>) resettableListIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredListIterator((ListIterator<?>) listIterator0, (Predicate<? super Object>) predicate0);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) null, (Transformer<? super SQLException, ?>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "E3");
      IteratorUtils.getIterator(sQLTransientConnectionException0);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      Enumeration<SQLSyntaxErrorException> enumeration0 = stack0.elements();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("", "Enumeration must not be null", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("X", "X");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("Enumeration must not be null", "K}");
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 0);
      IteratorUtils.getIterator(sQLNonTransientConnectionException7);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      stack0.elements();
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>((SQLSyntaxErrorException[]) null, 863, (-17));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      ConstantFactory<SQLNonTransientException> constantFactory0 = new ConstantFactory<SQLNonTransientException>(sQLDataException0);
      FactoryTransformer<SQLException, SQLNonTransientException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLNonTransientException>(constantFactory0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLException>) mapIterator0, (Transformer<? super SQLException, ?>) factoryTransformer0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Transformer<? super SQLException, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      Enumeration<SQLSyntaxErrorException> enumeration0 = stack0.elements();
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) stack0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      OrderedMapIterator<SQLFeatureNotSupportedException, ArrayDeque<SQLInvalidAuthorizationSpecException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.loopingListIterator(list0);
      Integer[] integerArray0 = new Integer[0];
      IteratorUtils.arrayListIterator(integerArray0);
      ListIterator<SQLRecoverableException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLRecoverableException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) listIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(listIterator0, comparator0, comparatorPredicate_Criterion0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) comparatorPredicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      IteratorUtils.toString((Iterator<SQLRecoverableException>) listIterator1, (Transformer<? super SQLRecoverableException, String>) transformer1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FalsePredicate.falsePredicate();
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(100);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(9);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(100);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2608));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[4]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-4059));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[6]);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(710);
      integerArray0[8] = integer8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 9, (int) integerArray0[7]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 100);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Object object0 = new Object();
      priorityQueue0.add(object0);
      priorityQueue0.remove();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) null, (Collection<? super String>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAny((Iterator<Properties>) null, (Predicate<? super Properties>) predicate0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      AbstractOrderedMapIteratorDecorator<TreeSet<SQLTransactionRollbackException>, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = null;
      try {
        abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<TreeSet<SQLTransactionRollbackException>, SQLIntegrityConstraintViolationException>((OrderedMapIterator<TreeSet<SQLTransactionRollbackException>, SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MapIterator<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0);
      IteratorUtils.size(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2469));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) stringTokenizer0);
      IteratorUtils.find((Iterator<Object>) listIterator0, (Predicate<? super Object>) predicate0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator(",(keif>E'S&`CJ=I");
      IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      priorityQueue0.add(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Properties>) null, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator(",(keif>E'S&`CJ=I");
      IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Integer integer0 = new Integer(109);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) integer0, comparator0);
      IteratorUtils.matchesAll((Iterator<TreeSet<Object>>) null, (Predicate<? super TreeSet<Object>>) predicate0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Properties properties0 = new Properties();
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) properties0);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) listIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      ListIterator<Object> listIterator1 = IteratorUtils.singletonListIterator((Object) listIterator0);
      IteratorUtils.find((Iterator<Object>) listIterator1, (Predicate<? super Object>) predicate0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      DataTruncation dataTruncation0 = new DataTruncation(2327, true, true, 2327, 123);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(3784, true, false, (-2650), (-3754), dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(91, false, true, 1495, 1495);
      dataTruncationArray0[2] = dataTruncation2;
      dataTruncation1.getSuppressed();
      DataTruncation dataTruncation3 = new DataTruncation(91, true, false, 3784, (-2650), dataTruncation2);
      dataTruncationArray0[3] = dataTruncation3;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) resettableListIterator0, (Transformer<? super DataTruncation, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredListIterator((ListIterator<?>) listIterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.getIterator(listIterator0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[5];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "?\"Ffg=", sQLTransientConnectionException0);
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransientConnectionException1;
      SQLTransientException sQLTransientException0 = new SQLTransientException("?\"Ffg=", sQLTransientExceptionArray0[1]);
      sQLTransientExceptionArray0[2] = sQLTransientException0;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", ";4BS", 10);
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException2;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("?\"Ffg=", ";4BS");
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTimeoutException0;
      ObjectArrayIterator<SQLTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientException>(sQLTransientExceptionArray0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) objectArrayIterator0, (Transformer<? super SQLTransientException, String>) factoryTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = null;
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      String string0 = null;
      int int0 = (-952);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("}p");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "-,?nr.6KPs@:kP-N");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) objectArrayListIterator0, (Transformer<? super SQLRecoverableException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("deO~]");
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ArrayIterator<SQLNonTransientConnectionException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLNonTransientConnectionException>(listIterator0, 44);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) iterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Properties>) listIterator0, (Predicate<? super Properties>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[]");
      IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) vector0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.getAttribute("jfMcjg8Pfq");
      iIOMetadataNode1.getNodeValue();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      DataTruncation dataTruncation0 = new DataTruncation((-3640), false, false, (-3640), (-820), sQLTransactionRollbackException0);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TreeSet<Object>[] treeSetArray0 = (TreeSet<Object>[]) Array.newInstance(TreeSet.class, 0);
      ResettableIterator<TreeSet<Object>> resettableIterator0 = IteratorUtils.arrayIterator(treeSetArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) resettableIterator0, comparator0);
      IteratorUtils.matchesAll((Iterator<TreeSet<Object>>) resettableIterator0, (Predicate<? super TreeSet<Object>>) predicate0);
      ConstantTransformer.constantTransformer("");
      MapIterator<Object, Transformer<Object, Boolean>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.find((Iterator<Object>) mapIterator0, (Predicate<? super Object>) predicate0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Zj-6E", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", map0, sQLClientInfoException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException1);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator1, class0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TreeSet<Object>[] treeSetArray0 = (TreeSet<Object>[]) Array.newInstance(TreeSet.class, 0);
      ResettableIterator<TreeSet<Object>> resettableIterator0 = IteratorUtils.arrayIterator(treeSetArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) resettableIterator0, comparator0);
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny((Iterator<Properties>) listIterator0, (Predicate<? super Properties>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("x:(@");
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("x:(@", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: x:(@", sQLDataException0.toString());
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLDataException0);
      assertNotNull(iterator0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("x:(@", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: x:(@", sQLDataException0.toString());
      
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("x:(@", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: x:(@", sQLDataException0.toString());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredListIterator((ListIterator<?>) listIterator0, (Predicate<? super Object>) predicate0);
      Properties properties0 = new Properties();
      IteratorUtils.singletonListIterator(properties0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("deO~]");
      EmptyMapIterator.emptyMapIterator();
      MapIterator<Transformer<Predicate<Object>, BatchUpdateException>, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Transformer<Predicate<Object>, BatchUpdateException>, BatchUpdateException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.toString((Iterator<Transformer<Predicate<Object>, BatchUpdateException>>) mapIterator1, (Transformer<? super Transformer<Predicate<Object>, BatchUpdateException>, String>) constantTransformer0, "deO~]", "A=c1$<uO3VcHh>{hd!]", "deO~]");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A=c1$<uO3VcHh>{hd!]");
      Integer integer0 = new Integer(18);
      Integer integer1 = new Integer(3407);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer1);
      IteratorUtils.peekingIterator((Iterator<? extends Integer>) singletonIterator0);
      int[] intArray0 = new int[7];
      intArray0[0] = 18;
      intArray0[1] = 3407;
      intArray0[2] = 18;
      intArray0[3] = 18;
      intArray0[4] = 3407;
      intArray0[5] = 18;
      intArray0[6] = 3407;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("deO~]", "A=c1$<uO3VcHh>{hd!]deO~]", 18, intArray0);
      batchUpdateException0.getLargeUpdateCounts();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator(",(keif>E'S&`CJ=I");
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      priorityQueue0.add(resettableIterator0);
      Integer integer0 = new Integer(2040);
      IteratorUtils.getIterator(enumeration0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0, false);
      IteratorUtils.contains((Iterator<Locale.FilteringMode>) singletonIterator0, (Object) locale_FilteringMode0);
      NodeList nodeList0 = null;
      // Undeclared exception!
      try { 
        singletonIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.SingletonIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) null, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = ",(keif>E'S&`CJ=I";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator(",(keif>E'S&`CJ=I");
      IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[0];
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator1 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      Predicate<SQLNonTransientException> predicate0 = NotNullPredicate.notNullPredicate();
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(factory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(factoryTransformer0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) transformerPredicate0, (Closure<? super Object>) closure0, (Closure<? super Object>) closure0);
      Closure<SQLNonTransientException> closure2 = IfClosure.ifClosure((Predicate<? super SQLNonTransientException>) predicate0, (Closure<? super SQLNonTransientException>) closure1);
      IteratorUtils.apply((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator1, (Closure<? super SQLIntegrityConstraintViolationException>) closure2);
      int int0 = (-605);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<Transformer>>) resettableIterator0, (-605));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -605
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedHashSet0);
      IteratorUtils.apply((Iterator<LinkedList<SQLTransientException>>) null, (Closure<? super LinkedList<SQLTransientException>>) closure0);
      OrderedIterator<Class<SQLSyntaxErrorException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      IteratorUtils.toString((Iterator<Class<SQLSyntaxErrorException>>) orderedIterator0, (Transformer<? super Class<SQLSyntaxErrorException>, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) uniquePredicate0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = predicate1;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate1;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      predicateArray0[6] = predicate1;
      predicateArray0[7] = predicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, closureArray0[3]);
      OrderedMapIterator<SQLRecoverableException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLRecoverableException>) orderedMapIterator0, (Closure<? super SQLRecoverableException>) closureArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dbPknR 1f w5iVgl");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      LoopingIterator<SQLRecoverableException> loopingIterator0 = new LoopingIterator<SQLRecoverableException>(priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray1);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(nonePredicate0, chainedClosure0, chainedClosure0);
      closureArray0[0] = (Closure<Object>) ifClosure0;
      Closure<Object> closure0 = NOPClosure.nopClosure();
      closureArray0[1] = closure0;
      Closure<Object> closure1 = ForClosure.forClosure(953, (Closure<? super Object>) closure0);
      closureArray0[2] = closure1;
      ForClosure<Object> forClosure0 = new ForClosure<Object>((-1126), closure0);
      closureArray0[3] = (Closure<Object>) forClosure0;
      Closure<Object> closure2 = ForClosure.forClosure((-1126), (Closure<? super Object>) closure0);
      closureArray0[4] = closure2;
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) nonePredicate0);
      IfClosure<Object> ifClosure1 = new IfClosure<Object>(predicate0, forClosure0, closure0);
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, ifClosure1);
      IteratorUtils.apply((Iterator<SQLRecoverableException>) loopingIterator0, (Closure<? super SQLRecoverableException>) switchClosure0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      IteratorUtils.emptyMapIterator();
      String string0 = "";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 100);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator1 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator1, (Closure<? super SQLIntegrityConstraintViolationException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      MapIterator<Locale.FilteringMode, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.FilteringMode>) mapIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FalsePredicate.falsePredicate();
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) listIterator0, (Iterator<? extends Properties>) listIterator0, (Iterator<? extends Properties>) listIterator0);
      IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) listIterator0, (Iterator<? extends Properties>) zippingIterator0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator(",(keif>E'S&`CJ=I");
      IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      FalsePredicate.falsePredicate();
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) listIterator0, (Iterator<? extends Properties>) listIterator0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      ListIterator<Properties> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      Properties properties0 = new Properties();
      EqualPredicate<Properties> equalPredicate0 = new EqualPredicate<Properties>(properties0, (Equator<Properties>) null);
      IteratorUtils.matchesAny((Iterator<Properties>) listIterator1, (Predicate<? super Properties>) equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "83oQk,s", 1072, (int[]) null);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "s%|a[(sv=H7(GG", (-1573));
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("vT{", "hb^/vV}ZN78EX\"^;T,", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) objectArrayListIterator0, 13);
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)18;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "M]\",rSuoJW#";
      String string1 = "sR<'6QfYl~t?B^lc>";
      int int0 = (-2202);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("sR<'6QfYl~t?B^lc>", "M]\",rSuoJW#", (-2202));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("M]\",rSuoJW#", "sR<'6QfYl~t?B^lc>", sQLFeatureNotSupportedException0);
      Transformer<SQLNonTransientException, SQLNonTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("M]\",rSuoJW#");
      IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) transformer0);
      String string2 = "{}";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("{}", "{}", sQLFeatureNotSupportedException0);
      sQLRecoverableException0.getLocalizedMessage();
      sQLFeatureNotSupportedException0.getStackTrace();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLRecoverableException0, defaultEquator0);
      IteratorUtils.matchesAll((Iterator<StringTokenizer>) null, (Predicate<? super StringTokenizer>) equalPredicate0);
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OrderedMapIterator<LinkedList<HashSet>, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.objectGraphIterator((Object) orderedMapIterator0, (Transformer<? super Object, ?>) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "c,kJ<\"&aXZea?W-T");
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.matchesAll((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("H", "AxpUS_$HL[z");
      IteratorUtils.getIterator("c,kJ<\"&aXZea?W-T");
      IteratorUtils.nodeListIterator(nodeList0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[0];
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0, 100, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator(",(keif>E'S&`CJ=I");
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) notPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.isEmpty(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("h;t");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      OrderedMapIterator<Properties, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Properties, SQLInvalidAuthorizationSpecException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) abstractMapIteratorDecorator0, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) orderedMapIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      MapIterator<Locale.FilteringMode, SQLWarning> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.FilteringMode>) mapIterator1);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Iterator<SQLTimeoutException>[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IteratorUtils.singletonIterator(",(keif>E'S&`CJ=I");
      SQLDataException sQLDataException0 = new SQLDataException();
      IteratorUtils.getIterator(",(keif>E'S&`CJ=I");
      IteratorUtils.emptyMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("C[1?^`>r:\r<");
      MapIterator<Transformer<Predicate<Object>, BatchUpdateException>, Stack<SQLException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Transformer<Predicate<Object>, BatchUpdateException>, Stack<SQLException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<Transformer<Predicate<Object>, BatchUpdateException>, Stack<SQLException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Transformer<Predicate<Object>, BatchUpdateException>, Stack<SQLException>>(mapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Transformer<Predicate<Object>, BatchUpdateException>>) abstractMapIteratorDecorator0, (Transformer<? super Transformer<Predicate<Object>, BatchUpdateException>, String>) transformer0, "Gs?{^JQ0PR@tjyF|", "Enumeration must not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyOrderedIterator();
      OrderedIterator<LinkedHashSet<SQLSyntaxErrorException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends LinkedHashSet<SQLSyntaxErrorException>>) orderedIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      int int0 = 373;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((StringTokenizer[]) null, 373, 434);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "deO~]";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("The parameter types must match the arguments");
      iIOMetadataNode0.getNodeValue();
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) objectArrayListIterator0);
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) iterator0, (Iterator<? extends Properties>) objectArrayListIterator0, (Iterator<? extends Properties>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.singletonIterator("fkXo");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "fkXo";
      stringArray0[1] = "fkXo";
      stringArray0[3] = "fkXo";
      stringArray0[4] = "fkXo";
      stringArray0[5] = "fkXo";
      stringArray0[6] = stringArray0[2];
      stringArray0[7] = "fkXo";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 2, 2);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableListIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "u>0e/WsDA b$>u:");
      priorityQueue0.add(sQLSyntaxErrorException0);
      priorityQueue0.spliterator();
      priorityQueue0.remove();
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) priorityQueue0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(stringArray0[2]);
      Object object0 = new Object();
      EmptyMapIterator.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      String string0 = "r[";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(".a&?g!}L~=pp", (String) null, 13);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("r[", sQLTimeoutException0);
      String string1 = null;
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null, 13, sQLIntegrityConstraintViolationException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      java.util.function.Predicate<SQLException> predicate0 = java.util.function.Predicate.isEqual((Object) null);
      predicate0.negate();
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayList0.removeIf(predicate0);
      Iterator<Properties> iterator0 = null;
      OrderedMapIterator<SQLDataException, Stack<BatchUpdateException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, Stack<BatchUpdateException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, Stack<BatchUpdateException>>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLDataException, Stack<BatchUpdateException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, Stack<BatchUpdateException>>(abstractOrderedMapIteratorDecorator0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) abstractMapIteratorDecorator0);
      ListIteratorWrapper<SQLNonTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientException>(iterator1);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLWarning0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Predicate<ArrayDeque>>) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(").");
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) listIterator0, (Iterator<? extends Properties>) listIterator0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super Properties>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("/nAri3~i c+");
      IteratorUtils.getIterator(predicate0);
      SingletonIterator<StringTokenizer> singletonIterator0 = new SingletonIterator<StringTokenizer>((StringTokenizer) null, true);
      IteratorUtils.toList((Iterator<? extends StringTokenizer>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      ConstantTransformer.constantTransformer("deO~]");
      EmptyMapIterator.emptyMapIterator();
      Object object0 = new Object();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 6);
      ResettableIterator<Integer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<Integer>) resettableIterator0;
      Iterator<Integer>[] iteratorArray1 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) iteratorArray1);
      iteratorArray0[1] = (Iterator<Integer>) zippingIterator0;
      ZippingIterator<Integer> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) resettableIterator0, (Iterator<? extends Integer>) iteratorArray0[1]);
      iteratorArray0[2] = (Iterator<Integer>) zippingIterator1;
      Integer[] integerArray0 = new Integer[6];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(586);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0, 0);
      iteratorArray0[3] = (Iterator<Integer>) resettableListIterator0;
      ArrayIterator<Integer> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<Integer>("Predicate must not be null", int0, 123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredListIterator((ListIterator<?>) listIterator0, (Predicate<? super Object>) predicate0);
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator1 = IteratorUtils.singletonListIterator(properties0);
      IteratorUtils.matchesAny((Iterator<Properties>) listIterator1, (Predicate<? super Properties>) predicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Cx@*f+23DTZN)]X", "suffix may not be null");
      EqualPredicate<SQLIntegrityConstraintViolationException> equalPredicate0 = new EqualPredicate<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Integer integer0 = new Integer((-708));
      FalsePredicate.falsePredicate();
      EmptyMapIterator.emptyMapIterator();
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLIntegrityConstraintViolationException0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Cx@*f+23DTZN)]X");
      Class<SQLWarning>[] classArray0 = (Class<SQLWarning>[]) Array.newInstance(Class.class, 4);
      Class<SQLWarning> class0 = SQLWarning.class;
      classArray0[0] = class0;
      Class<SQLWarning> class1 = SQLWarning.class;
      classArray0[1] = class1;
      Class<SQLWarning> class2 = SQLWarning.class;
      classArray0[2] = class2;
      Class<SQLWarning> class3 = SQLWarning.class;
      classArray0[3] = class3;
      Transformer<Object, String> transformer1 = InvokerTransformer.invokerTransformer("^P.", (Class<?>[]) classArray0, (Object[]) classArray0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) singletonListIterator0, (Transformer<? super SQLException, String>) ifTransformer0, "suffix may not be null", "R", "A0cEBKBozQ2K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '^P.' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) uniquePredicate0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
      IteratorUtils.loopingListIterator(list0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode0.getNodeValue();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("/nAri3~i c+");
      IteratorUtils.getIterator((Object) null);
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(arrayList0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) reverseListIterator0, 503);
      IteratorUtils.loopingListIterator(list0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLDataException sQLDataException0 = new SQLDataException("/nAri3~i c+", sQLFeatureNotSupportedException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("/nAri3~i c+");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("(aD9*11L2(R");
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException(sQLDataException3);
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("i", "(aD9*11L2(R", 4920, sQLFeatureNotSupportedException0);
      sQLDataExceptionArray0[6] = sQLDataException6;
      IteratorUtils.arrayIterator(sQLDataExceptionArray0, 1);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Hashtable<Object, Boolean> hashtable0 = new Hashtable<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashtable0);
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("/nAri3~i c+");
      IteratorUtils.getIterator(iIOMetadataNode3);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.emptyOrderedIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableIterator0);
      int int0 = 4920;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0, 4920, 4920);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) uniquePredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Comparator must not be null.");
      MapIterator<Object, Vector<Iterator<TreeSet>>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.getIterator(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.toString((Iterator<ServiceLoader<SQLNonTransientConnectionException>>) null, (Transformer<? super ServiceLoader<SQLNonTransientConnectionException>, String>) transformer0, "List must not be null", "N3f],9!c", "N3f],9!c");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[1] = predicate1;
      // Undeclared exception!
      try { 
        AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 2 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null);
      FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Predicate<ArrayDeque>>) mapIterator0, 29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 29
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<SQLSyntaxErrorException, ArrayList<Boolean>> hashMap0 = new HashMap<SQLSyntaxErrorException, ArrayList<Boolean>>();
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLWarning sQLWarning0 = new SQLWarning();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      sQLWarning0.getLocalizedMessage();
      StackTraceElement stackTraceElement0 = new StackTraceElement("eA}g|~Oc>", "lxJgT|I0I/trW9B", "eA}g|~Oc>", 1785);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "eA}g|~Oc>");
      sQLWarning0.addSuppressed(sQLRecoverableException0);
      stackTraceElementArray0[0] = stackTraceElement0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "eA}g|~Oc>");
      sQLWarning0.setStackTrace(stackTraceElementArray0);
      IteratorUtils.getIterator(sQLWarning0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IteratorUtils.singletonIterator(",(keif>E'S&`CJ=I");
      HashMap<SQLSyntaxErrorException, ArrayList<Boolean>> hashMap0 = new HashMap<SQLSyntaxErrorException, ArrayList<Boolean>>();
      EntrySetMapIterator<SQLSyntaxErrorException, ArrayList<Boolean>> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, ArrayList<Boolean>>(hashMap0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, ArrayList<Boolean>>) entrySetMapIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = null;
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("/nAri3~i c+");
      FalsePredicate.falsePredicate();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) listIterator0, (Iterator<? extends Properties>) listIterator0);
      ArrayIterator<Properties> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<Properties>(predicate0, 597);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) uniquePredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("ListIterator must not be null");
      FalsePredicate.falsePredicate();
      ListIterator<Properties> listIterator1 = EmptyListIterator.emptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) listIterator1, (Iterator<? extends Properties>) listIterator1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException("ListIterator must not be null", "ConstantTransformer", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLDataException0);
      ArrayIterator<Properties> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<Properties>(sQLInvalidAuthorizationSpecException0, 597);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      MapIterator<Locale.FilteringMode, SQLWarning> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.FilteringMode>) mapIterator1);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, class0);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) mapIterator1, (Iterator<? extends Locale.FilteringMode>) mapIterator1);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[]");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.isEmpty(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "83oQk,s", 1072, (int[]) null);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      ConstantFactory<BatchUpdateException> constantFactory0 = new ConstantFactory<BatchUpdateException>(batchUpdateException1);
      batchUpdateException1.getLocalizedMessage();
      FactoryTransformer.factoryTransformer((Factory<? extends BatchUpdateException>) constantFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) null, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TreeSet<SQLSyntaxErrorException> treeSet0 = new TreeSet<SQLSyntaxErrorException>();
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(treeSet0);
      IteratorUtils.size(loopingIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (long) 0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) boundedIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("4F1?J;rCI>", "4F1?J;rCI>", sQLNonTransientConnectionException0);
      IteratorUtils.contains(iterator0, (Object) sQLRecoverableException0);
      SQLException sQLException0 = new SQLException("z9V26k", (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning("rsb^pEw kS", (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) null, 4957);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TreeSet<SQLSyntaxErrorException> treeSet0 = new TreeSet<SQLSyntaxErrorException>();
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(treeSet0);
      IteratorUtils.size(loopingIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (long) 0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) boundedIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("4F1?J;rCI>", "4F1?J;rCI>", sQLNonTransientConnectionException0);
      IteratorUtils.contains(iterator0, (Object) sQLRecoverableException0);
      TreeSet<SQLSyntaxErrorException> treeSet1 = new TreeSet<SQLSyntaxErrorException>();
      LoopingIterator<SQLSyntaxErrorException> loopingIterator1 = new LoopingIterator<SQLSyntaxErrorException>(treeSet0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) loopingIterator0;
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) loopingIterator1;
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      Integer integer0 = new Integer(4920);
      Transformer<Integer, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Integer> iterator1 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) iterator1, (Iterator<? extends Integer>) iterator1, (Iterator<? extends Integer>) iterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) zippingIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0);
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      MapIterator<Locale.FilteringMode, SQLWarning> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.FilteringMode>) mapIterator1);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Transformer<Object, Boolean>[]) null, 2744);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      ListIterator<Object> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<?>) listIterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.isEmpty(listIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("1", sQLIntegrityConstraintViolationException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("!*BWOTna", "", sQLIntegrityConstraintViolationException1);
      java.util.function.Predicate<SQLException> predicate0 = java.util.function.Predicate.isEqual((Object) null);
      predicate0.negate();
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IteratorUtils.getIterator("-;{_7L^lL{;9JK");
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLNonTransientConnectionException>) iterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IteratorUtils.emptyIterator();
      OrderedMapIterator<String, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) orderedMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedMapIterator<LinkedList<HashSet>, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      IteratorUtils.singletonIterator((LinkedList<ServiceLoader>) linkedList0);
      IteratorUtils.objectGraphIterator((Object) orderedMapIterator0, (Transformer<? super Object, ?>) null);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      OrderedMapIterator<SQLSyntaxErrorException, SQLTimeoutException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLSyntaxErrorException, SQLTransientException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends SQLTransientException>) orderedMapIterator1);
      Iterator<SQLException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) orderedMapIterator2, (Iterator<? extends SQLException>) orderedMapIterator2);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("n");
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLException, String>) transformer0, (String) null, "Iterator must not be null", "Iterator must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IteratorUtils.emptyIterator();
      OrderedMapIterator<String, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) orderedMapIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      int int0 = 0;
      int int1 = 13;
      ArrayListIterator<ComparatorPredicate.Criterion> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<ComparatorPredicate.Criterion>(iterator0, 0, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ServiceLoader<SQLTransactionRollbackException>[] serviceLoaderArray0 = (ServiceLoader<SQLTransactionRollbackException>[]) Array.newInstance(ServiceLoader.class, 3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      ServiceLoader<SQLTransactionRollbackException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[0] = serviceLoader0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader<SQLTransactionRollbackException> serviceLoader1 = ServiceLoader.load(class0, classLoader1);
      serviceLoaderArray0[1] = serviceLoader1;
      ServiceLoader<SQLTransactionRollbackException> serviceLoader2 = ServiceLoader.load(class0);
      serviceLoaderArray0[2] = serviceLoader2;
      classLoader0.getParent();
      int int0 = 1;
      ResettableIterator<ServiceLoader<SQLTransactionRollbackException>> resettableIterator0 = IteratorUtils.arrayIterator(serviceLoaderArray0, 1, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ServiceLoader<SQLTransactionRollbackException>>) resettableIterator0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "83oQk,s", 1072, (int[]) null);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      ConstantFactory<BatchUpdateException> constantFactory0 = new ConstantFactory<BatchUpdateException>(batchUpdateException1);
      batchUpdateException1.getLocalizedMessage();
      Transformer<Predicate<Object>, BatchUpdateException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends BatchUpdateException>) constantFactory0);
      ListIterator<Transformer<Predicate<Object>, BatchUpdateException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("");
      IteratorUtils.toString((Iterator<Transformer<Predicate<Object>, BatchUpdateException>>) listIterator0, (Transformer<? super Transformer<Predicate<Object>, BatchUpdateException>, String>) transformer1, "[]", "G{^JQ0PR@tjyF|", "[");
      Integer integer0 = new Integer(1072);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      Iterator<Integer> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Integer>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Integer>) iterator0, (-1983L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 14, (int[]) null);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      ConstantFactory<BatchUpdateException> constantFactory0 = new ConstantFactory<BatchUpdateException>(batchUpdateException0);
      Transformer<Predicate<Object>, BatchUpdateException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends BatchUpdateException>) constantFactory0);
      ListIterator<Transformer<Predicate<Object>, BatchUpdateException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("");
      IteratorUtils.toString((Iterator<Transformer<Predicate<Object>, BatchUpdateException>>) listIterator0, (Transformer<? super Transformer<Predicate<Object>, BatchUpdateException>, String>) transformer1, "org.apache.commons.collections4.FunctorException", "=?'S]U|XEOv:t", "");
      IteratorUtils.asIterable((Iterator<? extends SQLException>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("h8.\"", "h8.\"");
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) identityPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      Enumeration<SQLSyntaxErrorException> enumeration0 = stack0.elements();
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      IteratorUtils.loopingIterator((Collection<? extends Properties>) linkedList0);
      IteratorUtils.singletonIterator((LinkedList<ServiceLoader>) linkedList0);
      Predicate<SQLException> predicate0 = null;
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) uniquePredicate0);
      IteratorUtils.asIterable((Iterator<? extends SQLException>) iterator0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[9];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", "1s\fuTJ.h", 1546, sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("}w!l?y-!c0\";", "", 1546, (Throwable) null);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("", "1s\fuTJ.h", 1546, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException("1s\fuTJ.h", "", sQLInvalidAuthorizationSpecException6);
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException7;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException8 = new SQLInvalidAuthorizationSpecException((String) null, "", sQLInvalidAuthorizationSpecException7);
      sQLInvalidAuthorizationSpecExceptionArray0[8] = sQLInvalidAuthorizationSpecException8;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("1", sQLIntegrityConstraintViolationException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("!*BWOTna", "", sQLIntegrityConstraintViolationException1);
      java.util.function.Predicate<SQLException> predicate0 = java.util.function.Predicate.isEqual((Object) null);
      java.util.function.Predicate<SQLException> predicate1 = predicate0.negate();
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      arrayList0.removeIf(predicate1);
      Iterator<Properties> iterator0 = null;
      ListIteratorWrapper<SQLNonTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLNonTransientException>(mapIterator0);
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Predicate<ArrayDeque>>) singletonIterator0, 4920);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 4919
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      String string0 = "Collection must not be null";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("Collection must not be null");
      IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      SQLException sQLException0 = new SQLException(sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 1, sQLDataException0);
      priorityQueue0.add(dataTruncation0);
      priorityQueue0.spliterator();
      priorityQueue0.remove();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("/nAri3~i c+");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("/nAri3~i c+");
      IteratorUtils.getIterator(predicate0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TreeSet<Object>[] treeSetArray0 = (TreeSet<Object>[]) Array.newInstance(TreeSet.class, 7);
      ResettableIterator<TreeSet<Object>> resettableIterator0 = IteratorUtils.arrayIterator(treeSetArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<TreeSet<Object>>) resettableIterator0, (Predicate<? super TreeSet<Object>>) predicate0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      predicateArray0[0] = predicate0;
      AllPredicate.allPredicate((Predicate<? super SQLException>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, 539, 279);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TreeSet<Object>[] treeSetArray0 = (TreeSet<Object>[]) Array.newInstance(TreeSet.class, 0);
      ResettableIterator<TreeSet<Object>> resettableIterator0 = IteratorUtils.arrayIterator(treeSetArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) resettableIterator0, comparator0);
      IteratorUtils.matchesAll((Iterator<TreeSet<Object>>) resettableIterator0, (Predicate<? super TreeSet<Object>>) predicate0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredListIterator((ListIterator<?>) listIterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.getIterator(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<ArrayDeque<SQLIntegrityConstraintViolationException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) uniquePredicate0);
      List<SQLIntegrityConstraintViolationException> list0 = new Vector<SQLIntegrityConstraintViolationException>();
      MapIterator<Locale.FilteringMode, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.FilteringMode>) mapIterator0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, (-948), sQLSyntaxErrorException0);
      arrayList0.add(sQLIntegrityConstraintViolationException0);
      IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[]", "", 100, sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("[]", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: []", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(100, sQLSyntaxErrorException0.getErrorCode());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)sQLIntegrityConstraintViolationException0.initCause(sQLSyntaxErrorException0);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("[]", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: []", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(100, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException1.getMessage());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException1.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("rmXcxzvvK#b[0H<j|", sQLSyntaxErrorException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("[]", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: []", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(100, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("rmXcxzvvK#b[0H<j|", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: rmXcxzvvK#b[0H<j|", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTimeoutException0);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertNotNull(iterator0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("[]", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: []", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals(100, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("rmXcxzvvK#b[0H<j|", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: rmXcxzvvK#b[0H<j|", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      // Undeclared exception!
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "3t/n:+SBr>a4V{zC=5l", 0, (int[]) null);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("3t/n:+SBr>a4V{zC=5l", batchUpdateException0.getSQLState());
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      assertNotNull(batchUpdateException1);
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertNull(batchUpdateException1.getMessage());
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      ConstantFactory<BatchUpdateException> constantFactory0 = new ConstantFactory<BatchUpdateException>(batchUpdateException1);
      assertNotNull(constantFactory0);
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertNull(batchUpdateException1.getMessage());
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      Transformer<Predicate<Object>, BatchUpdateException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends BatchUpdateException>) constantFactory0);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      assertNotNull(transformer0);
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertNull(batchUpdateException1.getMessage());
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      ListIterator<Transformer<Predicate<Object>, BatchUpdateException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      assertNotNull(listIterator0);
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertNull(batchUpdateException1.getMessage());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("org.apache.commons.collections4.list.CursorableLinkedList");
      assertNotNull(transformer1);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      assertNotNull(objectArray0);
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertNull(batchUpdateException1.getMessage());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(1, objectArray0.length);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      assertNotNull(resettableListIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("!ke#=?(h1d4s", "ListIterator must not be null");
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("ListIterator must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals("!ke#=?(h1d4s", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: !ke#=?(h1d4s", sQLTransactionRollbackException0.toString());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("+h7m{Dau", "+h7m{Dau", sQLTransactionRollbackException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("ListIterator must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals("!ke#=?(h1d4s", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: !ke#=?(h1d4s", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("+h7m{Dau", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("+h7m{Dau", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: +h7m{Dau", sQLIntegrityConstraintViolationException0.toString());
      
      SQLWarning sQLWarning0 = new SQLWarning("ListIterator must not be null", "!ke#=?(h1d4s", sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("ListIterator must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals("!ke#=?(h1d4s", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: !ke#=?(h1d4s", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("+h7m{Dau", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("+h7m{Dau", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: +h7m{Dau", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLWarning: ListIterator must not be null", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("ListIterator must not be null", sQLWarning0.getMessage());
      assertEquals("!ke#=?(h1d4s", sQLWarning0.getSQLState());
      
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      assertNotNull(singletonListIterator0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("ListIterator must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals("!ke#=?(h1d4s", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: !ke#=?(h1d4s", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("+h7m{Dau", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("+h7m{Dau", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: +h7m{Dau", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLWarning: ListIterator must not be null", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("ListIterator must not be null", sQLWarning0.getMessage());
      assertEquals("!ke#=?(h1d4s", sQLWarning0.getSQLState());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLWarning>) singletonListIterator0, (Predicate<? super SQLWarning>) predicate1);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("ListIterator must not be null", sQLTransactionRollbackException0.getSQLState());
      assertEquals("!ke#=?(h1d4s", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: !ke#=?(h1d4s", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("+h7m{Dau", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("+h7m{Dau", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: +h7m{Dau", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLWarning: ListIterator must not be null", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("ListIterator must not be null", sQLWarning0.getMessage());
      assertEquals("!ke#=?(h1d4s", sQLWarning0.getSQLState());
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(boolean0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ListIterator must not be null");
      assertNotNull(iIOMetadataNode0);
      
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS((String) null, "BYTc]2");
      assertNotNull(nodeList0);
      
      NodeList nodeList1 = iIOMetadataNode0.getElementsByTagName("H");
      assertNotSame(nodeList1, nodeList0);
      assertNotNull(nodeList1);
      assertFalse(nodeList1.equals((Object)nodeList0));
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList1);
      assertNotSame(nodeList1, nodeList0);
      assertNotNull(nodeListIterator0);
      assertFalse(nodeList1.equals((Object)nodeList0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TreeSet<Object>[] treeSetArray0 = (TreeSet<Object>[]) Array.newInstance(TreeSet.class, 0);
      ResettableIterator<TreeSet<Object>> resettableIterator0 = IteratorUtils.arrayIterator(treeSetArray0);
      assertNotNull(resettableIterator0);
      assertEquals(0, treeSetArray0.length);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      TreeSet<SQLSyntaxErrorException> treeSet0 = new TreeSet<SQLSyntaxErrorException>();
      assertNotNull(treeSet0);
      
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(treeSet0);
      assertNotNull(loopingIterator0);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) loopingIterator0;
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) loopingIterator0;
      iteratorArray0[2] = (Iterator<SQLSyntaxErrorException>) loopingIterator0;
      iteratorArray0[3] = (Iterator<SQLSyntaxErrorException>) loopingIterator0;
      iteratorArray0[4] = (Iterator<SQLSyntaxErrorException>) loopingIterator0;
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator1, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      assertNotNull(iterator0);
      assertEquals(5, iteratorArray0.length);
      
      Object[] objectArray0 = IteratorUtils.toArray(iteratorArray0[3]);
      assertNotNull(objectArray0);
      assertEquals(5, iteratorArray0.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 1072, (int[]) null);
      assertNotNull(batchUpdateException0);
      assertEquals(1072, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      assertNotNull(batchUpdateException1);
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      ConstantFactory<BatchUpdateException> constantFactory0 = new ConstantFactory<BatchUpdateException>(batchUpdateException0);
      assertNotNull(constantFactory0);
      assertEquals(1072, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      
      Transformer<Predicate<Object>, BatchUpdateException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends BatchUpdateException>) constantFactory0);
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNotNull(transformer0);
      assertEquals(1072, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      
      ListIterator<Transformer<Predicate<Object>, BatchUpdateException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNotNull(listIterator0);
      assertEquals(1072, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer((String) null);
      assertNotNull(transformer1);
      
      String string1 = IteratorUtils.toString((Iterator<Transformer<Predicate<Object>, BatchUpdateException>>) listIterator0, (Transformer<? super Transformer<Predicate<Object>, BatchUpdateException>, String>) transformer1, "org.apache.commons.collections4.FunctorException", "G{^JQ0PR@tjyF|", "Enumeration must not be null");
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNotNull(string1);
      assertEquals(1072, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals("G{^JQ0PR@tjyF|nullEnumeration must not be null", string1);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(string1.equals((Object)string0));
      
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
      assertEquals(0, iteratorArray0.length);
      
      LinkedList<TreeSet<SQLTransientException>> linkedList0 = new LinkedList<TreeSet<SQLTransientException>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      assertNotNull(treeSet0);
      
      boolean boolean0 = linkedList0.add(treeSet0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(treeSet0));
      
      Stream<TreeSet<SQLTransientException>> stream0 = linkedList0.stream();
      assertNotNull(stream0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(treeSet0));
      
      LinkedList<TreeSet<SQLTransientException>> linkedList1 = new LinkedList<TreeSet<SQLTransientException>>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(treeSet0));
      
      ResettableListIterator<TreeSet<SQLTransientException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<TreeSet<SQLTransientException>>) linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(resettableListIterator0);
      assertEquals(0, linkedList1.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(treeSet0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator(",(keif>E'S&`CJ=I");
      assertNotNull(resettableIterator0);
      
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      assertNotNull(enumeration0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(",(keif>E'S&`CJ=I"));
      
      boolean boolean0 = priorityQueue0.add(resettableIterator0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertFalse(priorityQueue0.contains(",(keif>E'S&`CJ=I"));
      
      Spliterator<Object> spliterator0 = priorityQueue0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(",(keif>E'S&`CJ=I"));
      
      SingletonIterator singletonIterator0 = (SingletonIterator)priorityQueue0.remove();
      assertNotNull(singletonIterator0);
      assertEquals(0, priorityQueue0.size());
      assertTrue(singletonIterator0.hasNext());
      assertFalse(priorityQueue0.contains(",(keif>E'S&`CJ=I"));
      
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) priorityQueue0);
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(",(keif>E'S&`CJ=I"));
      
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0);
      assertNotNull(listIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",(keif>E'S&`CJ=I");
      assertNotNull(iIOMetadataNode0);
      
      String string0 = iIOMetadataNode0.getNodeValue();
      assertNull(string0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) linkedList0);
      assertNotNull(resettableListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      BoundedIterator<Locale.FilteringMode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0, 0L, 1042L);
      assertNotNull(boundedIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Iterable<Locale.FilteringMode> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.FilteringMode>) boundedIterator0);
      assertNotNull(iterable0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ResettableIterator<Iterator<SQLTimeoutException>> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<Iterator<SQLTimeoutException>> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Iterator<SQLTimeoutException>>) resettableIterator0);
      assertNotNull(iterator0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode0);
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = Locale.FilteringMode.values();
      assertNotNull(locale_FilteringModeArray0);
      assertEquals(5, locale_FilteringModeArray0.length);
      
      ArrayIterator<SQLRecoverableException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLRecoverableException>(locale_FilteringMode0, 278, 278);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator(",(keif>E'S&`CJ=I");
      assertNotNull(resettableIterator0);
      
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      assertNotNull(enumeration0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(",(keif>E'S&`CJ=I"));
      
      boolean boolean0 = priorityQueue0.add(resettableIterator0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertFalse(priorityQueue0.contains(",(keif>E'S&`CJ=I"));
      
      Spliterator<Object> spliterator0 = priorityQueue0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(",(keif>E'S&`CJ=I"));
      
      SingletonIterator singletonIterator0 = (SingletonIterator)priorityQueue0.remove();
      assertNotNull(singletonIterator0);
      assertEquals(0, priorityQueue0.size());
      assertTrue(singletonIterator0.hasNext());
      assertFalse(priorityQueue0.contains(",(keif>E'S&`CJ=I"));
      
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) priorityQueue0);
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(",(keif>E'S&`CJ=I"));
      
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0);
      assertNotNull(listIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",(keif>E'S&`CJ=I");
      assertNotNull(iIOMetadataNode0);
      
      String string0 = iIOMetadataNode0.getNodeValue();
      assertNull(string0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      LinkedList<TreeSet<SQLTransientException>> linkedList0 = new LinkedList<TreeSet<SQLTransientException>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stream<TreeSet<SQLTransientException>> stream0 = linkedList0.stream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      
      ResettableListIterator<TreeSet<SQLTransientException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<TreeSet<SQLTransientException>>) linkedList0);
      assertNotNull(resettableListIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertNotNull(objectArray0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      assertNotNull(uniquePredicate0);
      
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) uniquePredicate0);
      assertNotNull(iterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      assertNotNull(resettableListIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator");
      assertNotNull(predicate0);
      
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      assertNotNull(orPredicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Properties>) null, (Predicate<? super Properties>) orPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      assertNotNull(predicate0);
      
      ListIterator<Object> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<?>) listIterator0, (Predicate<? super Object>) predicate0);
      assertNotNull(listIterator1);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      ListIterator<Properties> listIterator2 = IteratorUtils.singletonListIterator(properties0);
      assertNotNull(listIterator2);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(listIterator2.hasNext());
      assertFalse(listIterator2.hasPrevious());
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Properties>) listIterator2, (Predicate<? super Properties>) predicate0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(listIterator2.hasPrevious());
      assertFalse(listIterator2.hasNext());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TreeSet<Object>[] treeSetArray0 = (TreeSet<Object>[]) Array.newInstance(TreeSet.class, 0);
      ResettableIterator<TreeSet<Object>> resettableIterator0 = IteratorUtils.arrayIterator(treeSetArray0);
      assertNotNull(resettableIterator0);
      assertEquals(0, treeSetArray0.length);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) resettableIterator0, comparator0);
      assertNotNull(predicate0);
      assertEquals(0, treeSetArray0.length);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<TreeSet<Object>>) resettableIterator0, (Predicate<? super TreeSet<Object>>) predicate0);
      assertEquals(0, treeSetArray0.length);
      assertTrue(boolean0);
      
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      assertNotNull(resettableListIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      boolean boolean1 = IteratorUtils.matchesAny((Iterator<Properties>) null, (Predicate<? super Properties>) predicate0);
      assertEquals(0, treeSetArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, ArrayList<Boolean>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLSyntaxErrorException, ArrayList<Boolean>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertNotNull(mapIterator1);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      MapIterator<SQLSyntaxErrorException, ArrayList<Boolean>> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      assertSame(mapIterator1, mapIterator2);
      assertSame(mapIterator2, mapIterator1);
      assertNotNull(mapIterator2);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertFalse(mapIterator2.equals((Object)mapIterator0));
      
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 2);
      TreeSet<SQLSyntaxErrorException> treeSet0 = new TreeSet<SQLSyntaxErrorException>();
      assertNotNull(treeSet0);
      
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(treeSet0);
      assertNotNull(loopingIterator0);
      
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) loopingIterator0;
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) mapIterator1;
      int int0 = IteratorUtils.size(mapIterator2);
      assertSame(mapIterator1, mapIterator2);
      assertSame(mapIterator2, mapIterator1);
      assertEquals(0, int0);
      assertFalse(mapIterator0.equals((Object)mapIterator2));
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertFalse(mapIterator2.equals((Object)mapIterator0));
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (long) 0);
      assertNotNull(boundedIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) boundedIterator0);
      assertNotNull(iterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      boolean boolean0 = IteratorUtils.contains(iterator0, (Object) resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(boolean0);
      
      SQLException sQLException0 = new SQLException("", (Throwable) null);
      assertNotNull(sQLException0);
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      
      SQLWarning sQLWarning0 = new SQLWarning((String) null, sQLException0);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "org.apache.commons.collections4.FunctorException", 4920, sQLWarning0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("org.apache.commons.collections4.FunctorException", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(4920, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("z9V26k", sQLFeatureNotSupportedException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: z9V26k", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("z9V26k", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("org.apache.commons.collections4.FunctorException", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(4920, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null, sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: z9V26k", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("z9V26k", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLFeatureNotSupportedException1.getMessage());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException1.toString());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("org.apache.commons.collections4.FunctorException", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(4920, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException1, 804);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OrderedIterator<Boolean> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      OrderedIterator<ArrayList<SQLTimeoutException>> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator1);
      
      int int0 = 2712;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ArrayList<SQLTimeoutException>>) null, 2712);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "3t/n:+SBr>a4V{zC=5l", 0, (int[]) null);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("3t/n:+SBr>a4V{zC=5l", batchUpdateException0.getSQLState());
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      assertNotNull(batchUpdateException1);
      assertNull(batchUpdateException1.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      ConstantFactory<BatchUpdateException> constantFactory0 = new ConstantFactory<BatchUpdateException>(batchUpdateException1);
      assertNotNull(constantFactory0);
      assertNull(batchUpdateException1.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      Transformer<Predicate<Object>, BatchUpdateException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends BatchUpdateException>) constantFactory0);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      assertNotNull(transformer0);
      assertNull(batchUpdateException1.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      ListIterator<Transformer<Predicate<Object>, BatchUpdateException>> listIterator0 = IteratorUtils.singletonListIterator(transformer0);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      assertNotNull(listIterator0);
      assertNull(batchUpdateException1.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("org.apache.commons.collections4.list.CursorableLinkedList");
      assertNotNull(transformer1);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Transformer<Predicate<Object>, BatchUpdateException>>) listIterator0, (Transformer<? super Transformer<Predicate<Object>, BatchUpdateException>, String>) transformer1, (String) null, "\\tKt'-Z<ZQA&;X$", "org.apache.commons.collections4.FunctorException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MapIterator<Locale.FilteringMode, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Iterator<Locale.FilteringMode> iterator0 = EmptyIterator.emptyIterator();
      assertNotNull(iterator0);
      
      BoundedIterator<Locale.FilteringMode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) iterator0, (long) 2102, (long) 2102);
      assertNotNull(boundedIterator0);
      
      MapIterator<IIOMetadataNode, PriorityQueue<SQLDataException>> mapIterator1 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator1);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 1017);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(1017, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      assertEquals(1017, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, false);
      assertNotNull(singletonIterator0);
      assertEquals(1017, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertTrue(singletonIterator0.hasNext());
      
      EqualPredicate<SQLInvalidAuthorizationSpecException> equalPredicate0 = new EqualPredicate<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      assertNotNull(equalPredicate0);
      assertEquals(1017, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) equalPredicate0);
      assertNotNull(iterator1);
      assertEquals(1017, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertTrue(singletonIterator0.hasNext());
      
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      assertNotNull(uniquePredicate0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("UsJ:N}$>5n", "-U<3", 1017);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("UsJ:N}$>5n", sQLNonTransientConnectionException0.getMessage());
      assertEquals("-U<3", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(1017, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: UsJ:N}$>5n", sQLNonTransientConnectionException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertEquals("", sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 1017, 2102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      assertNotNull(predicate0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(predicate0));
      
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 9);
      Class<Integer> class1 = Integer.class;
      classArray0[0] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[1] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[2] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[3] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      Class<Integer> class8 = Integer.class;
      classArray0[8] = class8;
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator", (Class<?>[]) classArray0, (Object[]) classArray0);
      assertNotNull(transformer0);
      assertEquals(9, classArray0.length);
      
      TransformerPredicate<Properties> transformerPredicate0 = new TransformerPredicate<Properties>(transformer0);
      assertNotNull(transformerPredicate0);
      assertEquals(9, classArray0.length);
      
      Properties properties0 = IteratorUtils.find((Iterator<Properties>) null, (Predicate<? super Properties>) predicate0);
      assertNull(properties0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(predicate0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) class0, 1964, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Predicate<SQLException> predicate0 = new UniquePredicate<SQLException>();
      assertNotNull(predicate0);
      
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertNotNull(iterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, 13);
      assertNotNull(list0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      MapIterator<Locale.FilteringMode, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) mapIterator0, 1228L, (-1441L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      assertNotNull(listIterator0);
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      assertNotNull(transformer0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[3] = (Object) listIterator0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("UsJ:N}$>5n", "[", 2156);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("[", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(2156, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("UsJ:N}$>5n", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: UsJ:N}$>5n", sQLNonTransientConnectionException0.toString());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(objectArray0[1], (-2689), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("x:(@");
      assertNotNull(sQLDataException0);
      assertEquals("x:(@", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: x:(@", sQLDataException0.toString());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      iIOMetadataNodeArray0[4] = iIOMetadataNode1;
      iIOMetadataNodeArray0[5] = iIOMetadataNode0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      assertNotNull(resettableListIterator0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(6, iIOMetadataNodeArray0.length);
      
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      assertEquals(6, iIOMetadataNodeArray0.length);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator(",(keif>E'S&`CJ=I");
      assertNotNull(resettableIterator0);
      
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      assertNotNull(enumeration0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(",(keif>E'S&`CJ=I"));
      
      boolean boolean0 = priorityQueue0.add(resettableIterator0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertFalse(priorityQueue0.contains(",(keif>E'S&`CJ=I"));
      
      Spliterator<Object> spliterator0 = priorityQueue0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(",(keif>E'S&`CJ=I"));
      
      SingletonIterator singletonIterator0 = (SingletonIterator)priorityQueue0.remove();
      assertNotNull(singletonIterator0);
      assertEquals(0, priorityQueue0.size());
      assertTrue(singletonIterator0.hasNext());
      assertFalse(priorityQueue0.contains(",(keif>E'S&`CJ=I"));
      
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) priorityQueue0);
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(",(keif>E'S&`CJ=I"));
      
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertNotNull(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      
      ListIterator<EnumSet<Locale.FilteringMode>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0);
      assertNotNull(listIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",(keif>E'S&`CJ=I");
      assertNotNull(iIOMetadataNode0);
      
      String string0 = iIOMetadataNode0.getNodeValue();
      assertNull(string0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      NodeList nodeList0 = iIOMetadataNode1.getElementsByTagNameNS("", "Unsupported object type: null");
      assertNotSame(iIOMetadataNode1, iIOMetadataNode0);
      assertNotNull(nodeList0);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotSame(iIOMetadataNode0, iIOMetadataNode1);
      assertNotNull(nodeListIterator0);
      assertFalse(iIOMetadataNode0.equals((Object)iIOMetadataNode1));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertNotNull(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      assertNotNull(predicate0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(predicate0));
      
      predicateArray0[0] = predicate0;
      Predicate<SQLException> predicate1 = AllPredicate.allPredicate((Predicate<? super SQLException>[]) predicateArray0);
      assertNotNull(predicate1);
      assertEquals(1, predicateArray0.length);
      
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientException>) resettableListIterator0, (Predicate<? super SQLNonTransientException>) predicate1);
      assertNotNull(listIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals(1, predicateArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, ServiceLoader<SQLRecoverableException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[3];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.getMessage());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      sQLTransactionRollbackException1.printStackTrace((PrintWriter) mockPrintWriter0);
      assertNotSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertNotSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.getMessage());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      String string0 = ";W\\Jn";
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", ";WJn", 0);
      assertNotNull(sQLTransactionRollbackException2);
      assertEquals(0, sQLTransactionRollbackException2.getErrorCode());
      assertEquals(";WJn", sQLTransactionRollbackException2.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException2.toString());
      assertEquals("", sQLTransactionRollbackException2.getMessage());
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLInvalidAuthorizationSpecException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(object0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, ComparatorPredicate.Criterion> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      String string1 = "";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Iterator<Boolean> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator");
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException0.getMessage());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null, sQLTransientConnectionException0);
      assertNotNull(sQLTransientConnectionException1);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException1);
      assertNotNull(sQLTransientConnectionException2);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException2.toString());
      assertNull(sQLTransientConnectionException2.getSQLState());
      assertEquals("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException2.getMessage());
      assertEquals(0, sQLTransientConnectionException2.getErrorCode());
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException1));
      
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException(sQLTransientConnectionException1);
      assertNotNull(sQLTransientConnectionException3);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException3.getMessage());
      assertEquals(0, sQLTransientConnectionException3.getErrorCode());
      assertNull(sQLTransientConnectionException3.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLTransientConnectionException", sQLTransientConnectionException3.toString());
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException3.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException3.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException3.equals((Object)sQLTransientConnectionException0));
      
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException((String) null, "suffix may not be null", 0, sQLTransientConnectionException2);
      assertNotNull(sQLTransientConnectionException4);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException2.toString());
      assertNull(sQLTransientConnectionException2.getSQLState());
      assertEquals("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException2.getMessage());
      assertEquals(0, sQLTransientConnectionException2.getErrorCode());
      assertEquals("suffix may not be null", sQLTransientConnectionException4.getSQLState());
      assertNull(sQLTransientConnectionException4.getMessage());
      assertEquals(0, sQLTransientConnectionException4.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException4.toString());
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException2));
      
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("ZA(U#^Y", "", sQLTransientConnectionException1);
      assertNotNull(sQLTransientConnectionException5);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals(0, sQLTransientConnectionException5.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ZA(U#^Y", sQLTransientConnectionException5.toString());
      assertEquals("", sQLTransientConnectionException5.getSQLState());
      assertEquals("ZA(U#^Y", sQLTransientConnectionException5.getMessage());
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException4));
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException4));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException5.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException5.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException5.equals((Object)sQLTransientConnectionException4));
      assertFalse(sQLTransientConnectionException5.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException5.equals((Object)sQLTransientConnectionException0));
      
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException("gy", "Li^\u0004");
      assertNotNull(sQLTransientConnectionException6);
      assertEquals("Li^\u0004", sQLTransientConnectionException6.getSQLState());
      assertEquals("gy", sQLTransientConnectionException6.getMessage());
      assertEquals(0, sQLTransientConnectionException6.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: gy", sQLTransientConnectionException6.toString());
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException5));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException4));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException2));
      
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException((String) null, "", 128, sQLTransientConnectionException1);
      assertNotNull(sQLTransientConnectionException7);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("", sQLTransientConnectionException7.getSQLState());
      assertNull(sQLTransientConnectionException7.getMessage());
      assertEquals(128, sQLTransientConnectionException7.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException7.toString());
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException5));
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException6));
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException4));
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException4));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException6));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException5));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException4));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException6));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException5));
      assertFalse(sQLTransientConnectionException7.equals((Object)sQLTransientConnectionException0));
      
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException7;
      SQLTransientConnectionException sQLTransientConnectionException8 = new SQLTransientConnectionException("drfkELwr$n(\"RRM3Y", "", 0, sQLTransientConnectionException6);
      assertNotNull(sQLTransientConnectionException8);
      assertEquals(0, sQLTransientConnectionException8.getErrorCode());
      assertEquals("drfkELwr$n(\"RRM3Y", sQLTransientConnectionException8.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: drfkELwr$n(\"RRM3Y", sQLTransientConnectionException8.toString());
      assertEquals("", sQLTransientConnectionException8.getSQLState());
      assertEquals("Li^\u0004", sQLTransientConnectionException6.getSQLState());
      assertEquals("gy", sQLTransientConnectionException6.getMessage());
      assertEquals(0, sQLTransientConnectionException6.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: gy", sQLTransientConnectionException6.toString());
      assertFalse(sQLTransientConnectionException8.equals((Object)sQLTransientConnectionException6));
      assertFalse(sQLTransientConnectionException8.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException8.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException8.equals((Object)sQLTransientConnectionException5));
      assertFalse(sQLTransientConnectionException8.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException8.equals((Object)sQLTransientConnectionException4));
      assertFalse(sQLTransientConnectionException8.equals((Object)sQLTransientConnectionException7));
      assertFalse(sQLTransientConnectionException8.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException3));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException5));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException4));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException7));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException6.equals((Object)sQLTransientConnectionException2));
      
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException8;
      ObjectArrayIterator<SQLTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0, 0);
      assertNotNull(objectArrayIterator0);
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(8, objectArrayIterator0.getEndIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(8, sQLTransientConnectionExceptionArray0.length);
      
      SkippingIterator<SQLTransientConnectionException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTransientConnectionException>) objectArrayIterator0, (long) 128);
      assertNotNull(skippingIterator0);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(8, objectArrayIterator0.getEndIndex());
      assertEquals(8, sQLTransientConnectionExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, ArrayList<Boolean>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLSyntaxErrorException, ArrayList<Boolean>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertNotNull(mapIterator1);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      MapIterator<SQLSyntaxErrorException, ArrayList<Boolean>> mapIterator2 = IteratorUtils.unmodifiableMapIterator(mapIterator1);
      assertSame(mapIterator1, mapIterator2);
      assertSame(mapIterator2, mapIterator1);
      assertNotNull(mapIterator2);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      assertFalse(mapIterator2.equals((Object)mapIterator0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) orderedIterator0, (-1120L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, ArrayList<Boolean>> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLSyntaxErrorException, ArrayList<Boolean>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertNotNull(mapIterator1);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "FbH^3;{~qTz:|NKQ", 12, hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(12, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("FbH^3;{~qTz:|NKQ", sQLClientInfoException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLClientInfoException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(12, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("FbH^3;{~qTz:|NKQ", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (String) null, sQLFeatureNotSupportedException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(12, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("FbH^3;{~qTz:|NKQ", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      
      boolean boolean0 = arrayList0.add(sQLIntegrityConstraintViolationException0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(12, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: ", sQLClientInfoException0.toString());
      assertEquals("", sQLClientInfoException0.getMessage());
      assertEquals("FbH^3;{~qTz:|NKQ", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(sQLIntegrityConstraintViolationException0));
      
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      assertNotNull(resettableListIterator0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertTrue(arrayList0.contains(sQLIntegrityConstraintViolationException0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "g:8}O`<GDlO<>");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("LQ]=?dCNPBhzC", "$nTRJ'eG(FlgZxCtYD");
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("$nTRJ'eG(FlgZxCtYD", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException2;
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException0;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.get((Iterator<SQLNonTransientConnectionException>) resettableIterator0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ServiceLoader<Stack>>) orderedMapIterator0, (Predicate<? super ServiceLoader<Stack>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("+h7m{Dau", "+h7m{Dau");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("+h7m{Dau", "+h7m{Dau", sQLTransactionRollbackException0);
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.functors.InstantiateFactory", "/gbyV<&nn Zc$", sQLIntegrityConstraintViolationException0);
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAll((Iterator<SQLWarning>) singletonListIterator0, (Predicate<? super SQLWarning>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("/gbyV<&nn Zc$");
      iIOMetadataNode0.getElementsByTagNameNS((String) null, "BYTc]2");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode1.getElementsByTagName("M,iOm\"\")F!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TreeSet<Object>[] treeSetArray0 = (TreeSet<Object>[]) Array.newInstance(TreeSet.class, 0);
      ResettableIterator<TreeSet<Object>> resettableIterator0 = IteratorUtils.arrayIterator(treeSetArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) resettableIterator0, comparator0);
      IteratorUtils.matchesAll((Iterator<TreeSet<Object>>) resettableIterator0, (Predicate<? super TreeSet<Object>>) predicate0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) arrayList0);
      Iterator<Properties> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLSyntaxErrorException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      MockThrowable mockThrowable0 = new MockThrowable("", sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("", "Enumeration must not be null", (-1797), mockThrowable0);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("", "K@//ryV(k0,/_}", 179, sQLNonTransientConnectionException3);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 479);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      OrderedMapIterator<Properties, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLSyntaxErrorException>[] classArray0 = (Class<SQLSyntaxErrorException>[]) Array.newInstance(Class.class, 8);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      classArray0[0] = class0;
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      classArray0[1] = class1;
      Class<SQLSyntaxErrorException> class2 = SQLSyntaxErrorException.class;
      classArray0[2] = class2;
      Class<SQLSyntaxErrorException> class3 = SQLSyntaxErrorException.class;
      classArray0[3] = class3;
      Class<SQLSyntaxErrorException> class4 = SQLSyntaxErrorException.class;
      classArray0[4] = class4;
      Class<SQLSyntaxErrorException> class5 = SQLSyntaxErrorException.class;
      classArray0[5] = class5;
      Class<SQLSyntaxErrorException> class6 = SQLSyntaxErrorException.class;
      classArray0[6] = class6;
      Class<SQLSyntaxErrorException> class7 = SQLSyntaxErrorException.class;
      classArray0[7] = class7;
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("Iw](k!O `qEr5", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerPredicate<Properties> transformerPredicate0 = new TransformerPredicate<Properties>(transformer0);
      IteratorUtils.find((Iterator<Properties>) orderedMapIterator0, (Predicate<? super Properties>) transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1964, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object object0 = null;
      int int0 = (-44);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-44));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 0, sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0, 5139);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      MapIterator<Properties, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      int int0 = 4920;
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) mapIterator0, 4920);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) resettableListIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      Map<Object, Boolean> map0 = null;
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      int int0 = 1;
      ArrayListIterator<Properties> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Properties>((Object) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 0, 3487);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      IteratorUtils.getIterator("t");
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      TreeSet<SQLSyntaxErrorException> treeSet0 = new TreeSet<SQLSyntaxErrorException>();
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(treeSet0);
      IteratorUtils.size(loopingIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      BoundedIterator<SQLNonTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (long) 0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) boundedIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("4F1?J;rCI>", "4F1?J;rCI>", sQLNonTransientConnectionException0);
      IteratorUtils.contains(iterator0, (Object) sQLRecoverableException0);
      SQLException sQLException0 = new SQLException("z9V26k", (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning("rsb^pEw kS", (Throwable) null);
      Integer integer0 = new Integer(4920);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      Iterator<Integer> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends Integer>) singletonIterator0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<Integer>) singletonIterator0;
      iteratorArray0[1] = iterator1;
      iteratorArray0[2] = iterator1;
      iteratorArray0[3] = iterator1;
      iteratorArray0[4] = iterator1;
      Iterator<Integer> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) iterator2, (long) 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 5);
      TreeSet<SQLSyntaxErrorException> treeSet0 = new TreeSet<SQLSyntaxErrorException>();
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(treeSet0);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) loopingIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>[]) iteratorArray0);
      Iterator<Properties>[] iteratorArray1 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<Properties, Class<SQLFeatureNotSupportedException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray1[0] = (Iterator<Properties>) orderedMapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) iteratorArray1);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator(",(keif>E'S&`CJ=I");
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      priorityQueue0.add(resettableIterator0);
      priorityQueue0.spliterator();
      priorityQueue0.remove();
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) priorityQueue0);
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(",(keif>E'S&`CJ=I");
      iIOMetadataNode0.getNodeValue();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      LinkedList<TreeSet<SQLTransientException>> linkedList0 = new LinkedList<TreeSet<SQLTransientException>>();
      linkedList0.stream();
      ResettableListIterator<TreeSet<SQLTransientException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<TreeSet<SQLTransientException>>) linkedList0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[8];
      DataTruncation dataTruncation0 = new DataTruncation(5555, true, true, (-483), 2694);
      MockThrowable mockThrowable0 = new MockThrowable("yegO='PYb<", dataTruncation0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("yegO='PYb<", "yegO='PYb<", 286, mockThrowable0);
      sQLExceptionArray0[0] = (SQLException) sQLInvalidAuthorizationSpecException0;
      SQLWarning sQLWarning0 = new SQLWarning("yegO='PYb<", "org.apache.commons.collections4.list.TreeList$TreeListIterator");
      sQLExceptionArray0[1] = (SQLException) sQLWarning0;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("yegO='PYb<", (Map<String, ClientInfoStatus>) null);
      sQLExceptionArray0[2] = (SQLException) sQLClientInfoException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("yegO='PYb<", "org.apache.commons.collections4.list.TreeList$TreeListIterator", 0, mockThrowable0);
      sQLExceptionArray0[3] = (SQLException) sQLSyntaxErrorException0;
      SQLDataException sQLDataException0 = new SQLDataException("yegO='PYb<", "org.apache.commons.collections4.list.TreeList$TreeListIterator", 2757, sQLExceptionArray0[1]);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLDataException0);
      sQLExceptionArray0[4] = (SQLException) sQLNonTransientConnectionException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("org.apache.commons.collections4.list.TreeList$TreeListIterator", sQLExceptionArray0[3]);
      sQLExceptionArray0[5] = (SQLException) sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("yegO='PYb<");
      sQLExceptionArray0[6] = (SQLException) sQLSyntaxErrorException2;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      sQLExceptionArray0[7] = (SQLException) sQLTimeoutException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLExceptionArray0, 5555, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLNonTransientException) sQLIntegrityConstraintViolationException0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      ArrayDeque<SQLDataException> arrayDeque1 = arrayDeque0.clone();
      ListIterator<ArrayDeque<SQLDataException>> listIterator0 = IteratorUtils.singletonListIterator(arrayDeque1);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "ListIterator must not be null";
      String string1 = "";
      int[] intArray0 = new int[9];
      intArray0[0] = 2671;
      intArray0[1] = 2671;
      intArray0[2] = 2671;
      intArray0[3] = 2671;
      intArray0[4] = 2671;
      intArray0[5] = 2671;
      intArray0[6] = 2671;
      intArray0[7] = 2671;
      intArray0[8] = 2671;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "ListIterator must not be null", intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ListIterator must not be null", "ListIterator must not be null", 2671, batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0, 2671);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
