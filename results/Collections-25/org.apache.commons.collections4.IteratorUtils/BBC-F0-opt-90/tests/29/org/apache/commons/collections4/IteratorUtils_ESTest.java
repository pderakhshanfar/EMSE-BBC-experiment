/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 11:40:24 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer integer0 = new Integer(1853);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(integer0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      predicateArray1[0] = (Predicate<Object>) comparatorPredicate0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(";SQ.$/k/=c1", ";SQ.$/k/=c1", 1853);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLFeatureNotSupportedException0);
      ComparatorPredicate<Object> comparatorPredicate1 = new ComparatorPredicate<Object>(sQLDataException0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      predicateArray1[1] = (Predicate<Object>) comparatorPredicate1;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray1);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray1);
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = NotNullPredicate.notNullPredicate();
      predicateArray0[3] = predicate2;
      Predicate<Object> predicate3 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      IfTransformer<Integer, Integer> ifTransformer0 = new IfTransformer<Integer, Integer>(predicate0, constantTransformer0, constantTransformer0);
      Transformer<Integer, Integer> transformer0 = IfTransformer.ifTransformer((Predicate<? super Integer>) predicate3, (Transformer<? super Integer, ? extends Integer>) ifTransformer0, (Transformer<? super Integer, ? extends Integer>) ifTransformer0);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super Integer>) onePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLException sQLException0 = new SQLException("", "org.apache.commons.collections4.IterableUtils", (-1893), sQLInvalidAuthorizationSpecException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLException0);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MapIterator<Properties, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(vector0);
      Consumer<InstanceofPredicate> consumer0 = (Consumer<InstanceofPredicate>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      loopingListIterator0.forEachRemaining(consumer0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      vector0.add(instanceofPredicate0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) loopingListIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Iterator<BatchUpdateException> iterator0 = null;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      predicateArray0[1] = predicate1;
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.singletonListIterator((InstanceofPredicate) null);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) listIterator0, 1073741823);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(vector0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      vector0.add(sQLTransientConnectionException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) reverseListIterator0);
      ListIterator<SQLTransientConnectionException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", "&", hashMap0, sQLClientInfoException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(map0, sQLClientInfoException1);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      sQLClientInfoException2.fillInStackTrace();
      Transformer<SQLClientInfoException, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("dCi!1d%!!}`g,.n", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException2, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'dCi!1d%!!}`g,.n' on 'class java.sql.SQLClientInfoException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(arrayList0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.map.SingletonMap", "@~mA veKpz*6z/Rv", 2585);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("$-I|y2v}7]P+0]#=z", sQLTransientException0);
      arrayList0.add(sQLTimeoutException0);
      arrayList0.spliterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) loopingIterator0, 813L);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("/WZ9A\")pt:j", "/WZ9A\")pt:j");
      int int0 = (-446);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "/WZ9A\")pt:j", 0);
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("", "", sQLRecoverableException0);
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      PredicateTransformer<Properties> predicateTransformer0 = new PredicateTransformer<Properties>(predicate1);
      predicateTransformer0.transform(properties0);
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("Array class must not be null");
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("/WZ9A\")pt:j");
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException3;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 0, (-446));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("N");
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends ClientInfoStatus>) resettableListIterator0, (Class<ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      hashSet0.add(locale_FilteringMode0);
      LoopingIterator<Locale.FilteringMode> loopingIterator0 = new LoopingIterator<Locale.FilteringMode>(hashSet0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends Locale.FilteringMode>) loopingIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) resettableIterator0, (Transformer<? super SQLTransientException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>((SQLClientInfoException) null);
      IteratorUtils.get((Iterator<SQLClientInfoException>) singletonListIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) resettableListIterator1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("ROT80>*>?");
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 6);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[1] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[2] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[3] = class3;
      Class<SQLDataException> class4 = SQLDataException.class;
      classArray0[4] = class4;
      Class<SQLDataException> class5 = SQLDataException.class;
      classArray0[5] = class5;
      InvokerTransformer<SQLException, SQLFeatureNotSupportedException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLFeatureNotSupportedException>("eO\"pY]TwiVE", classArray0, classArray0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) invokerTransformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'eO\"pY]TwiVE' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      IteratorUtils.getIterator(uniquePredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fAi", "fAi", 100);
      DataTruncation dataTruncation0 = new DataTruncation(567, false, false, 567, 10, sQLInvalidAuthorizationSpecException0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 4);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientConnectionException> class3 = SQLNonTransientConnectionException.class;
      classArray0[3] = class3;
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("fAi", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) resettableIterator0, (Transformer<? super DataTruncation, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'fAi' on 'class java.sql.DataTruncation' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, sQLClientInfoException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("!", (String) null, sQLClientInfoException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "!", 2613);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", sQLNonTransientConnectionException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException(sQLTimeoutException1);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("!", ", ", (-2237));
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("", "z", 4628, sQLTimeoutException4);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException(", ", "/dNrPG[KA");
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException((String) null);
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      SQLTimeoutException sQLTimeoutException8 = new SQLTimeoutException(", ");
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException8;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException8);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) resettableListIterator0, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      IteratorUtils.toArray((Iterator<? extends ClientInfoStatus>) resettableListIterator0, class0);
      Integer integer0 = new Integer(859);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      IteratorUtils.asIterable((Iterator<? extends Integer>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Integer integer0 = new Integer(31);
      IteratorUtils.singletonIterator(integer0);
      OrderedMapIterator<SQLClientInfoException, Predicate<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0, (long) 31, (long) 31);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLClientInfoException>) boundedIterator0, 31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 31
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[0];
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_FilteringModeArray0, 0, 0);
      IteratorUtils.peekingIterator((Iterator<? extends Locale.FilteringMode>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) resettableIterator0, 0L);
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[&");
      int int0 = 90;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, 90, 90);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      DataTruncation dataTruncation0 = new DataTruncation(477, false, false, 477, 477);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(235, true, false, 477, 235);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-837), false, true, 1, 834);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(7, true, true, 501, 1);
      dataTruncationArray0[3] = dataTruncation3;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0, 1, 1);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLException>[]) iteratorArray0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[2];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Transformer must not be null", "Transformer must not be null", 477, dataTruncation2);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(dataTruncation0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicateTransformer<Properties> predicateTransformer0 = new PredicateTransformer<Properties>(uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicateTransformer<Properties> predicateTransformer0 = new PredicateTransformer<Properties>(uniquePredicate0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) null, (Transformer<? super Object, ? extends String>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      IteratorUtils.toArray((Iterator<? extends ClientInfoStatus>) resettableListIterator0, class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) singletonIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyListIterator();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) resettableListIterator0);
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      ListIterator<SQLTimeoutException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) listIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTimeoutException>) listIterator1, (Closure<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.emptyListIterator();
      int int0 = 1877;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[7];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLNonTransientException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException((String) null, "", 1877, sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("", (Throwable) null);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException(sQLNonTransientException0);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("", "", 1877);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException5);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) singletonListIterator0, (Predicate<? super SQLTimeoutException>) uniquePredicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(uniquePredicate0, closure0, true);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) uniquePredicate0, (Closure<? super Object>) whileClosure0, (Closure<? super Object>) closure0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(uniquePredicate0, closure1);
      Closure<Object> closure2 = WhileClosure.whileClosure((Predicate<? super Object>) uniquePredicate0, (Closure<? super Object>) ifClosure0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTimeoutException>) singletonListIterator0, (Closure<? super SQLTimeoutException>) closure2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      int int0 = (-1030);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]vhV<-je!LD|`", "]vhV<-je!LD|`", (-1030), hashtable0);
      sQLClientInfoException0.spliterator();
      sQLClientInfoException0.getFailedProperties();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("]vhV<-je!LD|`", "2_=TB;RWx2o1M,6n", (-1030), hashtable0, sQLClientInfoException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[1] = predicate0;
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      predicateArray0[2] = (Predicate<Object>) transformerPredicate0;
      NonePredicate<Properties> nonePredicate0 = new NonePredicate<Properties>(predicateArray0);
      PredicateTransformer<Properties> predicateTransformer0 = new PredicateTransformer<Properties>(nonePredicate0);
      PredicateTransformer.predicateTransformer((Predicate<? super SQLClientInfoException>) transformerPredicate0);
      Locale.FilteringMode.values();
      Iterator<?> iterator0 = IteratorUtils.getIterator(predicateTransformer0);
      UniquePredicate<Object> uniquePredicate1 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<ArrayList<PriorityQueue>>) iterator0, (Predicate<? super ArrayList<PriorityQueue>>) predicate0);
      IteratorUtils.toArray(iterator0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "2x$9U{>aQs", (-2043), hashtable1);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("2x$9U{>aQs");
      sQLClientInfoException0.printStackTrace((PrintStream) mockPrintStream0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException0;
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      singletonListIterator0.reset();
      IteratorUtils.get((Iterator<SQLClientInfoException>) singletonListIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null, 35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      PredicateTransformer<Properties> predicateTransformer0 = new PredicateTransformer<Properties>(predicate0);
      PredicateTransformer.predicateTransformer((Predicate<? super SQLClientInfoException>) predicate0);
      Locale.FilteringMode.values();
      IteratorUtils.getIterator(predicateTransformer0);
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      PredicateTransformer<Hashtable<SQLException, Object>> predicateTransformer1 = new PredicateTransformer<Hashtable<SQLException, Object>>(predicate1);
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) arrayList0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("m ;I&]Gb?NPi*\"^", "");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", sQLSyntaxErrorException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 334, sQLTransientException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 334, hashMap0, sQLNonTransientConnectionException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      IteratorUtils.matchesAll((Iterator<ArrayList<PriorityQueue>>) singletonIterator0, (Predicate<? super ArrayList<PriorityQueue>>) predicate1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "2x$9U{>aQs", (-2043), hashtable1);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("2x$9U{>aQs");
      sQLClientInfoException0.printStackTrace((PrintStream) mockPrintStream0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException1;
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException0;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      IteratorUtils.get((Iterator<SQLClientInfoException>) resettableIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) resettableListIterator0, (Transformer<? super Object, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      IteratorUtils.size((Iterator<?>) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("2x$9U{>aQs", (String) null, 66);
      ArrayIterator<String> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<String>(sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      vector0.addElement(instanceofPredicate0);
      vector0.add((InstanceofPredicate) null);
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(vector0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PredicateTransformer<Hashtable<SQLException, Object>> predicateTransformer0 = new PredicateTransformer<Hashtable<SQLException, Object>>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Hashtable<InstanceofPredicate, LinkedList<IIOMetadataNode>> hashtable0 = new Hashtable<InstanceofPredicate, LinkedList<IIOMetadataNode>>();
      EntrySetMapIterator<InstanceofPredicate, LinkedList<IIOMetadataNode>> entrySetMapIterator0 = new EntrySetMapIterator<InstanceofPredicate, LinkedList<IIOMetadataNode>>(hashtable0);
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends String>) orderedIterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Collection must not be null");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("Collection must not be null");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("uWslRb9/A6kJm");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("{0NJ{");
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("NodeList must not be null");
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      Transformer<SQLNonTransientConnectionException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0, "w$X^wH6pe&48mtvX", "", "uWslRb9/A6kJm");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate1 = new UniquePredicate<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Boolean>[] iteratorArray0 = (Iterator<Boolean>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Boolean> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>[]) iteratorArray0);
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>) iterator0, (Iterator<? extends Boolean>) iterator0, (Iterator<? extends Boolean>) iterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) zippingIterator0, (Iterator<? extends Boolean>) zippingIterator0, (Iterator<? extends Boolean>) iterator0);
      Integer integer0 = new Integer(93);
      IteratorUtils.singletonListIterator(integer0);
      MapIterator<Locale.LanguageRange, Boolean> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.LanguageRange>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      vector0.add((InstanceofPredicate) null);
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(vector0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) loopingListIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      PredicateTransformer<Properties> predicateTransformer0 = new PredicateTransformer<Properties>(predicate0);
      PredicateTransformer.predicateTransformer((Predicate<? super SQLClientInfoException>) predicate0);
      Locale.FilteringMode.values();
      IteratorUtils.getIterator(predicateTransformer0);
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      PredicateTransformer<Hashtable<SQLException, Object>> predicateTransformer1 = new PredicateTransformer<Hashtable<SQLException, Object>>(predicate1);
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) arrayList0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      arrayList0.add(locale_FilteringMode0);
      ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayList<PriorityQueue>>) resettableListIterator0, (Predicate<? super ArrayList<PriorityQueue>>) predicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<String> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) orderedMapIterator0, (Transformer<? super Object, ? extends String>) transformer0);
      IteratorUtils.toList((Iterator<? extends String>) iterator0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      PredicateTransformer<Hashtable<SQLException, Object>> predicateTransformer0 = new PredicateTransformer<Hashtable<SQLException, Object>>(predicate0);
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) arrayList0);
      IteratorUtils.matchesAll((Iterator<ArrayList<PriorityQueue>>) resettableListIterator0, (Predicate<? super ArrayList<PriorityQueue>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      objectArrayIterator0.reset();
      SQLWarning sQLWarning0 = new SQLWarning();
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      ForClosure.forClosure((-257), (Closure<? super SQLException>) chainedClosure0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      IteratorUtils.toArray((Iterator<? extends ClientInfoStatus>) resettableIterator0, class0);
      String[] stringArray0 = new String[0];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) objectArrayListIterator0, (Transformer<? super String, String>) null, "~;BO|/}V<r/q=<pk", "Iterator must not be null", "Iterator must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      int int0 = 1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Hashtable<InstanceofPredicate, LinkedList<IIOMetadataNode>> hashtable0 = new Hashtable<InstanceofPredicate, LinkedList<IIOMetadataNode>>();
      EntrySetMapIterator<InstanceofPredicate, LinkedList<IIOMetadataNode>> entrySetMapIterator0 = new EntrySetMapIterator<InstanceofPredicate, LinkedList<IIOMetadataNode>>(hashtable0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("#z|1YqJMFty8G@kA[/y", "5Yq-7e%", 9);
      DataTruncation dataTruncation0 = new DataTruncation(9, false, false, 1804, 1804, sQLIntegrityConstraintViolationException0);
      Transformer<Object, DataTruncation> transformer1 = ExceptionTransformer.exceptionTransformer();
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super DataTruncation, String>) transformer0, "", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Comparator<IIOMetadataNode> comparator0 = (Comparator<IIOMetadataNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<String> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) orderedMapIterator0, (Transformer<? super Object, ? extends String>) transformer0);
      IteratorUtils.toList((Iterator<? extends String>) iterator0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) linkedList0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDeque0.descendingIterator();
      IteratorUtils.toString((Iterator<LinkedHashSet<LinkedList>>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      OrderedMapIterator<StringTokenizer, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(arrayList0);
      IteratorUtils.size(mapIterator0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Class<StringTokenizer> class1 = StringTokenizer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) class1);
      ListIterator<Object> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      IteratorUtils.toArray((Iterator<? extends ClientInfoStatus>) resettableListIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      vector0.add((InstanceofPredicate) null);
      OrderedIterator<InstanceofPredicate> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) orderedIterator0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.asIterator((Enumeration<? extends InstanceofPredicate>) enumeration0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) iterator0);
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(list0);
      IteratorUtils.size(mapIterator0);
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      BoundedIterator<SQLException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLException>) mapIterator0, 1L);
      IteratorUtils.toArray((Iterator<?>) boundedIterator0);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      IteratorUtils.toArray(iterator0);
      IteratorUtils.singletonListIterator((InstanceofPredicate) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransactionRollbackException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransactionRollbackException>(orderedMapIterator0);
      OrderedMapIterator<DataTruncation, StringTokenizer> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<DataTruncation>) orderedMapIterator1, (Transformer<? super DataTruncation, String>) transformer0, "5Yq-7e%", "", "");
      OrderedMapIterator<StringTokenizer, Transformer<Object, Boolean>> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator2);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator2);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      PredicateTransformer<Properties> predicateTransformer0 = new PredicateTransformer<Properties>(predicate0);
      PredicateTransformer.predicateTransformer((Predicate<? super SQLClientInfoException>) predicate0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      SingletonIterator<ClientInfoStatus> singletonIterator0 = new SingletonIterator<ClientInfoStatus>(clientInfoStatus0, false);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends ClientInfoStatus>) singletonIterator0, (Iterator<? extends ClientInfoStatus>) singletonIterator0);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      IteratorUtils.toArray((Iterator<? extends ClientInfoStatus>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      HashSet<ClientInfoStatus> hashSet0 = new HashSet<ClientInfoStatus>();
      LoopingIterator<ClientInfoStatus> loopingIterator0 = new LoopingIterator<ClientInfoStatus>(hashSet0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<ClientInfoStatus>) loopingIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends ClientInfoStatus>) iterator0, (Iterator<? extends ClientInfoStatus>) loopingIterator0);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      IteratorUtils.toArray((Iterator<? extends ClientInfoStatus>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      vector0.add((InstanceofPredicate) null);
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(vector0);
      OrderedIterator<ClientInfoStatus> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends ClientInfoStatus>) orderedIterator0, (Iterator<? extends ClientInfoStatus>) orderedIterator0);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      IteratorUtils.toArray((Iterator<? extends ClientInfoStatus>) iterator0, class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Hashtable<InstanceofPredicate, LinkedList<IIOMetadataNode>> hashtable0 = new Hashtable<InstanceofPredicate, LinkedList<IIOMetadataNode>>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Iterator<DataTruncation> iterator0 = null;
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) transformer0, "", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      vector0.add((InstanceofPredicate) null);
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(vector0);
      // Undeclared exception!
      IteratorUtils.size(loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(arrayList0);
      IteratorUtils.size(mapIterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      arrayList0.add(0, instanceofPredicate0);
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      Class<StringTokenizer> class2 = StringTokenizer.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class2);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Locale.FilteringMode.values();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Predicate<SQLClientInfoException> predicate0 = EqualPredicate.equalPredicate(sQLClientInfoException0);
      PredicateTransformer.predicateTransformer((Predicate<? super SQLClientInfoException>) predicate0);
      Locale.FilteringMode.values();
      IteratorUtils.getIterator(orderedMapIterator0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      IteratorUtils.isEmpty((Iterator<?>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.toString((Iterator<LinkedHashSet<LinkedList>>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyListIterator();
      int[] intArray0 = new int[3];
      intArray0[0] = (-415);
      intArray0[2] = 1073741824;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("<", "");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("");
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("8g7w?b/N", "k|`@cX", 1073741824);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      sQLNonTransientConnectionException2.fillInStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 0, (-2330));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) transformer0, "org.apache.commons.collections4.functors.DefaultEquator", "", "org.apache.commons.collections4.functors.DefaultEquator");
      OrderedMapIterator<StringTokenizer, Transformer<Object, Boolean>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.isEmpty(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "org.apache.commons.collections4.functors.DefaultEquator", (-1967));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      objectArrayIterator0.reset();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) linkedList0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 3);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = ForClosure.forClosure(80, (Closure<? super Object>) closure0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicateArray0[1], closure0, closure1);
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, (Closure<? super Object>[]) null, ifClosure0);
      closureArray0[0] = (Closure<Object>) switchClosure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      closureArray0[1] = (Closure<Object>) chainedClosure0;
      ForClosure<Object> forClosure0 = new ForClosure<Object>(1189, chainedClosure0);
      closureArray0[2] = (Closure<Object>) forClosure0;
      ChainedClosure<Object> chainedClosure1 = new ChainedClosure<Object>(closureArray0);
      Closure<SQLException> closure2 = ForClosure.forClosure(80, (Closure<? super SQLException>) ifClosure0);
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IfClosure<SQLNonTransientException> ifClosure1 = new IfClosure<SQLNonTransientException>(predicate0, closure2, chainedClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLDataException>) objectArrayIterator0, (Closure<? super SQLDataException>) chainedClosure1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      objectArrayIterator0.reset();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) linkedList0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      Closure<SQLException> closure0 = ForClosure.forClosure(10, (Closure<? super SQLException>) chainedClosure0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IfClosure<SQLNonTransientException> ifClosure0 = new IfClosure<SQLNonTransientException>(predicate0, closure0, closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLDataException>) objectArrayIterator0, (Closure<? super SQLDataException>) chainedClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Hashtable<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>(hashtable0);
      IteratorUtils.size(entrySetMapIterator0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Class<Boolean> class1 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0);
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      int[] intArray0 = new int[1];
      intArray0[0] = 35;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("-P^:j2'>mSt4*.b1[J", "8vsXcfKSG-wJ^ZWbRi", 35, intArray0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("z@?Z+K1", "N#H!UtcN");
      Locale.FilteringMode.values();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransactionRollbackException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransactionRollbackException>(orderedMapIterator0);
      MapIterator<SQLNonTransientConnectionException, SQLTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLTransientException>) abstractMapIteratorDecorator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Hashtable<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>(hashtable0);
      IteratorUtils.size(entrySetMapIterator0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Class<Boolean> class1 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0);
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0);
      OrderedMapIterator<SQLTimeoutException, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) orderedMapIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0, "", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OrderedMapIterator<String, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<String, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, SQLNonTransientException>(orderedMapIterator0);
      IteratorUtils.toList((Iterator<? extends String>) abstractOrderedMapIteratorDecorator0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) transformer0, (String) null, ">`,:G6a5>F:Y%GDd=]", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator1, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", (-1), batchUpdateException0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      ConstantTransformer<SQLNonTransientConnectionException, String> constantTransformer0 = new ConstantTransformer<SQLNonTransientConnectionException, String>("95rmjM");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) listIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) constantTransformer0, "^>MNk", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      IteratorUtils.singletonIterator(sQLRecoverableException0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Integer> transformerPredicate0 = new TransformerPredicate<Integer>(transformer0);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(1222);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-768));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(91);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1222);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(91);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[1]);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(921);
      integerArray0[7] = integer7;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Integer>) objectArrayListIterator0, (Predicate<? super Integer>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = null;
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.objectGraphIterator((SQLFeatureNotSupportedException) null, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) transformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.singletonListIterator(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      OrderedIterator<Integer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Integer>) orderedIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      vector0.add((InstanceofPredicate) null);
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(vector0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("R");
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) singletonListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MapIterator<Integer, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      IteratorUtils.find((Iterator<Integer>) mapIterator0, (Predicate<? super Integer>) uniquePredicate0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      IteratorUtils.toArray((Iterator<? extends ClientInfoStatus>) resettableListIterator0, class1);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null, (Collection<? super SQLNonTransientException>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLSyntaxErrorException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator1);
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator1, (Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(").", "Transformer must return an instanceof Boolean, it was a null object", 71, hashtable0, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLClientInfoException0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte) (-14);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLSyntaxErrorException0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "KbTA%B/3s2+lDL");
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(stack0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) reverseListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) iterator0);
      IteratorUtils.toString((Iterator<LinkedHashSet<LinkedList>>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((DataTruncation[]) null, 77, 3692);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Hashtable<InstanceofPredicate, LinkedList<IIOMetadataNode>> hashtable0 = new Hashtable<InstanceofPredicate, LinkedList<IIOMetadataNode>>();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      hashtable0.put(instanceofPredicate0, linkedList0);
      EntrySetMapIterator<InstanceofPredicate, LinkedList<IIOMetadataNode>> entrySetMapIterator0 = new EntrySetMapIterator<InstanceofPredicate, LinkedList<IIOMetadataNode>>(hashtable0);
      IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) entrySetMapIterator0, 1765);
      Class<SQLTransientException> class1 = SQLTransientException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientException>) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MapIterator<Properties, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("z@?Z+K1", "N#H!UtcN");
      Locale.FilteringMode.values();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransactionRollbackException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransactionRollbackException>(orderedMapIterator0);
      MapIterator<SQLNonTransientConnectionException, SQLTransientException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLTransientException>) abstractMapIteratorDecorator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) mapIterator1);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      IteratorUtils.toArray((Iterator<? extends ClientInfoStatus>) resettableListIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("N#H!UtcN");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MapIterator<Properties, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(vector0);
      Consumer<InstanceofPredicate> consumer0 = (Consumer<InstanceofPredicate>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) loopingListIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>((InstanceofPredicate) null);
      singletonIterator0.forEachRemaining(consumer0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      IteratorUtils.toArray((Iterator<? extends ClientInfoStatus>) resettableListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>(hashMap0);
      IteratorUtils.size(entrySetMapIterator0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Hashtable<InstanceofPredicate, LinkedList<IIOMetadataNode>> hashtable0 = new Hashtable<InstanceofPredicate, LinkedList<IIOMetadataNode>>();
      EntrySetMapIterator<InstanceofPredicate, LinkedList<IIOMetadataNode>> entrySetMapIterator1 = new EntrySetMapIterator<InstanceofPredicate, LinkedList<IIOMetadataNode>>(hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) entrySetMapIterator1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>(hashMap0);
      IteratorUtils.size(entrySetMapIterator0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Hashtable<InstanceofPredicate, LinkedList<IIOMetadataNode>> hashtable0 = new Hashtable<InstanceofPredicate, LinkedList<IIOMetadataNode>>();
      EntrySetMapIterator<InstanceofPredicate, LinkedList<IIOMetadataNode>> entrySetMapIterator1 = new EntrySetMapIterator<InstanceofPredicate, LinkedList<IIOMetadataNode>>(hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) entrySetMapIterator1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MapIterator<Properties, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) mapIterator0);
      Class<SQLDataException> class0 = SQLDataException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      PredicateTransformer<Properties> predicateTransformer0 = new PredicateTransformer<Properties>(predicate0);
      PredicateTransformer.predicateTransformer((Predicate<? super SQLClientInfoException>) predicate0);
      Locale.FilteringMode.values();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      PredicateTransformer<Properties> predicateTransformer0 = new PredicateTransformer<Properties>(predicate0);
      Properties properties0 = new Properties();
      PredicateTransformer.predicateTransformer((Predicate<? super SQLClientInfoException>) predicate0);
      Boolean boolean0 = predicateTransformer0.transform(properties0);
      ListIterator<Boolean> listIterator0 = IteratorUtils.singletonListIterator(boolean0);
      IteratorUtils.toListIterator((Iterator<? extends Boolean>) listIterator0);
      IteratorUtils.getIterator(predicateTransformer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLWarning sQLWarning0 = new SQLWarning();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      linkedList0.remove((Object) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      vector0.add((InstanceofPredicate) null);
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(vector0);
      Consumer<InstanceofPredicate> consumer0 = (Consumer<InstanceofPredicate>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>(hashMap0);
      IteratorUtils.size(entrySetMapIterator0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Consumer<InstanceofPredicate> consumer0 = (Consumer<InstanceofPredicate>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Boolean>) null, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Hashtable<Properties, SQLException> hashtable0 = new Hashtable<Properties, SQLException>();
      EntrySetMapIterator<Properties, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<Properties, SQLException>(hashtable0);
      Iterator<Properties> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) entrySetMapIterator0);
      IteratorUtils.emptyIterator();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) resettableListIterator0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) iterator0, (-3943L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("z@?Z+K1", "N#H!UtcN");
      Locale.FilteringMode.values();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransactionRollbackException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransactionRollbackException>(orderedMapIterator0);
      MapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException>) abstractMapIteratorDecorator0);
      MapIterator<SQLNonTransientConnectionException, SQLTransientException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientConnectionException, ? extends SQLTransientException>) mapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) mapIterator1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "z@?Z+K1", sQLInvalidAuthorizationSpecException0);
      IteratorUtils.getIterator(sQLRecoverableException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("NodeList must not be null", "NodeList must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>(hashMap0);
      IteratorUtils.size(entrySetMapIterator0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/", "D^U$&,x]Gp}Issc1");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLIntegrityConstraintViolationException0);
      Consumer<InstanceofPredicate> consumer0 = (Consumer<InstanceofPredicate>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("!rlHc40:UG", "!rlHc40:UG", 0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLRecoverableException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<LinkedHashSet<SQLTransactionRollbackException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      vector0.add((InstanceofPredicate) null);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MapIterator<Integer, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      IteratorUtils.find((Iterator<Integer>) mapIterator0, (Predicate<? super Integer>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OrderedMapIterator<Properties, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends Properties>) orderedMapIterator0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Transformers must not be null";
      stringArray0[1] = "psY98'";
      stringArray0[2] = "n";
      stringArray0[3] = "3gJC%7";
      stringArray0[4] = "";
      stringArray0[5] = "G9ww";
      stringArray0[6] = "U";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) objectArrayIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) iterator0);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(list0);
      IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) objectArrayIterator0);
      IteratorUtils.emptyOrderedIterator();
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(list0);
      EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      SQLDataException sQLDataException1 = new SQLDataException("`ip~<", "`ip~<");
      sQLDataException1.spliterator();
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("`ip~<");
      SQLDataException sQLDataException3 = new SQLDataException("`ip~<", "");
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      sQLDataException0.spliterator();
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      objectArrayIterator0.reset();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      linkedList0.remove((Object) sQLWarning0);
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) linkedList0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.isEmpty(objectArrayIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      MapIterator<String, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) mapIterator0, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ConstantTransformer.nullTransformer();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      vector0.add(instanceofPredicate0);
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(vector0);
      TruePredicate.truePredicate();
      // Undeclared exception!
      IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) loopingListIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("<@=vxTn9", "<@=vxTn9");
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(stack0);
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) reverseListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) reverseListIterator0);
      IteratorUtils.toString((Iterator<LinkedHashSet<LinkedList>>) iterator0);
      Hashtable<SQLException, Object> hashtable0 = new Hashtable<SQLException, Object>(61);
      MapIterator<SQLNonTransientConnectionException, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) mapIterator0, (Object) resettableIterator0);
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0, (Collection<? super SQLTransientConnectionException>) list0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>(hashMap0);
      IteratorUtils.size(entrySetMapIterator0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Consumer<InstanceofPredicate> consumer0 = (Consumer<InstanceofPredicate>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0);
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      IteratorUtils.toArray((Iterator<?>) entrySetMapIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Entry does not exist: ", "Entry does not exist: ", sQLSyntaxErrorException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Entry does not exist: ", "Entry does not exist: ", 0, hashMap1, sQLTransientConnectionException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("Entry does not exist: ", "Entry does not exist: ", 91, hashMap1, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(hashMap1);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("]", "]", map0, sQLSyntaxErrorException0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("x;}XV^Uk", hashMap1, sQLClientInfoException4);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException7.getFailedProperties();
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException("]", "TP5C1_bJ", 91, map1);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException8;
      SQLClientInfoException sQLClientInfoException9 = new SQLClientInfoException("$h-\"P", "TP5C1_bJ", 647, map1);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException9;
      SQLClientInfoException sQLClientInfoException10 = new SQLClientInfoException(", ", "1hd|?", 4, map0, sQLClientInfoException3);
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException10;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0);
      IteratorUtils.contains((Iterator<SQLClientInfoException>) resettableListIterator0, (Object) sQLClientInfoException10);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Node must not be null", sQLInvalidAuthorizationSpecExceptionArray0[0]);
      StackTraceElement[] stackTraceElementArray0 = sQLInvalidAuthorizationSpecException0.getStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      Locale.FilteringMode.values();
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, true);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>[]) iteratorArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.emptyListIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Closure<Object> closure1 = ForClosure.forClosure(1611, (Closure<? super Object>) closure0);
      IfClosure.ifClosure((Predicate<? super Object>) instanceofPredicate0, (Closure<? super Object>) closure1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("delimiter may not be null", "delimiter may not be null", 3198);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("4LsQ", "A.B^xBK|q@T%_Ym");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTimeoutException1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      SQLDataException sQLDataException1 = new SQLDataException("`ip~<", "`ip~<");
      sQLDataException1.spliterator();
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("`ip~<");
      SQLDataException sQLDataException3 = new SQLDataException("`ip~<", "");
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      sQLDataException0.spliterator();
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      objectArrayIterator0.reset();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      linkedList0.remove((Object) sQLWarning0);
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) linkedList0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      ForClosure.forClosure(10, (Closure<? super SQLException>) chainedClosure0);
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IfClosure<SQLNonTransientException> ifClosure0 = new IfClosure<SQLNonTransientException>(predicate0, chainedClosure0, chainedClosure0);
      IteratorUtils.apply((Iterator<SQLDataException>) objectArrayIterator0, (Closure<? super SQLDataException>) ifClosure0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("`ip~<");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "'4+pi/";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'4+pi/");
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTimeoutException>) null, 1272);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, true);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.reset();
      singletonIterator0.forEachRemaining(consumer0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      int int0 = 3;
      int int1 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) singletonIterator0, 0, 50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int int0 = (-1464);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null, (-1464));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MapIterator<Properties, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      vector0.add((InstanceofPredicate) null);
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(vector0);
      Consumer<InstanceofPredicate> consumer0 = (Consumer<InstanceofPredicate>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) loopingListIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) singletonListIterator0);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(list0);
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) singletonListIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) list0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) loopingListIterator0, (Iterator<? extends String>) singletonListIterator0);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(list0);
      Iterator<String> iterator1 = EmptyIterator.emptyIterator();
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = (Iterator<String>) orderedIterator0;
      iteratorArray0[1] = (Iterator<String>) orderedIterator0;
      iteratorArray0[2] = (Iterator<String>) orderedIterator0;
      iteratorArray0[3] = iterator1;
      iteratorArray0[4] = (Iterator<String>) orderedIterator0;
      iteratorArray0[5] = iterator0;
      iteratorArray0[6] = iterator1;
      Iterator<String> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      Iterator<String> iterator3 = IteratorUtils.peekingIterator((Iterator<? extends String>) iterator0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) iterator3, (Iterator<? extends String>) orderedIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) iterator2, (Iterator<? extends String>) iteratorArray0[4], (Iterator<? extends String>) iterator0);
      IteratorUtils.emptyIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iteratorArray0[1], 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Integer>) null, 1323L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>(hashMap0);
      IteratorUtils.size(entrySetMapIterator0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("@e5dSIb", "@e5dSIb");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientConnectionException0);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.ComparatorPredicate$Criterion");
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransactionRollbackException0;
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>(1, closure0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 7);
      HashMap<Object, SQLDataException> hashMap1 = new HashMap<Object, SQLDataException>();
      Transformer<Object, SQLDataException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLDataException>) hashMap1);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) forClosure0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      IfClosure.ifClosure((Predicate<? super Object>) predicate1, (Closure<? super Object>) chainedClosure0, (Closure<? super Object>) forClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) entrySetMapIterator0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 7);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      iteratorArray0[0] = (Iterator<String>) singletonListIterator0;
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) singletonListIterator0);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(list0);
      iteratorArray0[1] = (Iterator<String>) loopingListIterator0;
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) iteratorArray0[1]);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) list0);
      iteratorArray0[2] = iterator0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String> iterator1 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) singletonListIterator0, (Iterator<? extends String>) iteratorArray0[0]);
      iteratorArray0[3] = iterator1;
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[4] = (Iterator<String>) orderedIterator0;
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(list0);
      iteratorArray0[5] = (Iterator<String>) loopingIterator0;
      Iterator<String> iterator2 = EmptyIterator.emptyIterator();
      iteratorArray0[6] = iterator2;
      Iterator<String> iterator3 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) iterator3, (Iterator<? extends String>) iterator0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) zippingIterator0, (Iterator<? extends String>) orderedIterator0, (Iterator<? extends String>) iteratorArray0[5]);
      IteratorUtils.emptyIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_FilteringMode0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      IteratorUtils.toArray((Iterator<? extends ClientInfoStatus>) resettableListIterator0, class0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("list (", "]vhV<-je!LD|`", 745, hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("8y:q'v", "list (", 1766, map0, sQLClientInfoException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException1);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLClientInfoException>) singletonIterator0, 1766);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1765
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransientConnectionException>) mapIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 10
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator1, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "");
      Stack<IIOMetadataNode> stack1 = new Stack<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(stack1);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) reverseListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      linkedList0.listIterator();
      Iterator<Iterator<InstanceofPredicate>>[] iteratorArray0 = (Iterator<Iterator<InstanceofPredicate>>[]) Array.newInstance(Iterator.class, 4);
      MapIterator<SQLFeatureNotSupportedException, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) mapIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-474), true, true, 1272, 1272);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("u?h1Fp.Q'", "[!#g[`yZ(|.f*", 1272, dataTruncation0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLSyntaxErrorException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "[!#g[`yZ(|.f*", "", (-1644));
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLRecoverableException0.setStackTrace(stackTraceElementArray0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      IteratorUtils.toString((Iterator<LinkedHashSet<LinkedList>>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      PredicateTransformer<Properties> predicateTransformer0 = new PredicateTransformer<Properties>(predicate0);
      Properties properties0 = new Properties();
      PredicateTransformer.predicateTransformer((Predicate<? super SQLClientInfoException>) predicate0);
      Boolean boolean0 = predicateTransformer0.transform(properties0);
      ListIterator<Boolean> listIterator0 = IteratorUtils.singletonListIterator(boolean0);
      ListIterator<Boolean> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends Boolean>) listIterator0);
      Object[] objectArray0 = new Object[9];
      MapIterator<Object, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.find((Iterator<Object>) mapIterator0, (Predicate<? super Object>) predicate0);
      objectArray0[0] = null;
      objectArray0[1] = (Object) predicateTransformer0;
      objectArray0[2] = (Object) listIterator1;
      objectArray0[3] = (Object) properties0;
      objectArray0[4] = (Object) properties0;
      objectArray0[5] = (Object) properties0;
      objectArray0[6] = (Object) boolean0;
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[0];
      IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>(hashMap0);
      IteratorUtils.size(entrySetMapIterator0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("@e5dSIb", "@e5dSIb");
      sQLTransientExceptionArray0[1] = sQLTransientException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientConnectionException0);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.ComparatorPredicate$Criterion");
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransactionRollbackException0;
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>(1, closure0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 7);
      HashMap<Object, SQLDataException> hashMap1 = new HashMap<Object, SQLDataException>();
      Transformer<Object, SQLDataException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLDataException>) hashMap1);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) forClosure0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) predicate1, (Closure<? super Object>) chainedClosure0, (Closure<? super Object>) forClosure0);
      closureArray0[0] = closure1;
      closureArray0[1] = (Closure<Object>) forClosure0;
      closureArray0[2] = (Closure<Object>) forClosure0;
      closureArray0[3] = (Closure<Object>) forClosure0;
      closureArray0[4] = (Closure<Object>) forClosure0;
      closureArray0[5] = closure0;
      closureArray0[6] = (Closure<Object>) forClosure0;
      ChainedClosure<Object> chainedClosure1 = new ChainedClosure<Object>(closureArray0);
      ForClosure.forClosure(10, (Closure<? super SQLException>) chainedClosure1);
      IfClosure<SQLNonTransientException> ifClosure0 = new IfClosure<SQLNonTransientException>(predicate1, closureArray0[1], closure1);
      IteratorUtils.apply((Iterator<SQLDataException>) null, (Closure<? super SQLDataException>) closure0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>(hashMap0);
      IteratorUtils.size(entrySetMapIterator0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode.values();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      StringTokenizer stringTokenizer0 = new StringTokenizer("H4]WtQ5LT1-7`cbs%D", "");
      IteratorUtils.getIterator(stringTokenizer0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("1oV", "H4]WtQ5LT1-7`cbs%D", sQLTransientExceptionArray0[0]);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MapIterator<Integer, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<Integer> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.find((Iterator<Integer>) mapIterator0, (Predicate<? super Integer>) predicate0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 2);
      Throwable throwable0 = null;
      int int0 = 100;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MapIterator<Properties, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null, (-408));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      String string0 = "Node must not be null";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Node must not be null", sQLInvalidAuthorizationSpecExceptionArray0[0]);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("k,`oI1Ma&c9h", "yZ8j", 1796, sQLInvalidAuthorizationSpecException1);
      arrayList0.add(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 7);
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      iteratorArray0[0] = (Iterator<String>) singletonListIterator0;
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) singletonListIterator0);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(list0);
      iteratorArray0[1] = (Iterator<String>) loopingListIterator0;
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) iteratorArray0[1]);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) list0);
      iteratorArray0[2] = iterator0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String> iterator1 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) singletonListIterator0, (Iterator<? extends String>) iteratorArray0[0]);
      iteratorArray0[3] = iterator1;
      OrderedIterator<String> orderedIterator0 = new LoopingListIterator<String>(list0);
      iteratorArray0[4] = (Iterator<String>) orderedIterator0;
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(list0);
      iteratorArray0[5] = (Iterator<String>) loopingIterator0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("*w%MD|", "*w%MD|");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTimeoutException0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[8];
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException0;
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTimeoutException0;
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransactionRollbackException0;
      sQLTransientExceptionArray0[6] = (SQLTransientException) sQLTimeoutException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransientExceptionArray0[2]);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransactionRollbackException1);
      sQLTransientExceptionArray0[7] = (SQLTransientException) sQLTransientConnectionException0;
      IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
      IteratorUtils.emptyIterator();
      IteratorUtils.arrayIterator((SQLException[]) sQLTransientExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) orderedIterator0, 1008L);
      IteratorUtils.toString((Iterator<Properties>) skippingIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode.values();
      IteratorUtils.getIterator((Object) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "[]", 859, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>(hashMap0);
      IteratorUtils.size(entrySetMapIterator0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      vector0.add(instanceofPredicate0);
      Class<Properties> class1 = Properties.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      vector0.add(instanceofPredicate1);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(stack0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) loopingListIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate1);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      PredicateTransformer<Hashtable<SQLException, Object>> predicateTransformer0 = new PredicateTransformer<Hashtable<SQLException, Object>>(predicate1);
      Hashtable<SQLException, Object> hashtable0 = new Hashtable<SQLException, Object>(1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Hashtable<InstanceofPredicate, LinkedList<IIOMetadataNode>> hashtable0 = new Hashtable<InstanceofPredicate, LinkedList<IIOMetadataNode>>();
      EntrySetMapIterator<InstanceofPredicate, LinkedList<IIOMetadataNode>> entrySetMapIterator0 = new EntrySetMapIterator<InstanceofPredicate, LinkedList<IIOMetadataNode>>(hashtable0);
      IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) entrySetMapIterator0, 10);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(arrayList0);
      TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) loopingListIterator0, (Predicate<? super InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransactionRollbackException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransactionRollbackException>(orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) abstractMapIteratorDecorator0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) predicate0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      PredicateTransformer<Hashtable<SQLException, Object>> predicateTransformer0 = new PredicateTransformer<Hashtable<SQLException, Object>>(predicate0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OrderedMapIterator<SQLNonTransientConnectionException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientConnectionException>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("p%O}bo");
      iIOMetadataNode0.getLastChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MapIterator<Properties, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(vector0);
      Consumer<InstanceofPredicate> consumer0 = (Consumer<InstanceofPredicate>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      loopingListIterator0.forEachRemaining(consumer0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) loopingListIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLWarning>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      arrayList0.add((DataTruncation) null);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      stack0.add(instanceofPredicate0);
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(stack0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) loopingListIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0);
      PredicateTransformer<Hashtable<SQLException, Object>> predicateTransformer0 = new PredicateTransformer<Hashtable<SQLException, Object>>(predicate0);
      Hashtable<SQLException, Object> hashtable0 = new Hashtable<SQLException, Object>(1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("%$wqr.eK5|6");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("Node must not be null", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecException1.getStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("<", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Node must not be null");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "%$wqr.eK5|6", 0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("org.apache.commons.collections4.set.ListOrderedSet", "");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLInvalidAuthorizationSpecExceptionArray0[1]);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends String>) iteratorArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLFeatureNotSupportedException0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) sQLSyntaxErrorException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(properties0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) comparatorPredicate0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      PredicateTransformer<Properties> predicateTransformer0 = new PredicateTransformer<Properties>(predicate0);
      Properties properties0 = new Properties();
      PredicateTransformer.predicateTransformer((Predicate<? super SQLClientInfoException>) predicate0);
      Boolean boolean0 = predicateTransformer0.transform(properties0);
      ListIterator<Boolean> listIterator0 = IteratorUtils.singletonListIterator(boolean0);
      ListIterator<Boolean> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends Boolean>) listIterator0);
      Object[] objectArray0 = new Object[9];
      MapIterator<Object, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.find((Iterator<Object>) mapIterator0, (Predicate<? super Object>) predicate0);
      objectArray0[0] = null;
      objectArray0[1] = (Object) predicateTransformer0;
      objectArray0[2] = (Object) listIterator1;
      objectArray0[3] = (Object) properties0;
      objectArray0[4] = (Object) properties0;
      objectArray0[5] = (Object) properties0;
      objectArray0[6] = (Object) boolean0;
      objectArray0[7] = (Object) predicate0;
      objectArray0[8] = (Object) properties0;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("%$wqr.eK5|6");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("%$wqr.eK5|6", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException1.getStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecException1.printStackTrace();
      sQLInvalidAuthorizationSpecException0.spliterator();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Node must not be null");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "Node must not be null");
      sQLInvalidAuthorizationSpecException1.printStackTrace(printStream0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("%$wqr.eK5|6", "G*YNDJfGk9`Py\"");
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[9];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException3;
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("G*YNDJfGk9`Py\"", "G*YNDJfGk9`Py\"");
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException4;
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException3;
      sQLInvalidAuthorizationSpecExceptionArray0[8] = sQLInvalidAuthorizationSpecException1;
      IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.isEmpty(orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterator<Properties> iterator0 = EmptyIterator.emptyIterator();
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) iterator0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) resettableListIterator0, 1008L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.toString((Iterator<Properties>) skippingIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode.values();
      IteratorUtils.getIterator(iterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLDataException sQLDataException0 = new SQLDataException("Jtip5nWL>LZ", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      PredicateTransformer<Properties> predicateTransformer0 = new PredicateTransformer<Properties>(predicate0);
      Properties properties0 = new Properties();
      PredicateTransformer.predicateTransformer((Predicate<? super SQLClientInfoException>) predicate0);
      Boolean boolean0 = predicateTransformer0.transform(properties0);
      properties0.values();
      ListIterator<Boolean> listIterator0 = IteratorUtils.singletonListIterator(boolean0);
      ListIterator<Boolean> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends Boolean>) listIterator0);
      Object[] objectArray0 = new Object[9];
      MapIterator<Object, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.find((Iterator<Object>) mapIterator0, (Predicate<? super Object>) predicate0);
      objectArray0[0] = null;
      objectArray0[1] = (Object) predicateTransformer0;
      objectArray0[2] = (Object) listIterator1;
      objectArray0[3] = (Object) properties0;
      objectArray0[4] = (Object) properties0;
      objectArray0[5] = (Object) properties0;
      objectArray0[6] = (Object) boolean0;
      objectArray0[7] = (Object) predicate0;
      objectArray0[8] = (Object) properties0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(objectArray0, (-1728), (-1728));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      OrderedMapIterator<Integer, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, SQLFeatureNotSupportedException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<Integer, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, SQLFeatureNotSupportedException>(abstractOrderedMapIteratorDecorator0);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      TreeSet<InstanceofPredicate> treeSet1 = new TreeSet<InstanceofPredicate>((SortedSet<InstanceofPredicate>) treeSet0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) treeSet1);
      IteratorUtils.filteredIterator((Iterator<? extends Integer>) abstractMapIteratorDecorator0, (Predicate<? super Integer>) predicate0);
      Class<SQLDataException> class0 = SQLDataException.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class1 = Integer.class;
      classArray0[0] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[1] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[2] = class3;
      InstantiateFactory<SQLDataException> instantiateFactory0 = null;
      try {
        instantiateFactory0 = new InstantiateFactory<SQLDataException>(class0, classArray0, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 10;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      IteratorUtils.singletonIterator(sQLTimeoutException0);
      Vector<ComparatorPredicate.Criterion> vector0 = new Vector<ComparatorPredicate.Criterion>();
      IteratorUtils.loopingListIterator((List<ComparatorPredicate.Criterion>) vector0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      IteratorUtils.arrayListIterator(locale_FilteringModeArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 12, sQLTimeoutException0);
      ArrayIterator<SQLTransientException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLTransientException>(sQLFeatureNotSupportedException0, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.ListIteratorWrapper", "End index must not be greater than the array length");
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("x.k|eC@0{", sQLTransientConnectionException0);
      ConstantTransformer<Object, SQLTransientConnectionException> constantTransformer0 = new ConstantTransformer<Object, SQLTransientConnectionException>(sQLTransientConnectionException1);
      Transformer<Object, SQLTransientConnectionException> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) onePredicate0, (Transformer<? super Object, ? extends SQLTransientConnectionException>) constantTransformer0, (Transformer<? super Object, ? extends SQLTransientConnectionException>) constantTransformer0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      arrayList0.add((DataTruncation) null);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) zippingIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(stack0);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) reverseListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) iterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Node must not be null", sQLInvalidAuthorizationSpecExceptionArray0[0]);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException1;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.isEmpty(resettableListIterator1);
      IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) resettableListIterator0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      linkedList0.listIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("-[_Ha2Y-", "Node must not be null", (-581));
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      OrderedIterator<SQLTimeoutException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIteratorWrapper<SQLTransientException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientException>(orderedIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      listIteratorWrapper0.forEachRemaining(consumer0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLTransientException>) listIteratorWrapper0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 555, 555);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "h8-j=YJ'<~N(";
      String string1 = "Entry does not exist: ";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "Entry does not exist: ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("h8-j=YJ'<~N(", "h8-j=YJ'<~N(", sQLInvalidAuthorizationSpecException0);
      int int0 = 14;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0, 14, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLIntegrityConstraintViolationException>(hashMap0);
      IteratorUtils.size(entrySetMapIterator0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("@e5dSIb", "@e5dSIb");
      sQLTransientExceptionArray0[1] = sQLTransientException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientConnectionException0);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.ComparatorPredicate$Criterion");
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "", 0);
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("A.B^xBK|q@T%_Ym", "org.apache.commons.collections4.functors.ComparatorPredicate$Criterion");
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTimeoutException2;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTimeoutException2);
      sQLTransientExceptionArray0[6] = (SQLTransientException) sQLTransactionRollbackException1;
      IteratorUtils.arrayListIterator(sQLTransientExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int int0 = (-2930);
      SQLWarning sQLWarning0 = new SQLWarning("ListIteratorWrapper does not support optional operations of ListIterator.", "", (-2930));
      MockThrowable mockThrowable0 = new MockThrowable("X)M*rC+q*e!/j|%I a'", sQLWarning0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("b,th~I*m.C|x", mockThrowable0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("b,th~I*m.C|x", "b,th~I*m.C|x", hashMap0, sQLTransactionRollbackException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      int int1 = 1968;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("ListIterator must not be null", "", 1968, hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("ListIteratorWrapper does not support optional operations of ListIterator.", (String) null, (-2930), hashMap0, sQLWarning0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLWarning> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends SQLWarning>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLIntegrityConstraintViolationException, SQLWarning>) orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      int int0 = 805;
      SQLDataException sQLDataException0 = new SQLDataException("No value can be removed at present", "InstantiateTransformer: Constructor must be public");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("No value can be removed at present", "No value can be removed at present", 805, sQLDataException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("InstantiateTransformer: Constructor must be public", "No value can be removed at present", 1);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLTimeoutException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("w~No9FZl2", "`O0&nM:=", 1, sQLTimeoutException2);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("No value can be removed at present", "Entry does not exist: ");
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException(sQLDataException0);
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      SQLTimeoutException sQLTimeoutException8 = new SQLTimeoutException("^:zSN>e", "99b:?;wY}kD5g7}:`", 1, sQLTimeoutException4);
      sQLTimeoutException4.setNextException(sQLTimeoutException5);
      sQLTimeoutExceptionArray0[8] = sQLTimeoutException8;
      IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 1);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        sQLTimeoutException7.initCause(sQLTimeoutException6);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLTimeoutException: No value can be removed at present
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyOrderedIterator();
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[1];
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator");
      stringTokenizerArray0[0] = stringTokenizer0;
      stringTokenizer0.nextToken();
      stringTokenizer0.hasMoreTokens();
      int int0 = 286;
      int int1 = 3410;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, 286, 3410);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransactionRollbackException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransactionRollbackException>(orderedMapIterator0);
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-474), true, true, 1272, 1272);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("u?h1Fp.Q'", "[!#g[`yZ(|.f*", 1272, dataTruncation0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLSyntaxErrorException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("(|7fR$G;qr6M3[6I", ">Blson,*pu2.l9+vR");
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, (Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, (Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0);
      IteratorUtils.size(zippingIterator0);
      OrderedMapIterator<Integer, ArrayList<Locale.FilteringMode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Integer, ArrayList<Locale.FilteringMode>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, ArrayList<Locale.FilteringMode>>(orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(">Blson,*pu2.l9+vR");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 0, 80);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      IteratorUtils.singletonIterator(sQLTimeoutException0);
      Vector<ComparatorPredicate.Criterion> vector0 = new Vector<ComparatorPredicate.Criterion>();
      IteratorUtils.loopingListIterator((List<ComparatorPredicate.Criterion>) vector0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Stack<String> stack0 = new Stack<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>(stack0);
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(arrayList0);
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = (Iterator<String>) loopingIterator0;
      iteratorArray0[3] = iterator0;
      iteratorArray0[4] = (Iterator<String>) orderedIterator0;
      iteratorArray0[5] = (Iterator<String>) loopingIterator0;
      iteratorArray0[6] = (Iterator<String>) orderedIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MapIterator<Properties, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Properties>) mapIterator0);
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) resettableListIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) linkedList0);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) resettableListIterator0);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(list0);
      Enumeration<String> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends String>) loopingListIterator0);
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration1, (Collection<? super String>) linkedList0);
      IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>) resettableListIterator0, (Iterator<? extends String>) resettableListIterator0);
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(list0);
      Iterator<String> iterator1 = EmptyIterator.emptyIterator();
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<String>) loopingListIterator0;
      iteratorArray0[1] = iterator0;
      Iterator<String> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      Predicate<String> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends String>) iterator1, (Predicate<? super String>) predicate0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) iterator2, (Iterator<? extends String>) loopingIterator0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-474), true, true, 1272, 1272);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("u?h1Fp.Q'", "[!#g[`yZ(|.f*", 1272, dataTruncation0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("[!#g[`yZ(|.f*", sQLSyntaxErrorException0.getSQLState());
      assertEquals("u?h1Fp.Q'", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: u?h1Fp.Q'", sQLSyntaxErrorException0.toString());
      assertEquals(1272, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      Iterator<String> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Dv7vN#}r6~+-EX{k";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator";
      stringArray0[3] = "@>cH^AJaB`6hN=";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertEquals(4, stringArray0.length);
      assertNotNull(resettableListIterator0);
      
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertNotNull(sQLTransientConnectionException1);
      
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", "", sQLTransientConnectionException1);
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException2.equals((Object)sQLTransientConnectionException0));
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals("", sQLTransientConnectionException2.getSQLState());
      assertEquals("", sQLTransientConnectionException2.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException2.toString());
      assertEquals(0, sQLTransientConnectionException2.getErrorCode());
      assertNotNull(sQLTransientConnectionException2);
      
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("The predicate and closure arrays must be the same size", "Dv7vN#}r6~+-EX{k");
      assertFalse(sQLTransientConnectionException3.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException3.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException3.equals((Object)sQLTransientConnectionException0));
      assertEquals(0, sQLTransientConnectionException3.getErrorCode());
      assertEquals("The predicate and closure arrays must be the same size", sQLTransientConnectionException3.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: The predicate and closure arrays must be the same size", sQLTransientConnectionException3.toString());
      assertEquals("Dv7vN#}r6~+-EX{k", sQLTransientConnectionException3.getSQLState());
      assertNotNull(sQLTransientConnectionException3);
      
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("");
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException2));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException4.equals((Object)sQLTransientConnectionException3));
      assertNull(sQLTransientConnectionException4.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException4.toString());
      assertEquals("", sQLTransientConnectionException4.getMessage());
      assertEquals(0, sQLTransientConnectionException4.getErrorCode());
      assertNotNull(sQLTransientConnectionException4);
      
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      assertFalse(resettableListIterator1.hasPrevious());
      assertTrue(resettableListIterator1.hasNext());
      assertEquals(5, sQLTransientConnectionExceptionArray0.length);
      assertNotNull(resettableListIterator1);
      
      Predicate<SQLException> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientException>) resettableListIterator1, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      SQLDataException sQLDataException0 = new SQLDataException("Array class must not be null");
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Array class must not be null", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Array class must not be null", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("Array class must not be null", "F`&!mlR6x}ZvZvcKw", 4474);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertEquals(4474, sQLDataException1.getErrorCode());
      assertEquals("Array class must not be null", sQLDataException1.getMessage());
      assertEquals("F`&!mlR6x}ZvZvcKw", sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException: Array class must not be null", sQLDataException1.toString());
      assertNotNull(sQLDataException1);
      
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException();
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      assertFalse(sQLDataException2.equals((Object)sQLDataException0));
      assertNull(sQLDataException2.getMessage());
      assertEquals(0, sQLDataException2.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException2.toString());
      assertNull(sQLDataException2.getSQLState());
      assertNotNull(sQLDataException2);
      
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("Array class must not be null", "Estimated size must be greater than 0", (-96));
      assertFalse(sQLDataException3.equals((Object)sQLDataException0));
      assertFalse(sQLDataException3.equals((Object)sQLDataException2));
      assertFalse(sQLDataException3.equals((Object)sQLDataException1));
      assertEquals((-96), sQLDataException3.getErrorCode());
      assertEquals("Array class must not be null", sQLDataException3.getMessage());
      assertEquals("Estimated size must be greater than 0", sQLDataException3.getSQLState());
      assertEquals("java.sql.SQLDataException: Array class must not be null", sQLDataException3.toString());
      assertNotNull(sQLDataException3);
      
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException(sQLDataException0);
      assertFalse(sQLDataException0.equals((Object)sQLDataException3));
      assertFalse(sQLDataException0.equals((Object)sQLDataException2));
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException4.equals((Object)sQLDataException0));
      assertFalse(sQLDataException4.equals((Object)sQLDataException2));
      assertFalse(sQLDataException4.equals((Object)sQLDataException3));
      assertFalse(sQLDataException4.equals((Object)sQLDataException1));
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Array class must not be null", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Array class must not be null", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException4.getErrorCode());
      assertEquals("java.sql.SQLDataException: Array class must not be null", sQLDataException4.getMessage());
      assertEquals("java.sql.SQLDataException: java.sql.SQLDataException: Array class must not be null", sQLDataException4.toString());
      assertNull(sQLDataException4.getSQLState());
      assertNotNull(sQLDataException4);
      
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("Estimated size must be greater than 0", sQLDataException3);
      assertFalse(sQLDataException3.equals((Object)sQLDataException0));
      assertFalse(sQLDataException3.equals((Object)sQLDataException4));
      assertFalse(sQLDataException3.equals((Object)sQLDataException2));
      assertFalse(sQLDataException3.equals((Object)sQLDataException1));
      assertFalse(sQLDataException5.equals((Object)sQLDataException1));
      assertFalse(sQLDataException5.equals((Object)sQLDataException0));
      assertFalse(sQLDataException5.equals((Object)sQLDataException3));
      assertFalse(sQLDataException5.equals((Object)sQLDataException4));
      assertFalse(sQLDataException5.equals((Object)sQLDataException2));
      assertEquals((-96), sQLDataException3.getErrorCode());
      assertEquals("Array class must not be null", sQLDataException3.getMessage());
      assertEquals("Estimated size must be greater than 0", sQLDataException3.getSQLState());
      assertEquals("java.sql.SQLDataException: Array class must not be null", sQLDataException3.toString());
      assertEquals("java.sql.SQLDataException: Estimated size must be greater than 0", sQLDataException5.toString());
      assertEquals(0, sQLDataException5.getErrorCode());
      assertEquals("Estimated size must be greater than 0", sQLDataException5.getMessage());
      assertNull(sQLDataException5.getSQLState());
      assertNotNull(sQLDataException5);
      
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException();
      assertFalse(sQLDataException6.equals((Object)sQLDataException0));
      assertFalse(sQLDataException6.equals((Object)sQLDataException1));
      assertFalse(sQLDataException6.equals((Object)sQLDataException3));
      assertFalse(sQLDataException6.equals((Object)sQLDataException4));
      assertFalse(sQLDataException6.equals((Object)sQLDataException2));
      assertFalse(sQLDataException6.equals((Object)sQLDataException5));
      assertNull(sQLDataException6.getSQLState());
      assertNull(sQLDataException6.getMessage());
      assertEquals(0, sQLDataException6.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException6.toString());
      assertNotNull(sQLDataException6);
      
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException("Estimated size must be greater than 0", "Estimated size must be greater than 0", (-96));
      assertFalse(sQLDataException7.equals((Object)sQLDataException1));
      assertFalse(sQLDataException7.equals((Object)sQLDataException4));
      assertFalse(sQLDataException7.equals((Object)sQLDataException3));
      assertFalse(sQLDataException7.equals((Object)sQLDataException2));
      assertFalse(sQLDataException7.equals((Object)sQLDataException0));
      assertFalse(sQLDataException7.equals((Object)sQLDataException6));
      assertFalse(sQLDataException7.equals((Object)sQLDataException5));
      assertEquals("java.sql.SQLDataException: Estimated size must be greater than 0", sQLDataException7.toString());
      assertEquals("Estimated size must be greater than 0", sQLDataException7.getMessage());
      assertEquals("Estimated size must be greater than 0", sQLDataException7.getSQLState());
      assertEquals((-96), sQLDataException7.getErrorCode());
      assertNotNull(sQLDataException7);
      
      sQLDataExceptionArray0[7] = sQLDataException7;
      SQLDataException sQLDataException8 = new SQLDataException("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", "Array class must not be null", 4474, sQLDataException0);
      assertFalse(sQLDataException8.equals((Object)sQLDataException7));
      assertFalse(sQLDataException8.equals((Object)sQLDataException2));
      assertFalse(sQLDataException8.equals((Object)sQLDataException3));
      assertFalse(sQLDataException8.equals((Object)sQLDataException6));
      assertFalse(sQLDataException8.equals((Object)sQLDataException5));
      assertFalse(sQLDataException8.equals((Object)sQLDataException4));
      assertFalse(sQLDataException8.equals((Object)sQLDataException0));
      assertFalse(sQLDataException8.equals((Object)sQLDataException1));
      assertFalse(sQLDataException0.equals((Object)sQLDataException3));
      assertFalse(sQLDataException0.equals((Object)sQLDataException4));
      assertFalse(sQLDataException0.equals((Object)sQLDataException2));
      assertFalse(sQLDataException0.equals((Object)sQLDataException6));
      assertFalse(sQLDataException0.equals((Object)sQLDataException5));
      assertFalse(sQLDataException0.equals((Object)sQLDataException7));
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertEquals("Array class must not be null", sQLDataException8.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", sQLDataException8.getMessage());
      assertEquals(4474, sQLDataException8.getErrorCode());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", sQLDataException8.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Array class must not be null", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Array class must not be null", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException8);
      
      sQLDataExceptionArray0[8] = sQLDataException8;
      sQLDataException5.setNextException(sQLDataException8);
      assertFalse(sQLDataException8.equals((Object)sQLDataException7));
      assertFalse(sQLDataException8.equals((Object)sQLDataException2));
      assertFalse(sQLDataException8.equals((Object)sQLDataException3));
      assertFalse(sQLDataException8.equals((Object)sQLDataException6));
      assertFalse(sQLDataException8.equals((Object)sQLDataException5));
      assertFalse(sQLDataException8.equals((Object)sQLDataException4));
      assertFalse(sQLDataException8.equals((Object)sQLDataException0));
      assertFalse(sQLDataException8.equals((Object)sQLDataException1));
      assertFalse(sQLDataException0.equals((Object)sQLDataException3));
      assertFalse(sQLDataException0.equals((Object)sQLDataException4));
      assertFalse(sQLDataException0.equals((Object)sQLDataException2));
      assertFalse(sQLDataException0.equals((Object)sQLDataException6));
      assertFalse(sQLDataException0.equals((Object)sQLDataException5));
      assertFalse(sQLDataException0.equals((Object)sQLDataException8));
      assertFalse(sQLDataException0.equals((Object)sQLDataException7));
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException3.equals((Object)sQLDataException7));
      assertFalse(sQLDataException3.equals((Object)sQLDataException0));
      assertFalse(sQLDataException3.equals((Object)sQLDataException5));
      assertFalse(sQLDataException3.equals((Object)sQLDataException6));
      assertFalse(sQLDataException3.equals((Object)sQLDataException8));
      assertFalse(sQLDataException3.equals((Object)sQLDataException4));
      assertFalse(sQLDataException3.equals((Object)sQLDataException2));
      assertFalse(sQLDataException3.equals((Object)sQLDataException1));
      assertFalse(sQLDataException5.equals((Object)sQLDataException6));
      assertFalse(sQLDataException5.equals((Object)sQLDataException7));
      assertFalse(sQLDataException5.equals((Object)sQLDataException8));
      assertFalse(sQLDataException5.equals((Object)sQLDataException1));
      assertFalse(sQLDataException5.equals((Object)sQLDataException3));
      assertFalse(sQLDataException5.equals((Object)sQLDataException0));
      assertFalse(sQLDataException5.equals((Object)sQLDataException4));
      assertFalse(sQLDataException5.equals((Object)sQLDataException2));
      assertEquals("Array class must not be null", sQLDataException8.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", sQLDataException8.getMessage());
      assertEquals(4474, sQLDataException8.getErrorCode());
      assertEquals("java.sql.SQLDataException: org.apache.commons.collections4.functors.PrototypeFactory$PrototypeSerializationFactory", sQLDataException8.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("Array class must not be null", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: Array class must not be null", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals((-96), sQLDataException3.getErrorCode());
      assertEquals("Array class must not be null", sQLDataException3.getMessage());
      assertEquals("Estimated size must be greater than 0", sQLDataException3.getSQLState());
      assertEquals("java.sql.SQLDataException: Array class must not be null", sQLDataException3.toString());
      assertEquals("java.sql.SQLDataException: Estimated size must be greater than 0", sQLDataException5.toString());
      assertEquals(0, sQLDataException5.getErrorCode());
      assertEquals("Estimated size must be greater than 0", sQLDataException5.getMessage());
      assertNull(sQLDataException5.getSQLState());
      assertNotSame(sQLDataException8, sQLDataException7);
      assertNotSame(sQLDataException8, sQLDataException2);
      assertNotSame(sQLDataException8, sQLDataException3);
      assertNotSame(sQLDataException8, sQLDataException6);
      assertNotSame(sQLDataException8, sQLDataException5);
      assertNotSame(sQLDataException8, sQLDataException4);
      assertNotSame(sQLDataException8, sQLDataException0);
      assertNotSame(sQLDataException8, sQLDataException1);
      assertNotSame(sQLDataException0, sQLDataException3);
      assertNotSame(sQLDataException0, sQLDataException4);
      assertNotSame(sQLDataException0, sQLDataException2);
      assertNotSame(sQLDataException0, sQLDataException6);
      assertNotSame(sQLDataException0, sQLDataException5);
      assertNotSame(sQLDataException0, sQLDataException8);
      assertNotSame(sQLDataException0, sQLDataException7);
      assertNotSame(sQLDataException0, sQLDataException1);
      assertNotSame(sQLDataException3, sQLDataException7);
      assertNotSame(sQLDataException3, sQLDataException0);
      assertNotSame(sQLDataException3, sQLDataException5);
      assertNotSame(sQLDataException3, sQLDataException6);
      assertNotSame(sQLDataException3, sQLDataException8);
      assertNotSame(sQLDataException3, sQLDataException4);
      assertNotSame(sQLDataException3, sQLDataException2);
      assertNotSame(sQLDataException3, sQLDataException1);
      assertNotSame(sQLDataException5, sQLDataException6);
      assertNotSame(sQLDataException5, sQLDataException7);
      assertNotSame(sQLDataException5, sQLDataException8);
      assertNotSame(sQLDataException5, sQLDataException1);
      assertNotSame(sQLDataException5, sQLDataException3);
      assertNotSame(sQLDataException5, sQLDataException0);
      assertNotSame(sQLDataException5, sQLDataException4);
      assertNotSame(sQLDataException5, sQLDataException2);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, (-3573));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[4];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("%$wqr.eK5|6");
      assertEquals("%$wqr.eK5|6", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: %$wqr.eK5|6", sQLInvalidAuthorizationSpecException0.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("Node must not be null", sQLInvalidAuthorizationSpecException0);
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals("%$wqr.eK5|6", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: %$wqr.eK5|6", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("Node must not be null", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Node must not be null", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      StackTraceElement[] stackTraceElementArray0 = sQLInvalidAuthorizationSpecException1.getStackTrace();
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals("%$wqr.eK5|6", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: %$wqr.eK5|6", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("Node must not be null", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Node must not be null", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals(14, stackTraceElementArray0.length);
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertNotNull(stackTraceElementArray0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals("%$wqr.eK5|6", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: %$wqr.eK5|6", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("Node must not be null", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Node must not be null", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Node must not be null", sQLInvalidAuthorizationSpecException2.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException2.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException2.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLInvalidAuthorizationSpecException: Node must not be null", sQLInvalidAuthorizationSpecException2.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException2);
      
      sQLInvalidAuthorizationSpecException1.printStackTrace();
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertEquals("%$wqr.eK5|6", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: %$wqr.eK5|6", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("Node must not be null", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Node must not be null", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException2);
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException2);
      
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      Spliterator<Throwable> spliterator0 = sQLInvalidAuthorizationSpecException0.spliterator();
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertEquals("%$wqr.eK5|6", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: %$wqr.eK5|6", sQLInvalidAuthorizationSpecException0.toString());
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException2);
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertNotNull(spliterator0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("%$wqr.eK5|6");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "%$wqr.eK5|6");
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      sQLInvalidAuthorizationSpecException1.printStackTrace(printStream0);
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertEquals("%$wqr.eK5|6", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: %$wqr.eK5|6", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("Node must not be null", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Node must not be null", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException2);
      assertNotSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.bidimap.TreeBidiMap$Node", "%$wqr.eK5|6");
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertEquals("org.apache.commons.collections4.bidimap.TreeBidiMap$Node", sQLInvalidAuthorizationSpecException3.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.apache.commons.collections4.bidimap.TreeBidiMap$Node", sQLInvalidAuthorizationSpecException3.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException3.getErrorCode());
      assertEquals("%$wqr.eK5|6", sQLInvalidAuthorizationSpecException3.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException3);
      
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      assertTrue(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertEquals(4, sQLInvalidAuthorizationSpecExceptionArray0.length);
      assertNotNull(resettableListIterator1);
      
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator1);
      assertTrue(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(boolean0);
      assertEquals(4, sQLInvalidAuthorizationSpecExceptionArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator", "GvTBN6N!p", 0, longArray0, sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator", batchUpdateException0.toString());
      assertEquals("GvTBN6N!p", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertNotNull(batchUpdateException0);
      
      batchUpdateException0.addSuppressed(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator", batchUpdateException0.toString());
      assertEquals("GvTBN6N!p", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      batchUpdateException0.addSuppressed(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator", batchUpdateException0.toString());
      assertEquals("GvTBN6N!p", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("GvTBN6N!p", "GvTBN6N!p", batchUpdateException0);
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator", batchUpdateException0.toString());
      assertEquals("GvTBN6N!p", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("GvTBN6N!p", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("GvTBN6N!p", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: GvTBN6N!p", sQLInvalidAuthorizationSpecException0.toString());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      OrderedMapIterator<StringTokenizer, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(7, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(7, sQLDataExceptionArray0.length);
      assertNotNull(objectArrayIterator0);
      
      objectArrayIterator0.reset();
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(7, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(7, sQLDataExceptionArray0.length);
      
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MapIterator<Properties, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) mapIterator0);
      assertNotNull(enumeration0);
      
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      assertNotNull(iterator0);
      
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((InstanceofPredicate) null);
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(boolean0);
      
      Vector<ComparatorPredicate.Criterion> vector1 = new Vector<ComparatorPredicate.Criterion>();
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertNotNull(vector1);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$oc");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ResettableListIterator<ComparatorPredicate.Criterion> resettableListIterator0 = IteratorUtils.loopingListIterator((List<ComparatorPredicate.Criterion>) vector1);
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.IfClosure", "org.apache.commons.collections4.functors.IfClosure");
      assertEquals("org.apache.commons.collections4.functors.IfClosure", sQLTransactionRollbackException0.getSQLState());
      assertEquals("org.apache.commons.collections4.functors.IfClosure", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.commons.collections4.functors.IfClosure", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MapIterator<Properties, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) mapIterator0);
      assertNotNull(enumeration0);
      
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0);
      assertNotNull(iterator0);
      
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, loopingListIterator0.size());
      assertFalse(loopingListIterator0.hasPrevious());
      assertFalse(loopingListIterator0.hasNext());
      assertNotNull(loopingListIterator0);
      
      Consumer<InstanceofPredicate> consumer0 = (Consumer<InstanceofPredicate>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vector0.toArray((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      assertNotNull(predicate0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)100;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)80, (byte)100}, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      
      PredicateTransformer<Properties> predicateTransformer0 = new PredicateTransformer<Properties>(predicate0);
      assertNotNull(predicateTransformer0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Transformer<SQLClientInfoException, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super SQLClientInfoException>) predicate0);
      assertNotNull(transformer0);
      
      Boolean boolean1 = predicateTransformer0.transform(properties0);
      assertFalse(boolean1.equals((Object)boolean0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      ListIterator<Boolean> listIterator0 = IteratorUtils.singletonListIterator(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      ListIterator<Boolean> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends Boolean>) listIterator0);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertTrue(listIterator1.hasNext());
      assertNotNull(listIterator1);
      
      Object[] objectArray0 = new Object[9];
      MapIterator<Object, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Object object0 = IteratorUtils.find((Iterator<Object>) mapIterator0, (Predicate<? super Object>) predicate0);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) predicateTransformer0;
      objectArray0[2] = (Object) listIterator1;
      objectArray0[3] = (Object) properties0;
      Enumeration<Object> enumeration0 = IteratorUtils.asEnumeration((Iterator<?>) listIterator0);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(listIterator0.equals((Object)listIterator1));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(enumeration0);
      
      objectArray0[4] = (Object) properties0;
      objectArray0[5] = (Object) properties0;
      objectArray0[6] = (Object) boolean1;
      objectArray0[7] = (Object) predicate0;
      objectArray0[8] = (Object) properties0;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((DataTruncation) null);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      assertNotNull(predicate0);
      
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(listIterator0);
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      assertNotNull(iterator0);
      
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      assertNotNull(zippingIterator0);
      
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) zippingIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      String string0 = "";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "");
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      String string1 = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("' does not exist", (String) null, 14, sQLInvalidAuthorizationSpecException0);
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(14, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ' does not exist", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("' does not exist", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 1402, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((DataTruncation) null);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) arrayList0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      assertNotNull(predicate0);
      
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      assertNotNull(iterator0);
      
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      assertNotNull(zippingIterator0);
      
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) zippingIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      
      String string0 = "";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "");
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      sQLDataExceptionArray0[0] = sQLDataException0;
      StackTraceElement[] stackTraceElementArray0 = sQLDataException0.getStackTrace();
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(14, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      SQLDataException sQLDataException1 = new SQLDataException("", "");
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertEquals("", sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("", sQLDataException1.getMessage());
      assertNotNull(sQLDataException1);
      
      Spliterator<Throwable> spliterator0 = sQLDataException1.spliterator();
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertEquals("", sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("", sQLDataException1.getMessage());
      assertNotSame(sQLDataException1, sQLDataException0);
      assertNotNull(spliterator0);
      
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = (SQLDataException)sQLDataException0.initCause(sQLDataException1);
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("", sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException: ", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("", sQLDataException1.getMessage());
      assertNull(sQLDataException2.getSQLState());
      assertNull(sQLDataException2.getMessage());
      assertEquals(0, sQLDataException2.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException2.toString());
      assertSame(sQLDataException0, sQLDataException2);
      assertNotSame(sQLDataException0, sQLDataException1);
      assertNotSame(sQLDataException1, sQLDataException0);
      assertNotSame(sQLDataException1, sQLDataException2);
      assertSame(sQLDataException2, sQLDataException0);
      assertNotSame(sQLDataException2, sQLDataException1);
      assertNotNull(sQLDataException2);
      
      SQLDataException sQLDataException3 = new SQLDataException("", "", 0, sQLDataException0);
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException3.equals((Object)sQLDataException1));
      assertFalse(sQLDataException3.equals((Object)sQLDataException0));
      assertFalse(sQLDataException3.equals((Object)sQLDataException2));
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(0, sQLDataException3.getErrorCode());
      assertEquals("java.sql.SQLDataException: ", sQLDataException3.toString());
      assertEquals("", sQLDataException3.getSQLState());
      assertEquals("", sQLDataException3.getMessage());
      assertNotNull(sQLDataException3);
      
      sQLDataExceptionArray0[2] = sQLDataException3;
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      assertFalse(sQLDataException0.equals((Object)sQLDataException3));
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(14, stackTraceElementArray0.length);
      assertNotSame(sQLDataException0, sQLDataException3);
      assertSame(sQLDataException0, sQLDataException2);
      assertNotSame(sQLDataException0, sQLDataException1);
      
      Spliterator<Throwable> spliterator1 = sQLDataException0.spliterator();
      assertFalse(sQLDataException0.equals((Object)sQLDataException3));
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(spliterator1.equals((Object)spliterator0));
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotSame(sQLDataException0, sQLDataException3);
      assertSame(sQLDataException0, sQLDataException2);
      assertNotSame(sQLDataException0, sQLDataException1);
      assertNotSame(spliterator1, spliterator0);
      assertNotNull(spliterator1);
      
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      assertEquals(3, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(3, sQLDataExceptionArray0.length);
      assertNotNull(objectArrayIterator0);
      
      objectArrayIterator0.reset();
      assertEquals(3, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(3, sQLDataExceptionArray0.length);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) objectArrayIterator0);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(3, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(3, sQLDataExceptionArray0.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(objectArray0);
      
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      boolean boolean0 = linkedList0.remove((Object) sQLWarning0);
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(resettableIterator0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, true);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonIterator0.forEachRemaining(consumer0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      int int0 = 3;
      ArrayListIterator<SQLTimeoutException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTimeoutException>(instanceofPredicate1, 3, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) listIterator1, (-2028L), (-2177L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = true;
      DataTruncation dataTruncation0 = new DataTruncation((-2586), true, true, (-2586), 0);
      int int0 = 2038;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, 2038);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ConstantTransformer<SQLNonTransientException, String> constantTransformer0 = new ConstantTransformer<SQLNonTransientException, String>((String) null);
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      UnaryOperator<StringTokenizer> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      ArrayList<StringTokenizer> arrayList1 = new ArrayList<StringTokenizer>();
      ConstantTransformer.constantTransformer(arrayList1);
      arrayList0.listIterator(0);
      arrayList0.iterator();
      ConstantTransformer.constantTransformer(arrayList0);
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, String>) constantTransformer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ArrayIterator<SQLTransactionRollbackException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLTransactionRollbackException>(sQLRecoverableException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      LoopingListIterator<SQLNonTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLNonTransientConnectionException>(arrayList0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("PbjQOd~IYqgP", "z@?Z+K1");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("PbjQOd~IYqgP", sQLInvalidAuthorizationSpecException0);
      arrayList0.add(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) loopingListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 5192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Object object0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) listIterator0;
      objectArray0[1] = (Object) listIterator0;
      objectArray0[2] = (Object) listIterator0;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) identityPredicate0);
      objectArray0[3] = null;
      objectArray0[4] = (Object) listIterator0;
      objectArray0[5] = (Object) listIterator0;
      objectArray0[6] = (Object) listIterator0;
      objectArray0[7] = (Object) listIterator0;
      objectArray0[8] = (Object) listIterator0;
      int int0 = (-480);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(objectArray0, (-480));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.map.AbstractIterableMap");
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.FilteringMode>>((EnumSet<Locale.FilteringMode>) null);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.find((Iterator<EnumSet<Locale.FilteringMode>>) singletonIterator0, (Predicate<? super EnumSet<Locale.FilteringMode>>) predicate0);
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      arrayList0.add((DataTruncation) null);
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      IteratorUtils.find((Iterator<Integer>) null, (Predicate<? super Integer>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) orderedIterator0, 1008L);
      IteratorUtils.toString((Iterator<Properties>) skippingIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode.values();
      IteratorUtils.getIterator(locale_FilteringMode0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MapIterator<Integer, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<Integer> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.find((Iterator<Integer>) mapIterator0, (Predicate<? super Integer>) predicate0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 2);
      ListIterator<SQLSyntaxErrorException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) listIterator0;
      String string0 = "";
      Throwable throwable0 = null;
      SQLDataException sQLDataException0 = new SQLDataException("", "", (Throwable) null);
      int int0 = 100;
      ArrayListIterator<SQLSyntaxErrorException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLSyntaxErrorException>(sQLDataException0, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      String string0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, sQLFeatureNotSupportedException0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) sQLSyntaxErrorException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(properties0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) comparatorPredicate0);
      // Undeclared exception!
      try { 
        properties1.put((Object) null, comparatorPredicate_Criterion0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }
}
