/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 07:51:59 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.collection.AbstractCollectionDecorator");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) singletonListIterator0, (Transformer<? super SQLDataException, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      SQLDataException sQLDataException0 = new SQLDataException("<", ":it5`|7)", 41);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(":it5`|7)", "<", 41);
      sQLDataExceptionArray0[1] = sQLDataException1;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      sQLDataException1.getStackTrace();
      objectArrayListIterator0.reset();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      sQLDataException1.setNextException(sQLClientInfoException0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLDataException>) objectArrayListIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "prefix may not be null", hashMap0, sQLNonTransientException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("OuVztFwMIW~bI", "xa:p1", hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("da Xt0,", "Comparator must not be null.", hashMap0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", hashMap0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(hashMap0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(hashtable0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 18);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      ArrayDeque<InstanceofPredicate> arrayDeque1 = arrayDeque0.clone();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque1);
      predicateArray0[0] = predicate0;
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(instanceofPredicate0, defaultEquator0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      PredicateTransformer<SQLDataException> predicateTransformer0 = new PredicateTransformer<SQLDataException>(predicate0);
      SQLDataException sQLDataException0 = new SQLDataException("OuVztFwMIW~bI", "%?", 0, sQLClientInfoException0);
      Boolean boolean0 = predicateTransformer0.transform(sQLDataException0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.constantTransformer(boolean0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      predicateArray0[2] = (Predicate<Object>) transformerPredicate0;
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicateArray0[1]);
      predicateArray0[12] = (Predicate<Object>) transformedPredicate0;
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicateArray0[2], predicate1);
      predicateArray0[4] = (Predicate<Object>) orPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[5] = (Predicate<Object>) allPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[6] = (Predicate<Object>) anyPredicate0;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 7);
      DefaultEquator<Object> defaultEquator1 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(class0, defaultEquator1);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 7);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[0] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[1] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[2] = class3;
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      classArray0[3] = class4;
      Class<BatchUpdateException> class5 = BatchUpdateException.class;
      classArray0[4] = class5;
      Class<BatchUpdateException> class6 = BatchUpdateException.class;
      classArray0[5] = class6;
      Class<BatchUpdateException> class7 = BatchUpdateException.class;
      classArray0[6] = class7;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("OuVztFwMIW~bI", classArray0, (Object[]) null);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(equalPredicate1, invokerTransformer0, invokerTransformer0);
      transformerArray0[0] = (Transformer<Object, String>) ifTransformer0;
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("OuVztFwMIW~bI");
      transformerArray0[1] = transformer1;
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("da Xt0,");
      transformerArray0[2] = (Transformer<Object, String>) constantTransformer0;
      Transformer<Object, String> transformer2 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) transformerArray0);
      transformerArray0[3] = transformer2;
      Transformer<Object, String> transformer3 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[4] = transformer3;
      ConstantTransformer<Object, String> constantTransformer1 = new ConstantTransformer<Object, String>("%?");
      transformerArray0[5] = (Transformer<Object, String>) constantTransformer1;
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Transformer<Object, String> transformer4 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap1);
      transformerArray0[6] = transformer4;
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, transformer4);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) objectArrayIterator0, (Transformer<? super SQLClientInfoException, String>) switchTransformer0, "peek() or element() called before remove()", "peek() or element() called before remove()", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      TreeSet<Properties> treeSet0 = new TreeSet<Properties>();
      stack0.removeAll(treeSet0);
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(stack0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("NodeList must not be null", (Throwable) null);
      stack0.add(sQLInvalidAuthorizationSpecException0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingListIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, true);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>((Factory<? extends String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) factoryTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      IteratorUtils.getIterator("5AcK`9O1k\"7w");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("zMp*cf5F,x{c00\"R8");
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList0);
      loopingListIterator0.next();
      IteratorUtils.get((Iterator<String>) loopingListIterator0, 645);
      LoopingListIterator<String> loopingListIterator1 = new LoopingListIterator<String>(linkedList0);
      IteratorUtils.get((Iterator<String>) loopingListIterator1, 125);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.getIterator("8w$");
      TreeSet<SQLWarning> treeSet0 = new TreeSet<SQLWarning>();
      SingletonIterator<TreeSet<SQLWarning>> singletonIterator0 = new SingletonIterator<TreeSet<SQLWarning>>(treeSet0, true);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<TreeSet<SQLWarning>>) singletonIterator0, (Closure<? super TreeSet<SQLWarning>>) chainedClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, class0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      IteratorUtils.getIterator("5AcK`9O1k\"7w");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.collection.UnmodifiableCollection", "org.apache.commons.collections4.collection.UnmodifiableCollection", 1210);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      IteratorUtils.toArray(iterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Y<h", "org.apache.commons.collections4.collection.UnmodifiableCollection", sQLFeatureNotSupportedException0);
      Transformer<SQLException, SQLTransactionRollbackException> transformer0 = InvokerTransformer.invokerTransformer("Y<h", (Class<?>[]) null, (Object[]) null);
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Y<h' on 'class java.sql.SQLTransactionRollbackException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, class0);
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Class<Properties>>) null, (Transformer<? super Class<Properties>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      IteratorUtils.getIterator("5AcK`9O1k\"7w");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("zMp*cf5F,x{c00\"R8");
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList0);
      linkedList0.add((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) loopingListIterator0, 645);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MapIterator<SQLRecoverableException, Locale.FilteringMode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) mapIterator0, (Class<SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException("");
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      ListIterator<SQLDataException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLDataException>) listIterator1, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList0);
      IteratorUtils.get((Iterator<String>) loopingListIterator0, 47);
      // Undeclared exception!
      IteratorUtils.size(loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, class0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      IteratorUtils.getIterator("5AcK`9O1k\"7w");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("zMp*cf5F,x{c00\"R8");
      LoopingListIterator<String> loopingListIterator0 = new LoopingListIterator<String>(linkedList0);
      IteratorUtils.get((Iterator<String>) loopingListIterator0, 645);
      // Undeclared exception!
      IteratorUtils.size(loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLException[] sQLExceptionArray0 = new SQLException[8];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("<(wGb,^K+(8lq@$");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("<(wGb,^K+(8lq@$", sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLIntegrityConstraintViolationException0);
      sQLExceptionArray0[0] = (SQLException) sQLDataException0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("<(wGb,^K+(8lq@$");
      sQLExceptionArray0[1] = (SQLException) sQLTransactionRollbackException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLExceptionArray0[2] = (SQLException) sQLTimeoutException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("<(wGb,^K+(8lq@$");
      sQLExceptionArray0[3] = (SQLException) sQLTransientException0;
      SQLTransientException sQLTransientException1 = new SQLTransientException();
      sQLExceptionArray0[4] = (SQLException) sQLTransientException1;
      SQLException sQLException0 = new SQLException("1+>X{7D&y A", "<(wGb,^K+(8lq@$", 100);
      sQLExceptionArray0[5] = sQLException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("<(wGb,^K+(8lq@$");
      sQLExceptionArray0[6] = (SQLException) sQLSyntaxErrorException1;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("1+>X{7D&y A", "H", 100);
      sQLSyntaxErrorException1.initCause(sQLNonTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ejL.%W14S", "ejL.%W14S");
      sQLExceptionArray0[7] = (SQLException) sQLInvalidAuthorizationSpecException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, 1, (-675));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 1);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      classArray0[0] = class0;
      Transformer<SQLException, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("#k7 <|HS*9", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '#k7 <|HS*9' on 'class java.sql.SQLDataException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer(">]sO8=#sM,B|F");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(13, 1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Pmuw;)WV0", "Pmuw;)WV0", 1316, hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(13, 1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Pmuw;)WV0", "Pmuw;)WV0", 1316, hashMap0);
      sQLClientInfoException0.getStackTrace();
      int[] intArray0 = new int[7];
      intArray0[0] = 13;
      intArray0[1] = 13;
      intArray0[2] = 13;
      intArray0[3] = 1316;
      intArray0[4] = 1;
      intArray0[6] = 1316;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Pmuw;)WV0", "", intArray0, sQLClientInfoException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("prefix may not be null", "", 13, batchUpdateException0);
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[3];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.arrayListIterator(clientInfoStatusArray0, 0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends ClientInfoStatus>) resettableListIterator0, (Predicate<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Transformer<SQLTransientConnectionException, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.getIterator(transformer0);
      DataTruncation dataTruncation0 = new DataTruncation(1967, false, false, 1967, 1967);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) singletonListIterator0, (Predicate<? super DataTruncation>) uniquePredicate0);
      IteratorUtils.contains((Iterator<DataTruncation>) listIterator0, (Object) dataTruncation0);
      ArrayListIterator<SQLClientInfoException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLClientInfoException>((Object) null, 1967);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Cannot set to list until next() or previous() called");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("Cannot set to list until next() or previous() called", "Cannot set to list until next() or previous() called", 1, sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException(sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException((String) null, (String) null);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException((String) null, "i,Rm", 1, sQLSyntaxErrorException2);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException(sQLSyntaxErrorException5);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 1, 1);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      int[] intArray0 = new int[9];
      intArray0[0] = 10;
      intArray0[1] = (-977);
      intArray0[2] = (-554);
      intArray0[3] = 2418;
      intArray0[4] = 37;
      intArray0[5] = 10;
      intArray0[6] = (-3299);
      intArray0[7] = 9;
      intArray0[8] = (-2179);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(13, 1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("L&t7uyQe{OFFBj:", "Pmuw;)WV0", 1, hashMap0);
      batchUpdateException0.setNextException(sQLClientInfoException0);
      SQLDataException sQLDataException0 = new SQLDataException("#;L^Vtp)f %ck;KA4t", batchUpdateException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) singletonIterator0, 3312);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3311
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, class0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      int int0 = 12;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 12;
      longArray0[1] = (long) 12;
      longArray0[2] = (long) 12;
      longArray0[3] = (long) 12;
      longArray0[4] = (long) 12;
      String string0 = "";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("rDe@-t3sm/L", "", 31);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Nnv(S%", "Nnv(S%", 12, longArray0, sQLRecoverableException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      ListIterator<SQLTransientConnectionException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) listIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 4);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[0] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[1] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[2] = class3;
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      classArray0[3] = class4;
      Transformer<SQLTransientException, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) listIterator1, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "Estimated size must be greater than 0", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 37;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      UniquePredicate<SQLDataException> uniquePredicate0 = new UniquePredicate<SQLDataException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.cloneNode(false);
      IteratorUtils.nodeListIterator(node0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) resettableIterator0, (Transformer<? super Object, String>) null, "org.apache.commons.collections4.functors.SwitchTransformer", "iT", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ConstantTransformer.nullTransformer();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) sQLIntegrityConstraintViolationException0);
      IteratorUtils.size(resettableIterator0);
      MapIterator<SQLDataException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientException>) mapIterator0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(instanceofPredicateArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ConstantTransformer<Properties, String> constantTransformer0 = new ConstantTransformer<Properties, String>("mtKKVI(;:`b7/S");
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      Iterator<?> iterator0 = IteratorUtils.getIterator("mtKKVI(;:`b7/S");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("68w'.)9Bn7,.A]rMX", "*74N@PqQ6TN=jk6", 28, sQLTransientConnectionExceptionArray0[0]);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "68w'.)9Bn7,.A]rMX", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", "fGK-9}Q:C", 100);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException2;
      IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 2, 2);
      InvokerTransformer.invokerTransformer("$9d`'u-'tp1_KF3");
      String string0 = "b0<>hV&AC<,^VnzV";
      // Undeclared exception!
      try { 
        sQLTransientConnectionException1.initCause(sQLTransientConnectionException2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLTransientConnectionException: 
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0);
      UniquePredicate<Properties> uniquePredicate0 = new UniquePredicate<Properties>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("transformer may not be null");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      IfTransformer.ifTransformer((Predicate<? super Properties>) uniquePredicate0, (Transformer<? super Properties, ? extends String>) transformer0, (Transformer<? super Properties, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableListIterator0, (Transformer<? super Properties, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MapIterator<Boolean, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<Boolean> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Boolean>) mapIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration0, (Collection<? super Boolean>) arrayDeque0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[4] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[6] = locale_FilteringMode4;
      ObjectArrayIterator<Locale.FilteringMode> objectArrayIterator0 = new ObjectArrayIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) objectArrayIterator0, (Predicate<? super Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (-1576L);
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      DataTruncation dataTruncation0 = new DataTruncation((-3602), false, false, 2814, 2, sQLNonTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("AO.g8f0,csgP9{p5 jI", "AO.g8f0,csgP9{p5 jI", 1, longArray0, dataTruncation0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableListIterator0);
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) instanceofPredicate0, (-3602));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Iterator<Integer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.size(iterator0);
      EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLClientInfoException, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException>(mapIterator0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException> abstractMapIteratorDecorator1 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException>(abstractMapIteratorDecorator0);
      ExceptionClosure.exceptionClosure();
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      MockThrowable mockThrowable0 = new MockThrowable();
      IteratorUtils.apply((Iterator<DataTruncation>) listIterator0, (Closure<? super DataTruncation>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientException[]) null, 0, 293);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0);
      Predicate<Properties> predicate0 = FalsePredicate.falsePredicate();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("transformer may not be null");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      Transformer<Properties, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Properties>) predicate0, (Transformer<? super Properties, ? extends String>) transformer0, (Transformer<? super Properties, ? extends String>) transformer0);
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableListIterator0, (Transformer<? super Properties, ? extends String>) transformer1);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(arrayList0);
      IteratorUtils.emptyListIterator();
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransientConnectionException[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode1);
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ListIteratorWrapper does not support optional operations of ListIterator.", "ListIteratorWrapper does not support optional operations of ListIterator.", 16);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) listIterator0, (Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Iterator<Integer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.size(iterator0);
      IteratorUtils.size(iterator0);
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Iterator<Integer> iterator0 = EmptyIterator.emptyIterator();
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0);
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0, (Predicate<? super SQLFeatureNotSupportedException>) equalPredicate0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator1, (Iterator<? extends SQLFeatureNotSupportedException>) iterator1, (Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate.comparatorPredicate((Object) orderedIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) listIterator0, (Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      Iterator<SQLException> iterator2 = IteratorUtils.filteredIterator((Iterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) equalPredicate0);
      assertNotNull(iterator2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, class0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "prefix may not be null", hashMap0, sQLNonTransientException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("OuVztFwMIW~bI", "xa:p1", hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("da Xt0,", "Comparator must not be null.", hashMap0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", hashMap0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(hashMap0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(hashtable0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      ArrayDeque<InstanceofPredicate> arrayDeque1 = arrayDeque0.clone();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque1);
      predicateArray0[0] = predicate0;
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(instanceofPredicate0, defaultEquator0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      PredicateTransformer<SQLDataException> predicateTransformer0 = new PredicateTransformer<SQLDataException>(predicate0);
      SQLDataException sQLDataException0 = new SQLDataException("OuVztFwMIW~bI", "%?", 0, sQLClientInfoException0);
      Boolean boolean0 = predicateTransformer0.transform(sQLDataException0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.constantTransformer(boolean0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      predicateArray0[2] = (Predicate<Object>) transformerPredicate0;
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicateArray0[1]);
      predicateArray0[3] = (Predicate<Object>) transformedPredicate0;
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicateArray0[2], predicate1);
      predicateArray0[4] = (Predicate<Object>) orPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[5] = (Predicate<Object>) allPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[6] = (Predicate<Object>) anyPredicate0;
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 7);
      DefaultEquator<Object> defaultEquator1 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(class0, defaultEquator1);
      Class<BatchUpdateException>[] classArray0 = (Class<BatchUpdateException>[]) Array.newInstance(Class.class, 7);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      classArray0[0] = class1;
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      classArray0[1] = class2;
      Class<BatchUpdateException> class3 = BatchUpdateException.class;
      classArray0[2] = class3;
      Class<BatchUpdateException> class4 = BatchUpdateException.class;
      classArray0[3] = class4;
      Class<BatchUpdateException> class5 = BatchUpdateException.class;
      classArray0[4] = class5;
      Class<BatchUpdateException> class6 = BatchUpdateException.class;
      classArray0[5] = class6;
      Class<BatchUpdateException> class7 = BatchUpdateException.class;
      classArray0[6] = class7;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("OuVztFwMIW~bI", classArray0, (Object[]) null);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(equalPredicate1, invokerTransformer0, invokerTransformer0);
      transformerArray0[0] = (Transformer<Object, String>) ifTransformer0;
      Transformer<Object, String> transformer1 = ConstantTransformer.constantTransformer("OuVztFwMIW~bI");
      transformerArray0[1] = transformer1;
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("da Xt0,");
      transformerArray0[2] = (Transformer<Object, String>) constantTransformer0;
      Transformer<Object, String> transformer2 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) transformerArray0);
      transformerArray0[3] = transformer2;
      Transformer<Object, String> transformer3 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[4] = transformer3;
      ConstantTransformer<Object, String> constantTransformer1 = new ConstantTransformer<Object, String>("%?");
      transformerArray0[5] = (Transformer<Object, String>) constantTransformer1;
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Transformer<Object, String> transformer4 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap1);
      transformerArray0[6] = transformer4;
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>(predicateArray0, transformerArray0, transformer4);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLClientInfoException>) objectArrayIterator0, (Transformer<? super SQLClientInfoException, String>) switchTransformer0, "peek() or element() called before remove()", "peek() or element() called before remove()", "");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ConstantTransformer<SQLTransientConnectionException, String> constantTransformer0 = new ConstantTransformer<SQLTransientConnectionException, String>("Aj:'9#Q^h}/");
      OrderedMapIterator<SQLTransientConnectionException, Iterator<SQLTimeoutException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ConstantTransformer<Object, String> constantTransformer1 = new ConstantTransformer<Object, String>("-fs-K@vgb1");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) orderedMapIterator0, (Transformer<? super SQLTransientConnectionException, String>) constantTransformer0, "25MW8g(}}-1i", "org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, TreeSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate.comparatorPredicate((Object) orderedMapIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>((SQLTransientConnectionException) null, false);
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 9);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      classArray0[0] = class0;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      classArray0[1] = class1;
      Class<SQLTransactionRollbackException> class2 = SQLTransactionRollbackException.class;
      classArray0[2] = class2;
      Class<SQLTransactionRollbackException> class3 = SQLTransactionRollbackException.class;
      classArray0[3] = class3;
      Class<SQLTransactionRollbackException> class4 = SQLTransactionRollbackException.class;
      classArray0[4] = class4;
      Class<SQLTransactionRollbackException> class5 = SQLTransactionRollbackException.class;
      classArray0[5] = class5;
      Class<SQLTransactionRollbackException> class6 = SQLTransactionRollbackException.class;
      classArray0[6] = class6;
      Class<SQLTransactionRollbackException> class7 = SQLTransactionRollbackException.class;
      classArray0[7] = class7;
      Class<SQLTransactionRollbackException> class8 = SQLTransactionRollbackException.class;
      classArray0[8] = class8;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("suffix may not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) singletonIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "suffix may not be null", "suffix may not be null", "suffix may not be null");
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      IteratorUtils.arrayListIterator(propertiesArray0, 0);
      FalsePredicate.falsePredicate();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("transformer may not be null");
      FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", "5", 10);
      SQLDataException sQLDataException0 = new SQLDataException("Ty8p*P;&SUwO!$", "9edq", 4);
      IdentityPredicate.identityPredicate((Object) "9edq");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator");
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("transformer may not be null");
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Locale.FilteringMode>>) arrayDeque0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) nonePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) singletonIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      UniquePredicate<Properties> uniquePredicate0 = new UniquePredicate<Properties>();
      ConstantTransformer<SQLTransientConnectionException, String> constantTransformer0 = new ConstantTransformer<SQLTransientConnectionException, String>("transformer may not be null");
      OrderedMapIterator<SQLTransientConnectionException, Iterator<SQLTimeoutException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ConstantTransformer<Object, String> constantTransformer1 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) orderedMapIterator0, (Transformer<? super SQLTransientConnectionException, String>) constantTransformer1, "", "", "transformer may not be null");
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Locale.FilteringMode> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Locale.FilteringMode>>) treeSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Transformer<Locale.FilteringMode, Locale.FilteringMode> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.objectGraphIterator(locale_FilteringMode0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) transformer0);
      Predicate<Locale.FilteringMode> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Locale.FilteringMode>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super Locale.FilteringMode>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Predicate<Properties> predicate0 = FalsePredicate.falsePredicate();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      IfTransformer.ifTransformer((Predicate<? super Properties>) predicate0, (Transformer<? super Properties, ? extends String>) transformer0, (Transformer<? super Properties, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) null, (Transformer<? super Properties, ? extends String>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, TreeSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      DataTruncation dataTruncation0 = new DataTruncation(12, true, true, (-450), 12, (Throwable) null);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-450), true, true, 12, 2742);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(2742, false, true, 100, 3302, dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-1660), true, true, 196, 100);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(100, true, false, 2742, 196, dataTruncation0);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(100, false, true, 53, 53);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation((-3125), true, false, 53, (-450));
      dataTruncationArray0[6] = dataTruncation6;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      ArrayList<Closure<Object>> arrayList0 = new ArrayList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) arrayList0);
      IteratorUtils.apply((Iterator<DataTruncation>) objectArrayIterator0, (Closure<? super DataTruncation>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, TreeSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      DataTruncation dataTruncation0 = new DataTruncation(1, false, true, (-1662), (-1));
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      DataTruncation dataTruncation1 = new DataTruncation((-1662), false, true, (-1), (-700), dataTruncation0);
      dataTruncationArray0[0] = dataTruncation1;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      DefaultEquator<SQLWarning> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLWarning> equalPredicate0 = new EqualPredicate<SQLWarning>(dataTruncation1, defaultEquator0);
      Closure<Object> closure0 = null;
      Closure<DataTruncation> closure1 = ForClosure.forClosure(1, (Closure<? super DataTruncation>) null);
      dataTruncation0.getStackTrace();
      Closure<DataTruncation> closure2 = WhileClosure.whileClosure((Predicate<? super DataTruncation>) equalPredicate0, (Closure<? super DataTruncation>) closure1, false);
      // Undeclared exception!
      IteratorUtils.apply((Iterator<DataTruncation>) objectArrayIterator0, (Closure<? super DataTruncation>) closure2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Iterator<Integer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.size(iterator0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      HashMap<InstanceofPredicate, Transformer<Object, String>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, String>>();
      Transformer<SQLException, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLException>, ? extends Transformer<? super SQLException, ? extends String>>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) orderedIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, (String) null, "=", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, class0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      OrderedMapIterator<SQLClientInfoException, SQLTransientException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException>(orderedMapIterator1);
      ExceptionClosure.exceptionClosure();
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Iterator<Integer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.size(iterator0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      IteratorUtils.emptyIterator();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(linkedList0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(arrayDeque0);
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) equalPredicate0, (Predicate<? super Object>) equalPredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) loopingListIterator0, (Predicate<? super Integer>) nullIsExceptionPredicate0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 3);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) listIterator0;
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Predicate<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, Predicate<Object>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, Predicate<Object>>(orderedMapIterator0);
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      UniquePredicate<Properties> uniquePredicate0 = new UniquePredicate<Properties>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("transformer may not be null");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      IfTransformer.ifTransformer((Predicate<? super Properties>) uniquePredicate0, (Transformer<? super Properties, ? extends String>) transformer0, (Transformer<? super Properties, ? extends String>) transformer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.appendChild(iIOMetadataNode1);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(node0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OHfC41SZg,e5U4,W");
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) linkedList0);
      LinkedList<SQLSyntaxErrorException> linkedList1 = new LinkedList<SQLSyntaxErrorException>();
      ResettableListIterator<Locale.FilteringMode> resettableListIterator1 = IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.isEmpty(resettableListIterator1);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) linkedList0);
      LinkedList<SQLSyntaxErrorException> linkedList1 = new LinkedList<SQLSyntaxErrorException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) linkedList1);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLClientInfoException, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException>(orderedMapIterator0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      DataTruncation dataTruncation0 = new DataTruncation((-375), true, true, 12, (-1478));
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(9, true, false, 28, 239, dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(9, true, true, (-76), 1637);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-375), true, false, (-1), 239);
      dataTruncationArray0[3] = dataTruncation3;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<DataTruncation>) objectArrayIterator0, (Closure<? super DataTruncation>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) linkedList0);
      LinkedList<SQLSyntaxErrorException> linkedList1 = new LinkedList<SQLSyntaxErrorException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) linkedList1);
      IteratorUtils.emptyListIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException>(mapIterator0);
      ExceptionClosure.exceptionClosure();
      OrderedMapIterator<DataTruncation, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<DataTruncation>) orderedMapIterator0, (Closure<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLTransientConnectionException, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, String>(orderedMapIterator0);
      Transformer<SQLTransientConnectionException, String> transformer0 = ConstantTransformer.nullTransformer();
      OrderedMapIterator<SQLTransientConnectionException, Iterator<SQLTimeoutException>> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) orderedMapIterator1, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "", "", "");
      OrderedMapIterator<SQLClientInfoException, SQLTransientException> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException> abstractMapIteratorDecorator1 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException>(orderedMapIterator2);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<DataTruncation>) null, (Closure<? super DataTruncation>) closure0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode2, locale_FilteringMode3);
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode1);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<Locale.FilteringMode> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Locale.FilteringMode>>) arrayDeque0);
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) singletonIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      SingletonIterator<Properties> singletonIterator1 = new SingletonIterator<Properties>((Properties) null);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) singletonIterator1, (-872L), 3000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      OrderedMapIterator<SQLWarning, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      IteratorUtils.isEmpty(orderedMapIterator0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Index: ", (String) null, 12, sQLDataException0);
      Predicate<SQLNonTransientException> predicate0 = IdentityPredicate.identityPredicate((SQLNonTransientException) sQLIntegrityConstraintViolationException0);
      PredicateTransformer<SQLDataException> predicateTransformer0 = new PredicateTransformer<SQLDataException>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      IteratorUtils.arrayListIterator(propertiesArray0, 0);
      FalsePredicate.falsePredicate();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("transformer may not be null");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLInvalidAuthorizationSpecException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("transformer may not be null");
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("7e*U>", ", ");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("7e*U>", "", sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException4);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) linkedList0);
      LinkedList<SQLSyntaxErrorException> linkedList1 = new LinkedList<SQLSyntaxErrorException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) linkedList1);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLClientInfoException, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException>(orderedMapIterator0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<DataTruncation>) orderedIterator0, (Closure<? super DataTruncation>) closure0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, class0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null, (Collection<? super SQLSyntaxErrorException>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<Integer>[] arrayDequeArray0 = (ArrayDeque<Integer>[]) Array.newInstance(ArrayDeque.class, 4);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDequeArray0[0] = arrayDeque0;
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("|TF~{?MQGbf^)][\"Q");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "E`e)earbpI{5zJ`&kS|", 91, sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("O\"%T|,ro2FFpO|S", "", (-1756), sQLInvalidAuthorizationSpecException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("|TF~{?MQGbf^)][\"Q", "E`e)earbpI{5zJ`&kS|", 620, sQLTimeoutException2);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException((String) null);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("|TF~{?MQGbf^)][\"Q", "", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException(sQLTimeoutException5);
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      SQLTimeoutException sQLTimeoutException8 = new SQLTimeoutException("", sQLTimeoutException6);
      sQLTimeoutExceptionArray0[8] = sQLTimeoutException8;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 2);
      IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) resettableIterator0, 91);
      OrderedIterator<SQLException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyIterator();
      ExceptionTransformer.exceptionTransformer();
      SQLDataException sQLDataException0 = new SQLDataException("L:xu}9N=N3` 4OQ9++U");
      DataTruncation dataTruncation0 = new DataTruncation(232, true, true, 232, 232);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      IteratorUtils.objectGraphIterator((SQLException) sQLDataException0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Entry does not exist: ", "org.apache.commons.collections4.map.Flat3Map$EntrySetIterator", 0, dataTruncation0);
      IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", "5", 10);
      SQLDataException sQLDataException0 = new SQLDataException("Ty8p*P;&SUwO!$", "9edq", 4);
      IdentityPredicate.identityPredicate((Object) "9edq");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator");
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTransactionRollbackException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode2, locale_FilteringMode3);
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) enumSet0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Locale.FilteringMode>>) arrayDeque0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) allPredicate0);
      predicateArray0[1] = predicate0;
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) allPredicate1;
      NotPredicate.notPredicate((Predicate<? super Object>) predicateArray0[2]);
      predicateArray0[3] = predicate0;
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) resettableIterator0);
      predicateArray0[4] = predicate1;
      Predicate<Object> predicate2 = new UniquePredicate<Object>();
      predicateArray0[5] = predicate2;
      Predicate<Object> predicate3 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) predicate3);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 9);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLInvalidAuthorizationSpecException0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, 0L);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) boundedIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Object object0 = new Object();
      MapIterator<SQLDataException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      BoundedIterator<SQLDataException> boundedIterator1 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) mapIterator0, (long) 9);
      Predicate<SQLDataException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLDataException>>) arrayDeque0);
      IteratorUtils.find((Iterator<SQLDataException>) boundedIterator1, (Predicate<? super SQLDataException>) predicate0);
      boolean boolean0 = IteratorUtils.isEmpty(zippingIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", 527);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0, (long) 527);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) boundedIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLTransientConnectionException, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLTransientConnectionException, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, String>(mapIterator0);
      AbstractMapIteratorDecorator<SQLTransientConnectionException, String> abstractMapIteratorDecorator1 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, String>(abstractMapIteratorDecorator0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTransientConnectionException>) abstractMapIteratorDecorator0);
      Transformer<SQLTransientConnectionException, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "iterator", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, TreeSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, 3571L);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) boundedIterator0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLDataException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) mapIterator0);
      BoundedIterator<SQLDataException> boundedIterator1 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) iterator0, 1L, 1L);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) boundedIterator1, 3810);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3810
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0);
      Predicate<Properties> predicate0 = FalsePredicate.falsePredicate();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("transformer may not be null");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      Transformer<Properties, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Properties>) predicate0, (Transformer<? super Properties, ? extends String>) transformer0, (Transformer<? super Properties, ? extends String>) transformer0);
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableListIterator0, (Transformer<? super Properties, ? extends String>) transformer1);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("transformer may not be null", "transformer may not be null");
      IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0);
      Predicate<Properties> predicate0 = FalsePredicate.falsePredicate();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("transformer may not be null");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      Transformer<Properties, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Properties>) predicate0, (Transformer<? super Properties, ? extends String>) transformer0, (Transformer<? super Properties, ? extends String>) transformer0);
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableListIterator0, (Transformer<? super Properties, ? extends String>) transformer1);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.iterators.TransformIterator", "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("xv2/JaC8Q#y!", sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "org.apache.commons.collections4.IteratorUtils", 10, sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException((String) null, "org.apache.commons.collections4.iterators.TransformIterator", (-898), sQLTransactionRollbackException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("xv2/JaC8Q#y!", sQLTransactionRollbackException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, (-898));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("xv2/JaC8Q#y!", sQLInvalidAuthorizationSpecException3);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("", (Throwable) null);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException6;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException5;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException6;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException3;
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException5;
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException4;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      sQLInvalidAuthorizationSpecException1.getStackTrace();
      SQLDataException sQLDataException0 = new SQLDataException("Predicate must not be null", "", 10);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator");
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLTimeoutException0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) resettableListIterator0, class0);
      assertEquals(8, sQLExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      int[] intArray0 = new int[2];
      intArray0[0] = 512;
      intArray0[1] = 1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Iterator[", "Iterator[", 1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("Iterator[", batchUpdateException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("Iterator[", "Iterator[", 512, sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("5", "Iterator[", 512);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("5", sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException7;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException8 = new SQLInvalidAuthorizationSpecException("Closure must not be null", sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException8;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      SQLDataException sQLDataException0 = new SQLDataException("5", "", 1);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLDataException0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertNotNull(iterator0);
      
      Iterator<?> iterator1 = IteratorUtils.getIterator("Iterator[");
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0);
      Predicate<Properties> predicate0 = FalsePredicate.falsePredicate();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("transformer may not be null");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      IfTransformer.ifTransformer((Predicate<? super Properties>) predicate0, (Transformer<? super Properties, ? extends String>) transformer0, (Transformer<? super Properties, ? extends String>) transformer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) resettableListIterator0, comparator0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) null, (Predicate<? super Locale.FilteringMode>) nullIsTruePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Iterator<Integer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.size(iterator0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0);
      IteratorUtils.contains((Iterator<SQLNonTransientConnectionException>) null, (Object) null);
      // Undeclared exception!
      try { 
        ChainedTransformer.chainedTransformer((Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The transformer array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 0;
      OrderedMapIterator<SQLFeatureNotSupportedException, TreeSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, 3571L);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) boundedIterator0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("BfOUV5pb5dc");
      Object object0 = new Object();
      MapIterator<SQLDataException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) mapIterator0, (long) 0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 100, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) orderedMapIterator0, 3810);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3810
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, TreeSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, 3571L);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) boundedIterator0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLTransientConnectionException, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, String> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientConnectionException, ? extends String>) mapIterator0);
      AbstractMapIteratorDecorator<SQLTransientConnectionException, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, String>(mapIterator1);
      IteratorUtils.unmodifiableIterator((Iterator<SQLTransientConnectionException>) mapIterator1);
      Transformer<SQLTransientConnectionException, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) abstractMapIteratorDecorator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "Can't do that after next or hasNext has been called.", "", "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("n]=k4l3");
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      iIOMetadataNodeArray0[0] = iIOMetadataNode1;
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      iIOMetadataNodeArray0[2] = iIOMetadataNode3;
      iIOMetadataNodeArray0[3] = iIOMetadataNode5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, (-1937));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Iterator<SQLDataException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) null, (-56));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -56
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.matchesAll((Iterator<ComparatorPredicate.Criterion>) null, (Predicate<? super ComparatorPredicate.Criterion>) predicate0);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableIterator0, (Transformer<? super Properties, ? extends String>) transformer0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(arrayList0);
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) reverseListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLRecoverableException, Integer> mapIterator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Integer>(orderedMapIterator0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) mapIterator0, class0);
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet.of(locale_FilteringMode3, locale_FilteringMode0, locale_FilteringMode3, locale_FilteringMode1);
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode2);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Locale.FilteringMode>>) arrayDeque0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray1);
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) singletonIterator0, (Predicate<? super Locale.FilteringMode>) anyPredicate0);
      assertFalse(singletonIterator0.hasNext());
      
      IteratorUtils.emptyIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, sQLInvalidAuthorizationSpecException0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      Hashtable<InstanceofPredicate, Transformer<Object, String>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, String>>();
      Transformer<SQLTimeoutException, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLTimeoutException>, ? extends Transformer<? super SQLTimeoutException, ? extends String>>) hashtable0);
      String string0 = IteratorUtils.toString((Iterator<SQLTimeoutException>) listIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, TreeSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, 129L);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) boundedIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) boundedIterator0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Locale.FilteringMode>>) arrayDeque0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(">xT)JF(p652,");
      Object object0 = new Object();
      SQLException sQLException0 = new SQLException((String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("BfOUV5pb5dc", sQLException0);
      EqualPredicate.equalPredicate((Object) sQLFeatureNotSupportedException0);
      MapIterator<SQLDataException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      BoundedIterator<SQLDataException> boundedIterator1 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) mapIterator0, (long) 0);
      Predicate<SQLDataException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLDataException>>) arrayDeque0);
      IteratorUtils.find((Iterator<SQLDataException>) boundedIterator1, (Predicate<? super SQLDataException>) predicate0);
      IteratorUtils.isEmpty(boundedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Properties>) null, 129L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      IteratorUtils.arrayListIterator(propertiesArray0, 0);
      OrderedMapIterator<SQLFeatureNotSupportedException, TreeSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, 3571L);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) boundedIterator0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<Locale.FilteringMode> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Locale.FilteringMode>>) arrayDeque0);
      String string0 = "BfOUV5pb5dc";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("BfOUV5pb5dc");
      Object object0 = new Object();
      EqualPredicate.equalPredicate((Object) predicate0);
      MapIterator<SQLDataException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) mapIterator0, (long) 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0);
      Predicate<Properties> predicate0 = FalsePredicate.falsePredicate();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("transformer may not be null");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      Transformer<Properties, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Properties>) predicate0, (Transformer<? super Properties, ? extends String>) transformer0, (Transformer<? super Properties, ? extends String>) transformer0);
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableListIterator0, (Transformer<? super Properties, ? extends String>) transformer1);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(arrayList0);
      IteratorUtils.emptyListIterator();
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0);
      Predicate<Properties> predicate0 = FalsePredicate.falsePredicate();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("transformer may not be null");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      Transformer<Properties, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Properties>) predicate0, (Transformer<? super Properties, ? extends String>) transformer0, (Transformer<? super Properties, ? extends String>) transformer0);
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableListIterator0, (Transformer<? super Properties, ? extends String>) transformer1);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(arrayList0);
      LinkedHashSet<SQLNonTransientException>[] linkedHashSetArray0 = (LinkedHashSet<SQLNonTransientException>[]) Array.newInstance(LinkedHashSet.class, 5);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<SQLNonTransientException> linkedHashSet1 = new LinkedHashSet<SQLNonTransientException>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<SQLNonTransientException> linkedHashSet2 = new LinkedHashSet<SQLNonTransientException>();
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<SQLNonTransientException> linkedHashSet3 = new LinkedHashSet<SQLNonTransientException>();
      linkedHashSetArray0[3] = linkedHashSet3;
      LinkedHashSet<SQLNonTransientException> linkedHashSet4 = new LinkedHashSet<SQLNonTransientException>();
      linkedHashSetArray0[4] = linkedHashSet4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(linkedHashSetArray0, 2625);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(">Cm7+Et`", ">Cm7+Et`");
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(linkedList0);
      reverseListIterator0.add(sQLNonTransientConnectionException0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0, 1);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) vector0);
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      treeSet0.descendingIterator();
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet1 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      treeSet1.parallelStream();
      OrderedMapIterator<SQLDataException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Object object0 = new Object();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLClientInfoException0);
      IteratorUtils.find((Iterator<SQLDataException>) orderedMapIterator0, (Predicate<? super SQLDataException>) predicate0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<Integer>[] arrayDequeArray0 = (ArrayDeque<Integer>[]) Array.newInstance(ArrayDeque.class, 4);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDequeArray0[0] = arrayDeque0;
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, (-2309));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      PredicateTransformer<SQLNonTransientException> predicateTransformer1 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate.comparatorPredicate((Object) "", comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) linkedList0);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLClientInfoException, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLClientInfoException, SQLTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLClientInfoException, ? extends SQLTransientException>) orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException>(orderedMapIterator1);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      IteratorUtils.arrayListIterator(propertiesArray0, 0);
      IteratorUtils.emptyOrderedMapIterator();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("lAHK.k==y>EF9diuj3", "lAHK.k==y>EF9diuj3", intArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("lAHK.k==y>EF9diuj3", "lAHK.k==y>EF9diuj3", batchUpdateException0);
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) linkedList0);
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(linkedList0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(">Cm7+Et`", "No element at index ");
      reverseListIterator0.add(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, 1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("EX7");
      int int0 = 26;
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = (Iterator<String>) singletonIterator0;
      iteratorArray0[0] = (Iterator<String>) singletonIterator0;
      iteratorArray0[2] = (Iterator<String>) singletonIterator0;
      iteratorArray0[3] = (Iterator<String>) singletonIterator0;
      iteratorArray0[4] = (Iterator<String>) singletonIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>) iteratorArray0[5], (Iterator<? extends String>) iteratorArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 5);
      MapIterator<SQLFeatureNotSupportedException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) mapIterator0;
      OrderedMapIterator<SQLFeatureNotSupportedException, TreeSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0;
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, 3571L);
      iteratorArray0[2] = (Iterator<SQLFeatureNotSupportedException>) boundedIterator0;
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) boundedIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      iteratorArray0[3] = (Iterator<SQLFeatureNotSupportedException>) zippingIterator0;
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) iteratorArray0[0]);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0);
      Predicate<Properties> predicate0 = FalsePredicate.falsePredicate();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("Array class must not be null");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      Transformer<Properties, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Properties>) predicate0, (Transformer<? super Properties, ? extends String>) transformer0, (Transformer<? super Properties, ? extends String>) transformer0);
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableListIterator0, (Transformer<? super Properties, ? extends String>) transformer1);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(arrayList0);
      assertFalse(reverseListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLException>) orderedIterator0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) linkedList0);
      LinkedList<SQLSyntaxErrorException> linkedList1 = new LinkedList<SQLSyntaxErrorException>();
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLClientInfoException, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException>(orderedMapIterator0);
      List<SQLClientInfoException> list0 = new Vector<SQLClientInfoException>();
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 1);
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(anyPredicate0, anyPredicate0);
      predicateArray0[0] = (Predicate<SQLException>) orPredicate0;
      NonePredicate<SQLNonTransientException> nonePredicate0 = new NonePredicate<SQLNonTransientException>(predicateArray0);
      IteratorUtils.find((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) nonePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      int int0 = 0;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0);
      Predicate<Properties> predicate0 = FalsePredicate.falsePredicate();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("transformer may not be null");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      Transformer<Properties, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Properties>) predicate0, (Transformer<? super Properties, ? extends String>) transformer0, (Transformer<? super Properties, ? extends String>) transformer0);
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableListIterator0, (Transformer<? super Properties, ? extends String>) transformer1);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[1];
      String string0 = "prefix may not be null";
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 100;
      longArray0[1] = (long) 100;
      longArray0[2] = (long) 318;
      longArray0[3] = (long) 100;
      longArray0[4] = (long) 318;
      longArray0[5] = 3571L;
      longArray0[6] = (long) (-178);
      longArray0[7] = 3571L;
      longArray0[8] = 3571L;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("prefix may not be null", (String) null, (-178), longArray0, sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 100, batchUpdateException0);
      sQLSyntaxErrorException0.addSuppressed(batchUpdateException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", sQLTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLNonTransientException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      sQLFeatureNotSupportedException0.getStackTrace();
      IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) objectArrayIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0);
      Predicate<Properties> predicate0 = FalsePredicate.falsePredicate();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("transformer may not be null");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      Transformer<Properties, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Properties>) predicate0, (Transformer<? super Properties, ? extends String>) transformer0, (Transformer<? super Properties, ? extends String>) transformer0);
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableListIterator0, (Transformer<? super Properties, ? extends String>) transformer1);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(arrayList0);
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) reverseListIterator0);
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      treeSet0.descendingIterator();
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet1 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      treeSet1.parallelStream();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((TreeSet<SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[26];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("s[V'EI]*8o", "Cannot add to list until next() or previous() called", 316);
      SQLTransientException sQLTransientException0 = new SQLTransientException("s[V'EI]*8o", "", 316, sQLIntegrityConstraintViolationException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", ":5Tqr!", sQLTransientException0);
      sQLExceptionArray0[0] = (SQLException) sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("F|_CW$</1UTR9");
      sQLExceptionArray0[1] = (SQLException) sQLRecoverableException1;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientException0);
      sQLExceptionArray0[2] = (SQLException) sQLTransientConnectionException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("s[V'EI]*8o", "", 2855, sQLExceptionArray0[1]);
      sQLExceptionArray0[3] = (SQLException) sQLTimeoutException0;
      SQLException sQLException0 = new SQLException("s[V'EI]*8o", sQLIntegrityConstraintViolationException0);
      sQLExceptionArray0[4] = sQLException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*w#G$R R,F!od", sQLExceptionArray0[3]);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLSyntaxErrorException0);
      sQLExceptionArray0[5] = (SQLException) sQLTransactionRollbackException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Cannot add to list until next() or previous() called", sQLExceptionArray0[0]);
      sQLExceptionArray0[6] = (SQLException) sQLFeatureNotSupportedException0;
      IteratorUtils.arrayListIterator(sQLExceptionArray0);
      sQLTimeoutException0.setNextException(sQLException0);
      InvokerTransformer<SQLTransientException, String> invokerTransformer0 = new InvokerTransformer<SQLTransientException, String>("+*`Q", (Class<?>[]) null, sQLExceptionArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, String>) invokerTransformer0, "\"Q/fZc?'", "F|_CW$</1UTR9", "F|_CW$</1UTR9");
      assertEquals("F|_CW$</1UTR9F|_CW$</1UTR9", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 5);
      MapIterator<SQLFeatureNotSupportedException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) mapIterator0;
      OrderedMapIterator<SQLFeatureNotSupportedException, TreeSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0;
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, 3571L);
      iteratorArray0[2] = (Iterator<SQLFeatureNotSupportedException>) boundedIterator0;
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) boundedIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      iteratorArray0[3] = (Iterator<SQLFeatureNotSupportedException>) zippingIterator0;
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) iteratorArray0[0]);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      iteratorArray0[4] = iterator0;
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      assertNotSame(zippingIterator1, zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      String string0 = "wlj98kE8/ZQ";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.iterators.ObjectArrayIterator", "wlj98kE8/ZQ", sQLTransientConnectionException0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = null;
      int int0 = (-3344);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) null, (-3344));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OrderedMapIterator<ComparatorPredicate.Criterion, ServiceLoader<SQLException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      Class<String> class2 = String.class;
      InstanceofPredicate.instanceOfPredicate(class2);
      IteratorUtils.matchesAll((Iterator<ComparatorPredicate.Criterion>) orderedMapIterator0, (Predicate<? super ComparatorPredicate.Criterion>) instanceofPredicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(")");
      String string0 = "nPwUO^ZmQ]&";
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(")", "nPwUO^ZmQ]&", sQLNonTransientConnectionException0);
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientConnectionException>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (-898));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Y#2-A]9}SEH>1sfBnB", "", (Throwable) null);
      PredicateTransformer<SQLNonTransientException> predicateTransformer1 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      predicateTransformer1.transform(sQLFeatureNotSupportedException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Enumeration<SQLSyntaxErrorException> enumeration0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Iterator<Integer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.size(iterator0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Y#2-A]9}SEH>1sfBnB", "", (Throwable) null);
      PredicateTransformer<SQLNonTransientException> predicateTransformer1 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      predicateTransformer1.transform(sQLFeatureNotSupportedException0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any() , any());
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) predicate0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      UniquePredicate.uniquePredicate();
      DataTruncation dataTruncation0 = new DataTruncation(28, true, false, 0, 1564);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) dataTruncation0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLException>) predicate1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Entry does not exist: ", "org.apache.commons.collections4.map.Flat3Map$EntrySetIterator", (-926), sQLFeatureNotSupportedException0);
      IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(")");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(")", ")", sQLNonTransientConnectionException0);
      Vector<StringTokenizer> vector0 = new Vector<StringTokenizer>();
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) vector0);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<StringTokenizer>) resettableIterator0;
      iteratorArray0[1] = (Iterator<StringTokenizer>) resettableIterator0;
      StringTokenizer stringTokenizer0 = new StringTokenizer(")", "Z>%F_V)FDbdEk&N", true);
      stringTokenizer0.nextToken(")");
      vector0.add(stringTokenizer0);
      iteratorArray0[2] = (Iterator<StringTokenizer>) resettableIterator0;
      iteratorArray0[3] = (Iterator<StringTokenizer>) resettableIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(")", sQLNonTransientConnectionException1);
      Hashtable<Object, SQLTransactionRollbackException> hashtable0 = new Hashtable<Object, SQLTransactionRollbackException>();
      Transformer<Object, SQLTransactionRollbackException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLTransactionRollbackException>) hashtable0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, (-849L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      Integer integer0 = new Integer(10);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integer0, 0, 829);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLDataException, SQLTransientConnectionException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) null, (Iterator<? extends SQLDataException>) mapIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator0);
      Iterator<SQLException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) orderedMapIterator0);
      IteratorUtils.toArray(iterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLRecoverableException, Integer> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, Integer>) orderedMapIterator0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) mapIterator0, class0);
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = null;
      try {
        reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>((List<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ReverseListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLException>) orderedIterator0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) list0);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLClientInfoException, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException>(orderedMapIterator0);
      List<SQLClientInfoException> list1 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) abstractMapIteratorDecorator0);
      IteratorUtils.loopingListIterator(list1);
      IteratorUtils.skippingIterator((Iterator<SQLSyntaxErrorException>) resettableListIterator0, 1L);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Y#2-A]9}SEH>1sfBnB", "", (Throwable) null);
      PredicateTransformer<SQLNonTransientException> predicateTransformer1 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      predicateTransformer1.transform(sQLFeatureNotSupportedException0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) predicate0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      UniquePredicate.uniquePredicate();
      DataTruncation dataTruncation0 = new DataTruncation(28, true, false, 0, 1564);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) dataTruncation0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLException>) predicate1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Entry does not exist: ", "org.apache.commons.collections4.map.Flat3Map$EntrySetIterator", (-926), sQLFeatureNotSupportedException0);
      IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      SQLDataException sQLDataException0 = new SQLDataException("Y#2-A]9}SEH>1sfBnB");
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedHashSet0.add(instanceofPredicate0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 3309, 3309);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) dataTruncation0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLException>) predicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Y#2-A]9}SEH>1sfBnB", "L:xu}9N=N3` 4OQ9++U", 0, dataTruncation0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Y#2-A]9}SEH>1sfBnB", ".<.+5h-v", 0);
      IteratorUtils.singletonIterator(sQLSyntaxErrorException1);
      IteratorUtils.emptyListIterator();
      ArrayListIterator<Properties> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Properties>((Object) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OrderedMapIterator<ComparatorPredicate.Criterion, ServiceLoader<SQLException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      Class<String> class2 = String.class;
      InstanceofPredicate.instanceOfPredicate(class2);
      IteratorUtils.matchesAll((Iterator<ComparatorPredicate.Criterion>) orderedMapIterator0, (Predicate<? super ComparatorPredicate.Criterion>) instanceofPredicate0);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<String> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableIterator0, (Transformer<? super Properties, ? extends String>) transformer0);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(arrayList0);
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) reverseListIterator0);
      IteratorUtils.toArray(iterator0);
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) listIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) hashSet0);
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLTransientConnectionException, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLTransientConnectionException, String> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientConnectionException, ? extends String>) mapIterator0);
      AbstractMapIteratorDecorator<SQLTransientConnectionException, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, String>(mapIterator1);
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<SQLTransientConnectionException>) abstractMapIteratorDecorator0);
      IteratorUtils.toString(iterator1, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "Iterator must not be null", "Enumeration must not be null", "");
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode("Iterator must not be null");
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 977);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Y#2-A]9}SEH>1sfBnB", "", (Throwable) null);
      PredicateTransformer<SQLNonTransientException> predicateTransformer1 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet.of(locale_FilteringMode1, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode2);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Locale.FilteringMode>>) linkedHashSet0);
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) singletonIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MapIterator<SQLClientInfoException, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (Iterator<? extends SQLClientInfoException>) mapIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) zippingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0);
      Predicate<Properties> predicate0 = FalsePredicate.falsePredicate();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("transformer may not be null");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      Transformer<Properties, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Properties>) predicate0, (Transformer<? super Properties, ? extends String>) transformer0, (Transformer<? super Properties, ? extends String>) transformer0);
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableListIterator0, (Transformer<? super Properties, ? extends String>) transformer1);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(arrayList0);
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) reverseListIterator0);
      IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((PriorityQueue<Object>[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<Integer>[] arrayDequeArray0 = (ArrayDeque<Integer>[]) Array.newInstance(ArrayDeque.class, 4);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<Integer> arrayDeque1 = new ArrayDeque<Integer>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<Integer> arrayDeque2 = new ArrayDeque<Integer>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<Integer> arrayDeque3 = new ArrayDeque<Integer>();
      arrayDequeArray0[3] = arrayDeque3;
      ResettableIterator<ArrayDeque<Integer>> resettableIterator0 = IteratorUtils.arrayIterator(arrayDequeArray0);
      IteratorUtils.chainedIterator((Iterator<? extends ArrayDeque<Integer>>) resettableIterator0, (Iterator<? extends ArrayDeque<Integer>>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Iterator<Integer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.size(iterator0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      OrderedMapIterator<SQLTransientConnectionException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLTransientConnectionException, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, String>(orderedMapIterator0);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) abstractMapIteratorDecorator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ChainedTransformer.chainedTransformer((Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The transformer array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode0, locale_FilteringMode0);
      IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) enumSet0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Locale.FilteringMode>>) arrayDeque0);
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode0, locale_FilteringMode0);
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<Locale.FilteringMode> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Locale.FilteringMode>>) arrayDeque0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ComparatorPredicate.Criterion>) null, (Predicate<? super ComparatorPredicate.Criterion>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0);
      Predicate<Properties> predicate0 = FalsePredicate.falsePredicate();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("transformer may not be null");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      Transformer<Properties, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Properties>) predicate0, (Transformer<? super Properties, ? extends String>) transformer0, (Transformer<? super Properties, ? extends String>) transformer0);
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableListIterator0, (Transformer<? super Properties, ? extends String>) transformer1);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(arrayList0);
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) reverseListIterator0);
      IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) listIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends Properties>) resettableListIterator0);
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[4];
      instanceofPredicateArray0[0] = instanceofPredicate0;
      instanceofPredicateArray0[1] = instanceofPredicate0;
      instanceofPredicateArray0[2] = instanceofPredicate0;
      instanceofPredicateArray0[3] = instanceofPredicate0;
      ObjectArrayListIterator<InstanceofPredicate> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<InstanceofPredicate>(instanceofPredicateArray0, 1322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Y#2-A]9}SEH>1sfBnB", "", (Throwable) null);
      PredicateTransformer<SQLNonTransientException> predicateTransformer1 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      predicateTransformer1.transform(sQLFeatureNotSupportedException0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) predicate0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object> predicate2 = UniquePredicate.uniquePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate2, predicate1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(orPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate1;
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = (Predicate<Object>) orPredicate0;
      predicateArray0[6] = (Predicate<Object>) uniquePredicate0;
      OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      OrderedMapIterator<SQLDataException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLDataException sQLDataException0 = IteratorUtils.find((Iterator<SQLDataException>) orderedMapIterator0, (Predicate<? super SQLDataException>) predicateArray0[3]);
      assertNull(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[1];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0);
      OrderedMapIterator<SQLFeatureNotSupportedException, TreeSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, 3571L);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) boundedIterator0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<Locale.FilteringMode> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Locale.FilteringMode>>) arrayDeque0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("BfOUV5pb5dc");
      Object object0 = new Object();
      EqualPredicate.equalPredicate((Object) predicate0);
      MapIterator<SQLDataException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      BoundedIterator<SQLDataException> boundedIterator1 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) mapIterator0, (long) 0);
      Predicate<SQLDataException> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLDataException>>) arrayDeque0);
      IteratorUtils.find((Iterator<SQLDataException>) boundedIterator1, (Predicate<? super SQLDataException>) predicate1);
      IteratorUtils.isEmpty(zippingIterator0);
      SkippingIterator<Properties> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Properties>) resettableListIterator0, (long) 0);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLException>) orderedIterator0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) linkedList0);
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) list0);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLClientInfoException, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Y#2-A]9}SEH>1sfBnB", "Y#2-A]9}SEH>1sfBnB", (Throwable) null);
      Boolean boolean0 = predicateTransformer0.transform(sQLFeatureNotSupportedException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) boolean0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[0] = predicate1;
      Predicate<Object> predicate2 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate2;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate2);
      predicateArray0[2] = (Predicate<Object>) orPredicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[3] = (Predicate<Object>) uniquePredicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate2);
      predicateArray0[4] = (Predicate<Object>) nullIsExceptionPredicate0;
      Predicate<Object> predicate3 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      SQLDataException sQLDataException0 = IteratorUtils.find((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) predicate3);
      assertNull(sQLDataException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[6];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("s[V'EI]*8o", "Cannot add to list until next() or previous() called", 316);
      SQLTransientException sQLTransientException0 = new SQLTransientException("s[V'EI]*8o", "", 316, sQLIntegrityConstraintViolationException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", ":5Tqr!", sQLTransientException0);
      sQLExceptionArray0[0] = (SQLException) sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("F|_CW$</1UTR9");
      sQLExceptionArray0[1] = (SQLException) sQLRecoverableException1;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientException0);
      sQLExceptionArray0[2] = (SQLException) sQLTransientConnectionException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("s[V'EI]*8o", "", 2855, sQLExceptionArray0[1]);
      sQLExceptionArray0[3] = (SQLException) sQLTimeoutException0;
      SQLException sQLException0 = new SQLException("s[V'EI]*8o", sQLIntegrityConstraintViolationException0);
      sQLExceptionArray0[4] = sQLException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("*w#G$R R,F!od", sQLExceptionArray0[3]);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLSyntaxErrorException0);
      sQLExceptionArray0[5] = (SQLException) sQLTransactionRollbackException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Cannot add to list until next() or previous() called", sQLExceptionArray0[0]);
      sQLExceptionArray0[6] = (SQLException) sQLFeatureNotSupportedException0;
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(vector0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientException>) loopingListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) null, 368);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      OrderedMapIterator<SQLTransientConnectionException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLTransientConnectionException, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, String>(orderedMapIterator0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 9);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) abstractMapIteratorDecorator0;
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) abstractMapIteratorDecorator0;
      iteratorArray0[3] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[4] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[5] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      iteratorArray0[6] = (Iterator<SQLTransientConnectionException>) abstractMapIteratorDecorator0;
      iteratorArray0[7] = (Iterator<SQLTransientConnectionException>) abstractMapIteratorDecorator0;
      iteratorArray0[8] = (Iterator<SQLTransientConnectionException>) orderedMapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      LinkedList<SQLSyntaxErrorException> linkedList0 = new LinkedList<SQLSyntaxErrorException>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Object, BatchUpdateException> hashMap0 = new HashMap<Object, BatchUpdateException>();
      Transformer<Object, BatchUpdateException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends BatchUpdateException>) hashMap0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator((BatchUpdateException) null, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      Transformer<Object, String> transformer1 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString(iterator0, (Transformer<? super BatchUpdateException, String>) transformer1);
      Predicate<BatchUpdateException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) predicate0, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode2, locale_FilteringMode2);
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) enumSet0);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<Locale.FilteringMode> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Locale.FilteringMode>>) arrayDeque0);
      // Undeclared exception!
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) resettableIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MapIterator<ArrayDeque<SQLTransientException>, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      int int0 = (-2337);
      int int1 = (-2199);
      DataTruncation dataTruncation0 = new DataTruncation((-2337), false, false, (-2337), (-2199));
      dataTruncation0.getNextWarning();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (Throwable) null);
      IteratorUtils.contains((Iterator<ArrayDeque<SQLTransientException>>) mapIterator0, (Object) sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0, 433, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, SQLTransactionRollbackException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLTransientException, SQLTransientException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransientException, ? extends SQLTransientException>) mapIterator0);
      IteratorUtils.toString((Iterator<SQLTransientException>) mapIterator1);
      Boolean[] booleanArray0 = new Boolean[8];
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Transformer<Object, Boolean> transformer0 = null;
      // Undeclared exception!
      try { 
        TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The transformer to call must not be null
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Stack<SQLTransientConnectionException>[] stackArray0 = (Stack<SQLTransientConnectionException>[]) Array.newInstance(Stack.class, 5);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      stackArray0[0] = stack0;
      Stack<SQLTransientConnectionException> stack1 = new Stack<SQLTransientConnectionException>();
      stackArray0[1] = stack1;
      Stack<SQLTransientConnectionException> stack2 = new Stack<SQLTransientConnectionException>();
      stackArray0[2] = stack2;
      Stack<SQLTransientConnectionException> stack3 = new Stack<SQLTransientConnectionException>();
      stackArray0[3] = stack3;
      Stack<SQLTransientConnectionException> stack4 = new Stack<SQLTransientConnectionException>();
      stackArray0[4] = stack4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stackArray0, 0, (-1825));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyIterator();
      Iterator<StringTokenizer> iterator0 = null;
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) null, (Predicate<? super StringTokenizer>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) iterator0, (Transformer<? super BatchUpdateException, ? extends IIOMetadataNode>) transformer0);
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) priorityQueue0);
      Hashtable<SQLTransientConnectionException, EnumSet<Locale.FilteringMode>> hashtable0 = new Hashtable<SQLTransientConnectionException, EnumSet<Locale.FilteringMode>>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("m$:E");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("Node must not be null", "Node must not be null", (-65), sQLTransientConnectionException0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1);
      hashtable0.put(sQLTransientConnectionException1, enumSet0);
      EntrySetMapIterator<SQLTransientConnectionException, EnumSet<Locale.FilteringMode>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, EnumSet<Locale.FilteringMode>>(hashtable0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientConnectionException, EnumSet<Locale.FilteringMode>>) entrySetMapIterator0);
      Transformer<Object, String> transformer1 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLTimeoutException>) null, (Transformer<? super SQLTimeoutException, String>) transformer1);
      DataTruncation dataTruncation0 = new DataTruncation((-65), true, true, (-65), (-65));
      ArrayIterator<ArrayDeque<SQLNonTransientException>> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<ArrayDeque<SQLNonTransientException>>(dataTruncation0, 0, (-65));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[5];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("u#Z:>T7FUe(eQ+3");
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("u#Z:>T7FUe(eQ+3", "u#Z:>T7FUe(eQ+3");
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLNonTransientConnectionException1;
      SQLDataException sQLDataException0 = new SQLDataException("u#Z:>T7FUe(eQ+3", "u#Z:>T7FUe(eQ+3", sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLDataException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null);
      sQLNonTransientExceptionArray0[3] = sQLNonTransientException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException((String) null, "f3HoA/9/W(zH!.", sQLNonTransientExceptionArray0[2]);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLNonTransientConnectionException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 0, 1843);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0);
      Predicate<Properties> predicate0 = FalsePredicate.falsePredicate();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("transformer may not be null");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      Transformer<Properties, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Properties>) predicate0, (Transformer<? super Properties, ? extends String>) transformer0, (Transformer<? super Properties, ? extends String>) transformer0);
      IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableListIterator0, (Transformer<? super Properties, ? extends String>) transformer1);
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(arrayList0);
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) reverseListIterator0);
      IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) listIterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) hashSet0);
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator1 = IteratorUtils.singletonListIterator(properties0);
      ListIterator<Properties> listIterator2 = IteratorUtils.unmodifiableListIterator(listIterator1);
      assertFalse(listIterator2.equals((Object)listIterator1));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "");
      sQLFeatureNotSupportedException0.spliterator();
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 3);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[2] = class2;
      InvokerTransformer<SQLException, SQLFeatureNotSupportedException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLFeatureNotSupportedException>("org.apache.commons.collections4.iterators.SingletonListIterator", classArray0, classArray0);
      IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) invokerTransformer0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLDataException sQLDataException0 = new SQLDataException("", sQLFeatureNotSupportedException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("org.apache.commons.collections4.iterators.SingletonListIterator");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException((String) null, "", sQLFeatureNotSupportedException0);
      sQLDataExceptionArray0[3] = sQLDataException3;
      sQLDataException3.fillInStackTrace();
      SQLDataException sQLDataException4 = new SQLDataException((String) null, "", 0);
      sQLDataExceptionArray0[4] = sQLDataException4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 380, (-157));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLException>) orderedIterator0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) linkedList0);
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) list0);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLClientInfoException, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException>(orderedMapIterator0);
      List<SQLClientInfoException> list1 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) abstractMapIteratorDecorator0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator1 = IteratorUtils.loopingListIterator(list1);
      assertFalse(resettableListIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewIterator", "", hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", 188, map0, (Throwable) null);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", map1, (Throwable) null);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("", "Y[", map1);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("", "", 0, hashtable0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("',im$,/2*f%d^3", "List must not be null", (-243), map1);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("Y[", "',im$,/2*f%d^3", hashtable0, sQLClientInfoException4);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException7;
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException("Transformer must not be null", hashtable1, sQLClientInfoException5);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 31, (-243));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      IteratorUtils.arrayListIterator(propertiesArray0, 0);
      FalsePredicate.falsePredicate();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("transformer may not be null");
      FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      MapIterator<SQLDataException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) mapIterator0, 964L);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>(0);
      Predicate<SQLDataException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLDataException>>) arrayList0);
      SQLDataException sQLDataException0 = new SQLDataException("5AcK`9O1k\"7w", "transformer may not be null", 0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, true);
      singletonIterator0.reset();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      arrayList0.add(instanceofPredicate0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) singletonIterator0);
      IteratorUtils.find(iterator0, (Predicate<? super SQLDataException>) predicate0);
      assertFalse(singletonIterator0.hasNext());
      
      boolean boolean0 = IteratorUtils.isEmpty(boundedIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      IteratorUtils.toArray((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, class0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException("5AcK`9O1k\"7w", (String) null, 1);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, false);
      singletonIterator0.reset();
      Class<InstanceofPredicate> class1 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class1);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      arrayList0.add(instanceofPredicate1);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) singletonIterator0);
      IteratorUtils.find((Iterator<SQLDataException>) singletonIterator0, (Predicate<? super SQLDataException>) instanceofPredicate1);
      assertFalse(singletonIterator0.hasNext());
      
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLException>) orderedIterator0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) linkedList0);
      LinkedList<SQLSyntaxErrorException> linkedList1 = new LinkedList<SQLSyntaxErrorException>();
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLClientInfoException, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLClientInfoException, SQLTransientException>(orderedMapIterator0);
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) abstractMapIteratorDecorator0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 1);
      AnyPredicate<SQLException> anyPredicate0 = new AnyPredicate<SQLException>(predicateArray0);
      OrPredicate<SQLException> orPredicate0 = new OrPredicate<SQLException>(anyPredicate0, anyPredicate0);
      predicateArray0[0] = (Predicate<SQLException>) orPredicate0;
      NonePredicate<SQLNonTransientException> nonePredicate0 = new NonePredicate<SQLNonTransientException>(predicateArray0);
      SQLDataException sQLDataException0 = IteratorUtils.find((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) nonePredicate0);
      assertNull(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      int[] intArray0 = new int[1];
      intArray0[0] = (-55);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "Raw2,Y)`", intArray0, sQLTransientConnectionException0);
      sQLInvalidAuthorizationSpecException0.initCause(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      OrderedMapIterator<ComparatorPredicate.Criterion, ServiceLoader<SQLException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      Class<String> class2 = String.class;
      InstanceofPredicate.instanceOfPredicate(class2);
      IteratorUtils.matchesAll((Iterator<ComparatorPredicate.Criterion>) orderedMapIterator0, (Predicate<? super ComparatorPredicate.Criterion>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) instanceofPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<PriorityQueue<Class<Integer>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-2914), false, false, (-2914), 0);
      dataTruncation0.getParameter();
      dataTruncation0.getSuppressed();
      dataTruncation0.getLocalizedMessage();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "eXQx`:'([uo";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("eXQx`:'([uo");
      int int0 = 1360;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0, 1360, 1360);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "2I";
      stringArray0[1] = "";
      String string0 = "o";
      stringArray0[2] = "o";
      stringArray0[3] = "";
      stringArray0[4] = "_AUsqm_$eCR__X";
      stringArray0[5] = "org.apache.commons.collections4.iterators.ArrayIterator";
      stringArray0[6] = "Qc{Njmv#~ vl[hi";
      stringArray0[7] = "The type to check instanceof must not be null";
      stringArray0[8] = "";
      int int0 = 0;
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 0);
      ListIteratorWrapper<String> listIteratorWrapper0 = new ListIteratorWrapper<String>(objectArrayListIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 4);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 3);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[2] = class2;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer("2I", (Class<?>[]) classArray0, (Object[]) stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLException sQLException0 = new SQLException("Transformer collection must not be null");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLException0);
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 5);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      classArray0[0] = class0;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[1] = class1;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      classArray0[2] = class2;
      Class<IIOMetadataNode> class3 = IIOMetadataNode.class;
      classArray0[3] = class3;
      Class<IIOMetadataNode> class4 = IIOMetadataNode.class;
      classArray0[4] = class4;
      InvokerTransformer<Object, BatchUpdateException> invokerTransformer0 = new InvokerTransformer<Object, BatchUpdateException>("", classArray0, classArray0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) invokerTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0, 1196);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      linkedList0.offer((SQLDataException) null);
      linkedList0.add((SQLDataException) null);
      IteratorUtils.loopingListIterator((List<SQLDataException>) linkedList0);
      LinkedList<BatchUpdateException> linkedList1 = new LinkedList<BatchUpdateException>();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1081;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 0;
      intArray0[6] = 1513;
      intArray0[7] = 87;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "xFeg", intArray0);
      batchUpdateException0.getUpdateCounts();
      linkedList1.add(batchUpdateException0);
      LoopingIterator<BatchUpdateException> loopingIterator0 = new LoopingIterator<BatchUpdateException>(linkedList1);
      loopingIterator0.reset();
      loopingIterator0.hasNext();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) loopingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("U+,=L\"VZ#!.}|hWe>");
      Predicate<Object> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      Transformer<BatchUpdateException, String> transformer1 = ConstantTransformer.constantTransformer("");
      IfTransformer<BatchUpdateException, String> ifTransformer0 = new IfTransformer<BatchUpdateException, String>(predicate2, transformer1, transformer1);
      IteratorUtils.toString((Iterator<BatchUpdateException>) orderedMapIterator0, (Transformer<? super BatchUpdateException, String>) ifTransformer0);
      int[] intArray0 = new int[9];
      intArray0[0] = 721;
      intArray0[1] = 721;
      intArray0[2] = 721;
      intArray0[3] = 721;
      intArray0[4] = 721;
      intArray0[5] = 721;
      intArray0[6] = 721;
      intArray0[7] = 721;
      intArray0[8] = 721;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "[]", 721, intArray0, sQLTransientException0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      assertFalse(listIterator0.hasPrevious());
  }
}
