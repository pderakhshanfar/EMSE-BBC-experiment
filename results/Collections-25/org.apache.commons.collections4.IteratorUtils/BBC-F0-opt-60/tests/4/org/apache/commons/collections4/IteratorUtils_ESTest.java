/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 11:43:13 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (String) null, 20);
      Transformer<Object, SQLTransactionRollbackException> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, (long) 20, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLTransactionRollbackException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Integer integer0 = new Integer(2376);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate1);
      ListIterator<Object> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<?>) singletonListIterator0, (Predicate<? super Object>) predicate2);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) listIterator0, 2376);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[2];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\",P=Je@", "@g3_H", 0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("@g3_H");
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      int int0 = (-638);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0, (-638));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale_FilteringMode0;
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 3);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("^~\"b8I/u", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) objectArrayListIterator0, (Predicate<? super Object>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '^~\"b8I/u' on 'class java.util.Locale$FilteringMode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) "{&>^gt_1HOp,sbjYP&");
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(linkedList0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0);
      reverseListIterator0.add(dataTruncation0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) reverseListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(stack0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      loopingListIterator0.add(instanceofPredicate0);
      stack0.add(instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(loopingListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      ResettableIterator<LinkedList<SQLTransientConnectionException>> resettableIterator0 = IteratorUtils.singletonIterator(linkedList0);
      LinkedList<SQLTransientException> linkedList1 = new LinkedList<SQLTransientException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      linkedList1.add((SQLTransientException) sQLTimeoutException0);
      linkedList1.removeFirst();
      linkedList0.containsAll(linkedList1);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedList<SQLTransientConnectionException>>) resettableIterator0, (Transformer<? super LinkedList<SQLTransientConnectionException>, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MapIterator<InstanceofPredicate, TreeSet<SQLNonTransientConnectionException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) mapIterator0, (Class<InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.singletonIterator((Object) "`ZuQLGqK|POi7G+");
      OrderedMapIterator<InstanceofPredicate, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends InstanceofPredicate>) orderedMapIterator0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) iterator0, class0);
      int int0 = 554;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null, 554);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>((SQLDataException) null);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) singletonIterator0, (Transformer<? super SQLDataException, String>) transformer0, ")c36dnHggUXLrHv[", ")c36dnHggUXLrHv[", "G]< ]!tabz|L?UvJdd");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = new Object();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator(object0);
      Object object1 = new Object();
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.toString((Iterator<Object>) resettableIterator0);
      String string0 = "";
      SQLDataException sQLDataException0 = new SQLDataException("");
      LinkedList<ArrayDeque<Object>> linkedList0 = new LinkedList<ArrayDeque<Object>>();
      LoopingListIterator<ArrayDeque<Object>> loopingListIterator0 = new LoopingListIterator<ArrayDeque<Object>>(linkedList0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      linkedList0.add((ArrayDeque<Object>) null);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      priorityQueue0.add(instanceofPredicate0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayDeque<Object>>) loopingListIterator0, (Predicate<? super ArrayDeque<Object>>) predicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Locale.LanguageRange[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, 0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) resettableListIterator0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) class0;
      objectArray0[7] = (Object) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(objectArray0, 0, (-577));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends InstanceofPredicate>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[2] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[4] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[5] = (Predicate<Object>) instanceofPredicate0;
      Transformer<Object, InstanceofPredicate>[] transformerArray0 = (Transformer<Object, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 6);
      Hashtable<Object, InstanceofPredicate> hashtable0 = new Hashtable<Object, InstanceofPredicate>();
      Transformer<Object, InstanceofPredicate> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends InstanceofPredicate>) hashtable0);
      transformerArray0[0] = transformer0;
      SwitchTransformer<Object, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<Object, InstanceofPredicate>(predicateArray0, transformerArray0, transformer0);
      transformerArray0[1] = (Transformer<Object, InstanceofPredicate>) switchTransformer0;
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[4] = class0;
      classArray0[3] = class0;
      classArray0[4] = class0;
      classArray0[5] = class0;
      InvokerTransformer<Object, InstanceofPredicate> invokerTransformer0 = new InvokerTransformer<Object, InstanceofPredicate>("e?", classArray0, predicateArray0);
      transformerArray0[2] = (Transformer<Object, InstanceofPredicate>) invokerTransformer0;
      SwitchTransformer<Object, InstanceofPredicate> switchTransformer1 = new SwitchTransformer<Object, InstanceofPredicate>(predicateArray0, transformerArray0, transformerArray0[1]);
      transformerArray0[3] = (Transformer<Object, InstanceofPredicate>) switchTransformer1;
      IfTransformer<Object, InstanceofPredicate> ifTransformer0 = new IfTransformer<Object, InstanceofPredicate>(predicateArray0[2], transformer0, switchTransformer1);
      transformerArray0[4] = (Transformer<Object, InstanceofPredicate>) ifTransformer0;
      Transformer<Object, InstanceofPredicate> transformer1 = ConstantTransformer.constantTransformer(instanceofPredicate0);
      transformerArray0[5] = transformer1;
      Transformer<Object, InstanceofPredicate> transformer2 = SwitchTransformer.switchTransformer((Predicate<? super Object>[]) predicateArray0, (Transformer<? super Object, ? extends InstanceofPredicate>[]) transformerArray0, (Transformer<? super Object, ? extends InstanceofPredicate>) transformerArray0[2]);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.objectGraphIterator(instanceofPredicate0, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer2);
      Class<InstanceofPredicate> class1 = InstanceofPredicate.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) iterator0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'e?' on 'class org.apache.commons.collections4.functors.InstanceofPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("spsam=T", "spsam=T", (Throwable) null);
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      Iterator<Boolean> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<Boolean> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Boolean>) iterator0);
      Iterator<Boolean> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator1, (Transformer<? super Boolean, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.spliterator();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) arrayList0);
      arrayList0.add(", ");
      Transformer<String, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) resettableIterator0, (Transformer<? super String, String>) transformer0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.singletonIterator((Object) ":~KS >{a>e");
      IteratorUtils.getIterator(":~KS >{a>e");
      Comparator<Object> comparator0 = null;
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 5);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      DataTruncation dataTruncation0 = new DataTruncation(10, true, false, 10, 128);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(3713, true, false, 128, 3713, dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-505), false, false, 10, 8);
      dataTruncationArray0[2] = dataTruncation2;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableIterator0;
      Iterator<DataTruncation> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[1] = iterator0;
      MapIterator<DataTruncation, InstanceofPredicate> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[2] = (Iterator<DataTruncation>) mapIterator0;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[3] = (Iterator<DataTruncation>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      HashSet<SQLTransientException>[] hashSetArray0 = (HashSet<SQLTransientException>[]) Array.newInstance(HashSet.class, 0);
      ResettableListIterator<HashSet<SQLTransientException>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashSetArray0, (int) 0, (int) 0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) resettableListIterator0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, (int) 0);
      Iterator<InstanceofPredicate> iterator0 = null;
      try {
        iterator0 = new ArrayListIterator<InstanceofPredicate>(resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      ResettableIterator<InstanceofPredicate> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) resettableIterator0, class0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>((SQLRecoverableException) null);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsExceptionPredicate<SQLException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLException>(predicate0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLRecoverableException>) singletonListIterator0, (Predicate<? super SQLRecoverableException>) nullIsExceptionPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) listIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.singletonIterator(object0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("org.apache.commons.collections4.functors.NOPClosure", "Estimated size must be greater than 0", 0, (int[]) null);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((int[]) null);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      ObjectArrayIterator<BatchUpdateException> objectArrayIterator0 = new ObjectArrayIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("org.apache.commons.collections4.functors.NOPClosure");
      IteratorUtils.toString((Iterator<BatchUpdateException>) objectArrayIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "", "end", "Estimated size must be greater than 0");
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      OrderedIterator<Transformer<Object, String>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterable<Transformer<Object, String>> iterable0 = IteratorUtils.asIterable((Iterator<? extends Transformer<Object, String>>) orderedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = new Object();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator(object0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("S%pS)nh9QCa9I", "]y4NFOP|8QdJe", (int[]) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("S%pS)nh9QCa9I", "S%pS)nh9QCa9I", batchUpdateException0);
      SQLWarning sQLWarning0 = new SQLWarning("S%pS)nh9QCa9I", ";JIL%h6l\bYB7t2", sQLFeatureNotSupportedException0);
      IteratorUtils.getIterator(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("@|rNfH^N80X+{zXka", "", (-2048));
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, false);
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonIterator0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 6);
      MapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) mapIterator0;
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iteratorArray0[0], (Predicate<? super SQLIntegrityConstraintViolationException>) predicate1);
      iteratorArray0[1] = iterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      IteratorUtils.getIterator("");
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) comparator0, (Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.singletonIterator(object0);
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = new Object();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) null);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertTrue(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Iterator<SQLTransactionRollbackException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NullPredicate.nullPredicate();
      EmptyListIterator.resettableEmptyListIterator();
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[0];
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) uniquePredicate0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<BatchUpdateException>) linkedList0);
      int[] intArray0 = new int[0];
      SQLDataException sQLDataException0 = new SQLDataException("733");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("K8B", "", 31, sQLDataException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLSyntaxErrorException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (String) null, (-2376), intArray0, sQLTransientException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(intArray0, batchUpdateException0);
      linkedList0.add(batchUpdateException1);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 1);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      objectArray0[1] = object1;
      objectArray0[2] = (Object) listIterator0;
      InvokerTransformer<BatchUpdateException, String> invokerTransformer0 = new InvokerTransformer<BatchUpdateException, String>("+kse", classArray0, objectArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) resettableListIterator0, (Transformer<? super BatchUpdateException, String>) invokerTransformer0, "+kse", "/,:sNt>i^zA", "B;");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, IIOMetadataNode>(orderedMapIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) abstractOrderedMapIteratorDecorator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      IteratorUtils.size(iterator0);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) stack0);
      Stack<Locale.FilteringMode> stack1 = new Stack<Locale.FilteringMode>();
      IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack1);
      Integer integer0 = new Integer(1073741824);
      Integer integer1 = new Integer(1073741824);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      Integer integer2 = new Integer((-1));
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer3;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Integer>) resettableIterator0, (int) integerArray0[5]);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.singletonIterator((Object) uniquePredicate0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "Entry does not exist: ", 0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "dY;G9)Ju\"v[K?Jr", 0, sQLNonTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "zx)HBcB^e9vN2z@[", (int[]) null, sQLWarning0);
      ListIterator<BatchUpdateException> listIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, String>) invokerTransformer0, "", "yu2lFis=", "[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NullPredicate.nullPredicate();
      EmptyListIterator.resettableEmptyListIterator();
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>((SortedSet<? extends SQLTransactionRollbackException>) treeSet0);
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) loopingIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Iterator<SQLSyntaxErrorException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(stack0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      loopingListIterator0.add(instanceofPredicate0);
      // Undeclared exception!
      IteratorUtils.size(loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.singletonIterator(object0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[8];
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      Class<String> class1 = String.class;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[4] = instanceofPredicate4;
      Class<SQLDataException> class2 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[5] = instanceofPredicate5;
      Class<Properties> class3 = Properties.class;
      InstanceofPredicate instanceofPredicate6 = new InstanceofPredicate(class3);
      instanceofPredicateArray0[6] = instanceofPredicate6;
      Class<ClientInfoStatus> class4 = ClientInfoStatus.class;
      InstanceofPredicate instanceofPredicate7 = new InstanceofPredicate(class4);
      instanceofPredicateArray0[7] = instanceofPredicate7;
      ObjectArrayIterator<InstanceofPredicate> objectArrayIterator0 = new ObjectArrayIterator<InstanceofPredicate>(instanceofPredicateArray0);
      Class<InstanceofPredicate> class5 = InstanceofPredicate.class;
      IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) objectArrayIterator0, class5);
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertTrue(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}Vyk[G%M~/l'%");
      IteratorUtils.singletonIterator(object0);
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      OrderedMapIterator<SQLDataException, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, StringTokenizer> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends StringTokenizer>) orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) orderedMapIterator1);
      MapIterator<SQLTransactionRollbackException, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (Iterator<? extends SQLTransactionRollbackException>) mapIterator0, (Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      Iterable<SQLTransientException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLTransientException>) zippingIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(stack0);
      IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) loopingListIterator0, class0);
      ConstantTransformer.nullTransformer();
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0, false);
      Hashtable<Object, Locale.FilteringMode> hashtable0 = new Hashtable<Object, Locale.FilteringMode>();
      Transformer<Object, Locale.FilteringMode> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Locale.FilteringMode>) hashtable0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientException>) singletonIterator0, (Transformer<? super SQLTransientException, ? extends Locale.FilteringMode>) transformer0);
      boolean boolean0 = IteratorUtils.matchesAny(iterator0, (Predicate<? super Locale.FilteringMode>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 1);
      HashMap<Properties, SQLTransientException> hashMap0 = new HashMap<Properties, SQLTransientException>();
      EntrySetMapIterator<Properties, SQLTransientException> entrySetMapIterator0 = new EntrySetMapIterator<Properties, SQLTransientException>(hashMap0);
      entrySetMapIterator0.toString();
      iteratorArray0[0] = (Iterator<Properties>) entrySetMapIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) iteratorArray0);
      MapIterator<Locale.LanguageRange, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<Locale.LanguageRange, Integer> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      AbstractMapIteratorDecorator<Locale.LanguageRange, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.LanguageRange, Integer>(mapIterator1);
      IteratorUtils.toListIterator((Iterator<? extends Locale.LanguageRange>) abstractMapIteratorDecorator0);
      IteratorUtils.emptyIterator();
      int[] intArray0 = new int[7];
      intArray0[0] = (-78);
      intArray0[1] = 5;
      intArray0[2] = (-78);
      intArray0[3] = 5;
      intArray0[4] = (-78);
      intArray0[5] = (-78);
      intArray0[6] = 5;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("V93JmudF3aNgLT!=]", "H.", (-78), intArray0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      SQLDataException sQLDataException0 = new SQLDataException("#pQl:N.", "H.", 5, batchUpdateException1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.IteratorEnumeration", "org.apache.commons.collections4.iterators.IteratorEnumeration", (-78), sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      EmptyMapIterator.emptyMapIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      DataTruncation dataTruncation0 = new DataTruncation(2213, false, false, 0, 1614, sQLIntegrityConstraintViolationException0);
      dataTruncation0.getNextWarning();
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.singletonIterator((SQLWarning) null);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>(hashSet0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Transformer<String, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("'g@[H\u0005LCucbE/.`yM{");
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) transformer0);
      predicateArray0[0] = predicate1;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate2 = EqualPredicate.equalPredicate((Object) dataTruncation0, (Equator<Object>) defaultEquator0);
      predicateArray0[3] = predicate2;
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, (Closure<? super Object>[]) null, closure0);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0, (Closure<? super Object>) switchClosure0);
      IteratorUtils.apply((Iterator<SQLWarning>) resettableIterator0, (Closure<? super SQLWarning>) closure1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      Closure<SQLInvalidAuthorizationSpecException>[] closureArray0 = (Closure<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Closure.class, 0);
      ResettableListIterator<Closure<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.arrayListIterator(closureArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, IIOMetadataNode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, IIOMetadataNode>) orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      NullPredicate.nullPredicate();
      IteratorUtils.emptyListIterator();
      int int0 = IteratorUtils.size(mapIterator0);
      assertEquals(0, int0);
      
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 5);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[2] = class2;
      Class<Properties> class3 = Properties.class;
      classArray0[3] = class3;
      Class<Properties> class4 = Properties.class;
      classArray0[4] = class4;
      InvokerTransformer<SQLException, String> invokerTransformer0 = new InvokerTransformer<SQLException, String>("org.apache.commons.collections4.iterators.PeekingIterator", classArray0, classArray0);
      InvokerTransformer.invokerTransformer("0J2YYrE=Tph5jZR0|8");
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientException>) null, (Transformer<? super SQLNonTransientException, String>) invokerTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Locale.FilteringMode[]) null, 1875, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "AO&xp|JEW");
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      stack0.add(instanceofPredicate0);
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(stack0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) loopingListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      MapIterator<SQLWarning, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.apply((Iterator<SQLWarning>) mapIterator0, (Closure<? super SQLWarning>) closure0);
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode0.getParentNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      Integer[] integerArray0 = new Integer[0];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.singletonIterator(object0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) null, (Predicate<? super Locale.FilteringMode>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Integer>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.singletonIterator(object0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      UniquePredicate<ClientInfoStatus> uniquePredicate0 = new UniquePredicate<ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      uniquePredicate0.evaluate(clientInfoStatus0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends ClientInfoStatus>) null, (Predicate<? super ClientInfoStatus>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = new Object();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator(object0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.singletonIterator((Object) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNodeNS("", "");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      ExceptionClosure.exceptionClosure();
      ExceptionClosure.exceptionClosure();
      EmptyMapIterator.emptyMapIterator();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.singletonIterator(clientInfoStatus1);
      UniquePredicate<ClientInfoStatus> uniquePredicate0 = new UniquePredicate<ClientInfoStatus>();
      uniquePredicate0.evaluate(clientInfoStatus0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends ClientInfoStatus>) resettableIterator0, (Predicate<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      EmptyOrderedIterator.emptyOrderedIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, Iterator<SQLSyntaxErrorException>> transformer0 = InvokerTransformer.invokerTransformer("S@wd#;3 KL*");
      IfTransformer<SQLException, Iterator<SQLSyntaxErrorException>> ifTransformer0 = new IfTransformer<SQLException, Iterator<SQLSyntaxErrorException>>(uniquePredicate0, transformer0, transformer0);
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, IIOMetadataNode>) orderedMapIterator0);
      Boolean[] booleanArray0 = new Boolean[1];
      Predicate<SQLDataException> predicate0 = TruePredicate.truePredicate();
      PredicateTransformer<SQLDataException> predicateTransformer0 = new PredicateTransformer<SQLDataException>(predicate0);
      SQLDataException sQLDataException0 = new SQLDataException("+U");
      Boolean boolean0 = predicateTransformer0.transform(sQLDataException0);
      booleanArray0[0] = boolean0;
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      ListIteratorWrapper<Boolean> listIteratorWrapper0 = new ListIteratorWrapper<Boolean>(objectArrayIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ListIterator<Boolean> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Boolean>) listIteratorWrapper0);
      boolean boolean1 = IteratorUtils.contains((Iterator<Boolean>) listIterator0, (Object) listIteratorWrapper0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IteratorUtils.getIterator("Cannot add to list until next() or previus() called");
      ResettableIterator<InstanceofPredicate> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) resettableIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      OrderedMapIterator<InstanceofPredicate, Locale.FilteringMode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<InstanceofPredicate, Locale.FilteringMode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<InstanceofPredicate, Locale.FilteringMode>(orderedMapIterator0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) abstractOrderedMapIteratorDecorator0, 1);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) list0);
      predicateArray0[0] = predicate0;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(abstractOrderedMapIteratorDecorator0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(nonePredicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLException>) null, (Predicate<? super SQLException>) nullIsExceptionPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "XsLC}S ,O_", "e|G6L", "");
      Transformer<SQLTransactionRollbackException, Iterator<SQLSyntaxErrorException>> transformer1 = ConstantTransformer.nullTransformer();
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Iterator<SQLSyntaxErrorException>>) transformer1);
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 2);
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      LoopingListIterator<Locale.FilteringMode> loopingListIterator0 = new LoopingListIterator<Locale.FilteringMode>(vector0);
      iteratorArray0[0] = (Iterator<Locale.FilteringMode>) loopingListIterator0;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0, false);
      iteratorArray0[1] = (Iterator<Locale.FilteringMode>) singletonIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends Locale.FilteringMode>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) orderedIterator0, (-1501L), (-360L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NullPredicate.nullPredicate();
      EmptyListIterator.resettableEmptyListIterator();
      InvokerTransformer.invokerTransformer("ck");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 3159, 3159);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "";
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Factory<Locale.FilteringMode> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Locale.FilteringMode> factoryTransformer0 = new FactoryTransformer<Object, Locale.FilteringMode>(factory0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.objectGraphIterator(locale_FilteringMode0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      IteratorUtils.singletonIterator(object0);
      Object object1 = new Object();
      Class<SQLDataException> class0 = SQLDataException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      IteratorUtils.toString((Iterator<Object>) resettableIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("");
      LinkedList<ArrayDeque<Object>> linkedList0 = new LinkedList<ArrayDeque<Object>>();
      LoopingListIterator<ArrayDeque<Object>> loopingListIterator0 = new LoopingListIterator<ArrayDeque<Object>>(linkedList0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      priorityQueue0.add(instanceofPredicate0);
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      IteratorUtils.matchesAll((Iterator<ArrayDeque<Object>>) loopingListIterator0, (Predicate<? super ArrayDeque<Object>>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 1928;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1928);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, IIOMetadataNode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, IIOMetadataNode>) orderedMapIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      MapIterator<SQLWarning, SQLIntegrityConstraintViolationException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLWarning>) mapIterator1, (Closure<? super SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, String>) null, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, (Throwable) null);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
      assertEquals("[]", string0);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.singletonIterator(clientInfoStatus0);
      UniquePredicate<ClientInfoStatus> uniquePredicate0 = new UniquePredicate<ClientInfoStatus>();
      uniquePredicate0.evaluate(clientInfoStatus0);
      Iterator<ClientInfoStatus> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends ClientInfoStatus>) resettableIterator0, (Predicate<? super ClientInfoStatus>) uniquePredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDequeArray0[0] = arrayDeque0;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "e|G6L", "", "");
      Transformer<SQLTransactionRollbackException, Iterator<SQLSyntaxErrorException>> transformer1 = ConstantTransformer.nullTransformer();
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Iterator<SQLSyntaxErrorException>>) transformer1);
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 5);
      transformerArray0[0] = transformer0;
      transformerArray0[1] = transformer0;
      transformerArray0[2] = transformer0;
      transformerArray0[3] = transformer0;
      transformerArray0[4] = transformer0;
      ResettableIterator<Transformer<Object, String>> resettableIterator0 = IteratorUtils.arrayIterator(transformerArray0, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      Closure<Object> closure0 = IfClosure.ifClosure((Predicate<? super Object>) uniquePredicate0, (Closure<? super Object>) transformerClosure0);
      IteratorUtils.apply((Iterator<SQLWarning>) null, (Closure<? super SQLWarning>) closure0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (Throwable) null);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      OrderedMapIterator<InstanceofPredicate, LinkedHashSet<IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<InstanceofPredicate, LinkedHashSet<IIOMetadataNode>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<InstanceofPredicate, LinkedHashSet<IIOMetadataNode>>) orderedMapIterator0);
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) mapIterator0, 197);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) list0);
      Object object0 = new Object();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      Predicate<Object> predicate1 = IdentityPredicate.identityPredicate((Object) sQLTransientConnectionException0);
      assertFalse(predicate1.equals((Object)predicate0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 3);
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>();
      arrayDequeArray0[0] = arrayDeque1;
      arrayDequeArray0[1] = arrayDeque0;
      arrayDequeArray0[2] = arrayDeque0;
      ObjectArrayIterator<ArrayDeque<Object>> objectArrayIterator0 = new ObjectArrayIterator<ArrayDeque<Object>>(arrayDequeArray0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLWarning>[] classArray0 = (Class<SQLWarning>[]) Array.newInstance(Class.class, 3);
      Class<SQLWarning> class0 = SQLWarning.class;
      classArray0[0] = class0;
      Class<SQLWarning> class1 = SQLWarning.class;
      classArray0[1] = class1;
      Class<SQLWarning> class2 = SQLWarning.class;
      classArray0[2] = class2;
      Transformer<SQLTransactionRollbackException, Iterator<SQLSyntaxErrorException>> transformer0 = InvokerTransformer.invokerTransformer("h3/", (Class<?>[]) classArray0, (Object[]) classArray0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Iterator<SQLSyntaxErrorException>>) transformer0);
      MapIterator<Locale.FilteringMode, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Locale.FilteringMode>) mapIterator0);
      ListIterator<Locale.FilteringMode> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Locale.FilteringMode>) listIterator0, (Predicate<? super Locale.FilteringMode>) andPredicate0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, IIOMetadataNode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, IIOMetadataNode>) orderedMapIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      IteratorUtils.size(iterator0);
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      InvokerTransformer.invokerTransformer(",B,u?._#");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(",B,u?._#", (String) null, 0);
      Iterator<?> iterator1 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDequeArray0[0] = arrayDeque0;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toString((Iterator<BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "e|G6L", "", "");
      int int0 = (-2300);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "X~I?r6", (-2300));
      sQLSyntaxErrorException0.getSuppressed();
      Comparator<SQLSyntaxErrorException> comparator0 = (Comparator<SQLSyntaxErrorException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIteratorWrapper<SQLSyntaxErrorException> listIteratorWrapper0 = new ListIteratorWrapper<SQLSyntaxErrorException>(orderedIterator0);
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>) listIteratorWrapper0, (Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      IteratorUtils.isEmpty(listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagNameNS("", "%16J:0!:`3{GsNG<B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, IIOMetadataNode> mapIterator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, IIOMetadataNode>(orderedMapIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      IteratorUtils.size(iterator0);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) stack0);
      Stack<Locale.FilteringMode> stack1 = new Stack<Locale.FilteringMode>();
      IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack1);
      Integer integer0 = new Integer(1073741824);
      Integer integer1 = new Integer(878);
      Integer integer2 = new Integer(2422);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      Integer integer3 = new Integer((-1));
      integerArray0[1] = integer3;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      integerArray0[5] = integer2;
      integerArray0[6] = integer0;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      IteratorUtils.toList((Iterator<? extends Integer>) resettableIterator0, (int) integerArray0[5]);
      MapIterator<SQLNonTransientConnectionException, SQLTransientConnectionException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDequeArray0[0] = arrayDeque0;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      String string0 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JJ,{JbL/Z$hh0DY!");
      String string0 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("JJ,{JbL/Z$hh0DY!", "", 32);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.singletonIterator(sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.getSuppressed();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) comparator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      IteratorUtils.isEmpty(iterator0);
      String string1 = "Closure must not be null";
      SQLDataException sQLDataException0 = new SQLDataException("Closure must not be null", "Closure must not be null");
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      // Undeclared exception!
      try { 
        singletonIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.SingletonIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MapIterator<InstanceofPredicate, TreeSet<SQLNonTransientConnectionException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) mapIterator0, class0);
      MapIterator<SQLFeatureNotSupportedException, Integer> mapIterator1 = IteratorUtils.emptyMapIterator();
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) null, (Iterator<? extends SQLNonTransientException>) mapIterator1, (Iterator<? extends SQLNonTransientException>) mapIterator1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator(object0);
      Object object1 = new Object();
      objectArray0[0] = object1;
      Class<SQLDataException> class0 = SQLDataException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      HashMap<Object, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Object, SQLFeatureNotSupportedException>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLFeatureNotSupportedException>) hashMap0);
      Transformer<Object, SQLFeatureNotSupportedException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) nullIsTruePredicate0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer1, (Predicate<? super Object>) nullIsTruePredicate0);
      Object object2 = IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate1);
      assertNotNull(object2);
      
      objectArray0[1] = object2;
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.arrayIterator(objectArray0);
      IteratorUtils.toString((Iterator<Object>) resettableIterator1);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 6);
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<Object> arrayDeque2 = new ArrayDeque<Object>();
      arrayDequeArray0[2] = arrayDeque2;
      arrayDequeArray0[3] = arrayDeque0;
      ArrayDeque<Object> arrayDeque3 = new ArrayDeque<Object>();
      arrayDequeArray0[4] = arrayDeque3;
      arrayDequeArray0[5] = arrayDeque0;
      ObjectArrayIterator<ArrayDeque<Object>> objectArrayIterator0 = new ObjectArrayIterator<ArrayDeque<Object>>(arrayDequeArray0);
      ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate2 = ExceptionPredicate.exceptionPredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate2);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) nullIsTruePredicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<Object>>) objectArrayIterator0, (Predicate<? super ArrayDeque<Object>>) predicate0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.singletonIterator(object0);
      Object object1 = new Object();
      objectArray0[0] = object1;
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(instanceofPredicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(instanceofPredicate0, closure0);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) nullIsTruePredicate0, (Closure<? super Object>) ifClosure0);
      MapIterator<SQLWarning, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.apply((Iterator<SQLWarning>) mapIterator0, (Closure<? super SQLWarning>) closure1);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("|1B", "|1B", (Throwable) null);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      NullPredicate.nullPredicate();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) instanceofPredicate0);
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, IIOMetadataNode>) orderedMapIterator0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      HashMap<Object, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Object, SQLFeatureNotSupportedException>();
      HashMap<Object, SQLFeatureNotSupportedException> hashMap1 = new HashMap<Object, SQLFeatureNotSupportedException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("_]f6");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      hashMap1.put(sQLInvalidAuthorizationSpecException0, sQLFeatureNotSupportedException0);
      MapTransformer.mapTransformer((Map<? super Object, ? extends SQLFeatureNotSupportedException>) hashMap1);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("%U#o[`Q@*Ptzl+", "%U#o[`Q@*Ptzl+", sQLTransientConnectionException0);
      ConstantTransformer<Object, SQLFeatureNotSupportedException> constantTransformer0 = new ConstantTransformer<Object, SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException1);
      IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) constantTransformer0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) constantTransformer0);
      TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) constantTransformer0, (Predicate<? super Object>) nullIsTruePredicate0);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLTimeoutException, SQLTimeoutException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTimeoutException>(orderedMapIterator1);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) orderedMapIterator1);
      IteratorUtils.isEmpty((Iterator<?>) null);
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransactionRollbackException> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLTransactionRollbackException>(orderedMapIterator2);
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(orderedMapIterator2);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(constantTransformer0, predicate1);
      IteratorUtils.matchesAny((Iterator<SQLTransactionRollbackException>) listIteratorWrapper0, (Predicate<? super SQLTransactionRollbackException>) nullIsTruePredicate0);
      IteratorUtils.emptyMapIterator();
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) iterator0);
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(list0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) loopingListIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("9M|(b&", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.toString((Iterator<BatchUpdateException>) null, (Transformer<? super BatchUpdateException, String>) transformer0, "", "e|G6L", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransactionRollbackException0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      NullIsTruePredicate<SQLException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLException>(predicate0);
      PredicateTransformer<SQLDataException> predicateTransformer0 = new PredicateTransformer<SQLDataException>(nullIsTruePredicate0);
      PredicateTransformer.predicateTransformer((Predicate<? super Locale.FilteringMode>) predicate0);
      predicateTransformer0.transform(sQLDataException0);
      SQLDataException sQLDataException1 = new SQLDataException("org.apache.commons.collections4.list.CursorableLinkedList", sQLDataException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLDataException1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 3);
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>();
      arrayDequeArray0[0] = arrayDeque1;
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator(object0);
      Properties properties0 = new Properties();
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0);
      TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]", hashtable0, mockThrowable0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable0, sQLClientInfoException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("]", "]", 201, sQLClientInfoException1);
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator((Object) sQLFeatureNotSupportedException0);
      Object object1 = new Object();
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      sQLFeatureNotSupportedException0.setNextException(sQLClientInfoException1);
      HashMap<Object, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Object, SQLFeatureNotSupportedException>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLFeatureNotSupportedException>) hashMap0);
      IfTransformer.ifTransformer((Predicate<? super Object>) nullIsTruePredicate0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0);
      TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) nullIsTruePredicate0);
      IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) nullIsTruePredicate0);
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.singletonIterator(stack0);
      MapIterator<SQLTimeoutException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) mapIterator0);
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(list0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) loopingListIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) loopingListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.forEach(consumer0);
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) linkedHashSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) singletonIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, false);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(899);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(878);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      ResettableIterator<Integer> resettableIterator1 = IteratorUtils.arrayIterator(integerArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) resettableIterator1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      Closure<Object> closure0 = IfClosure.ifClosure((Predicate<? super Object>) uniquePredicate0, (Closure<? super Object>) transformerClosure0);
      IteratorUtils.apply((Iterator<SQLWarning>) null, (Closure<? super SQLWarning>) closure0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (Throwable) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) linkedList0);
      IteratorUtils.toString((Iterator<DataTruncation>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (-3544));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InvokerTransformer.invokerTransformer("9M|(b&", (Class<?>[]) null, (Object[]) null);
      SQLDataException sQLDataException0 = new SQLDataException("9M|(b&", "9M|(b&");
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.singletonIterator(stack0);
      InvokerTransformer.invokerTransformer("j=` l", (Class<?>[]) null, (Object[]) null);
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      DataTruncation dataTruncation0 = new DataTruncation(65, false, false, (-2348), 65);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(65, false, true, (-2348), 65);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-2348), false, false, 0, 0, dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-2348), false, false, 65, (-2348), dataTruncation1);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(48, false, true, 4220, 0, dataTruncation2);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-2348), true, false, 4220, 493, sQLDataException0);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(4220, true, false, 493, 14, dataTruncation3);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(0, false, false, 48, (-1));
      dataTruncationArray0[7] = dataTruncation7;
      DataTruncation dataTruncation8 = new DataTruncation(0, true, false, 78, (-1383), dataTruncation5);
      dataTruncationArray0[8] = dataTruncation8;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(stack0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Enumeration must not be null", "transformer may not be null", sQLClientInfoException0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0);
      assertEquals("[java.sql.SQLInvalidAuthorizationSpecException: Enumeration must not be null]", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      int int0 = 0;
      IteratorUtils.peekingIterator((Iterator<? extends Integer>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Entry does not exist: ");
      iIOMetadataNode0.getFirstChild();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.getAttributes();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      IteratorUtils.toArray((Iterator<?>) nodeListIterator0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "W1kzIfm_ml,4+:ngY");
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.singletonIterator(stack0);
      MapIterator<SQLTimeoutException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) mapIterator0);
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(list0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) loopingListIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("-");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.forEach(consumer0);
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) linkedHashSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) singletonIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Iterator<SQLTimeoutException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      Closure<Object> closure0 = IfClosure.ifClosure((Predicate<? super Object>) uniquePredicate0, (Closure<? super Object>) transformerClosure0);
      IteratorUtils.apply((Iterator<SQLWarning>) null, (Closure<? super SQLWarning>) closure0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>) null, (Iterator<?>) null, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      Closure<Object> closure0 = IfClosure.ifClosure((Predicate<? super Object>) uniquePredicate0, (Closure<? super Object>) transformerClosure0);
      IteratorUtils.apply((Iterator<SQLWarning>) null, (Closure<? super SQLWarning>) closure0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (Throwable) null);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      NullPredicate.nullPredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("[java.sql.SQLInvalidAuthorizationSpecException: ]");
      Iterator<Boolean> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Transformer<? super SQLNonTransientConnectionException, ? extends Boolean>) transformer0);
      Iterator<Boolean> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Boolean>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, IIOMetadataNode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, IIOMetadataNode>) orderedMapIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      IteratorUtils.size(iterator0);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) stack0);
      Stack<Locale.FilteringMode> stack1 = new Stack<Locale.FilteringMode>();
      IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack1);
      ArrayDeque<SQLNonTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLNonTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      arrayDequeArray0[0] = arrayDeque0;
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 2);
      ResettableIterator<StringTokenizer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<StringTokenizer>) resettableIterator0;
      Iterator<StringTokenizer>[] iteratorArray1 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray1[0] = (Iterator<StringTokenizer>) resettableIterator0;
      iteratorArray1[1] = (Iterator<StringTokenizer>) resettableIterator0;
      iteratorArray1[2] = (Iterator<StringTokenizer>) resettableIterator0;
      iteratorArray1[3] = (Iterator<StringTokenizer>) resettableIterator0;
      iteratorArray1[4] = (Iterator<StringTokenizer>) resettableIterator0;
      Iterator<StringTokenizer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) null, (Iterator<? extends StringTokenizer>[]) iteratorArray1);
      iteratorArray0[1] = iterator0;
      Iterator<StringTokenizer> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends StringTokenizer>) iterator1, (Transformer<? super StringTokenizer, ? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, (Throwable) null);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
      OrderedIterator<Boolean> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.skippingIterator((Iterator<Boolean>) orderedIterator0, 0L);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 8);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLInvalidAuthorizationSpecException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, false);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) singletonIterator0;
      SingletonIterator<SQLClientInfoException> singletonIterator1 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) singletonIterator1;
      OrderedMapIterator<SQLClientInfoException, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, SQLDataException>(orderedMapIterator0);
      iteratorArray0[2] = (Iterator<SQLClientInfoException>) abstractOrderedMapIteratorDecorator0;
      OrderedMapIterator<SQLClientInfoException, SQLClientInfoException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[3] = (Iterator<SQLClientInfoException>) orderedMapIterator1;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[4] = (Iterator<SQLClientInfoException>) resettableIterator0;
      SkippingIterator<SQLClientInfoException> skippingIterator0 = IteratorUtils.skippingIterator(iteratorArray0[4], 0L);
      iteratorArray0[5] = (Iterator<SQLClientInfoException>) skippingIterator0;
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException0;
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException0;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      iteratorArray0[6] = (Iterator<SQLClientInfoException>) objectArrayListIterator0;
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLClientInfoException>) iteratorArray0[1]);
      iteratorArray0[7] = (Iterator<SQLClientInfoException>) zippingIterator0;
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 201);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 196
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator(object0);
      Object object1 = new Object();
      objectArray0[0] = object1;
      Class<SQLDataException> class0 = SQLDataException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      HashMap<Object, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Object, SQLFeatureNotSupportedException>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLFeatureNotSupportedException>) hashMap0);
      Transformer<Object, SQLFeatureNotSupportedException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) nullIsTruePredicate0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer1, (Predicate<? super Object>) nullIsTruePredicate0);
      Object object2 = IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate1);
      objectArray0[1] = object2;
      IteratorUtils.toString((Iterator<Object>) resettableIterator0);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLTimeoutException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTimeoutException>(orderedMapIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) orderedMapIterator0);
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator(object0, (Transformer<? super Object, ?>) transformer1);
      IteratorUtils.size(iterator0);
      IteratorUtils.isEmpty(orderedMapIterator0);
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransactionRollbackException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLTransactionRollbackException>(orderedMapIterator1);
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(orderedMapIterator1);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, nullIsTruePredicate0);
      IteratorUtils.matchesAny((Iterator<SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator1, (Predicate<? super SQLTransactionRollbackException>) transformedPredicate0);
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 8);
      Class<Boolean> class1 = Boolean.class;
      classArray0[1] = class1;
      Class<Boolean> class2 = Boolean.class;
      classArray0[2] = class2;
      Class<Boolean> class3 = Boolean.class;
      classArray0[3] = class3;
      Class<Boolean> class4 = Boolean.class;
      classArray0[4] = class4;
      Class<Boolean> class5 = Boolean.class;
      classArray0[5] = class5;
      Class<Boolean> class6 = Boolean.class;
      classArray0[6] = class6;
      Class<Boolean> class7 = Boolean.class;
      classArray0[7] = class7;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer((String) null, (Class<?>[]) classArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The method to invoke must not be null
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("29cEx/hGT");
      iIOMetadataNode0.getLastChild();
      iIOMetadataNode0.getAttributes();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.toArray((Iterator<?>) nodeListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, IIOMetadataNode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, IIOMetadataNode>) orderedMapIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      IteratorUtils.size(iterator0);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) stack0);
      Stack<Locale.FilteringMode> stack1 = new Stack<Locale.FilteringMode>();
      IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack1);
      ArrayDeque<SQLNonTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLNonTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      arrayDequeArray0[0] = arrayDeque0;
      Transformer<SQLTransactionRollbackException, Iterator<SQLSyntaxErrorException>> transformer0 = ConstantTransformer.nullTransformer();
      InvokerTransformer.invokerTransformer("DH;q`V7Ld:O6 Q(5");
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<Iterator<SQLSyntaxErrorException>> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, (Transformer<? super SQLTransactionRollbackException, ? extends Iterator<SQLSyntaxErrorException>>) transformer0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";^AAq`d)g-&&NQ@:E[");
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("9M|(b&", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.toString((Iterator<BatchUpdateException>) null, (Transformer<? super BatchUpdateException, String>) transformer0, "", "e|G6L", "");
      IteratorUtils.getIterator("");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      IteratorUtils.contains((Iterator<Transformer<Object, String>>) null, (Object) locale_FilteringMode0);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, Transformer<LinkedList, SQLTransientConnectionException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      HashMap<Locale.FilteringMode, Properties> hashMap0 = new HashMap<Locale.FilteringMode, Properties>();
      EntrySetMapIterator<Locale.FilteringMode, Properties> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, Properties>(hashMap0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.FilteringMode, ? extends Properties>) entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Hashtable<Properties, SQLTransientException> hashtable0 = new Hashtable<Properties, SQLTransientException>();
      EntrySetMapIterator<Properties, SQLTransientException> entrySetMapIterator0 = new EntrySetMapIterator<Properties, SQLTransientException>(hashtable0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) entrySetMapIterator0);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      HashMap<Locale.FilteringMode, Properties> hashMap0 = new HashMap<Locale.FilteringMode, Properties>();
      EntrySetMapIterator<Locale.FilteringMode, Properties> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, Properties>(hashMap0);
      MapIterator<Locale.FilteringMode, Properties> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Locale.FilteringMode, ? extends Properties>) entrySetMapIterator0);
      MapIterator<Locale.FilteringMode, Properties> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends Locale.FilteringMode>) mapIterator1);
      Transformer<SQLTransactionRollbackException, Iterator<SQLSyntaxErrorException>> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, ? extends Iterator<SQLSyntaxErrorException>>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "", 2668, sQLNonTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, 3338, (-1152));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.getIterator(iIOMetadataNode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3657));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2809));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(55);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-3657));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(123);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("m");
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      List<SQLInvalidAuthorizationSpecException> list0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(list0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0);
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OrderedMapIterator<Iterator<SQLSyntaxErrorException>, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Iterator<SQLSyntaxErrorException>, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Iterator<SQLSyntaxErrorException>, Properties>(orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Iterator<SQLSyntaxErrorException>>) abstractOrderedMapIteratorDecorator0);
      ExceptionFactory.exceptionFactory();
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SkippingIterator<DataTruncation> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<DataTruncation>) orderedMapIterator1, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("9M|(b&", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.toString((Iterator<BatchUpdateException>) null, (Transformer<? super BatchUpdateException, String>) transformer0, "", "e|G6L", "");
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OrderedMapIterator<Iterator<SQLSyntaxErrorException>, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Iterator<SQLSyntaxErrorException>, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Iterator<SQLSyntaxErrorException>, Properties>(orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Iterator<SQLSyntaxErrorException>>) abstractOrderedMapIteratorDecorator0);
      Factory<SQLIntegrityConstraintViolationException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLException, SQLIntegrityConstraintViolationException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLIntegrityConstraintViolationException>(factory0);
      Integer integer0 = new Integer((-70));
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 201);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("29cEx/hGT");
      iIOMetadataNode0.getFirstChild();
      iIOMetadataNode0.getElementsByTagNameNS("29cEx/hGT", "");
      iIOMetadataNode0.getAttributes();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.toArray((Iterator<?>) nodeListIterator0);
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>();
      ArrayDeque<Object> arrayDeque2 = new ArrayDeque<Object>();
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 5);
      arrayDequeArray0[0] = arrayDeque0;
      arrayDequeArray0[1] = arrayDeque0;
      arrayDequeArray0[2] = arrayDeque0;
      arrayDequeArray0[3] = arrayDeque2;
      arrayDequeArray0[4] = arrayDeque0;
      ObjectArrayIterator<ArrayDeque<Object>> objectArrayIterator0 = new ObjectArrayIterator<ArrayDeque<Object>>(arrayDequeArray0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate1, predicate1);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(instanceofPredicate0, comparator0, comparatorPredicate_Criterion0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(any() , any());
      Predicate<Object> predicate2 = ComparatorPredicate.comparatorPredicate((Object) comparatorPredicate0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<Object>>) objectArrayIterator0, (Predicate<? super ArrayDeque<Object>>) predicate2);
      assertFalse(objectArrayIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("~\"n?[>#Gc!", "~\"n?[>#Gc!");
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, false);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDequeArray0[0] = arrayDeque0;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      String string0 = "e|G6L";
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      String string1 = "";
      IteratorUtils.toString((Iterator<BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "e|G6L", "", "");
      // Undeclared exception!
      try { 
        UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("29cEx/hGT");
      iIOMetadataNode0.getFirstChild();
      iIOMetadataNode0.getAttributes();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.toArray((Iterator<?>) nodeListIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("29cEx/hGT", "29cEx/hGT");
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.singletonIterator(stack0);
      MapIterator<SQLTimeoutException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) mapIterator0);
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(list0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) loopingListIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      IteratorUtils.singletonIterator(object0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.getIterator(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("29cEx/hGT");
      iIOMetadataNode0.getFirstChild();
      iIOMetadataNode0.getElementsByTagNameNS("29cEx/hGT", "");
      iIOMetadataNode0.getAttributes();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) nodeListIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      IteratorUtils.toString((Iterator<Object>) objectArrayListIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "[");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) objectArrayListIterator0, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator(object0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      Class<SQLDataException> class0 = SQLDataException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      HashMap<Object, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Object, SQLFeatureNotSupportedException>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLFeatureNotSupportedException>) hashMap0);
      Transformer<Object, SQLFeatureNotSupportedException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) nullIsTruePredicate0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer1, (Predicate<? super Object>) nullIsTruePredicate0);
      IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate1);
      objectArray0[1] = null;
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.arrayIterator(objectArray0);
      String string0 = IteratorUtils.toString((Iterator<Object>) resettableIterator1);
      assertEquals("[null, null]", string0);
      
      SQLDataException sQLDataException0 = new SQLDataException("");
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate1);
      LinkedList<ArrayDeque<Object>> linkedList0 = new LinkedList<ArrayDeque<Object>>();
      LoopingListIterator<ArrayDeque<Object>> loopingListIterator0 = new LoopingListIterator<ArrayDeque<Object>>(linkedList0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<Object>>) loopingListIterator0, (Predicate<? super ArrayDeque<Object>>) predicate2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DataTruncation dataTruncation0 = new DataTruncation(196, false, true, 3321, (-2024));
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      HashMap<DataTruncation, BatchUpdateException> hashMap0 = new HashMap<DataTruncation, BatchUpdateException>();
      EntrySetMapIterator<DataTruncation, BatchUpdateException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, BatchUpdateException>(hashMap0);
      MapIterator<DataTruncation, BatchUpdateException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends BatchUpdateException>) entrySetMapIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) singletonListIterator0, (Iterator<? extends DataTruncation>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) iterator0, (-1202L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator(object0);
      Object object1 = new Object();
      objectArray0[0] = object1;
      Class<SQLDataException> class0 = SQLDataException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      HashMap<Object, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Object, SQLFeatureNotSupportedException>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLFeatureNotSupportedException>) hashMap0);
      Transformer<Object, SQLFeatureNotSupportedException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) nullIsTruePredicate0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer1, (Predicate<? super Object>) nullIsTruePredicate0);
      Object object2 = IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate1);
      objectArray0[1] = object2;
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.arrayIterator(objectArray0);
      IteratorUtils.toString((Iterator<Object>) resettableIterator1);
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(linkedList0);
      IteratorUtils.zippingIterator((Iterator<?>) loopingListIterator0, (Iterator<?>) resettableIterator0, (Iterator<?>) resettableIterator1);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLTimeoutException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, SQLTimeoutException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLTimeoutException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLTimeoutException>(orderedMapIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) orderedMapIterator0);
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) null, (Transformer<? super Object, ?>) transformer1);
      IteratorUtils.size(iterator0);
      IteratorUtils.isEmpty(orderedMapIterator1);
      OrderedMapIterator<SQLTransactionRollbackException, SQLTransactionRollbackException> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLTransactionRollbackException>(orderedMapIterator2);
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(orderedMapIterator2);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, nullIsTruePredicate0);
      IteratorUtils.matchesAny((Iterator<SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator1, (Predicate<? super SQLTransactionRollbackException>) transformedPredicate0);
      Iterator<Stack<Class<SQLNonTransientConnectionException>>> iterator1 = null;
      String string0 = null;
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 8);
      Class<Boolean> class1 = Boolean.class;
      classArray0[0] = class1;
      Class<Boolean> class2 = Boolean.class;
      classArray0[1] = class2;
      Class<Boolean> class3 = Boolean.class;
      classArray0[2] = class3;
      Class<Boolean> class4 = Boolean.class;
      classArray0[3] = class4;
      Class<Boolean> class5 = Boolean.class;
      classArray0[4] = class5;
      Class<Boolean> class6 = Boolean.class;
      classArray0[5] = class6;
      Class<Boolean> class7 = Boolean.class;
      classArray0[6] = class7;
      Class<Boolean> class8 = Boolean.class;
      classArray0[7] = class8;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer((String) null, (Class<?>[]) classArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The method to invoke must not be null
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("29cEx/hGT");
      iIOMetadataNode0.getFirstChild();
      iIOMetadataNode0.getElementsByTagNameNS("29cEx/hGT", "");
      iIOMetadataNode0.getAttributes();
      iIOMetadataNode0.cloneNode(true);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.toArray((Iterator<?>) nodeListIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      Closure<Object> closure0 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) transformerClosure0);
      IteratorUtils.apply((Iterator<SQLWarning>) null, (Closure<? super SQLWarning>) closure0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" I` /x", sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("A&~.UB;", sQLTimeoutException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      Class<Properties> class0 = Properties.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ServiceLoader.load(class0, classLoader1);
      Class<Properties> class1 = Properties.class;
      ServiceLoader.loadInstalled(class1);
      ServiceLoader.load(class0, classLoader1);
      ServiceLoader.load(class1);
      Class<Properties> class2 = Properties.class;
      ServiceLoader.loadInstalled(class2);
      Class<Properties> class3 = Properties.class;
      ServiceLoader.load(class3);
      Class<Properties> class4 = Properties.class;
      ServiceLoader.load(class4, classLoader0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ServiceLoader<Properties>[]) null, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = null;
      Predicate<SQLException> predicate0 = null;
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      HashMap<Object, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Object, SQLFeatureNotSupportedException>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLFeatureNotSupportedException>) hashMap0);
      IfTransformer.ifTransformer((Predicate<? super Object>) nullIsTruePredicate0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0);
      TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) nullIsTruePredicate0);
      HashMap<Object, SQLIntegrityConstraintViolationException> hashMap1 = new HashMap<Object, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<Object, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<Object, SQLIntegrityConstraintViolationException>(hashMap1);
      Object object0 = IteratorUtils.find((Iterator<Object>) entrySetMapIterator0, (Predicate<? super Object>) nullIsTruePredicate0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) predicate1;
      objectArray0[3] = (Object) transformer0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = null;
      objectArray0[6] = (Object) null;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      IteratorUtils.toString((Iterator<Object>) resettableIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLTransientException sQLTransientException0 = new SQLTransientException("[null, null, org.apache.commons.collections4.functors.InstanceofPredicate@1, org.apache.commons.collections4.functors.MapTransformer@3, class java.sql.SQLInvalidAuthorizationSpecException, null, null]", "[null, null, org.apache.commons.collections4.functors.InstanceofPredicate@1, org.apache.commons.collections4.functors.MapTransformer@3, class java.sql.SQLInvalidAuthorizationSpecException, null, null]");
      sQLDataException0.setNextException(sQLTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(object0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator(object0);
      Object object1 = new Object();
      objectArray0[0] = object1;
      Class<SQLDataException> class0 = SQLDataException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      HashMap<Object, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Object, SQLFeatureNotSupportedException>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLFeatureNotSupportedException>) hashMap0);
      Transformer<Object, SQLFeatureNotSupportedException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) nullIsTruePredicate0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer1, (Predicate<? super Object>) nullIsTruePredicate0);
      Object object2 = IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate1);
      objectArray0[1] = object2;
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.arrayIterator(objectArray0);
      IteratorUtils.toString((Iterator<Object>) resettableIterator1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "[java.lang.Object@f39092e, java.lang.Object@6a864fd9]");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(object1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, IIOMetadataNode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, IIOMetadataNode>) orderedMapIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      IteratorUtils.size(iterator0);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) stack0);
      Stack<Locale.FilteringMode> stack1 = new Stack<Locale.FilteringMode>();
      IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack1);
      ArrayDeque<SQLNonTransientConnectionException>[] arrayDequeArray0 = (ArrayDeque<SQLNonTransientConnectionException>[]) Array.newInstance(ArrayDeque.class, 1);
      ArrayDeque<SQLNonTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLNonTransientConnectionException>();
      arrayDequeArray0[0] = arrayDeque0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(arrayDequeArray0, (-1347), (-2108));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator(object0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) resettableIterator0, 18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 17
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator(object0);
      IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      Class<SQLDataException> class0 = SQLDataException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      HashMap<Object, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Object, SQLFeatureNotSupportedException>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLFeatureNotSupportedException>) hashMap0);
      Transformer<Object, SQLFeatureNotSupportedException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) nullIsTruePredicate0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer1, (Predicate<? super Object>) nullIsTruePredicate0);
      IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate1);
      objectArray0[1] = null;
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.arrayIterator(objectArray0);
      IteratorUtils.toString((Iterator<Object>) resettableIterator1);
      SQLDataException sQLDataException0 = new SQLDataException("");
      String[] stringArray0 = new String[0];
      ResettableIterator<String> resettableIterator2 = IteratorUtils.arrayIterator(stringArray0, 0, 0);
      Iterable<String> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends String>) resettableIterator2);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.iterators.AbstractIteratorDecorator");
      Node node0 = iIOMetadataNode0.cloneNode(false);
      IteratorUtils.nodeListIterator(node0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.iterators.AbstractIteratorDecorator", "org.apache.commons.collections4.iterators.AbstractIteratorDecorator");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLRecoverableException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.WhileClosure", "org.apache.commons.collections4.iterators.AbstractIteratorDecorator", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException((Throwable) null);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException(sQLSyntaxErrorException1);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException((String) null, "org.apache.commons.collections4.functors.WhileClosure", (Throwable) null);
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException(sQLSyntaxErrorException3);
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.WhileClosure", "iterator", 0, sQLRecoverableException0);
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      String string0 = "`~psRv!>/86Zai E";
      sQLSyntaxErrorException3.getLocalizedMessage();
      sQLSyntaxErrorException6.printStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException("`~psRv!>/86Zai E", sQLSyntaxErrorException5);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[5];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("Iterator must not be null", "Iterator must not be null");
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("Iterator must not be null", (String) null, sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("yUh;;1Ec^ m[EIh(6", "[", sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate.instanceOfPredicate(class1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) instanceofPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("4Z\"R\"");
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.FilteringMode, SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientConnectionException[]) null, 0, (-4017));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = (-969);
      SQLWarning sQLWarning0 = new SQLWarning("{F4", "{F4", (-969), (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLWarning0);
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) null);
      OrderedMapIterator<Iterator<SQLSyntaxErrorException>, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Iterator<SQLSyntaxErrorException>, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Iterator<SQLSyntaxErrorException>, Properties>(orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Iterator<SQLSyntaxErrorException>>) abstractOrderedMapIteratorDecorator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{F4", "{F4");
      Factory<SQLIntegrityConstraintViolationException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLException, SQLIntegrityConstraintViolationException> factoryTransformer0 = new FactoryTransformer<SQLException, SQLIntegrityConstraintViolationException>(factory0);
      IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) factoryTransformer0);
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<DataTruncation>) orderedMapIterator1, (long) (-969));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      SQLDataException sQLDataException0 = new SQLDataException();
      Predicate<SQLDataException> predicate0 = EqualPredicate.equalPredicate(sQLDataException0);
      PredicateTransformer<SQLDataException> predicateTransformer0 = new PredicateTransformer<SQLDataException>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(sQLDataException0);
      booleanArray0[0] = boolean0;
      SQLDataException sQLDataException1 = new SQLDataException("9M|(b&", "9M|(b&", sQLDataException0);
      Boolean boolean1 = predicateTransformer0.transform(sQLDataException1);
      booleanArray0[1] = boolean1;
      SQLDataException sQLDataException2 = new SQLDataException("9M|(b&", "9M|(b&", sQLDataException0);
      Boolean boolean2 = predicateTransformer0.transform(sQLDataException2);
      booleanArray0[2] = boolean2;
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      ListIteratorWrapper<Boolean> listIteratorWrapper0 = new ListIteratorWrapper<Boolean>(objectArrayIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean3 = IteratorUtils.contains((Iterator<Boolean>) objectArrayIterator0, (Object) boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      LoopingListIterator<InstanceofPredicate> loopingListIterator0 = new LoopingListIterator<InstanceofPredicate>(stack0);
      IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) loopingListIterator0, class0);
      ConstantTransformer.nullTransformer();
      MapIterator<Locale.FilteringMode, SQLIntegrityConstraintViolationException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<Locale.FilteringMode, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.FilteringMode, SQLIntegrityConstraintViolationException>(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) abstractMapIteratorDecorator0, (Predicate<? super Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) linkedHashSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) singletonIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("iw69OX.#WI0fvj", (String) null, (Throwable) null);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      NullPredicate.nullPredicate();
      ExceptionPredicate.exceptionPredicate();
      ArrayIterator<BatchUpdateException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<BatchUpdateException>(predicate0, (-237), (-2200));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      Closure<Object> closure0 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) transformerClosure0);
      IteratorUtils.apply((Iterator<SQLWarning>) null, (Closure<? super SQLWarning>) closure0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" I` /x", sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("A&~.UB;", sQLTimeoutException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      singletonIterator0.reset();
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) singletonIterator0, 2288L, 1321L);
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) boundedIterator0, 1321L);
      Stack<EnumSet<Locale.FilteringMode>> stack0 = new Stack<EnumSet<Locale.FilteringMode>>();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.forEach(consumer0);
      IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) linkedHashSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) singletonIterator0, (Predicate<? super Locale.FilteringMode>) predicate0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[1];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 6485);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MapIterator<SQLNonTransientException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientException, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientException, SQLIntegrityConstraintViolationException>(mapIterator0);
      MapIterator<SQLNonTransientException, SQLIntegrityConstraintViolationException> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0);
      Stack<SQLTransactionRollbackException> stack0 = new Stack<SQLTransactionRollbackException>();
      stack0.add((SQLTransactionRollbackException) null);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) stack0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTransientException>) resettableListIterator0);
      IteratorUtils.zippingIterator((Iterator<?>) iterator0, (Iterator<?>) mapIterator1);
      IteratorUtils.emptyOrderedMapIterator();
      MapIterator<Iterator<SQLSyntaxErrorException>, SQLNonTransientConnectionException> mapIterator2 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Iterator<SQLSyntaxErrorException>>) mapIterator2, (-1215L), 371L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Hashtable<Properties, SQLTransientException> hashtable0 = new Hashtable<Properties, SQLTransientException>();
      EntrySetMapIterator<Properties, SQLTransientException> entrySetMapIterator0 = new EntrySetMapIterator<Properties, SQLTransientException>(hashtable0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) entrySetMapIterator0);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      Iterator<Properties> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) linkedHashSet0);
      Properties properties0 = new Properties();
      linkedHashSet0.add(properties0);
      Iterator<Properties> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) iterator0);
      IteratorUtils.unmodifiableIterator(iterator1);
      IteratorUtils.toArray(iterator0);
      int int0 = 2673;
      ArrayListIterator<LinkedHashSet<SQLIntegrityConstraintViolationException>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<LinkedHashSet<SQLIntegrityConstraintViolationException>>(entrySetMapIterator0, 0, 2673);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 297, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ResettableListIterator<ArrayList<SQLNonTransientException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableIterator((Iterator<ArrayList<SQLNonTransientException>>) resettableListIterator0);
      IteratorUtils.emptyOrderedIterator();
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 6);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientConnectionException> class3 = SQLNonTransientConnectionException.class;
      classArray0[3] = class3;
      Class<SQLNonTransientConnectionException> class4 = SQLNonTransientConnectionException.class;
      classArray0[4] = class4;
      Class<SQLNonTransientConnectionException> class5 = SQLNonTransientConnectionException.class;
      classArray0[5] = class5;
      InvokerTransformer<SQLException, Boolean> invokerTransformer0 = new InvokerTransformer<SQLException, Boolean>("The predicate to call must not be null", classArray0, classArray0);
      Predicate<SQLTransientException> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super SQLTransientException, Boolean>) invokerTransformer0);
      SQLTransientException sQLTransientException0 = IteratorUtils.find((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) predicate0);
      assertNull(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = (-2567);
      int int1 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null, (-2567), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "";
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 14;
      longArray0[1] = (long) 14;
      longArray0[2] = (long) 14;
      longArray0[3] = (long) 14;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "y@T^vLi)OQ%#");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("fsr9[X<Ba3H<8IUa7", "", 14, longArray0, sQLNonTransientException0);
      sQLNonTransientException0.setNextException(batchUpdateException0);
      sQLNonTransientException0.getSuppressed();
      sQLNonTransientException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, 0, (-2018));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = null;
      Predicate<SQLException> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.iterators.AbstractEmptyIterator";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", "org.apache.commons.collections4.iterators.AbstractEmptyIterator", (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 32, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, IIOMetadataNode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, IIOMetadataNode>) orderedMapIterator0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) mapIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0);
      IteratorUtils.size(iterator0);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) stack0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLRecoverableException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLRecoverableException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends SQLRecoverableException>) orderedMapIterator1);
      IteratorUtils.contains((Iterator<SQLInvalidAuthorizationSpecException>) orderedMapIterator2, (Object) resettableIterator0);
      Stack<Locale.FilteringMode> stack1 = new Stack<Locale.FilteringMode>();
      IteratorUtils.loopingListIterator((List<Locale.FilteringMode>) stack1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator1, 706);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 6);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<Object> arrayDeque2 = new ArrayDeque<Object>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<Object> arrayDeque3 = new ArrayDeque<Object>();
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<Object> arrayDeque4 = new ArrayDeque<Object>();
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<Object> arrayDeque5 = new ArrayDeque<Object>();
      arrayDequeArray0[5] = arrayDeque5;
      ObjectArrayIterator<ArrayDeque<Object>> objectArrayIterator0 = new ObjectArrayIterator<ArrayDeque<Object>>(arrayDequeArray0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) andPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayDeque<Object>>) objectArrayIterator0, (Predicate<? super ArrayDeque<Object>>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      Closure<Object> closure0 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) transformerClosure0);
      IteratorUtils.apply((Iterator<SQLWarning>) null, (Closure<? super SQLWarning>) closure0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" I` /x", sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("A&~.UB;", sQLTimeoutException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) singletonIterator0, 2288L, 1321L);
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) boundedIterator0, 1321L);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) null, (Collection<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "9M|(b&";
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("9M|(b&", (Class<?>[]) null, (Object[]) null);
      String string1 = "e|G6L";
      IteratorUtils.toString((Iterator<BatchUpdateException>) null, (Transformer<? super BatchUpdateException, String>) transformer0, "", "e|G6L", "");
      // Undeclared exception!
      try { 
        UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, (Throwable) null);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
      OrderedMapIterator<Predicate<Object>, EnumSet<Locale.FilteringMode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      HashMap<InstanceofPredicate, Transformer<Object, String>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Predicate<Object>>) orderedMapIterator0, (Transformer<? super Predicate<Object>, String>) transformer0, (String) null, "", "PBV{{-?6j`Lf>PAYcK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("29cEx/hGT");
      iIOMetadataNode0.getFirstChild();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) null, (Object[]) null);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) resettableListIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "", (String) null, "29cEx/hGT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.singletonIterator(object0);
      Object object1 = IteratorUtils.get((Iterator<Object>) resettableIterator0, 0);
      objectArray0[0] = object1;
      Class<SQLDataException> class0 = SQLDataException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      HashMap<Object, SQLFeatureNotSupportedException> hashMap0 = new HashMap<Object, SQLFeatureNotSupportedException>();
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLFeatureNotSupportedException>) hashMap0);
      Transformer<Object, SQLFeatureNotSupportedException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) nullIsTruePredicate0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer1, (Predicate<? super Object>) nullIsTruePredicate0);
      IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) predicate1);
      objectArray0[1] = null;
      ResettableIterator<Object> resettableIterator1 = IteratorUtils.arrayIterator(objectArray0);
      IteratorUtils.toString((Iterator<Object>) resettableIterator1);
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "[java.lang.Object@233b98d6, null]");
      sQLDataException0.setNextException(sQLTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("9M|(b&", (Class<?>[]) null, (Object[]) null);
      String string0 = "e|G6L";
      String string1 = "";
      IteratorUtils.toString((Iterator<BatchUpdateException>) null, (Transformer<? super BatchUpdateException, String>) transformer0, "", "e|G6L", "");
      // Undeclared exception!
      try { 
        UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Integer, ? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLInvalidAuthorizationSpecException> mapIterator0 = IteratorUtils.emptyMapIterator();
      int int0 = (-442);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<BatchUpdateException>) mapIterator0, (-442));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -442
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }
}
