/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 02:26:53 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      IteratorUtils.singletonListIterator(locale_FilteringMode0);
      IteratorUtils.emptyMapIterator();
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 8);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      classArray0[0] = class0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[1] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[2] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[3] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      classArray0[4] = class4;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      classArray0[5] = class5;
      Class<SQLClientInfoException> class6 = SQLClientInfoException.class;
      classArray0[6] = class6;
      Class<SQLClientInfoException> class7 = SQLClientInfoException.class;
      classArray0[7] = class7;
      ObjectArrayIterator<Class<SQLClientInfoException>> objectArrayIterator0 = new ObjectArrayIterator<Class<SQLClientInfoException>>(classArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("WR/3lMB", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Class<SQLClientInfoException>>) objectArrayIterator0, (Transformer<? super Class<SQLClientInfoException>, String>) transformer0, "WR/3lMB", "NodeList must not be null", "WR/3lMB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'WR/3lMB' on 'class java.lang.Class' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, SQLClientInfoException>(orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) abstractOrderedMapIteratorDecorator0, 160L, 160L);
      MapIterator<SQLNonTransientConnectionException, SQLSyntaxErrorException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLNonTransientConnectionException, SQLSyntaxErrorException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator1);
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 4);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("org.apache.commons.collections4.iterators.EmptyOrderedIterator");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      transformerArray0[0] = transformer0;
      Transformer<Object, String> transformer1 = ConstantTransformer.nullTransformer();
      transformerArray0[1] = transformer1;
      Transformer<Object, String> transformer2 = ConstantTransformer.nullTransformer();
      transformerArray0[2] = transformer2;
      Transformer<Object, String> transformer3 = ConstantTransformer.nullTransformer();
      transformerArray0[3] = transformer3;
      IteratorUtils.arrayListIterator(transformerArray0, 4);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("$l4OgWiCik_bm[5;", "$l4OgWiCik_bm[5;", (-2549));
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("$l4OgWiCik_bm[5;", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("$l4OgWiCik_bm[5;", "$l4OgWiCik_bm[5;");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("$l4OgWiCik_bm[5;", ":(K*?#]o-9YiTa\"8_>");
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException(";!z|S, ");
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException((String) null, sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException((String) null);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException(">D&!4Lib*0");
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      SQLTransactionRollbackException sQLTransactionRollbackException8 = new SQLTransactionRollbackException("Q/", "34OmAuprFzb");
      sQLTransactionRollbackExceptionArray0[8] = sQLTransactionRollbackException8;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicateArray0[2]);
      predicateArray0[3] = (Predicate<Object>) notPredicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[4] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      predicateArray0[5] = predicate0;
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      NotPredicate<Object> notPredicate1 = new NotPredicate<Object>(predicate1);
      predicateArray0[6] = (Predicate<Object>) notPredicate1;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0, (Predicate<? super SQLTransactionRollbackException>) anyPredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils");
      // Undeclared exception!
      try { 
        IteratorUtils.contains((Iterator<SQLTransactionRollbackException>) listIterator0, (Object) sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 2);
      DataTruncation dataTruncation0 = new DataTruncation(2, false, false, 2, 2);
      dataTruncation0.getNextWarning();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("d\"VfbqYha+cJt", (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null, false);
      IdentityPredicate<String> identityPredicate0 = new IdentityPredicate<String>((String) null);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IfTransformer<String, String> ifTransformer0 = new IfTransformer<String, String>(identityPredicate0, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) singletonIterator0, (Transformer<? super String, String>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      linkedList0.add(batchUpdateException0);
      linkedList0.add(batchUpdateException0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) linkedList0);
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) resettableIterator0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[3];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) objectArrayListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTimeoutException, ArrayList<SQLInvalidAuthorizationSpecException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientException>) orderedMapIterator0, (Class<SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("$l4OgWiCik_bm[5;", "$l4OgWiCik_bm[5;", (-2549));
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("$l4OgWiCik_bm[5;", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("$l4OgWiCik_bm[5;", "$l4OgWiCik_bm[5;");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("$l4OgWiCik_bm[5;", ":(K*?#]o-9YiTa\"8_>");
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException(";!z|S, ");
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException((String) null, sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException((String) null);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException(">D&!4Lib*0");
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      SQLTransactionRollbackException sQLTransactionRollbackException8 = new SQLTransactionRollbackException("Q/", "34OmAuprFzb");
      sQLTransactionRollbackExceptionArray0[8] = sQLTransactionRollbackException8;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsTruePredicate0, nullIsTruePredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(andPredicate0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) nullIsExceptionPredicate0);
      predicateArray0[0] = predicate1;
      Predicate<Object> predicate2 = NotPredicate.notPredicate((Predicate<? super Object>) predicate1);
      predicateArray0[1] = predicate2;
      Predicate<Object> predicate3 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) andPredicate0);
      predicateArray0[2] = predicate3;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate3);
      predicateArray0[3] = (Predicate<Object>) notPredicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[4] = (Predicate<Object>) uniquePredicate0;
      Predicate<Object> predicate4 = UniquePredicate.uniquePredicate();
      predicateArray0[5] = predicate4;
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Predicate<Object> predicate5 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) stack0);
      NotPredicate<Object> notPredicate1 = new NotPredicate<Object>(predicate5);
      predicateArray0[6] = (Predicate<Object>) notPredicate1;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0, (Predicate<? super SQLTransactionRollbackException>) anyPredicate0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils");
      // Undeclared exception!
      try { 
        IteratorUtils.contains((Iterator<SQLTransactionRollbackException>) listIterator0, (Object) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Iterator<SQLTransientException>[] iteratorArray0 = (Iterator<SQLTransientException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) null, (Iterator<? extends SQLTransientException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 2);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[1] = (Iterator<SQLRecoverableException>) objectArrayListIterator0;
      iteratorArray0[2] = (Iterator<SQLRecoverableException>) objectArrayListIterator0;
      iteratorArray0[3] = (Iterator<SQLRecoverableException>) objectArrayListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      int int0 = 11;
      DataTruncation dataTruncation0 = new DataTruncation(11, true, false, 11, 11);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(11, true, true, 11, (-1184), dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(11, false, false, 11, 1);
      dataTruncationArray0[2] = dataTruncation2;
      int int1 = 645;
      DataTruncation dataTruncation3 = new DataTruncation(125, true, true, 645, 125);
      dataTruncationArray0[3] = dataTruncation3;
      IteratorUtils.arrayIterator(dataTruncationArray0);
      ArrayList<SQLWarning> arrayList0 = new ArrayList<SQLWarning>();
      IteratorUtils.loopingListIterator((List<SQLWarning>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLException[]) dataTruncationArray0, 0, (-1184));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(singletonListIterator0);
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 8);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[2] = class2;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      classArray0[3] = class3;
      Class<SQLFeatureNotSupportedException> class4 = SQLFeatureNotSupportedException.class;
      classArray0[4] = class4;
      Class<SQLFeatureNotSupportedException> class5 = SQLFeatureNotSupportedException.class;
      classArray0[5] = class5;
      Class<SQLFeatureNotSupportedException> class6 = SQLFeatureNotSupportedException.class;
      classArray0[6] = class6;
      Class<SQLFeatureNotSupportedException> class7 = SQLFeatureNotSupportedException.class;
      classArray0[7] = class7;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("ConstantTransformer", classArray0, classArray0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(identityPredicate0, invokerTransformer0, invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Properties>) singletonListIterator0, (Transformer<? super Properties, String>) ifTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'ConstantTransformer' on 'class java.util.Properties' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) orderedIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "J";
      int int0 = 124;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("J", "Fi:v,XE/E$\"@wT>r", 124);
      Transformer<SQLRecoverableException, SQLRecoverableException> transformer0 = InvokerTransformer.invokerTransformer("J", (Class<?>[]) null, (Object[]) null);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'J' on 'class java.sql.SQLRecoverableException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      int[] intArray0 = new int[2];
      intArray0[0] = (-790);
      intArray0[1] = 1550;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("nB,f&&y[wdO", "", batchUpdateException0);
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 2);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      classArray0[0] = class1;
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      classArray0[1] = class2;
      InvokerTransformer<SQLException, SQLTransactionRollbackException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLTransactionRollbackException>("Rf-y9^", classArray0, classArray0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLTransientException) sQLTransientConnectionException0, (Transformer<? super SQLTransientException, ? extends SQLTransientException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Rf-y9^' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0, (Iterator<? extends StringTokenizer>) iterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      String string0 = "7Z";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("7Z");
      iIOMetadataNode0.normalize();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7Z");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) listIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      String string1 = "FbP97Yqh@!";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FbP97Yqh@!");
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ResettableListIterator<Object> resettableListIterator1 = IteratorUtils.loopingListIterator((List<Object>) arrayList0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      arrayList0.add((Object) resettableListIterator0);
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.contains((Iterator<Object>) resettableListIterator1, (Object) predicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "Enumeration must not be null");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTimeoutException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLNonTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(79, false, true, 79, 79, sQLNonTransientConnectionException0);
      stack0.add(dataTruncation0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) stack0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<DataTruncation>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.getIterator(resettableListIterator0);
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[9];
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "t#919'j;bVe", 2853, sQLException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, sQLDataException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLDataException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException((String) null, sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("0Zd={", "", 2853);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("0Zd={", "iterator");
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException((String) null, (String) null, 2853);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("", "?q|(g'~^@jVx7>", 2853, sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("|d(y5]x", "?q|(g'~^@jVx7>", sQLTransactionRollbackException5);
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      SQLTransactionRollbackException sQLTransactionRollbackException8 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[8] = sQLTransactionRollbackException8;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      Transformer<SQLTransactionRollbackException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) objectArrayIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0, "?q|(g'~^@jVx7>", (String) null, "|d(y5]x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IteratorUtils.emptyIterator();
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("jdlq&:H", (Class<?>[]) null, (Object[]) null);
      IteratorUtils.toString((Iterator<StringTokenizer>) orderedIterator0, (Transformer<? super StringTokenizer, String>) invokerTransformer0, "", "", "");
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(", ", "", 1, sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("", "org.apache.commons.collections4.functors.CloneTransformer", 1, sQLRecoverableException1);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      sQLRecoverableException1.getStackTrace();
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 1, 403);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      OrderedMapIterator<LinkedHashSet<SQLWarning>, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<LinkedHashSet<SQLWarning>, SQLIntegrityConstraintViolationException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<LinkedHashSet<SQLWarning>, ? extends SQLIntegrityConstraintViolationException>) orderedMapIterator0);
      IteratorUtils.toString((Iterator<LinkedHashSet<SQLWarning>>) orderedMapIterator1);
      OrderedIterator<Locale.FilteringMode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.skippingIterator((Iterator<Locale.FilteringMode>) orderedIterator0, 0L);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 2);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[]");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[]", "setValue() can only be called after next() and before remove()", sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[]", "[]", sQLIntegrityConstraintViolationException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("Predicate must not be null", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("setValue() can only be called after next() and before remove()", "Predicate must not be null");
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("cwKTvD", sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 1, 1);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) resettableIterator1;
      ArrayIterator<SQLFeatureNotSupportedException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLFeatureNotSupportedException>(resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 14, 1258);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      IteratorUtils.getIterator(resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableListIterator0, class0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      Hashtable<Iterator<Properties>, SQLDataException> hashtable0 = new Hashtable<Iterator<Properties>, SQLDataException>();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", (Class<?>[]) null, sQLRecoverableExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<StringTokenizer>) orderedIterator0, (Transformer<? super StringTokenizer, String>) invokerTransformer0, "", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyIterator();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) resettableListIterator1, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 2);
      IteratorUtils.get((Iterator<SQLRecoverableException>) objectArrayListIterator0, 1);
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("QFbNqq2#L8S*rH/N");
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) singletonIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-2883));
      Integer integer1 = new Integer(44);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("RA");
      ConstantFactory<SQLFeatureNotSupportedException> constantFactory0 = new ConstantFactory<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      FactoryTransformer<Object, SQLFeatureNotSupportedException> factoryTransformer0 = new FactoryTransformer<Object, SQLFeatureNotSupportedException>(constantFactory0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLFeatureNotSupportedException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) factoryTransformer0);
      Comparator<SQLException> comparator1 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLFeatureNotSupportedException0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLNonTransientException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer integer0 = new Integer((-2883));
      Integer integer1 = new Integer(44);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer1);
      IteratorUtils.contains((Iterator<Integer>) singletonIterator0, (Object) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null);
      Iterator<Properties> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>) null, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.getIterator(comparator0);
      ArrayList<Integer>[] arrayListArray0 = (ArrayList<Integer>[]) Array.newInstance(ArrayList.class, 3);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayListArray0[0] = arrayList0;
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      arrayListArray0[1] = arrayList1;
      arrayList0.add((Integer) null);
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      arrayListArray0[2] = arrayList2;
      IteratorUtils.arrayListIterator(arrayListArray0, 1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "*";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*");
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("*", (Throwable) null);
      sQLNonTransientConnectionException0.printStackTrace();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException((Throwable) null);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      Predicate<SQLException> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>();
      IteratorUtils.singletonListIterator(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IteratorUtils.emptyOrderedMapIterator();
      int[] intArray0 = new int[4];
      intArray0[0] = 55;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Closure must not be null", "M2Rg#;M8\u0005:3~", (-1198), hashtable0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException1.getFailedProperties();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLClientInfoException0);
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((String) null, map0, sQLTimeoutException0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(map1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(map0, sQLClientInfoException0);
      OrderedMapIterator<SQLClientInfoException, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0, (Transformer<? super SQLClientInfoException, ? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) priorityQueue0);
      Integer integer0 = new Integer((-1038));
      priorityQueue0.add(integer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) resettableIterator0, (Transformer<? super Integer, ? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("LESS", (int[]) null);
      Hashtable<Integer, BatchUpdateException> hashtable0 = new Hashtable<Integer, BatchUpdateException>();
      MapIterator<SQLClientInfoException, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      HashMap<SQLClientInfoException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLClientInfoException, SQLIntegrityConstraintViolationException>();
      Transformer<SQLClientInfoException, SQLIntegrityConstraintViolationException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLClientInfoException, ? extends SQLIntegrityConstraintViolationException>) hashMap0);
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Closure must not be null", "w^0c6e)%:!oa`", 14, hashtable1);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(batchUpdateException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Closure must not be null", hashtable1, sQLTimeoutException0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(map0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLClientInfoException0);
      hashMap0.put(sQLClientInfoException1, sQLIntegrityConstraintViolationException1);
      IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (Transformer<? super SQLClientInfoException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      IteratorUtils.getIterator(map1);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLException, SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Iterator<SQLRecoverableException> iterator0 = null;
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null);
      HashMap<SQLTimeoutException, SQLTransactionRollbackException> hashMap0 = new HashMap<SQLTimeoutException, SQLTransactionRollbackException>();
      EntrySetMapIterator<SQLTimeoutException, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTimeoutException, SQLTransactionRollbackException>(hashMap0);
      Predicate<SQLTransientException> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.find((Iterator<SQLTimeoutException>) entrySetMapIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 3310, 3310);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableListIterator0, class0);
      String string0 = "";
      Factory<SQLIntegrityConstraintViolationException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLIntegrityConstraintViolationException> factoryTransformer0 = new FactoryTransformer<Object, SQLIntegrityConstraintViolationException>(factory0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableListIterator0, class0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("SB\"~?:", "P~Oa:,&e:A", 833);
      ConstantTransformer<SQLException, SQLRecoverableException> constantTransformer0 = new ConstantTransformer<SQLException, SQLRecoverableException>(sQLRecoverableException0);
      IfTransformer<SQLException, SQLRecoverableException> ifTransformer0 = new IfTransformer<SQLException, SQLRecoverableException>((Predicate<? super SQLException>) null, constantTransformer0, constantTransformer0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) ifTransformer0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLRecoverableException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) listIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MapIterator<SQLDataException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLDataException sQLDataException0 = new SQLDataException("kO=ayqy(`Rc", "~", 1852);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 1852, hashMap0, sQLDataException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("[", map0, sQLDataException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLClientInfoException1);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("MUYJZ>,s");
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("~", "", (-537), sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("", "");
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("Gyi1jC])5Gei!", "Y<I>V,rRf5MJi6-<EnG", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("MUYJZ>,s", "", sQLDataException0);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableIterator0, class0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableListIterator0, class0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableListIterator0, class0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 0);
      IteratorUtils.get((Iterator<SQLRecoverableException>) objectArrayListIterator0, 1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MapIterator<SQLDataException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      EmptyIterator.resettableEmptyIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Array class must not be null", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("", "Array class must not be null", (Map<String, ClientInfoStatus>) null, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      IteratorUtils.toArray((Iterator<?>) objectArrayIterator0);
      IteratorUtils.getIterator(sQLClientInfoException6);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      MapIterator<SQLException, SQLTransientConnectionException> mapIterator1 = IteratorUtils.emptyMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.functors.ExceptionTransformer", "0n(1Ek[#o", sQLClientInfoException3);
      IteratorUtils.contains((Iterator<SQLException>) mapIterator1, (Object) sQLTransientConnectionException0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) mapIterator0, 1L);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("RBdRbeD1P6C|y", "Array class must not be null", sQLClientInfoException3);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 1710, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableListIterator0, class0);
      IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<StringTokenizer>[] arrayDequeArray0 = (ArrayDeque<StringTokenizer>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<StringTokenizer> arrayDeque1 = new ArrayDeque<StringTokenizer>();
      arrayDequeArray0[1] = arrayDeque1;
      ObjectArrayIterator<ArrayDeque<StringTokenizer>> objectArrayIterator0 = new ObjectArrayIterator<ArrayDeque<StringTokenizer>>(arrayDequeArray0);
      Transformer<Object, String>[] transformerArray0 = (Transformer<Object, String>[]) Array.newInstance(Transformer.class, 2);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      transformerArray0[0] = transformer0;
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      transformerArray0[1] = transformer1;
      SwitchTransformer<Object, String> switchTransformer0 = new SwitchTransformer<Object, String>((Predicate<? super Object>[]) null, transformerArray0, transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ArrayDeque<StringTokenizer>>) objectArrayIterator0, (Transformer<? super ArrayDeque<StringTokenizer>, String>) switchTransformer0, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>((IIOMetadataNode) null);
      MapIterator<ServiceLoader<SQLTransientException>, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<Hashtable<EnumSet, Locale.FilteringMode>>) mapIterator0, (Transformer<? super Hashtable<EnumSet, Locale.FilteringMode>, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableListIterator0, class0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "", sQLRecoverableException0);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("u,V|T:CEvnpx1.T3vCk", "", 0);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException2;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 0);
      IteratorUtils.get((Iterator<SQLRecoverableException>) objectArrayListIterator0, 1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BwN");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLIntegrityConstraintViolationException[]) null, 1125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(defaultEquator0, defaultEquator0);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      Hashtable<Integer, BatchUpdateException> hashtable0 = new Hashtable<Integer, BatchUpdateException>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null);
      hashtable0.put((Integer) (-1), batchUpdateException0);
      EntrySetMapIterator<Integer, BatchUpdateException> entrySetMapIterator0 = new EntrySetMapIterator<Integer, BatchUpdateException>(hashtable0);
      MapIterator<Integer, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, BatchUpdateException>) entrySetMapIterator0);
      IteratorUtils.contains((Iterator<Integer>) mapIterator0, (Object) resettableIterator0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-1));
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientConnectionException0);
      ListIterator<SQLTransientConnectionException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      Transformer<SQLException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) listIterator1, (Transformer<? super SQLTransientConnectionException, String>) transformer0, "vL5*L~", "sC`5W!d;}jzj@*-", "");
      ResettableListIterator<SQLDataException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) resettableListIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("delimiter may not be null");
      stack0.add(iIOMetadataNode0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) iIOMetadataNode0;
      objectArray0[1] = (Object) resettableIterator0;
      objectArray0[2] = (Object) iIOMetadataNode0;
      objectArray0[3] = (Object) iIOMetadataNode0;
      objectArray0[4] = (Object) "delimiter may not be null";
      objectArray0[5] = (Object) iIOMetadataNode0;
      objectArray0[6] = (Object) "delimiter may not be null";
      stack0.toArray(objectArray0);
      stack0.clone();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(stack0);
      IteratorUtils.toString((Iterator<IIOMetadataNode>) reverseListIterator0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!1'e hy<CH4fd}}=");
      Object[] objectArray0 = new Object[0];
      IteratorUtils.arrayListIterator(objectArray0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("tT|f2Ea&`Vh72{-m", "tT|f2Ea&`Vh72{-m", 125);
      sQLRecoverableException0.getSuppressed();
      File file0 = MockFile.createTempFile("tT|f2Ea&`Vh72{-m", "");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "tT|f2Ea&`Vh72{-m");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // tT|f2Ea&`Vh72{-m
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IteratorUtils.emptyIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      DefaultEquator<Object> defaultEquator1 = DefaultEquator.defaultEquator();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(defaultEquator0, defaultEquator1);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IteratorUtils.emptyIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Factory<SQLIntegrityConstraintViolationException> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, SQLIntegrityConstraintViolationException> factoryTransformer0 = new FactoryTransformer<Object, SQLIntegrityConstraintViolationException>(factory0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("R+b`bOiiJ`8");
      IteratorUtils.getIterator(iIOMetadataNode0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      IteratorUtils.getIterator(vector0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IteratorUtils.emptyIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(defaultEquator0, defaultEquator0);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      String string0 = "";
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      EmptyListIterator.resettableEmptyListIterator();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableListIterator0, class0);
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) hashSet0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("JW^bolMBI", "", (-1));
      hashSet0.add(sQLInvalidAuthorizationSpecException0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IteratorUtils.emptyIterator();
      EmptyListIterator.resettableEmptyListIterator();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "u,";
      String string1 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) null, (Transformer<? super String, String>) null, (String) null, "u,", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      linkedHashSet0.iterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      Stack<Object> stack0 = new Stack<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Closure<Object> closure0 = ForClosure.forClosure(10, (Closure<? super Object>) null);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0, true);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, (Closure<? super Object>) null, closure1);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator((SQLFeatureNotSupportedException) null);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0, 10);
      ReverseListIterator<SQLFeatureNotSupportedException> reverseListIterator0 = new ReverseListIterator<SQLFeatureNotSupportedException>(list0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) reverseListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<ServiceLoader<ServiceLoader>>) iterator0, (Closure<? super ServiceLoader<ServiceLoader>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      sQLClientInfoException0.getStackTrace();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLClientInfoException0, defaultEquator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer(")");
      IteratorUtils.contains((Iterator<Iterator<String>>) null, (Object) stringTokenizer0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Closure<Object> closure0 = ForClosure.forClosure((-1), (Closure<? super Object>) null);
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0, false);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure1, (Closure<? super Object>) null);
      IteratorUtils.apply((Iterator<ServiceLoader<ServiceLoader>>) null, (Closure<? super ServiceLoader<ServiceLoader>>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) priorityQueue0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLDataException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(defaultEquator0, defaultEquator0);
      ExceptionTransformer.exceptionTransformer();
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(stack0);
      IteratorUtils.toString((Iterator<IIOMetadataNode>) reverseListIterator0);
      IteratorUtils.size(objectArrayListIterator0);
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OrderedMapIterator<Properties, ServiceLoader<SQLTransactionRollbackException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends Properties>) orderedMapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<DataTruncation, Properties> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, Properties>) orderedMapIterator1);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) mapIterator0, (Predicate<? super DataTruncation>) uniquePredicate0);
      IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) orderedMapIterator1, 3093L, 3093L);
      EmptyListIterator.resettableEmptyListIterator();
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.matchesAny((Iterator<SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      Iterator<Properties> iterator0 = linkedHashSet0.iterator();
      IteratorUtils.asIterable((Iterator<? extends Properties>) iterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      EmptyListIterator.resettableEmptyListIterator();
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      EmptyListIterator.resettableEmptyListIterator();
      Factory<SQLIntegrityConstraintViolationException> factory0 = null;
      FactoryTransformer<Object, SQLIntegrityConstraintViolationException> factoryTransformer0 = new FactoryTransformer<Object, SQLIntegrityConstraintViolationException>((Factory<? extends SQLIntegrityConstraintViolationException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLClientInfoException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      IteratorUtils.getIterator((Object) null);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableListIterator0, class0);
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ServiceLoader<Boolean>[]) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(stack0);
      loopingIterator0.reset();
      String string0 = "JN]}2";
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      Properties properties0 = new Properties();
      linkedList0.add(properties0);
      linkedList0.add((Properties) null);
      linkedList0.add((Properties) null);
      stack0.addAll((Collection<? extends Properties>) linkedList0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JN]}2");
      stack0.add(properties0);
      Class<Object> class0 = Object.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JN]}2");
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) loopingIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.getIterator(resettableIterator0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) constantTransformer0);
      IteratorUtils.emptyIterator();
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.emptyIterator();
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) iterator0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.toString((Iterator<IIOMetadataNode>) resettableListIterator0);
      Iterator<SQLClientInfoException>[] iteratorArray1 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 2);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      LoopingIterator<SQLClientInfoException> loopingIterator0 = new LoopingIterator<SQLClientInfoException>(vector0);
      ListIteratorWrapper<SQLClientInfoException> listIteratorWrapper0 = new ListIteratorWrapper<SQLClientInfoException>(loopingIterator0);
      iteratorArray1[0] = (Iterator<SQLClientInfoException>) listIteratorWrapper0;
      ArrayIterator<InstanceofPredicate> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<InstanceofPredicate>(enumeration0, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>((IIOMetadataNode) null);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) singletonListIterator0, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 11
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) priorityQueue0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      Factory<String> factory0 = ConstantFactory.constantFactory(";_-HSo8#|vSL");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.toString(iterator0, (Transformer<? super StringTokenizer, String>) factoryTransformer0, ";_-HSo8#|vSL", ";_-HSo8#|vSL", "1");
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Properties>) null, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<?>) orderedIterator0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLException> predicate0 = AnyPredicate.anyPredicate((Predicate<? super SQLException>[]) predicateArray0);
      Iterator<SQLIntegrityConstraintViolationException> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      IteratorUtils.emptyIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.getPreviousSibling();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(uniquePredicate0, predicate0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) orPredicate0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLClientInfoException> iterator0 = null;
      Factory<SQLIntegrityConstraintViolationException> factory0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getAttributeNodeNS("", "");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>((IIOMetadataNode) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("m\"#\u0001H`&m`iJ");
      iIOMetadataNode0.getPreviousSibling();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      ResettableIterator<SQLException> resettableIterator1 = IteratorUtils.emptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) zippingIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.find((Iterator<SQLException>) resettableIterator1, (Predicate<? super SQLException>) predicate1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "UdtgDe9bbhtEw;+n";
      Hashtable<Integer, BatchUpdateException> hashtable0 = new Hashtable<Integer, BatchUpdateException>();
      Integer integer0 = new Integer((-710));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLSyntaxErrorException0);
      hashtable0.put(integer0, batchUpdateException0);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IteratorUtils.emptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) zippingIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      OrderedMapIterator<InstanceofPredicate, Predicate<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<InstanceofPredicate, Predicate<String>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<InstanceofPredicate, Predicate<String>>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<InstanceofPredicate, Predicate<String>> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<InstanceofPredicate, Predicate<String>>(abstractOrderedMapIteratorDecorator0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 6);
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) orderedMapIterator0;
      iteratorArray0[1] = (Iterator<InstanceofPredicate>) abstractOrderedMapIteratorDecorator1;
      iteratorArray0[2] = (Iterator<InstanceofPredicate>) abstractOrderedMapIteratorDecorator0;
      iteratorArray0[3] = (Iterator<InstanceofPredicate>) abstractOrderedMapIteratorDecorator0;
      iteratorArray0[4] = (Iterator<InstanceofPredicate>) abstractOrderedMapIteratorDecorator0;
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[4];
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(instanceofPredicateArray0, 1384);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.singletonIterator(iIOMetadataNode0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("ConstantTransformer", "ConstantTransformer");
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.singletonIterator(stringTokenizer0);
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<StringTokenizer>) resettableIterator0, 854L);
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) skippingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0, (Collection<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) constantTransformer0);
      OrderedMapIterator<InstanceofPredicate, Predicate<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<InstanceofPredicate, ? extends Predicate<String>>) orderedMapIterator0);
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) zippingIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) orderedMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Predicate<Object>>) enumeration0, (Collection<? super Predicate<Object>>) stack0);
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(constantTransformer0);
      IteratorUtils.apply((Iterator<ServiceLoader<ServiceLoader>>) iterator0, (Closure<? super ServiceLoader<ServiceLoader>>) transformerClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<LinkedList<SQLTimeoutException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) constantTransformer0);
      IteratorUtils.emptyIterator();
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) constantTransformer0);
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, Properties>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, Properties>) abstractOrderedMapIteratorDecorator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(stack0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) reverseListIterator0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) instanceofPredicate0);
      IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) listIterator0, 3093L, 3093L);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<SQLTransientException> class1 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableListIterator0, class1);
      Hashtable<Iterator<Properties>, SQLDataException> hashtable0 = new Hashtable<Iterator<Properties>, SQLDataException>();
      EntrySetMapIterator<Iterator<Properties>, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<Iterator<Properties>, SQLDataException>(hashtable0);
      IteratorUtils.chainedIterator((Iterator<? extends Iterator<Properties>>) entrySetMapIterator0, (Iterator<? extends Iterator<Properties>>) entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      int int0 = 801;
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableIterator0, 801);
      MapIterator<DataTruncation, Properties> mapIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      Enumeration<BatchUpdateException> enumeration0 = null;
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null, (Collection<? super BatchUpdateException>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("G?i)-DpuVLOhtNK'6@*");
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(defaultEquator0, defaultEquator0);
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      EqualPredicate.equalPredicate(linkedHashSet0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) equalPredicate0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) objectArrayListIterator0;
      iteratorArray0[1] = (Iterator<SQLInvalidAuthorizationSpecException>) objectArrayListIterator0;
      iteratorArray0[2] = (Iterator<SQLInvalidAuthorizationSpecException>) listIterator0;
      iteratorArray0[3] = (Iterator<SQLInvalidAuthorizationSpecException>) objectArrayListIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IteratorUtils.emptyIterator();
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(priorityQueue0);
      IteratorUtils.getIterator(priorityQueue0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("{Q*QbF3j4/xHKb~5", (String) null, 1);
      IdentityPredicate<SQLNonTransientException> identityPredicate0 = new IdentityPredicate<SQLNonTransientException>(sQLNonTransientConnectionException0);
      IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) loopingIterator0, (Predicate<? super SQLFeatureNotSupportedException>) identityPredicate0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("G?i)-DpuVLOhtNK'6@*");
      String string0 = "3b";
      Hashtable<InstanceofPredicate, Transformer<Object, String>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, String>>();
      Transformer<SQLException, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super SQLException>, ? extends Transformer<? super SQLException, ? extends String>>) hashtable0);
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) transformer0, "4FPl4&){r", "I|J+d", "I|J+d");
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) stack0);
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) resettableListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("~KbKDjG7WH");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OrderedMapIterator<Properties, ServiceLoader<SQLTransactionRollbackException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends Properties>) orderedMapIterator0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      OrderedMapIterator<DataTruncation, Properties> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<DataTruncation, Properties> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, Properties>) orderedMapIterator1);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) mapIterator0, (Predicate<? super DataTruncation>) predicate0);
      IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) orderedMapIterator1, 3093L, 3093L);
      EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) notPredicate0);
      OrderedMapIterator<SQLException, SQLSyntaxErrorException> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.find((Iterator<SQLException>) orderedMapIterator2, (Predicate<? super SQLException>) predicate0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) orderedMapIterator1);
      OrderedMapIterator<SQLTimeoutException, SQLIntegrityConstraintViolationException> orderedMapIterator3 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLIntegrityConstraintViolationException>(orderedMapIterator3);
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 2);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("org.apache.commons.collections4.functors.ChainedTransformer", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<TreeSet>>) abstractOrderedMapIteratorDecorator0, (Transformer<? super LinkedHashSet<TreeSet>, String>) invokerTransformer0, (String) null, "End index must not be less than start index.", "org.apache.commons.collections4.functors.ChainedTransformer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableIterator0, 801);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      ListIterator<SQLException> listIterator0 = EmptyListIterator.emptyListIterator();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      IteratorUtils.find((Iterator<SQLException>) listIterator0, (Predicate<? super SQLException>) andPredicate0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) resettableIterator0);
      SQLDataException sQLDataException0 = new SQLDataException("Z8HU!DUG${Q<)kJ", "", 801, (Throwable) null);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      ListIterator<SQLDataException> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) singletonListIterator0);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) listIterator1, 801);
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) list0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) constantTransformer0);
      IteratorUtils.emptyIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("G?i)-DpuVLOhtNK'6@*", "", (-1));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("p", sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("G?i)-DpuVLOhtNK'6@*");
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException0;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", (Throwable) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_FilteringMode0, defaultEquator0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) equalPredicate0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) constantTransformer0);
      IteratorUtils.emptyIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("p", sQLSyntaxErrorException0);
      OrderedMapIterator<InstanceofPredicate, Predicate<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<InstanceofPredicate, Predicate<String>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<InstanceofPredicate, ? extends Predicate<String>>) orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) orderedMapIterator1);
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null);
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>((Predicate<? super SQLException>) null);
      Predicate<SQLNonTransientException> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLNonTransientException>) nullIsFalsePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) constantTransformer0);
      IteratorUtils.emptyIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("E=c57).[Zc3(]=j");
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("E=c57).[Zc3(]=j", "G'eD-3qF1y(b#", 1730, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException0;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("G'eD-3qF1y(b#", sQLSyntaxErrorException0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Integer integer0 = new Integer(9);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer0, defaultEquator0);
      Predicate<SQLNonTransientException> predicate0 = NotPredicate.notPredicate((Predicate<? super SQLNonTransientException>) equalPredicate0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) equalPredicate0);
      IteratorUtils.matchesAll((Iterator<ComparatorPredicate.Criterion>) null, (Predicate<? super ComparatorPredicate.Criterion>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OrderedMapIterator<String, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, Object>(orderedMapIterator0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) abstractMapIteratorDecorator0, (Iterator<? extends String>) abstractMapIteratorDecorator0);
      IteratorUtils.toArray((Iterator<?>) zippingIterator0);
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      properties0.keys();
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      BiFunction<Object, Object, SQLTransientConnectionException> biFunction0 = (BiFunction<Object, Object, SQLTransientConnectionException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties1.computeIfPresent(abstractMapIteratorDecorator0, biFunction0);
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[2] = properties4;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Entry does not exist: ", sQLSyntaxErrorException0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      List<SQLTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientException>) singletonIterator0);
      IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties4, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) constantTransformer0);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<InstanceofPredicate, Predicate<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<InstanceofPredicate, Predicate<String>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<InstanceofPredicate, ? extends Predicate<String>>) orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) orderedMapIterator1);
      Stack<Object> stack0 = new Stack<Object>();
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(constantTransformer0);
      MapIterator<Boolean, Hashtable<SQLTransientConnectionException, Properties>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Boolean>) mapIterator0, (-4258L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(stack0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) reverseListIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) stack0);
      IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) iterator0);
      Iterator<SQLException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      reverseListIterator0.reset();
      IteratorUtils.skippingIterator(iterator1, 0L);
      OrderedMapIterator<SQLTimeoutException, Vector<IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      ResettableIterator<SQLException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<Object, String> transformer0 = new ConstantTransformer<Object, String>("B]IzGs?>+");
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) transformer0, "Seqld?8:>L+nf", "I|J+d", "3b");
      Stack<SQLTimeoutException> stack1 = new Stack<SQLTimeoutException>();
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.loopingListIterator(list0);
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      ResettableIterator<SQLException> resettableIterator1 = IteratorUtils.emptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) zippingIterator0);
      ResettableListIterator<SQLTransientException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.find((Iterator<SQLException>) resettableIterator1, (Predicate<? super SQLException>) predicate1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "UdtgDe9bbhtEw;+n";
      IteratorUtils.pushbackIterator((Iterator<? extends SQLException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(arrayList0);
      EmptyIterator.resettableEmptyIterator();
      String string0 = null;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      String string1 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<LinkedHashSet>>) null, 1366);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PriorityQueue<SQLNonTransientConnectionException> priorityQueue0 = new PriorityQueue<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) priorityQueue0);
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      Predicate<SQLNonTransientException> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLNonTransientException>) transformerPredicate0);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) zippingIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      String string0 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<LinkedHashSet>>) resettableIterator0, 1752);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1752
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) constantTransformer0);
      ResettableIterator<SQLException> resettableIterator1 = IteratorUtils.emptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) zippingIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.find((Iterator<SQLException>) resettableIterator1, (Predicate<? super SQLException>) predicate1);
      IteratorUtils.isEmpty(iterator0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "UdtgDe9bbhtEw;+n";
      IteratorUtils.arrayListIterator(stringArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(761, true, true, 0, 761, (Throwable) null);
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.singletonListIterator((SQLWarning) dataTruncation0);
      ListIterator<SQLWarning> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) listIterator1, (-2978L), (-1745L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = null;
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator((SQLFeatureNotSupportedException) null);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, class0);
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransientConnectionException>) zippingIterator0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OrderedMapIterator<String, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, Object>(orderedMapIterator0);
      AbstractMapIteratorDecorator<String, Object> abstractMapIteratorDecorator1 = new AbstractMapIteratorDecorator<String, Object>(orderedMapIterator0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) abstractMapIteratorDecorator0, (Iterator<? extends String>) abstractMapIteratorDecorator1);
      IteratorUtils.toArray((Iterator<?>) zippingIterator0);
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rn&4S3{u";
      stringArray0[1] = "%|,3P{RdRe-qwr%mxm";
      stringArray0[2] = "org.apache.commons.collections4.map.AbstractLinkedMap";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, 100, (-277));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OrderedMapIterator<String, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, Object>(orderedMapIterator0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) abstractMapIteratorDecorator0, (Iterator<? extends String>) abstractMapIteratorDecorator0);
      IteratorUtils.toArray((Iterator<?>) zippingIterator0);
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      properties0.keys();
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[2] = properties4;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties4, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      MockThrowable mockThrowable0 = new MockThrowable("");
      assertNotNull(mockThrowable0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("WOhkBo(l@QTV.ta", mockThrowable0);
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("WOhkBo(l@QTV.ta", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: WOhkBo(l@QTV.ta", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      boolean boolean0 = priorityQueue0.add(sQLInvalidAuthorizationSpecException0);
      assertEquals(1, priorityQueue0.size());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("WOhkBo(l@QTV.ta", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: WOhkBo(l@QTV.ta", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertTrue(priorityQueue0.contains(sQLInvalidAuthorizationSpecException0));
      assertTrue(boolean0);
      
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) priorityQueue0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains(sQLInvalidAuthorizationSpecException0));
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-2126));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(stack0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) reverseListIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) stack0);
      IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) iterator0);
      Iterator<SQLException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      reverseListIterator0.reset();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator1, (-10L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(stack0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) reverseListIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) stack0);
      IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) iterator0);
      Iterator<SQLException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      reverseListIterator0.reset();
      IteratorUtils.skippingIterator(iterator1, 0L);
      OrderedMapIterator<SQLTimeoutException, Vector<IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      EmptyIterator.resettableEmptyIterator();
      InvokerTransformer.invokerTransformer("B]IzGs?>+");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLInvalidAuthorizationSpecException[]) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      MockThrowable mockThrowable0 = new MockThrowable("");
      IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) priorityQueue0);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      stack0.add((SQLTimeoutException) null);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) stack0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedMapIterator<Properties, ServiceLoader<SQLTransactionRollbackException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends Properties>) orderedMapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("(tR{x");
      MapIterator<DataTruncation, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) mapIterator0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<SQLWarning> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super SQLWarning>>) priorityQueue0);
      Iterator<DataTruncation> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) iterator0, (Predicate<? super DataTruncation>) predicate0);
      IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) iterator1, 0L, 0L);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableListIterator0, class0);
      Hashtable<Iterator<Properties>, SQLDataException> hashtable0 = new Hashtable<Iterator<Properties>, SQLDataException>();
      EntrySetMapIterator<Iterator<Properties>, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<Iterator<Properties>, SQLDataException>(hashtable0);
      MapIterator<Iterator<Properties>, Transformer<TreeSet, SQLInvalidAuthorizationSpecException>> mapIterator1 = IteratorUtils.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends Iterator<Properties>>) mapIterator1, (Iterator<? extends Iterator<Properties>>) mapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicate0);
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) null, (Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) constantTransformer0);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<InstanceofPredicate, Predicate<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<InstanceofPredicate, Predicate<String>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<InstanceofPredicate, ? extends Predicate<String>>) orderedMapIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) orderedMapIterator1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("{'ddf+J7:JCEg[", "h27B}u<twFz|", 5);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("XFNU !", "XFNU !", sQLRecoverableException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "WQ ?>$hBRfbg,y");
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[0];
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      Throwable throwable0 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) priorityQueue0, 0, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("No next() entry in the iteration", "No next() entry in the iteration");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransactionRollbackException0);
      DataTruncation dataTruncation0 = new DataTruncation(1743, true, true, 5, 0, batchUpdateException0);
      linkedList0.add(dataTruncation0);
      IteratorUtils.loopingListIterator((List<DataTruncation>) linkedList0);
      Iterator<Integer> iterator0 = null;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransactionRollbackException0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Class<Properties> class0 = Properties.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[1] = predicate0;
      // Undeclared exception!
      try { 
        OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not contain a null predicate, index 2 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      assertNotNull(zippingIterator0);
      
      int int0 = IteratorUtils.size(zippingIterator0);
      assertEquals(0, int0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      Throwable[] throwableArray0 = sQLSyntaxErrorException0.getSuppressed();
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(constantTransformer0);
      
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) constantTransformer0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(iterator0);
      
      ResettableIterator<SQLException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      OrderedMapIterator<InstanceofPredicate, Predicate<String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      OrderedMapIterator<InstanceofPredicate, Predicate<String>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<InstanceofPredicate, ? extends Predicate<String>>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertNotNull(orderedMapIterator1);
      
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) orderedMapIterator1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertNotNull(enumeration0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Iterator<Predicate<Object>> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Predicate<Object>>) enumeration0, (Collection<? super Predicate<Object>>) stack0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(orderedMapIterator0.equals((Object)orderedMapIterator1));
      assertFalse(orderedMapIterator1.equals((Object)orderedMapIterator0));
      assertNotNull(iterator1);
      
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) null);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(constantTransformer0);
      IteratorUtils.apply((Iterator<ServiceLoader<ServiceLoader>>) iterator1, (Closure<? super ServiceLoader<ServiceLoader>>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Properties properties0 = new Properties();
      Properties[] propertiesArray0 = new Properties[8];
      propertiesArray0[0] = properties0;
      propertiesArray0[1] = properties0;
      propertiesArray0[3] = properties0;
      propertiesArray0[4] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[5] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[6] = properties2;
      propertiesArray0[7] = properties0;
      IteratorUtils.arrayListIterator(propertiesArray0, 0, 5);
      EmptyIterator.resettableEmptyIterator();
      ConstantTransformer.constantTransformer("");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      MockThrowable mockThrowable0 = new MockThrowable("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("WOhkBo(l@QTV.ta", mockThrowable0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("WOhkBo(l@QTV.ta", "Predicate must not be null");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Predicate must not be null", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransactionRollbackException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(stack0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) reverseListIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) stack0);
      IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) iterator0);
      Iterator<SQLException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      reverseListIterator0.reset();
      IteratorUtils.skippingIterator(iterator1, 0L);
      OrderedMapIterator<SQLTimeoutException, Vector<IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      ResettableIterator<SQLException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("B]IzGs?>+");
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) transformer0, "Seqld?8:>L+nf", "I|J+d", "3b");
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      IteratorUtils.emptyOrderedIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(";rN", "", 5);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(";rN", "Entry does not exist: ", sQLRecoverableException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Predicate must not be null", "I|J+d");
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      IteratorUtils.toString((Iterator<IIOMetadataNode>) null, (Transformer<? super IIOMetadataNode, String>) transformer0, "The map size must be 0 or 1", "_QK,e93Bgf6<", "org.apache.commons.collections4.set.AbstractSerializableSetDecorator");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(priorityQueue0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("#t", (String) null, 135);
      IdentityPredicate<SQLNonTransientException> identityPredicate0 = new IdentityPredicate<SQLNonTransientException>(sQLNonTransientConnectionException0);
      IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) loopingIterator0, (Predicate<? super SQLFeatureNotSupportedException>) identityPredicate0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      SQLException sQLException0 = new SQLException((String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, sQLSyntaxErrorException0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLTransientException0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      vector0.add(instanceofPredicate0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      SQLTransientException sQLTransientException1 = (SQLTransientException)IteratorUtils.find((Iterator<SQLException>) singletonListIterator0, (Predicate<? super SQLException>) predicate0);
      IteratorUtils.isEmpty(singletonListIterator0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      IteratorUtils.arrayListIterator(stringArray0, 6, 6);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException1);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("ExceptionFactory invoked", stringArray0[2], 6, sQLSyntaxErrorException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      ObjectArrayIterator<SQLIntegrityConstraintViolationException> objectArrayIterator0 = new ObjectArrayIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.matchesAll((Iterator<SQLIntegrityConstraintViolationException>) objectArrayIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) constantTransformer0);
      IteratorUtils.emptyIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("G?i)-DpuVLOhtNK'6@*", "", (-1));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("p", sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("G?i)-DpuVLOhtNK'6@*");
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("f5XL'y79'", "'Q*g'UYLv]{74", (-816));
      IdentityPredicate<SQLNonTransientException> identityPredicate0 = new IdentityPredicate<SQLNonTransientException>(sQLInvalidAuthorizationSpecException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator1, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator1);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) identityPredicate0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MapIterator<SQLDataException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLFeatureNotSupportedException> priorityQueue0 = new PriorityQueue<SQLFeatureNotSupportedException>();
      LoopingIterator<SQLFeatureNotSupportedException> loopingIterator0 = new LoopingIterator<SQLFeatureNotSupportedException>(priorityQueue0);
      IteratorUtils.getIterator(comparator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "#t", 135);
      IdentityPredicate<SQLNonTransientException> identityPredicate0 = new IdentityPredicate<SQLNonTransientException>(sQLNonTransientConnectionException0);
      IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) loopingIterator0, (Predicate<? super SQLFeatureNotSupportedException>) identityPredicate0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      sQLClientInfoException0.getStackTrace();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLClientInfoException0, defaultEquator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer(")");
      IteratorUtils.contains((Iterator<Iterator<String>>) null, (Object) stringTokenizer0);
      IteratorUtils.size((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OrderedMapIterator<ArrayList<InstanceofPredicate>, Vector<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.contains((Iterator<ArrayList<InstanceofPredicate>>) orderedMapIterator0, (Object) iIOMetadataNode0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      int int0 = 1;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", (String) null, 1);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, (String) null, 1);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("", "");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      String string0 = "r}6\"gzt/<S@%";
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("r}6\"gzt/<S@%");
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("r}6\"gzt/<S@%", "", sQLDataException0);
      sQLRecoverableException0.addSuppressed(sQLRecoverableException4);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      String string1 = "@,}@j$z^[K`s6{'~";
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException((String) null, "@,}@j$z^[K`s6{'~", (-1846), sQLRecoverableException4);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      String string2 = "Array class must not be null";
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement("", (String) null, "Array class must not be null", (-1846));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 657, sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.setNextException(sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "K0h");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", "pt{3 S1@g", sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("", "p", 0);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException(", ", (Throwable) null);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(", ", sQLInvalidAuthorizationSpecException3);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransactionRollbackException0, defaultEquator0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) equalPredicate0);
      IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableIterator0, 801);
      IteratorUtils.loopingListIterator(list0);
      HashMap<Iterator<String>, Boolean> hashMap0 = new HashMap<Iterator<String>, Boolean>();
      hashMap0.values();
      EntrySetMapIterator<Iterator<String>, Boolean> entrySetMapIterator0 = new EntrySetMapIterator<Iterator<String>, Boolean>(hashMap0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Object object0 = new Object();
      hashMap0.remove(object0);
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Comparator<SQLException> comparator0 = null;
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 2);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) resettableIterator0;
      int int0 = 91;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Iterator<SQLRecoverableException>[] iteratorArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Iterator<EnumSet<Locale.FilteringMode>> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) constantTransformer0);
      IteratorUtils.emptyIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("G?i)-DpuVLOhtNK'6@*", "", (-1));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("p", sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("G?i)-DpuVLOhtNK'6@*");
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("f5XL'y79'", "'Q*g'UYLv]{74", (-816));
      IdentityPredicate<SQLNonTransientException> identityPredicate0 = new IdentityPredicate<SQLNonTransientException>(sQLInvalidAuthorizationSpecException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "p";
      stringArray0[2] = "'Q*g'UYLv]{74";
      stringArray0[3] = "p";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, 0, (-299));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 9);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(batchUpdateException1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 9;
      intArray0[2] = 3134;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 10;
      intArray0[6] = 0;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", "", intArray0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0);
      iteratorArray0[0] = (Iterator<BatchUpdateException>) resettableIterator0;
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) resettableIterator0);
      iteratorArray0[1] = iterator0;
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      iteratorArray0[2] = iterator1;
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException2, true);
      iteratorArray0[3] = (Iterator<BatchUpdateException>) singletonIterator0;
      SingletonIterator<BatchUpdateException> singletonIterator1 = new SingletonIterator<BatchUpdateException>(batchUpdateException1, false);
      iteratorArray0[4] = (Iterator<BatchUpdateException>) singletonIterator1;
      OrderedMapIterator<BatchUpdateException, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, SQLClientInfoException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLClientInfoException>) orderedMapIterator0);
      iteratorArray0[5] = (Iterator<BatchUpdateException>) mapIterator0;
      SQLWarning sQLWarning0 = new SQLWarning("", "k|BJ(:s", 14, batchUpdateException3);
      ArrayIterator<BatchUpdateException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<BatchUpdateException>(sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OrderedMapIterator<Properties, ServiceLoader<SQLTransactionRollbackException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<? extends Properties>) orderedMapIterator0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("(tR{x");
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      String string0 = "I6a,gcWmMYS5";
      sQLInvalidAuthorizationSpecException0.initCause(sQLInvalidAuthorizationSpecException1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("(tR{x", "I6a,gcWmMYS5", 100, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      ObjectArrayIterator<SQLInvalidAuthorizationSpecException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0, 100, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[9];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "RjS0E\"qsZ';M<r^EnS%");
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      MockThrowable mockThrowable0 = new MockThrowable(sQLNonTransientException0);
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException(mockThrowable0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientException1);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLIntegrityConstraintViolationException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 0, sQLNonTransientException1);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("2,l)y/(AN2ky*&", "", 31);
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException2;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("");
      sQLNonTransientExceptionArray0[8] = (SQLNonTransientException) sQLSyntaxErrorException1;
      IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator(objectArray0);
      ArrayListIterator<Locale.FilteringMode> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Locale.FilteringMode>(resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Integer integer0 = new Integer(3431);
      IteratorUtils.getIterator(integer0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 6);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLTransientConnectionException> class2 = SQLTransientConnectionException.class;
      classArray0[2] = class2;
      Class<SQLTransientConnectionException> class3 = SQLTransientConnectionException.class;
      classArray0[3] = class3;
      Class<SQLTransientConnectionException> class4 = SQLTransientConnectionException.class;
      classArray0[4] = class4;
      Class<SQLTransientConnectionException> class5 = SQLTransientConnectionException.class;
      classArray0[5] = class5;
      InvokerTransformer<Object, SQLFeatureNotSupportedException> invokerTransformer0 = new InvokerTransformer<Object, SQLFeatureNotSupportedException>((String) null, classArray0, classArray0);
      IteratorUtils.objectGraphIterator(sQLNonTransientException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) invokerTransformer0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.isEmpty(orderedIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      String string0 = null;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      String string1 = "";
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      try { 
        iIOMetadataNode0.isSameNode(iIOMetadataNode0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(arrayList0);
      EmptyIterator.resettableEmptyIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, sQLIntegrityConstraintViolationException0);
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLTransientException0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<SQLException>) singletonListIterator0, (Predicate<? super SQLException>) predicate1);
      IteratorUtils.isEmpty((Iterator<?>) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, (-299), (-299));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(stack0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) reverseListIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) stack0);
      IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) iterator0);
      Iterator<SQLException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      reverseListIterator0.reset();
      IteratorUtils.skippingIterator(iterator1, 0L);
      OrderedMapIterator<SQLTimeoutException, Vector<IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      ResettableIterator<SQLException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("B]IzGs?>+");
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) transformer0, "Seqld?8:>L+nf", "I|J+d", "3b");
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      IteratorUtils.emptyOrderedIterator();
      SQLException sQLException0 = new SQLException("^", "I|J+d3b");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLException0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLIntegrityConstraintViolationException0, defaultEquator0);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException>(orderedMapIterator1);
      MapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException>(mapIterator0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) abstractMapIteratorDecorator0, (Predicate<? super SQLIntegrityConstraintViolationException>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLException, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLException, ? extends BatchUpdateException>) orderedMapIterator0);
      MapIterator<SQLException, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLException, BatchUpdateException>) orderedMapIterator1);
      IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) mapIterator0, (Iterator<?>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = null;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      iIOMetadataNode1.insertBefore(iIOMetadataNode0, iIOMetadataNode0);
      iIOMetadataNode1.getAttributeNode("/]a>F6(F/{+x_/9B");
      // Undeclared exception!
      try { 
        iIOMetadataNode1.removeAttributeNode((Attr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException0;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      assertEquals(7, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(7, sQLInvalidAuthorizationSpecExceptionArray0.length);
      assertNotNull(objectArrayListIterator0);
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.REJECT_EXTENDED_RANGES, locale_FilteringMode0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(locale_FilteringMode0, defaultEquator0);
      assertNotNull(equalPredicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) equalPredicate0);
      assertEquals(7, objectArrayListIterator0.getEndIndex());
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(7, sQLInvalidAuthorizationSpecExceptionArray0.length);
      assertNotNull(listIterator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 6);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Iterator<Properties> iterator0 = linkedHashSet0.iterator();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(iterator0);
      
      iteratorArray0[0] = iterator0;
      Iterator<Properties> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) iterator0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      
      iteratorArray0[1] = iterator1;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      iteratorArray0[2] = (Iterator<Properties>) resettableListIterator0;
      OrderedMapIterator<Properties, InstanceofPredicate> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      iteratorArray0[3] = (Iterator<Properties>) orderedMapIterator0;
      ResettableIterator<Properties> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends Properties>) linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(resettableIterator1);
      
      iteratorArray0[4] = (Iterator<Properties>) resettableIterator1;
      Iterator<Properties> iterator2 = IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>) resettableListIterator0, (Iterator<? extends Properties>) iterator1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(iterator2.equals((Object)iterator1));
      assertFalse(iterator2.equals((Object)iterator0));
      assertNotNull(iterator2);
      
      iteratorArray0[5] = iterator2;
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
      assertEquals(6, iteratorArray0.length);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Vl");
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Vl", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("Vl", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Vl", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("Vl", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Vl", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: Vl", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Vl", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("Vl", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Vl", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: Vl", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: Vl", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: Vl", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException1);
      
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("*OZC]xE", "Vl", 91, sQLSyntaxErrorException1);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Vl", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("Vl", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Vl", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: Vl", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: Vl", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: Vl", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals("*OZC]xE", sQLSyntaxErrorException2.getMessage());
      assertEquals(91, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: *OZC]xE", sQLSyntaxErrorException2.toString());
      assertEquals("Vl", sQLSyntaxErrorException2.getSQLState());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException2);
      
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator", sQLSyntaxErrorException2);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Vl", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("Vl", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Vl", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: Vl", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: Vl", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: Vl", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals("*OZC]xE", sQLSyntaxErrorException2.getMessage());
      assertEquals(91, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: *OZC]xE", sQLSyntaxErrorException2.toString());
      assertEquals("Vl", sQLSyntaxErrorException2.getSQLState());
      assertNull(sQLSyntaxErrorException3.getSQLState());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator", sQLSyntaxErrorException3.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator", sQLSyntaxErrorException3.toString());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException3);
      
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("*OZC]xE");
      assertNull(sQLSyntaxErrorException4.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: *OZC]xE", sQLSyntaxErrorException4.toString());
      assertEquals("*OZC]xE", sQLSyntaxErrorException4.getMessage());
      assertEquals(0, sQLSyntaxErrorException4.getErrorCode());
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException4.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException4);
      
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("' out of bounds for size '");
      assertEquals("' out of bounds for size '", sQLSyntaxErrorException5.getMessage());
      assertEquals(0, sQLSyntaxErrorException5.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ' out of bounds for size '", sQLSyntaxErrorException5.toString());
      assertNull(sQLSyntaxErrorException5.getSQLState());
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException5.equals((Object)sQLSyntaxErrorException3));
      assertNotNull(sQLSyntaxErrorException5);
      
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException("", sQLSyntaxErrorException3);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Vl", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("Vl", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Vl", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: Vl", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: Vl", sQLSyntaxErrorException1.getMessage());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: Vl", sQLSyntaxErrorException1.toString());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals("*OZC]xE", sQLSyntaxErrorException2.getMessage());
      assertEquals(91, sQLSyntaxErrorException2.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: *OZC]xE", sQLSyntaxErrorException2.toString());
      assertEquals("Vl", sQLSyntaxErrorException2.getSQLState());
      assertNull(sQLSyntaxErrorException3.getSQLState());
      assertEquals(0, sQLSyntaxErrorException3.getErrorCode());
      assertEquals("org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator", sQLSyntaxErrorException3.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator", sQLSyntaxErrorException3.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException6.toString());
      assertEquals(0, sQLSyntaxErrorException6.getErrorCode());
      assertEquals("", sQLSyntaxErrorException6.getMessage());
      assertNull(sQLSyntaxErrorException6.getSQLState());
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException3.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException5));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException6.equals((Object)sQLSyntaxErrorException1));
      assertNotNull(sQLSyntaxErrorException6);
      
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      SQLSyntaxErrorException sQLSyntaxErrorException7 = new SQLSyntaxErrorException();
      assertNull(sQLSyntaxErrorException7.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException7.toString());
      assertNull(sQLSyntaxErrorException7.getSQLState());
      assertEquals(0, sQLSyntaxErrorException7.getErrorCode());
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException2));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException4));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException6));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException3));
      assertFalse(sQLSyntaxErrorException7.equals((Object)sQLSyntaxErrorException5));
      assertNotNull(sQLSyntaxErrorException7);
      
      sQLSyntaxErrorExceptionArray0[7] = sQLSyntaxErrorException7;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(8, sQLSyntaxErrorExceptionArray0.length);
      assertNotNull(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      ResettableListIterator<DataTruncation> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(resettableListIterator1);
      
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      assertNotNull(predicate0);
      
      Iterator<DataTruncation> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) resettableListIterator1, (Predicate<? super DataTruncation>) predicate0);
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(iterator0);
      
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) iterator0, 3093L, 0L);
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(boundedIterator0);
      
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator2 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator2.hasPrevious());
      assertFalse(resettableListIterator2.hasNext());
      assertNotNull(resettableListIterator2);
      
      Class<SQLTransientException> class0 = SQLTransientException.class;
      SQLTransientException[] sQLTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLTransientException>) resettableListIterator2, class0);
      assertFalse(resettableListIterator2.hasPrevious());
      assertFalse(resettableListIterator2.hasNext());
      assertEquals(0, sQLTransientExceptionArray0.length);
      assertNotNull(sQLTransientExceptionArray0);
      
      Hashtable<Iterator<Properties>, SQLDataException> hashtable0 = new Hashtable<Iterator<Properties>, SQLDataException>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<Iterator<Properties>, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<Iterator<Properties>, SQLDataException>(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      Iterator<Iterator<Properties>> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Iterator<Properties>>) entrySetMapIterator0, (Iterator<? extends Iterator<Properties>>) entrySetMapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(iterator1);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) entrySetMapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      ResettableListIterator<DataTruncation> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(resettableListIterator1);
      
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      assertNotNull(predicate0);
      
      Iterator<DataTruncation> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) resettableListIterator1, (Predicate<? super DataTruncation>) predicate0);
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(iterator0);
      
      long[] longArray0 = new long[0];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Closure must not be null", "Closure must not be null");
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Closure must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Closure must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Closure must not be null", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Closure must not be null", "Closure must not be null", (-1911), longArray0, sQLFeatureNotSupportedException0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Closure must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Closure must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Closure must not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals("Closure must not be null", batchUpdateException0.getMessage());
      assertEquals((-1911), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: Closure must not be null", batchUpdateException0.toString());
      assertEquals("Closure must not be null", batchUpdateException0.getSQLState());
      assertEquals(0, longArray0.length);
      assertNotNull(batchUpdateException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("Closure must not be null", batchUpdateException0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Closure must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Closure must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Closure must not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals("Closure must not be null", batchUpdateException0.getMessage());
      assertEquals((-1911), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: Closure must not be null", batchUpdateException0.toString());
      assertEquals("Closure must not be null", batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: Closure must not be null", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("Closure must not be null", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(0, longArray0.length);
      assertNotNull(sQLTransientException0);
      
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Closure must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Closure must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Closure must not be null", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(singletonListIterator0.hasPrevious());
      assertNotNull(singletonListIterator0);
      
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      SQLException sQLException0 = IteratorUtils.find((Iterator<SQLException>) singletonListIterator0, (Predicate<? super SQLException>) predicate0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Closure must not be null", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Closure must not be null", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Closure must not be null", sQLFeatureNotSupportedException0.toString());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertNull(sQLException0);
      
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Closure must not be null";
      stringArray0[1] = "Closure must not be null";
      stringArray0[2] = "EQ";
      stringArray0[3] = "Transformer must not be null";
      stringArray0[4] = "Closure must not be null";
      stringArray0[5] = "Closure must not be null";
      stringArray0[6] = "Closure must not be null";
      stringArray0[7] = "Closure must not be null";
      stringArray0[8] = "Closure must not be null";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, (-277), (-1542));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(reverseListIterator0);
      
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) reverseListIterator0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(enumeration0);
      
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(iterator0);
      
      Iterator<BatchUpdateException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) iterator0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      
      Iterator<SQLException> iterator2 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(iterator2);
      
      reverseListIterator0.reset();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      
      long long0 = 0L;
      SkippingIterator<SQLException> skippingIterator0 = IteratorUtils.skippingIterator(iterator2, 0L);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(skippingIterator0);
      
      OrderedMapIterator<SQLTimeoutException, Vector<IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ResettableIterator<SQLException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("B]IzGs?>+");
      assertNotNull(transformer0);
      
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      SQLException sQLException0 = IteratorUtils.find(iterator2, (Predicate<? super SQLException>) predicate0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertNull(sQLException0);
      
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertTrue(boolean0);
      assertFalse(iterator0.equals((Object)iterator1));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Seqld?8:>L+nf";
      stringArray0[1] = "B]IzGs?>+";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, (-299), (-109));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      StackTraceElement[] stackTraceElementArray0 = sQLClientInfoException0.getStackTrace();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(13, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLClientInfoException0, defaultEquator0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(equalPredicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) equalPredicate0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(".z=mGm)1Q-+@nCK-g", "VcUANUFpf", 1522);
      assertEquals("java.sql.SQLTimeoutException: .z=mGm)1Q-+@nCK-g", sQLTimeoutException0.toString());
      assertEquals("VcUANUFpf", sQLTimeoutException0.getSQLState());
      assertEquals(".z=mGm)1Q-+@nCK-g", sQLTimeoutException0.getMessage());
      assertEquals(1522, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.singletonListIterator(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: .z=mGm)1Q-+@nCK-g", sQLTimeoutException0.toString());
      assertEquals("VcUANUFpf", sQLTimeoutException0.getSQLState());
      assertEquals(".z=mGm)1Q-+@nCK-g", sQLTimeoutException0.getMessage());
      assertEquals(1522, sQLTimeoutException0.getErrorCode());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLClientInfoException>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: .z=mGm)1Q-+@nCK-g", sQLTimeoutException0.toString());
      assertEquals("VcUANUFpf", sQLTimeoutException0.getSQLState());
      assertEquals(".z=mGm)1Q-+@nCK-g", sQLTimeoutException0.getMessage());
      assertEquals(1522, sQLTimeoutException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLNonTransientConnectionException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      assertEquals("java.sql.SQLTimeoutException: .z=mGm)1Q-+@nCK-g", sQLTimeoutException0.toString());
      assertEquals("VcUANUFpf", sQLTimeoutException0.getSQLState());
      assertEquals(".z=mGm)1Q-+@nCK-g", sQLTimeoutException0.getMessage());
      assertEquals(1522, sQLTimeoutException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(predicate0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) abstractOrderedMapIteratorDecorator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertEquals("java.sql.SQLTimeoutException: .z=mGm)1Q-+@nCK-g", sQLTimeoutException0.toString());
      assertEquals("VcUANUFpf", sQLTimeoutException0.getSQLState());
      assertEquals(".z=mGm)1Q-+@nCK-g", sQLTimeoutException0.getMessage());
      assertEquals(1522, sQLTimeoutException0.getErrorCode());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ArrayDeque<SQLNonTransientException> arrayDeque0 = new ArrayDeque<SQLNonTransientException>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      ListIterator<ArrayDeque<SQLNonTransientException>> listIterator0 = IteratorUtils.singletonListIterator(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) arrayDeque0, 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedIterator<Object> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(orderedIterator0);
      assertTrue(boolean0);
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ResettableIterator<EnumSet<Locale.FilteringMode>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      ZippingIterator<EnumSet<Locale.FilteringMode>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) resettableIterator0);
      assertNotNull(zippingIterator0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("F{i:]p\"IJbb}_P");
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("F{i:]p\"IJbb}_P", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: F{i:]p\"IJbb}_P", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("F{i:]p\"IJbb}_P", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: F{i:]p\"IJbb}_P", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      SingletonListIterator<SQLException> singletonListIterator0 = new SingletonListIterator<SQLException>(sQLTransientException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("F{i:]p\"IJbb}_P", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: F{i:]p\"IJbb}_P", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("", sQLTransientException0.getMessage());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertNotNull(singletonListIterator0);
      
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      SQLTransientException sQLTransientException1 = (SQLTransientException)IteratorUtils.find((Iterator<SQLException>) singletonListIterator0, (Predicate<? super SQLException>) predicate0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("F{i:]p\"IJbb}_P", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: F{i:]p\"IJbb}_P", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("", sQLTransientException0.getMessage());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException1.toString());
      assertEquals("", sQLTransientException1.getMessage());
      assertNull(sQLTransientException1.getSQLState());
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException1, sQLTransientException0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertNotNull(sQLTransientException1);
      
      boolean boolean1 = IteratorUtils.isEmpty(singletonListIterator0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("F{i:]p\"IJbb}_P", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: F{i:]p\"IJbb}_P", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("", sQLTransientException0.getMessage());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertSame(sQLTransientException0, sQLTransientException1);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "`hby1Ki~s2Lh$1";
      stringArray0[4] = null;
      stringArray0[5] = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(stringArray0, (-299), 1617);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator0);
      
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableIterator0, 801);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("5(_[Lop");
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 5(_[Lop", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("5(_[Lop", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "5(_[Lop", (-1405));
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals((-1405), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("5(_[Lop", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      IdentityPredicate<SQLNonTransientException> identityPredicate0 = new IdentityPredicate<SQLNonTransientException>(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals((-1405), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("5(_[Lop", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(identityPredicate0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("5(_[Lop");
      assertNotNull(mockPrintStream0);
      
      sQLNonTransientConnectionException0.printStackTrace((PrintStream) mockPrintStream0);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals((-1405), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("5(_[Lop", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator1 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNotNull(resettableIterator1);
      
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator1, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator1);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNotNull(iterator0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLFeatureNotSupportedException>) resettableIterator1, (Predicate<? super SQLFeatureNotSupportedException>) identityPredicate0);
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals((-1405), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("5(_[Lop", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertFalse(boolean0);
      
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(resettableListIterator1);
      
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OrderedMapIterator<Properties, ServiceLoader<SQLTransactionRollbackException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Iterable<Properties> iterable0 = IteratorUtils.asIterable((Iterator<? extends Properties>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterable0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("(tR{x");
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: (tR{x", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("(tR{x", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("I6a,gcWmMYS5", "`4kZy~w4^x%5+@`SEa");
      assertEquals("`4kZy~w4^x%5+@`SEa", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: I6a,gcWmMYS5", sQLTransactionRollbackException0.toString());
      assertEquals("I6a,gcWmMYS5", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("`4kZy~w4^x%5+@`SEa", "I6a,gcWmMYS5");
      assertEquals("java.sql.SQLTransactionRollbackException: `4kZy~w4^x%5+@`SEa", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("I6a,gcWmMYS5", sQLTransactionRollbackException1.getSQLState());
      assertEquals("`4kZy~w4^x%5+@`SEa", sQLTransactionRollbackException1.getMessage());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertNotNull(sQLTransactionRollbackException1);
      
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", sQLInvalidAuthorizationSpecException1);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException2.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException2.toString());
      assertEquals("", sQLTransactionRollbackException2.getMessage());
      assertNull(sQLTransactionRollbackException2.getSQLState());
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertNotNull(sQLTransactionRollbackException2);
      
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[9];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[8] = sQLInvalidAuthorizationSpecException1;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(9, objectArrayListIterator0.getEndIndex());
      assertEquals(9, sQLInvalidAuthorizationSpecExceptionArray0.length);
      assertNotNull(objectArrayListIterator0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: (tR{x", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("(tR{x", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLTransactionRollbackException3.getSQLState());
      assertEquals("", sQLTransactionRollbackException3.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException3.toString());
      assertEquals(0, sQLTransactionRollbackException3.getErrorCode());
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException3.equals((Object)sQLTransactionRollbackException2));
      assertNotNull(sQLTransactionRollbackException3);
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.REJECT_EXTENDED_RANGES, locale_FilteringMode0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransactionRollbackException2, defaultEquator0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException2.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException2.toString());
      assertEquals("", sQLTransactionRollbackException2.getMessage());
      assertNull(sQLTransactionRollbackException2.getSQLState());
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertNotNull(equalPredicate0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) equalPredicate0);
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(9, objectArrayListIterator0.getEndIndex());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(0, sQLTransactionRollbackException2.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException2.toString());
      assertEquals("", sQLTransactionRollbackException2.getMessage());
      assertNull(sQLTransactionRollbackException2.getSQLState());
      assertEquals(9, sQLInvalidAuthorizationSpecExceptionArray0.length);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertNotSame(sQLTransactionRollbackException2, sQLTransactionRollbackException0);
      assertNotSame(sQLTransactionRollbackException2, sQLTransactionRollbackException3);
      assertNotSame(sQLTransactionRollbackException2, sQLTransactionRollbackException1);
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertNotNull(listIterator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) equalPredicate0);
      assertFalse(objectArrayListIterator0.hasPrevious());
      assertEquals((-1), objectArrayListIterator0.previousIndex());
      assertEquals(0, objectArrayListIterator0.getStartIndex());
      assertTrue(objectArrayListIterator0.hasNext());
      assertEquals(0, objectArrayListIterator0.nextIndex());
      assertEquals(9, objectArrayListIterator0.getEndIndex());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(0, sQLTransactionRollbackException2.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException2.toString());
      assertEquals("", sQLTransactionRollbackException2.getMessage());
      assertNull(sQLTransactionRollbackException2.getSQLState());
      assertEquals(9, sQLInvalidAuthorizationSpecExceptionArray0.length);
      assertNotSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertNotSame(sQLTransactionRollbackException2, sQLTransactionRollbackException0);
      assertNotSame(sQLTransactionRollbackException2, sQLTransactionRollbackException3);
      assertNotSame(sQLTransactionRollbackException2, sQLTransactionRollbackException1);
      assertFalse(boolean0);
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException3));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException1));
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "(tR{x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Stack<Properties> stack0 = new Stack<Properties>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Properties>) stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(resettableIterator0);
      
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(enumeration0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator1 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNotNull(resettableIterator1);
      
      ResettableIterator<Object> resettableIterator2 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator2);
      
      Iterator<Properties> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Properties>) resettableIterator0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MapIterator<Stack<SQLNonTransientException>, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) mapIterator0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>((Predicate<? super SQLNonTransientException>) null);
      assertNotNull(predicateTransformer0);
      
      int int0 = 14;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{~", "", 14);
      assertEquals(14, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("{~", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: {~", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
      try { 
        predicateTransformer0.transform(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.PredicateTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<String, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<String, SQLIntegrityConstraintViolationException>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      EntrySetMapIterator<String, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLIntegrityConstraintViolationException>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(entrySetMapIterator0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      OrderedMapIterator<InstanceofPredicate, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) orderedMapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) constantTransformer0);
      ResettableIterator<SQLException> resettableIterator1 = IteratorUtils.emptyIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("G?i)-DpuVLOhtNK'6@*", "", (-1));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("p", sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("G?i)-DpuVLOhtNK'6@*");
      Transformer<SQLException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator1, (Transformer<? super SQLException, String>) transformer0, "IwD-", "\"$C10QWi", "#4G:=cdy|:~w");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("2nxrJ u", "3b", (-1));
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) singletonIterator0);
      IteratorUtils.emptyOrderedIterator();
      SQLException sQLException0 = new SQLException("", "\"$C10QWi");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException2);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLInvalidAuthorizationSpecException1, defaultEquator0);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException>(orderedMapIterator0);
      MapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLTransactionRollbackException>(mapIterator0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) abstractOrderedMapIteratorDecorator0, (Predicate<? super SQLIntegrityConstraintViolationException>) equalPredicate0);
      HashMap<SQLFeatureNotSupportedException, SQLRecoverableException> hashMap0 = new HashMap<SQLFeatureNotSupportedException, SQLRecoverableException>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, SQLRecoverableException>(hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IteratorUtils.singletonIterator((Integer) null);
      LinkedList<SQLRecoverableException>[] linkedListArray0 = (LinkedList<SQLRecoverableException>[]) Array.newInstance(LinkedList.class, 9);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<SQLRecoverableException> linkedList1 = new LinkedList<SQLRecoverableException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<SQLRecoverableException> linkedList2 = new LinkedList<SQLRecoverableException>();
      linkedListArray0[2] = linkedList2;
      LinkedList<SQLRecoverableException> linkedList3 = new LinkedList<SQLRecoverableException>();
      linkedListArray0[3] = linkedList3;
      LinkedList<SQLRecoverableException> linkedList4 = new LinkedList<SQLRecoverableException>();
      linkedListArray0[4] = linkedList4;
      LinkedList<SQLRecoverableException> linkedList5 = new LinkedList<SQLRecoverableException>();
      linkedListArray0[5] = linkedList5;
      LinkedList<SQLRecoverableException> linkedList6 = new LinkedList<SQLRecoverableException>();
      linkedListArray0[6] = linkedList6;
      LinkedList<SQLRecoverableException> linkedList7 = new LinkedList<SQLRecoverableException>();
      linkedListArray0[7] = linkedList7;
      LinkedList<SQLRecoverableException> linkedList8 = new LinkedList<SQLRecoverableException>();
      linkedListArray0[8] = linkedList8;
      ResettableIterator<LinkedList<SQLRecoverableException>> resettableIterator0 = IteratorUtils.arrayIterator(linkedListArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[7];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("9ftt:h?");
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(", ", "9ftt:h?", 1830, sQLFeatureNotSupportedException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLFeatureNotSupportedException1;
      int int0 = 196;
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", "org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", 196, sQLFeatureNotSupportedException1);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLDataException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("9ftt:h?", sQLFeatureNotSupportedException1);
      sQLNonTransientExceptionArray0[3] = sQLNonTransientException0;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLNonTransientExceptionArray0[1]);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", "", sQLClientInfoException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "org.apache.commons.collections4.map.Flat3Map$FlatMapIterator", 10, sQLSyntaxErrorException0);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("L;CUngiDXIyvV)x9k&", sQLFeatureNotSupportedException1);
      // Undeclared exception!
      try { 
        sQLNonTransientConnectionException0.initCause(sQLFeatureNotSupportedException2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLFeatureNotSupportedException: L;CUngiDXIyvV)x9k&
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 1);
      MapIterator<SQLRecoverableException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLRecoverableException, Object> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLRecoverableException, ?>) mapIterator0);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) mapIterator1;
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      String string0 = IteratorUtils.toString(iterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MapIterator<SQLDataException, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      BiFunction<Object, Object, BatchUpdateException> biFunction0 = (BiFunction<Object, Object, BatchUpdateException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties5.computeIfPresent(sQLClientInfoException0, biFunction0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 207);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 657, sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.setNextException(sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      OrderedMapIterator<String, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<String, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, Object>(orderedMapIterator0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) abstractMapIteratorDecorator0, (Iterator<? extends String>) abstractMapIteratorDecorator0);
      IteratorUtils.toArray((Iterator<?>) zippingIterator0);
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 14, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(1282);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-886));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1073741824);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1073741824);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-886));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1073741824);
      integerArray0[5] = integer5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 32, (-886));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "F";
      HashMap<Predicate<String>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<String>, Transformer<Object, String>>();
      Transformer<String, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super String>, ? extends Transformer<? super String, ? extends String>>) hashMap0);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("F", (Transformer<? super String, ? extends String>) transformer0);
      IteratorUtils.asEnumeration((Iterator<? extends String>) iterator0);
      Iterator<StringTokenizer> iterator1 = null;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      String string1 = "Z29_iUJQc5@N";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Z29_iUJQc5@N", "Z29_iUJQc5@N", 3279);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(sQLFeatureNotSupportedException0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(identityPredicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsExceptionPredicate0;
      IdentityPredicate<Object> identityPredicate1 = new IdentityPredicate<Object>("F");
      predicateArray0[1] = (Predicate<Object>) identityPredicate1;
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 9);
      Class<Boolean> class0 = Boolean.class;
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 2);
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[0] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[1] = class2;
      InstantiateFactory<Boolean> instantiateFactory0 = null;
      try {
        instantiateFactory0 = new InstantiateFactory<Boolean>(class0, classArray0, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      IteratorUtils.emptyIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("LESS", (int[]) null);
      Hashtable<Integer, BatchUpdateException> hashtable0 = new Hashtable<Integer, BatchUpdateException>();
      MapIterator<SQLClientInfoException, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      HashMap<SQLClientInfoException, SQLIntegrityConstraintViolationException> hashMap0 = new HashMap<SQLClientInfoException, SQLIntegrityConstraintViolationException>();
      Transformer<SQLClientInfoException, SQLIntegrityConstraintViolationException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLClientInfoException, ? extends SQLIntegrityConstraintViolationException>) hashMap0);
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("LESS", "Closure must not be null", 123, hashtable1);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(batchUpdateException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("LESS", map0, sQLTimeoutException0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(map1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      hashMap0.put(sQLClientInfoException2, sQLIntegrityConstraintViolationException0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (Transformer<? super SQLClientInfoException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      IteratorUtils.getIterator(transformer0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "LESS", 128, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      IteratorUtils.size(zippingIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Throwable[] throwableArray0 = sQLSyntaxErrorException0.getSuppressed();
      ConstantTransformer<Object, SQLSyntaxErrorException> constantTransformer0 = new ConstantTransformer<Object, SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 4);
      Class<SQLDataException> class0 = SQLDataException.class;
      classArray0[0] = class0;
      Class<SQLDataException> class1 = SQLDataException.class;
      classArray0[1] = class1;
      Class<SQLDataException> class2 = SQLDataException.class;
      classArray0[2] = class2;
      Class<SQLDataException> class3 = SQLDataException.class;
      classArray0[3] = class3;
      InvokerTransformer<BatchUpdateException, Properties> invokerTransformer0 = new InvokerTransformer<BatchUpdateException, Properties>((String) null, classArray0, throwableArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) null, (Transformer<? super BatchUpdateException, ? extends Properties>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLClientInfoException> iterator0 = null;
      FactoryTransformer<Object, SQLIntegrityConstraintViolationException> factoryTransformer0 = new FactoryTransformer<Object, SQLIntegrityConstraintViolationException>((Factory<? extends SQLIntegrityConstraintViolationException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, ? extends SQLIntegrityConstraintViolationException>) factoryTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ReverseListIterator<BatchUpdateException> reverseListIterator0 = new ReverseListIterator<BatchUpdateException>(stack0);
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) reverseListIterator0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) stack0);
      IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) iterator0);
      Iterator<SQLException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0);
      reverseListIterator0.reset();
      IteratorUtils.skippingIterator(iterator1, 0L);
      OrderedMapIterator<SQLTimeoutException, Vector<IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      ResettableIterator<SQLException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("B]IzGs?>+");
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0, (Transformer<? super SQLException, String>) transformer0, "Seqld?8:>L+nf", "I|J+d", "3b");
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      IteratorUtils.emptyOrderedIterator();
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[2];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(";rN", "", 5);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(";rN", "Entry does not exist: ", sQLRecoverableException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Predicate must not be null", "I|J+d");
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      ObjectArrayListIterator<SQLNonTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) objectArrayListIterator0);
  }
}
