/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 09:32:38 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[3];
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.arrayListIterator(instanceofPredicateArray0);
      ListIteratorWrapper<InstanceofPredicate> listIteratorWrapper0 = new ListIteratorWrapper<InstanceofPredicate>(resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<InstanceofPredicate>) listIteratorWrapper0, 242);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 239
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLNonTransientConnectionException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, SQLFeatureNotSupportedException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      LoopingIterator<SQLSyntaxErrorException> loopingIterator0 = new LoopingIterator<SQLSyntaxErrorException>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) loopingIterator0, 9, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "AN\"j+0<!Gx{WW[33@", 123);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, hashMap0, sQLRecoverableException0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      List<SQLWarning> list0 = IteratorUtils.toList((Iterator<? extends SQLWarning>) resettableIterator0);
      ResettableIterator<SQLWarning> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends SQLWarning>) list0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) resettableIterator1, (Iterator<?>) listIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTimeoutException>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) orderedIterator0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) singletonListIterator0;
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) zippingIterator0, 2);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) singletonListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, 512);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0, class0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("The predicate and transformer arrays must be the same size", intArray0, sQLRecoverableException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLDataException0);
      Transformer<Object, SQLTransientConnectionException> transformer0 = ConstantTransformer.constantTransformer(sQLTransientConnectionException0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Enumeration<SQLSyntaxErrorException> enumeration0 = (Enumeration<SQLSyntaxErrorException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      stack0.addElement((InstanceofPredicate) null);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) stack0);
      InstanceofPredicate instanceofPredicate0 = IteratorUtils.get((Iterator<InstanceofPredicate>) resettableIterator0, 4149);
      assertNull(instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 1);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLDataException>) objectArrayListIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ArrayDeque<BatchUpdateException>[] arrayDequeArray0 = (ArrayDeque<BatchUpdateException>[]) Array.newInstance(ArrayDeque.class, 1);
      ResettableListIterator<ArrayDeque<BatchUpdateException>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[3];
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.arrayIterator(instanceofPredicateArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Closure<SQLNonTransientException>, Class<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[5];
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PredicateTransformer<ArrayDeque<DataTruncation>> predicateTransformer0 = new PredicateTransformer<ArrayDeque<DataTruncation>>(instanceofPredicate0);
      ArrayDeque<DataTruncation> arrayDeque0 = new ArrayDeque<DataTruncation>();
      Boolean boolean0 = predicateTransformer0.transform(arrayDeque0);
      booleanArray0[0] = boolean0;
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("NodeList must not be null");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(instanceofPredicate0, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Boolean>) objectArrayIterator0, (Transformer<? super Boolean, String>) ifTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'NodeList must not be null' on 'class java.lang.Boolean' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      vector0.addElement(instanceofPredicate0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) vector0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      IteratorUtils.toString((Iterator<InstanceofPredicate>) resettableIterator0, (Transformer<? super InstanceofPredicate, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OrderedMapIterator<SQLDataException, Hashtable<Properties, String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator", "org.apache.commons.collections4.bidimap.TreeBidiMap$ViewMapIterator", 12);
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      OrderedIterator<SQLNonTransientException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) orderedIterator0, (Iterator<? extends SQLNonTransientException>) orderedMapIterator0, (Iterator<? extends SQLNonTransientException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLNonTransientException>) zippingIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("_/dH");
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) listIterator0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      vector0.addElement(instanceofPredicate0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) vector0);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0, class1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) vector0);
      vector0.add(instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) null, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) singletonListIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "org.apache.commons.collections4.functors.AllPredicate", (-994));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("(tuqCy> a.tZ]>w5,aR", "f", 2661, sQLSyntaxErrorException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("iterator", hashMap0, sQLTransactionRollbackException0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate0;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      predicateArray0[1] = (Predicate<Object>) nullIsTruePredicate0;
      predicateArray0[2] = predicateArray0[1];
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[3] = (Predicate<Object>) nonePredicate0;
      // Undeclared exception!
      IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) singletonListIterator0, (Predicate<? super SQLClientInfoException>) nonePredicate0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.iterators.ListIteratorWrapper", (Throwable) null);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLTransactionRollbackException0, comparator0, comparatorPredicate_Criterion0);
      Class<SQLTransientConnectionException>[] classArray0 = (Class<SQLTransientConnectionException>[]) Array.newInstance(Class.class, 8);
      InvokerTransformer<SQLException, Boolean> invokerTransformer0 = new InvokerTransformer<SQLException, Boolean>("b_9-", classArray0, classArray0);
      IfTransformer<SQLException, Boolean> ifTransformer0 = new IfTransformer<SQLException, Boolean>(comparatorPredicate0, invokerTransformer0, invokerTransformer0);
      TransformerPredicate<SQLException> transformerPredicate0 = new TransformerPredicate<SQLException>(ifTransformer0);
      ListIterator<SQLFeatureNotSupportedException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) listIterator0, (Predicate<? super SQLFeatureNotSupportedException>) transformerPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) listIterator1, 123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'b_9-' on 'class java.sql.SQLFeatureNotSupportedException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      stack0.addElement(instanceofPredicate0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) stack0);
      Iterator<InstanceofPredicate> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) resettableIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      // Undeclared exception!
      IteratorUtils.get(iterator0, 587);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) vector0);
      vector0.add(instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<InstanceofPredicate>) resettableIterator0, 10);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<InstanceofPredicate>) null, 4149);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      Predicate<Properties> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Properties>) singletonIterator0, (Predicate<? super Properties>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      OnePredicate<Properties> onePredicate0 = new OnePredicate<Properties>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Properties>) singletonIterator0, (Predicate<? super Properties>) onePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OnePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) null, (Iterator<? extends SQLClientInfoException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 5);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Iterator<? extends SQLSyntaxErrorException>) iteratorArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) null, (-2229L), (-2229L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) orderedIterator0, (long) (-1848));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLException[]) null, 6, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, (-1270), (-1270));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Iterator<SQLTransactionRollbackException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Estimated size must be greater than 0", "Estimated size must be greater than 0", intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Estimated size must be greater than 0", "Estimated size must be greater than 0", batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, 1886);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((InstanceofPredicate[]) null, 4, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 236, (-151));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 3762);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) arrayList0, 2471, (-920));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransactionRollbackException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("X1Zo~", (String) null, sQLNonTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, 1575);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" Hds-", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTimeoutException>) resettableIterator0, (Closure<? super SQLTimeoutException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SingletonIterator<PriorityQueue<SQLClientInfoException>> singletonIterator0 = new SingletonIterator<PriorityQueue<SQLClientInfoException>>((PriorityQueue<SQLClientInfoException>) null);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("a");
      String string0 = IteratorUtils.toString((Iterator<PriorityQueue<SQLClientInfoException>>) singletonIterator0, (Transformer<? super PriorityQueue<SQLClientInfoException>, String>) transformer0, "z&6A#)tgitU'Ch)", "org.apache.commons.collections4.iterators.NodeListIterator", "z&6A#)tgitU'Ch)");
      assertEquals("org.apache.commons.collections4.iterators.NodeListIteratornullz&6A#)tgitU'Ch)", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("]r6.@pKJp($Z>B");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      String string0 = IteratorUtils.toString((Iterator<PriorityQueue<Stack>>) null, (Transformer<? super PriorityQueue<Stack>, String>) factoryTransformer0, "]r6.@pKJp($Z>B", "]r6.@pKJp($Z>B", "");
      assertEquals("]r6.@pKJp($Z>B", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      Predicate<SQLException> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) nullIsTruePredicate0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("AN\"j+0<!Gx{WW[33@");
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0, false);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) singletonIterator0, (Predicate<? super SQLTimeoutException>) predicate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("7Id|E! K#}w", (String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLRecoverableException0);
      Comparator<SQLTimeoutException> comparator0 = (Comparator<SQLTimeoutException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      Predicate<SQLTimeoutException> predicate0 = ComparatorPredicate.comparatorPredicate(sQLTimeoutException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLDataException sQLDataException0 = new SQLDataException("iterator");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("iterator", hashMap0, sQLDataException0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      BoundedIterator<SQLClientInfoException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) singletonListIterator0, 2084L, 2084L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      stack0.addElement(instanceofPredicate0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) stack0);
      // Undeclared exception!
      IteratorUtils.size(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) stack0);
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      vector0.addElement(instanceofPredicate0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) vector0);
      InstanceofPredicate instanceofPredicate1 = IteratorUtils.get((Iterator<InstanceofPredicate>) resettableIterator0, 1);
      assertSame(instanceofPredicate1, instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MapIterator<SQLTimeoutException, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("iterator");
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) null);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "g?}ndf_g8d/&2Fiz@3", (Throwable) null);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLInvalidAuthorizationSpecException0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLDataException sQLDataException0 = new SQLDataException("iterator");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("iterator", hashMap0, sQLDataException0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate<SQLException> nonePredicate0 = new NonePredicate<SQLException>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) singletonListIterator0, (Predicate<? super SQLClientInfoException>) nonePredicate0);
      assertFalse(singletonListIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, sQLDataException0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      NonePredicate<SQLException> nonePredicate0 = new NonePredicate<SQLException>((Predicate<? super SQLException>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) singletonListIterator0, (Predicate<? super SQLClientInfoException>) nonePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) instanceofPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "AN\"j+0<!Gx{WW[33@", 123);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, hashMap0, sQLRecoverableException0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) andPredicate0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Iterator<InstanceofPredicate> iterator0 = EmptyIterator.emptyIterator();
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLException>) null, (Object) iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("$5+G|0]cGe*bIs");
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.find((Iterator<Properties>) singletonIterator0, (Predicate<? super Properties>) predicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Properties properties0 = IteratorUtils.find((Iterator<Properties>) null, (Predicate<? super Properties>) uniquePredicate0);
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Properties>) singletonIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTransientException) sQLTransientConnectionException0);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) treeSet0);
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)IteratorUtils.find((Iterator<SQLTransientException>) resettableIterator0, (Predicate<? super SQLTransientException>) predicate0);
      assertNull(sQLTransientConnectionException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLTimeoutException>) orderedMapIterator0, (Closure<? super SQLTimeoutException>) closure0);
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ReverseListIterator<String> reverseListIterator0 = new ReverseListIterator<String>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<String>) reverseListIterator0, (Closure<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Closure<SQLException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLTimeoutException>) null, (Closure<? super SQLTimeoutException>) closure0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.IteratorUtils");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OrderedMapIterator<SQLDataException, Hashtable<Properties, String>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, Hashtable<Properties, String>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, Hashtable<Properties, String>>(orderedMapIterator0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory", "[]", 10);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTransactionRollbackException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) vector0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, Locale.FilteringMode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) mapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) orderedMapIterator0, (Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) vector0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Hashtable<Locale.FilteringMode, SQLTransactionRollbackException> hashtable0 = new Hashtable<Locale.FilteringMode, SQLTransactionRollbackException>();
      EntrySetMapIterator<Locale.FilteringMode, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, SQLTransactionRollbackException>(hashtable0);
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Locale.FilteringMode>) entrySetMapIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLTransactionRollbackException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0, 0L);
      Iterable<SQLException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) boundedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterable<SQLTimeoutException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Iterator<InstanceofPredicate> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) iterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) iterator0);
      Iterator<Predicate<Object>> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Predicate<Object>>) enumeration0, (Collection<? super Predicate<Object>>) list0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.IteratorUtils");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      SingletonListIterator<SQLTimeoutException> singletonListIterator0 = new SingletonListIterator<SQLTimeoutException>(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) singletonListIterator0, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) null, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OrderedMapIterator<DataTruncation, ArrayDeque<String>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Predicate<DataTruncation> predicate0 = TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[7];
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) resettableListIterator0, (Transformer<? super SQLNonTransientException, ? extends Iterator<SQLTransactionRollbackException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Transformer<Object, SQLTimeoutException> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends String>) null, (Transformer<? super String, ? extends SQLTimeoutException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      InvokerTransformer<SQLException, SQLInvalidAuthorizationSpecException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLInvalidAuthorizationSpecException>("", (Class<?>[]) null, objectArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.functors.ClosureTransformer", "", (-1414));
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) invokerTransformer0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLIntegrityConstraintViolationException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) iterator0, (Transformer<? super SQLNonTransientException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MapIterator<InstanceofPredicate, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<InstanceofPredicate, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<InstanceofPredicate, SQLException>(mapIterator0);
      SkippingIterator<InstanceofPredicate> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<InstanceofPredicate>) abstractMapIteratorDecorator0, 0L);
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) skippingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Predicate<Object>>) enumeration0, (Collection<? super Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[5];
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("NodeList must not be null");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(instanceofPredicate0, transformer0, transformer0);
      String string0 = IteratorUtils.toString((Iterator<Boolean>) objectArrayIterator0, (Transformer<? super Boolean, String>) ifTransformer0);
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals("[null, null, null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-834), (-834));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) orderedMapIterator0, (Iterator<? extends SQLTimeoutException>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OrderedMapIterator<HashMap<SQLSyntaxErrorException, ClientInfoStatus>, Predicate<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<HashMap<SQLSyntaxErrorException, ClientInfoStatus>, Predicate<Object>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<HashMap<SQLSyntaxErrorException, ClientInfoStatus>, Predicate<Object>>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Hashtable<Locale.FilteringMode, SQLTransactionRollbackException> hashtable0 = new Hashtable<Locale.FilteringMode, SQLTransactionRollbackException>();
      EntrySetMapIterator<Locale.FilteringMode, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<Locale.FilteringMode, SQLTransactionRollbackException>(hashtable0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Locale.FilteringMode>) entrySetMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[2];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      TreeSet<Closure<Object>> treeSet0 = new TreeSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) treeSet0);
      IteratorUtils.apply((Iterator<SQLTimeoutException>) resettableIterator0, (Closure<? super SQLTimeoutException>) closure0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 1, (-1262));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<ArrayList<SQLInvalidAuthorizationSpecException>>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Iterator<SQLTransactionRollbackException>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[6];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 6);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      ListIterator<Object> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Iterator> class0 = Iterator.class;
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      boolean boolean0 = IteratorUtils.contains((Iterator<ArrayList<Stack>>) iterator0, (Object) class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2088));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Predicate<Object>>) null, (Collection<? super Predicate<Object>>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      Class<Integer> class0 = Integer.class;
      IteratorUtils.toArray((Iterator<? extends Integer>) resettableListIterator0, class0);
      assertFalse(resettableListIterator0.hasNext());
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.singletonListIterator(clientInfoStatus0);
      List<ClientInfoStatus> list0 = IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) listIterator0);
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.unmodifiableListIterator((ListIterator<ClientInfoStatus>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }
}
