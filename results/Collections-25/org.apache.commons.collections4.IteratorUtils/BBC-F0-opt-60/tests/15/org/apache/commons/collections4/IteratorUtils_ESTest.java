/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 04:10:06 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends String>) resettableListIterator0, (Class<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 1);
      IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) objectArrayListIterator0);
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertFalse(objectArrayListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) resettableIterator0, class0);
      List<String>[] listArray0 = (List<String>[]) Array.newInstance(List.class, 7);
      Vector<String> vector0 = new Vector<String>();
      listArray0[0] = (List<String>) vector0;
      int int0 = 1073741817;
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends String>) resettableIterator0, 1073741817);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      Class<String> class0 = String.class;
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add("Entry does not exist: ");
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) hashSet0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends String>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Class<String> class0 = String.class;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends String>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 1);
      assertEquals(1, objectArrayListIterator0.previousIndex());
      
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException((String) null, (String) null, sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0, 1);
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLDataException>) resettableListIterator0, (long) 0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) skippingIterator0, (long) 1, (long) 1);
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[13];
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator((Properties) null);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_FilteringMode0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("<xH8Q.$Fo53NXeX0");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ArrayList<EnumSet>>) iterator0, (Transformer<? super ArrayList<EnumSet>, String>) transformer0, "<xH8Q.$Fo53NXeX0", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '<xH8Q.$Fo53NXeX0' on 'class java.util.Locale$FilteringMode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("n;oozSc1Q");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 1, 1);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableListIterator0);
      Comparator<SQLTimeoutException> comparator0 = (Comparator<SQLTimeoutException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLTimeoutException> priorityQueue0 = new PriorityQueue<SQLTimeoutException>(comparator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) priorityQueue0);
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) orderedIterator0);
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(arrayList0);
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, 10, 511);
      arrayList0.add(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) loopingListIterator0, 8);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("");
      Transformer<String, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) resettableIterator0, (Transformer<? super String, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1, false, false, 1368, 100);
      Transformer<SQLWarning, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("Node ,ust not Be Bu@l");
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Node ,ust not Be Bu@l' on 'class java.sql.DataTruncation' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 4);
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      classArray0[0] = class1;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      classArray0[1] = class2;
      Class<IIOMetadataNode> class3 = IIOMetadataNode.class;
      classArray0[2] = class3;
      Class<IIOMetadataNode> class4 = IIOMetadataNode.class;
      classArray0[3] = class4;
      InvokerTransformer<Object, Iterator<SQLNonTransientConnectionException>> invokerTransformer0 = new InvokerTransformer<Object, Iterator<SQLNonTransientConnectionException>>("suffix may not be null", classArray0, classArray0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Iterator<ArrayList>>) iterator0, (Closure<? super Iterator<ArrayList>>) transformerClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'suffix may not be null' on 'class java.lang.Class' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("Q&;r-/.K");
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("Q&;r-/.K");
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 0);
      IteratorUtils.isEmpty(objectArrayListIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Comparator<SQLSyntaxErrorException> comparator0 = (Comparator<SQLSyntaxErrorException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<SQLSyntaxErrorException> comparatorPredicate0 = new ComparatorPredicate<SQLSyntaxErrorException>(sQLSyntaxErrorException0, comparator0, comparatorPredicate_Criterion0);
      SingletonListIterator<Predicate<SQLSyntaxErrorException>> singletonListIterator0 = new SingletonListIterator<Predicate<SQLSyntaxErrorException>>(comparatorPredicate0);
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 7);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      Class<SQLException> class1 = SQLException.class;
      classArray0[1] = class1;
      Class<SQLException> class2 = SQLException.class;
      classArray0[2] = class2;
      Class<SQLException> class3 = SQLException.class;
      classArray0[3] = class3;
      Class<SQLException> class4 = SQLException.class;
      classArray0[4] = class4;
      Class<SQLException> class5 = SQLException.class;
      classArray0[5] = class5;
      Class<SQLException> class6 = SQLException.class;
      classArray0[6] = class6;
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Predicate<SQLSyntaxErrorException>>) singletonListIterator0, (Predicate<? super Predicate<SQLSyntaxErrorException>>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class org.apache.commons.collections4.functors.ComparatorPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "z#fx38=;dp";
      IteratorUtils.getIterator("z#fx38=;dp");
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = arrayList0.iterator();
      arrayList0.add((SQLIntegrityConstraintViolationException) null);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.getIterator(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("");
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 0);
      ForClosure<SQLTransientConnectionException> forClosure0 = new ForClosure<SQLTransientConnectionException>(0, (Closure<? super SQLTransientConnectionException>) null);
      IteratorUtils.apply((Iterator<SQLTransientConnectionException>) null, (Closure<? super SQLTransientConnectionException>) forClosure0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) objectArrayListIterator0, (Iterator<? extends DataTruncation>) objectArrayListIterator0, (Iterator<? extends DataTruncation>) objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) forClosure0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("Pjpeg<)J)2vo/!", "Pjpeg<)J)2vo/!", 237);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("YqNBi#G", "YqNBi#G", 213, sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      ObjectArrayListIterator<SQLNonTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      IteratorUtils.getIterator(objectArrayListIterator0);
      OrderedMapIterator<Predicate<SQLException>, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<Predicate<SQLException>>) orderedMapIterator0, (Closure<? super Predicate<SQLException>>) closure0);
      IteratorUtils.apply((Iterator<SQLTimeoutException>) null, (Closure<? super SQLTimeoutException>) closure0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockThrowable.getDefaultStackTrace();
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(arrayList0);
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLDataException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockThrowable.getDefaultStackTrace();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "30}H^hNqW>]PnK!MJK<");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, sQLFeatureNotSupportedException0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("");
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IfClosure<SQLTransientConnectionException> ifClosure0 = new IfClosure<SQLTransientConnectionException>((Predicate<? super SQLTransientConnectionException>) null, closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLTransientConnectionException>) singletonIterator0, (Closure<? super SQLTransientConnectionException>) ifClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockThrowable.getDefaultStackTrace();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("~s9,GKZe#>*J/Il}");
      iIOMetadataNode0.getChildNodes();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ListIterator<Closure<Object>> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Closure<Object>>) listIterator0, (Predicate<? super Closure<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OrderedMapIterator<SQLDataException, PriorityQueue<Iterator<SQLNonTransientConnectionException>>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.apply((Iterator<SQLTransientConnectionException>) resettableListIterator0, (Closure<? super SQLTransientConnectionException>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLDataException>) orderedMapIterator0, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends Properties>) orderedMapIterator0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator1);
      IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("?C>pI>uA");
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      AnyPredicate<SQLNonTransientConnectionException> anyPredicate0 = new AnyPredicate<SQLNonTransientConnectionException>((Predicate<? super SQLNonTransientConnectionException>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLNonTransientConnectionException>) singletonIterator0, (Predicate<? super SQLNonTransientConnectionException>) anyPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OrderedMapIterator<SQLDataException, PriorityQueue<Iterator<SQLNonTransientConnectionException>>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((EnumSet<Locale.FilteringMode>[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MapIterator<ServiceLoader<SQLRecoverableException>, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<ServiceLoader<SQLRecoverableException>, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<ServiceLoader<SQLRecoverableException>, SQLException>(mapIterator0);
      boolean boolean0 = IteratorUtils.contains((Iterator<ServiceLoader<SQLRecoverableException>>) abstractMapIteratorDecorator0, (Object) null);
      boolean boolean1 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OrderedMapIterator<SQLDataException, PriorityQueue<Iterator<SQLNonTransientConnectionException>>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLRecoverableException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      ListIterator<ServiceLoader<SQLRecoverableException>> listIterator0 = IteratorUtils.singletonListIterator(serviceLoader0);
      IteratorUtils.contains((Iterator<ServiceLoader<SQLRecoverableException>>) listIterator0, (Object) serviceLoader0);
      IteratorUtils.isEmpty(orderedMapIterator0);
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 1692, 1692);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) constantTransformer0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      Integer integer0 = new Integer(3);
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.chainedIterator((Iterator<?>) objectArrayListIterator0, (Iterator<?>) iterator0);
      EmptyListIterator.resettableEmptyListIterator();
      ExceptionTransformer.exceptionTransformer();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.toListIterator((Iterator<? extends String>) iterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) uniquePredicate0);
      assertTrue(boolean0);
      
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "V>I", "[w@*w&/D", "V>I");
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<DataTruncation>) objectArrayListIterator0;
      iteratorArray0[1] = (Iterator<DataTruncation>) objectArrayListIterator0;
      iteratorArray0[2] = (Iterator<DataTruncation>) objectArrayListIterator0;
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) iteratorArray0[0]);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) list0);
      iteratorArray0[3] = (Iterator<DataTruncation>) resettableIterator0;
      iteratorArray0[4] = (Iterator<DataTruncation>) objectArrayListIterator0;
      ResettableIterator<DataTruncation> resettableIterator1 = IteratorUtils.arrayIterator(dataTruncationArray0, 3);
      iteratorArray0[5] = (Iterator<DataTruncation>) resettableIterator1;
      iteratorArray0[6] = (Iterator<DataTruncation>) objectArrayListIterator0;
      iteratorArray0[7] = (Iterator<DataTruncation>) objectArrayListIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[w@*w&/DV>I", "[w@*w&/D", 3, sQLTransientException0);
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTimeoutException0, true);
      String string0 = IteratorUtils.toString((Iterator<SQLTransientException>) singletonIterator0, (Transformer<? super SQLTransientException, String>) constantTransformer0, "[w@*w&/DV>I", "V>I", "fz>e'e*$7o)%xp} k0");
      assertEquals("V>Ifz>e'e*$7o)%xp} k0", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MapIterator<ServiceLoader<SQLRecoverableException>, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<ServiceLoader<SQLRecoverableException>, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<ServiceLoader<SQLRecoverableException>, SQLException>(mapIterator0);
      OrderedMapIterator<SQLDataException, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, Properties> orderedMapIterator1 = new AbstractOrderedMapIteratorDecorator<SQLDataException, Properties>(orderedMapIterator0);
      OrderedMapIterator<SQLDataException, Properties> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends Properties>) orderedMapIterator1);
      AbstractOrderedMapIteratorDecorator<SQLDataException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, Properties>(orderedMapIterator2);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLDataException>) abstractOrderedMapIteratorDecorator0, (Closure<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringTokenizer stringTokenizer0 = new StringTokenizer("u~J%1KY!L.C#'4Th", "u~J%1KY!L.C#'4Th");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      IteratorUtils.emptyOrderedIterator();
      MapIterator<ArrayDeque<Integer>, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<ArrayDeque<Integer>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends ArrayDeque<Integer>>) mapIterator0, (Iterator<? extends ArrayDeque<Integer>>) mapIterator0, (Iterator<? extends ArrayDeque<Integer>>) mapIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ResettableListIterator<ServiceLoader<IIOMetadataNode>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends ServiceLoader<IIOMetadataNode>>) resettableListIterator0);
      IteratorUtils.unmodifiableListIterator((ListIterator<ServiceLoader<IIOMetadataNode>>) resettableListIterator0);
      IteratorUtils.size(zippingIterator0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) iterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(objectArray0, (-359), (-359));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      MockThrowable.getDefaultStackTrace();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockThrowable.getDefaultStackTrace();
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) comparatorPredicate_Criterion0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(vector0);
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) loopingListIterator0, class0);
      LinkedList<ArrayList<SQLIntegrityConstraintViolationException>> linkedList0 = new LinkedList<ArrayList<SQLIntegrityConstraintViolationException>>();
      IteratorUtils.loopingListIterator((List<ArrayList<SQLIntegrityConstraintViolationException>>) linkedList0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.functors.NullIsFalsePredicate");
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLRecoverableException0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      DataTruncation dataTruncation0 = new DataTruncation((-1324), false, true, 725, 725);
      dataTruncationArray0[0] = dataTruncation0;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 0);
      IteratorUtils.emptyListIterator();
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)96;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Transformer<Object, Properties> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) factory0);
      TransformerClosure<SQLDataException> transformerClosure0 = new TransformerClosure<SQLDataException>(transformer0);
      OrderedMapIterator<SQLDataException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends Properties>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLDataException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, Properties>(orderedMapIterator1);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) orderedMapIterator0);
      IteratorUtils.apply((Iterator<SQLDataException>) abstractOrderedMapIteratorDecorator0, (Closure<? super SQLDataException>) transformerClosure0);
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(list0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) loopingIterator0, 0L);
      IteratorUtils.size(loopingIterator0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) constantTransformer0);
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) iterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ResettableListIterator<ServiceLoader<IIOMetadataNode>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends ServiceLoader<IIOMetadataNode>>) resettableListIterator0);
      IteratorUtils.unmodifiableListIterator((ListIterator<ServiceLoader<IIOMetadataNode>>) resettableListIterator0);
      IteratorUtils.size(objectArrayListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (-4557L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) constantTransformer0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 0);
      IteratorUtils.emptyListIterator();
      ExceptionFactory.exceptionFactory();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ResettableListIterator<ServiceLoader<IIOMetadataNode>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<ServiceLoader<IIOMetadataNode>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends ServiceLoader<IIOMetadataNode>>) resettableListIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      int int0 = IteratorUtils.size(objectArrayListIterator0);
      assertEquals(3, objectArrayListIterator0.nextIndex());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      Iterator<String> iterator0 = new SingletonListIterator<String>("");
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) iterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 0);
      IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) objectArrayListIterator0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(constantTransformer0, predicate0);
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer.factoryTransformer((Factory<? extends Properties>) factory0);
      TransformerClosure<SQLDataException> transformerClosure0 = new TransformerClosure<SQLDataException>(constantTransformer0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockThrowable.getDefaultStackTrace();
      Iterator<?> iterator0 = IteratorUtils.getIterator("");
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      IteratorUtils.getIterator(comparator0);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(vector0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLWarning>) loopingListIterator0, (Predicate<? super SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "j";
      stringArray0[1] = "uF[)[:LgIbJaX42R";
      stringArray0[2] = "$;";
      stringArray0[3] = "org.apache.commons.collections4.map.MultiValueMap$ReflectionFactory";
      stringArray0[4] = "Bis2SbB7,(io)F[o!";
      stringArray0[5] = "!KXoiS]39";
      stringArray0[6] = "asy";
      stringArray0[7] = "org.apache.commons.collections4.functors.ComparatorPredicate";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) listIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(stack0);
      IteratorUtils.emptyListIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Comparator must not be null.", "MkoJ=.os", 10);
      ConstantTransformer<Object, SQLTransactionRollbackException> constantTransformer0 = new ConstantTransformer<Object, SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Comparator must not be null.", "", "", 10);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "Y", ":qt.mi-", (-1));
      stackTraceElementArray0[1] = stackTraceElement1;
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[1];
      StringTokenizer stringTokenizer0 = new StringTokenizer("MkoJ=.os", "Transformer must not be null");
      stringTokenizerArray0[0] = stringTokenizer0;
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<StringTokenizer, String> transformer0 = MapTransformer.mapTransformer((Map<? super StringTokenizer, ? extends String>) hashMap0);
      hashMap0.put("", "Comparator must not be null.");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<StringTokenizer>) resettableListIterator0, (Transformer<? super StringTokenizer, String>) transformer0, (String) null, "Y", "(T;kbP/+='p#us,b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MapIterator<ServiceLoader<SQLRecoverableException>, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<ServiceLoader<SQLRecoverableException>, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<ServiceLoader<SQLRecoverableException>, SQLException>(mapIterator0);
      ConstantTransformer.nullTransformer();
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, (String) null, "0", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) stack0, comparator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<StringTokenizer>) null, (Predicate<? super StringTokenizer>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      MapIterator<StringTokenizer, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<StringTokenizer>) mapIterator0, (Transformer<? super StringTokenizer, String>) transformer0, "", "", "");
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<StringTokenizer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) iterator0);
      Iterator<StringTokenizer> iterator1 = IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) enumeration0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) iterator0, comparator0);
      IteratorUtils.matchesAny(iterator1, (Predicate<? super StringTokenizer>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+o+H06");
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableListIterator0, class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("+o+H06");
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) null);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) iterator0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString(iterator0, (Transformer<? super StringTokenizer, String>) transformer0, "]", "'f", "M");
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("M", "ListIterator must not be null");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("ListIterator must not be null", "]", 0, sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("!", "M", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("]", "", (-435), sQLIntegrityConstraintViolationException3);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("M");
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      sQLIntegrityConstraintViolationExceptionArray0[8] = sQLIntegrityConstraintViolationException3;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("'fM");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("'fM", "IP_3!h|6(7^ \"on)|");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Class<SQLDataException> class0 = SQLDataException.class;
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("pW,bkss");
      SQLDataException sQLDataException0 = new SQLDataException("R~,])_0E mC@m*/p", sQLNonTransientConnectionException0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("pW,bkss", sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("l-VS?J");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLDataException0);
      SQLDataException sQLDataException3 = new SQLDataException("R~,])_0E mC@m*/p", "", sQLTransientConnectionException0);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("", "R~,])_0E mC@m*/p");
      sQLDataExceptionArray0[4] = sQLDataException1;
      SQLDataException sQLDataException5 = new SQLDataException("", sQLNonTransientConnectionException0);
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("", "", 1278);
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException(sQLDataException6);
      sQLDataExceptionArray0[7] = sQLDataException7;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) objectArrayListIterator0, class0);
      String string0 = IteratorUtils.toString((Iterator<ArrayDeque<Integer>>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      MockThrowable.getDefaultStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("1", "");
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
      IteratorUtils.emptyOrderedIterator();
      Properties properties1 = new Properties();
      ArrayListIterator<IIOMetadataNode> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<IIOMetadataNode>(properties1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) iterator0);
      DataTruncation dataTruncation0 = new DataTruncation(1459, false, false, 1459, 1459, (Throwable) null);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super String>) predicate0);
      EmptyListIterator.emptyListIterator();
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 1);
      ArrayIterator<Integer> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<Integer>(iterator0, 1459);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(stack0);
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[5];
      StringTokenizer stringTokenizer0 = new StringTokenizer("TlxAl*z6^x");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("TlxAl*z6^x");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("", "DtoT\"o!E&)%&", false);
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("DtoT\"o!E&)%&", "dSXH/m{VFD<`&SILn", true);
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("owR'uz8N66THPJba", "C]tf\"");
      stringTokenizerArray0[4] = stringTokenizer4;
      ObjectArrayListIterator<StringTokenizer> objectArrayListIterator0 = new ObjectArrayListIterator<StringTokenizer>(stringTokenizerArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<StringTokenizer>) objectArrayListIterator0, (Predicate<? super StringTokenizer>) allPredicate0);
      assertEquals(5, objectArrayListIterator0.nextIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      MapIterator<BatchUpdateException, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) mapIterator0, 2437L, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("");
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 0);
      IteratorUtils.isEmpty(objectArrayListIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonIterator<SQLClientInfoException> singletonIterator1 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      Class<Properties> class0 = Properties.class;
      Predicate<Object> predicate2 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[2] = predicate2;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[3] = (Predicate<Object>) allPredicate0;
      Predicate<Object> predicate3 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      SQLClientInfoException sQLClientInfoException1 = IteratorUtils.find((Iterator<SQLClientInfoException>) singletonIterator1, (Predicate<? super SQLClientInfoException>) predicate3);
      ListIterator<Object> listIterator0 = IteratorUtils.singletonListIterator((Object) sQLClientInfoException1);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(singletonIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) iterator0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1459;
      intArray0[1] = 1459;
      intArray0[2] = 1459;
      intArray0[3] = 1459;
      intArray0[4] = 1459;
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLWarning0);
      batchUpdateException0.getNextException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) nullIsFalsePredicate0);
      IteratorUtils.find(iterator0, (Predicate<? super String>) predicate0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.IGNORE_EXTENDED_RANGES, locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<Boolean> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Boolean>) orderedIterator0);
      Iterator<Boolean> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration0);
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) iterator0, (Iterator<? extends Boolean>) orderedIterator0, (Iterator<? extends Boolean>) iterator0);
      SQLWarning sQLWarning0 = new SQLWarning("org.apache.commons.collections4.IterableUtils");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLWarning0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("org.apache.commons.collections4.IterableUtils");
      IteratorUtils.find((Iterator<String>) resettableIterator0, (Predicate<? super String>) predicate1);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableListIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.IGNORE_EXTENDED_RANGES, locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      SingletonIterator<ArrayDeque<Integer>> singletonIterator0 = new SingletonIterator<ArrayDeque<Integer>>(arrayDeque0);
      String string0 = IteratorUtils.toString((Iterator<ArrayDeque<Integer>>) singletonIterator0);
      assertFalse(singletonIterator0.hasNext());
      assertEquals("[[]]", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) constantTransformer0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 0);
      IteratorUtils.emptyListIterator();
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Properties> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) factory0);
      TransformerClosure<SQLDataException> transformerClosure0 = new TransformerClosure<SQLDataException>(constantTransformer0);
      OrderedMapIterator<SQLDataException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends Properties>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLDataException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, Properties>(orderedMapIterator1);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.apply((Iterator<SQLDataException>) listIterator0, (Closure<? super SQLDataException>) transformerClosure0);
      IteratorUtils.emptyMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 0, (Throwable) null);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      TransformerClosure<Object> transformerClosure1 = new TransformerClosure<Object>(transformer0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(0, transformerClosure1);
      IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) resettableIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) forClosure0);
      assertEquals(0, forClosure0.getCount());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(stack0);
      IteratorUtils.emptyListIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Comparator must not be null.", "MkoJ=.os", 10);
      ConstantTransformer<Object, SQLTransactionRollbackException> constantTransformer0 = new ConstantTransformer<Object, SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Comparator must not be null.", "", "", 10);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "Y", ":qt.mi-", (-1));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("MkoJ=.os", "_i!J+UiN)}t", "RoboPK\"$#", 10);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "org.apache.commons.collections4.functors.OnePredicate", "RoboPK\"$#", 306);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "Comparator must not be null.", "Closure must not be null", 10);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("Entry does not exist: ", "", (String) null, (-3636));
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(constantTransformer0, predicate0);
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Properties> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) factory0);
      Transformer<Object, Properties> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) transformedPredicate0, (Transformer<? super Object, ? extends Properties>) transformer0, (Transformer<? super Object, ? extends Properties>) transformer0);
      TransformerClosure<SQLDataException> transformerClosure0 = new TransformerClosure<SQLDataException>(transformer1);
      IteratorUtils.apply((Iterator<SQLDataException>) orderedIterator0, (Closure<? super SQLDataException>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyListIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(";5dz@A:", ";5dz@A:", intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(";5dz@A:", "Zonk<HwblSvE?JS", 3535, batchUpdateException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(";5dz@A:", hashtable0, sQLSyntaxErrorException0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLClientInfoException0);
      DataTruncation dataTruncation0 = new DataTruncation((-1270), true, true, 1456, 2);
      ConstantTransformer<Object, DataTruncation> constantTransformer0 = new ConstantTransformer<Object, DataTruncation>(dataTruncation0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(constantTransformer0, predicate0);
      Factory<Properties> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, Properties> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Properties>) factory0);
      TransformerClosure<SQLDataException> transformerClosure0 = new TransformerClosure<SQLDataException>(transformer0);
      OrderedMapIterator<SQLDataException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends Properties>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLDataException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, Properties>(orderedMapIterator1);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) orderedMapIterator0);
      IteratorUtils.apply((Iterator<SQLDataException>) abstractOrderedMapIteratorDecorator0, (Closure<? super SQLDataException>) transformerClosure0);
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[17];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[6] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNodeArray0[0];
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) objectArrayIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) priorityQueue0);
      MapIterator<ArrayDeque<Integer>, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends ArrayDeque<Integer>>) mapIterator0, (Iterator<? extends ArrayDeque<Integer>>) mapIterator0, (Iterator<? extends ArrayDeque<Integer>>) mapIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ResettableListIterator<ServiceLoader<IIOMetadataNode>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<ServiceLoader<IIOMetadataNode>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<ServiceLoader<IIOMetadataNode>>) resettableListIterator0);
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      Transformer<StringTokenizer, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) resettableIterator0, (Transformer<? super StringTokenizer, String>) transformer0, "xB9", "", "M");
      Comparator<SQLDataException> comparator0 = (Comparator<SQLDataException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, String> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byte byte0 = (byte)21;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)10;
      byte byte1 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)81;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(stack0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) mapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<ArrayDeque<Integer>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, SQLNonTransientConnectionException>) orderedMapIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[18];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.functors.FactoryTransformer");
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      ServiceLoader.load(class0);
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.load(class1);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = serviceLoader0.iterator();
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[21];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) objectArrayIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) priorityQueue0);
      SQLDataException sQLDataException0 = new SQLDataException("delimiter may not be null");
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) resettableIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.objectGraphIterator("elementsToSkip parameter must not be negative.", (Transformer<? super String, ? extends String>) transformer0);
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, SQLNonTransientConnectionException>) orderedMapIterator0);
      String string0 = "org.apache.commons.collections4.functors.FactoryTransformer";
      OrderedMapIterator<StringTokenizer, SQLDataException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLDataException>(orderedMapIterator1);
      OrderedMapIterator<StringTokenizer, SQLDataException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, SQLDataException>) orderedMapIterator2);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 0);
      OrderedMapIterator<Integer, Integer> orderedMapIterator3 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, Integer>) orderedMapIterator3);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("elementsToSkip parameter must not be negative.", "org.apache.commons.collections4.functors.FactoryTransformer");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "elementsToSkip parameter must not be negative.";
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.objectGraphIterator("elementsToSkip parameter must not be negative.", (Transformer<? super String, ? extends String>) transformer0);
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, SQLNonTransientConnectionException>) orderedMapIterator0);
      String string1 = "org.apache.commons.collections4.functors.FactoryTransformer";
      OrderedMapIterator<StringTokenizer, SQLDataException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLDataException>(orderedMapIterator1);
      OrderedMapIterator<StringTokenizer, SQLDataException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, SQLDataException>) orderedMapIterator2);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      Iterator<String> iterator1 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) iterator0);
      DataTruncation dataTruncation0 = new DataTruncation(1459, false, false, 1459, 1459, (Throwable) null);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 0);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Object>(orderedMapIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      IteratorUtils.boundedIterator((Iterator<? extends String>) iterator1, (long) 0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) objectArrayListIterator0, 1459);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) null, (Collection<? super SQLTransientConnectionException>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashSet<SQLException> hashSet0 = new HashSet<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) null, (Collection<? super SQLTransactionRollbackException>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[11];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 10);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      ResettableListIterator<Class<IIOMetadataNode>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableIterator((Iterator<Class<IIOMetadataNode>>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLWarning[]) dataTruncationArray0, 3, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      long[] longArray0 = new long[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLException sQLException0 = new SQLException(batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", batchUpdateException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("ef<[[", "#x'i", (-1), longArray0, batchUpdateException0);
      IteratorUtils.singletonIterator(batchUpdateException1);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(predicate0);
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate2 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate3 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[0] = predicate3;
      predicateArray0[1] = predicate2;
      predicateArray0[2] = predicate1;
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[5];
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      batchUpdateExceptionArray0[1] = batchUpdateException0;
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("org.apache.commons.collections4.FluentIterable", "$YAMMA8g//L,L%$u", intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      batchUpdateExceptionArray0[3] = batchUpdateException1;
      batchUpdateExceptionArray0[4] = batchUpdateException0;
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLException sQLException0 = new SQLException(batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ef<[[", "ef<[[", sQLException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("ef<[[", "ef<[[", (-1), longArray0, sQLIntegrityConstraintViolationException0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      predicateArray0[1] = predicate1;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(batchUpdateException1);
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate2 = FalsePredicate.falsePredicate();
      predicateArray0[3] = predicate2;
      Predicate<Object> predicate3 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[4] = predicate3;
      Predicate<Object> predicate4 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<BatchUpdateException>) resettableIterator0, (Predicate<? super BatchUpdateException>) predicate4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) iterator0);
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      MapIterator<StringTokenizer, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, SQLNonTransientConnectionException>) orderedMapIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.functors.FactoryTransformer");
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      IteratorUtils.chainedIterator((Iterator<?>) objectArrayIterator0, (Iterator<?>) mapIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.matchesAny(iterator0, (Predicate<? super String>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "", 1716, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.load(class0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      serviceLoader0.iterator();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (Iterator<? extends SQLDataException>) resettableListIterator0, (Iterator<? extends SQLDataException>) resettableListIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) zippingIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Hashtable<IIOMetadataNode, StringTokenizer> hashtable0 = new Hashtable<IIOMetadataNode, StringTokenizer>();
      EntrySetMapIterator<IIOMetadataNode, StringTokenizer> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, StringTokenizer>(hashtable0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      MapIterator<SQLTransactionRollbackException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>(1236, 1236);
      Transformer<SQLTransactionRollbackException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTransactionRollbackException, ? extends String>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) mapIterator0, (Transformer<? super SQLTransactionRollbackException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IteratorUtils.emptyIterator();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) null, (Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) null, (Iterator<? extends Locale.FilteringMode>) null, (Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("MapIterator[]", "E1KrZng/CUXi#", 8);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "E1KrZng/CUXi#", 1, sQLSyntaxErrorException0);
      SQLWarning sQLWarning0 = new SQLWarning("", "", sQLRecoverableException0);
      sQLWarningArray0[0] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning("MapIterator[]");
      sQLWarningArray0[1] = sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning(sQLRecoverableException0);
      sQLWarningArray0[2] = sQLWarning2;
      SQLWarning sQLWarning3 = new SQLWarning();
      sQLWarningArray0[3] = sQLWarning3;
      SQLWarning sQLWarning4 = new SQLWarning(sQLSyntaxErrorException0);
      sQLWarningArray0[4] = sQLWarning4;
      SQLWarning sQLWarning5 = new SQLWarning("FilterListIterator.set(Object) is not supported.", "E1KrZng/CUXi#", 0);
      sQLWarningArray0[5] = sQLWarning5;
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLWarning>) resettableListIterator0, (Predicate<? super SQLWarning>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      IteratorUtils.emptyIterator();
      String string0 = "";
      Transformer<Object, String> transformer0 = new ConstantTransformer<Object, String>("");
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<String> iterator1 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) iterator0);
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<StringTokenizer, SQLNonTransientConnectionException>(orderedMapIterator0);
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, SQLNonTransientConnectionException>) orderedMapIterator1);
      String string1 = null;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      EmptyListIterator.resettableEmptyListIterator();
      Transformer<Object, Boolean> transformer1 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer1);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator1, (Predicate<? super String>) notPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      MapIterator<StringTokenizer, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, SQLNonTransientConnectionException>) orderedMapIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.functors.FactoryTransformer");
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      IteratorUtils.chainedIterator((Iterator<?>) objectArrayIterator0, (Iterator<?>) mapIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      ExceptionTransformer.exceptionTransformer();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      boolean boolean0 = IteratorUtils.matchesAny(iterator0, (Predicate<? super String>) uniquePredicate0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      boolean boolean1 = IteratorUtils.matchesAll((Iterator<BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) notPredicate0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLException sQLException0 = new SQLException(batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ef<[[", "ef<[[", sQLException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("ef<[[", "ef<[[", (-1), longArray0, sQLIntegrityConstraintViolationException0);
      IteratorUtils.singletonIterator(batchUpdateException1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      predicateArray0[1] = predicate1;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(batchUpdateException1);
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate2 = FalsePredicate.falsePredicate();
      predicateArray0[3] = predicate2;
      Predicate<Object> predicate3 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[4] = predicate3;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Iterator<SQLNonTransientConnectionException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) iterator0);
      DataTruncation dataTruncation0 = new DataTruncation(1459, false, false, 1459, 1459, (Throwable) null);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 0);
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<SQLNonTransientConnectionException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, Object>(orderedMapIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Iterator<SQLNonTransientConnectionException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SQLWarning sQLWarning0 = new SQLWarning("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 0);
      IteratorUtils.emptyListIterator();
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) orderedIterator0, (Iterator<? extends String>) orderedIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      SingletonIterator<Stack<Integer>> singletonIterator0 = new SingletonIterator<Stack<Integer>>(stack0, false);
      Iterator<Stack<Integer>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Stack<Integer>>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MapIterator<ServiceLoader<SQLRecoverableException>, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<ServiceLoader<SQLRecoverableException>, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<ServiceLoader<SQLRecoverableException>, SQLException>(mapIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("L+/.", "H8/SP`N(~:");
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(stack0);
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLWarning>) loopingListIterator0, (Predicate<? super SQLWarning>) predicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedException0.getStackTrace();
      MapIterator<StringTokenizer, SQLDataException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(stack0);
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLWarning>) loopingListIterator0, (Predicate<? super SQLWarning>) predicate0);
      IteratorUtils.emptyListIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "ZYlFk!}/<6~:d.[@lp");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("", (Transformer<? super String, ? extends String>) transformer0);
      Iterator<String> iterator1 = IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>) iterator0, (Iterator<? extends String>) iterator0);
      OrderedMapIterator<StringTokenizer, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<StringTokenizer, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<StringTokenizer, SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<?>) iterator1, (Iterator<?>) iterator0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      int[] intArray0 = new int[7];
      intArray0[0] = (-1554);
      intArray0[1] = (-1554);
      intArray0[2] = (-1554);
      intArray0[3] = (-1554);
      intArray0[4] = (-1554);
      intArray0[5] = 5;
      intArray0[6] = (-1554);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateException0.getNextException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", (-1554), (Throwable) null);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("delimiter may not be null", "", batchUpdateException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("delimiter may not be null", "delimiter may not be null", sQLFeatureNotSupportedException1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException(sQLRecoverableException0);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("f*o^P.if<J", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException8 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[8] = sQLFeatureNotSupportedException8;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 9);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.load(class0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = serviceLoader0.iterator();
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLNonTransientConnectionException>>) null, (Transformer<? super Iterator<SQLNonTransientConnectionException>, ? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.size(mapIterator0);
      Transformer<Object, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("R# l{(<<L8M");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) null, (Transformer<? super Properties, ? extends DataTruncation>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<Boolean> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Boolean>) orderedIterator0);
      Iterator<Boolean> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration0);
      IteratorUtils.zippingIterator((Iterator<? extends Boolean>) iterator0, (Iterator<? extends Boolean>) orderedIterator0, (Iterator<? extends Boolean>) iterator0);
      MapIterator<ServiceLoader<SQLRecoverableException>, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<ServiceLoader<SQLRecoverableException>, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<ServiceLoader<SQLRecoverableException>, SQLException>(mapIterator0);
      IteratorUtils.contains((Iterator<ServiceLoader<SQLRecoverableException>>) abstractMapIteratorDecorator0, (Object) mapIterator0);
      IteratorUtils.skippingIterator(iterator0, 0L);
      IteratorUtils.isEmpty(abstractMapIteratorDecorator0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) zippingIterator0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("NodeList must not be null", "9uSyCwwOc@=+EdDG$2u");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("\"Fo& 9S6", "9uSyCwwOc@=+EdDG$2u", 0, sQLNonTransientConnectionException0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 2);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer("{l-UkUl<'", (Class<?>[]) classArray0, (Object[]) iteratorArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      IteratorUtils.arrayIterator(integerArray0, int0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) listIterator0, 121);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[4];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractLinkedMap$KeySetIterator");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "miI`|i0J", hashtable0, sQLTransientConnectionException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "Enumeration must not be null", 0, map0, sQLClientInfoException0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("Enumeration must not be null", "org.apache.commons.collections4.iterators.AbstractEmptyIterator", 1, map1);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", hashtable1);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("BZ^", "ListIterator must not be null", 7, map0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("ListIterator must not be null", "t", 0, hashtable1, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException5;
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) objectArrayIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      IteratorUtils.emptyMapIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ResettableListIterator<ServiceLoader<IIOMetadataNode>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<ServiceLoader<IIOMetadataNode>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends ServiceLoader<IIOMetadataNode>>) resettableListIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.size(orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, 1043L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = (-2575);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, 10, (-2575));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ExceptionTransformer.exceptionTransformer();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((Throwable) null);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MapIterator<ServiceLoader<SQLRecoverableException>, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<ServiceLoader<SQLRecoverableException>, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<ServiceLoader<SQLRecoverableException>, SQLException>(mapIterator0);
      IteratorUtils.contains((Iterator<ServiceLoader<SQLRecoverableException>>) abstractMapIteratorDecorator0, (Object) mapIterator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IteratorUtils.isEmpty(abstractMapIteratorDecorator0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 0);
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) objectArrayIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Integer integer0 = new Integer(0);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) resettableListIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) objectArrayIterator0);
      assertFalse(list0.contains(0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      ExceptionTransformer.exceptionTransformer();
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException0;
      IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>) iterator0, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Iterator<StringTokenizer> iterator0 = null;
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "transformer may not be null", (String) null, "Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.load(class0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = serviceLoader0.iterator();
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      IteratorUtils.singletonListIterator((SQLTransientException) null);
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, DataTruncation> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, DataTruncation>(orderedMapIterator0);
      OrderedMapIterator<SQLDataException, DataTruncation> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) orderedMapIterator1, 0L, 0L);
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) orderedMapIterator0, (Iterator<? extends SQLDataException>) orderedMapIterator1, (Iterator<? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) boundedIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MapIterator<SQLRecoverableException, HashSet<LinkedHashSet>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(comparator0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, (Predicate<? super SQLRecoverableException>) identityPredicate0);
      Integer integer0 = new Integer(3);
      MapIterator<ArrayDeque<Integer>, SQLClientInfoException> mapIterator1 = IteratorUtils.emptyMapIterator();
      ZippingIterator<ArrayDeque<Integer>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends ArrayDeque<Integer>>) mapIterator1, (Iterator<? extends ArrayDeque<Integer>>) mapIterator1, (Iterator<? extends ArrayDeque<Integer>>) mapIterator1);
      IteratorUtils.toString((Iterator<ArrayDeque<Integer>>) zippingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends TreeSet<DataTruncation>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      int int0 = 0;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 0);
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) objectArrayIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) objectArrayIterator0, (Predicate<? super IIOMetadataNode>) notPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NotPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableListIterator0, class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("r F Z\"WB+g9P8HPKP");
      StackTraceElement[] stackTraceElementArray0 = sQLFeatureNotSupportedException0.getStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("r F Z\"WB+g9P8HPKP", "", (-1));
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("r F Z\"WB+g9P8HPKP", "");
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>((DataTruncation[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 6);
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) orderedIterator0);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>((DataTruncation) null);
      iteratorArray0[0] = (Iterator<DataTruncation>) singletonIterator0;
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator((DataTruncation) null);
      iteratorArray0[2] = (Iterator<DataTruncation>) listIterator0;
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.singletonListIterator((DataTruncation) null);
      iteratorArray0[3] = (Iterator<DataTruncation>) listIterator1;
      OrderedIterator<DataTruncation> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[4] = (Iterator<DataTruncation>) orderedIterator1;
      ListIterator<DataTruncation> listIterator2 = IteratorUtils.unmodifiableListIterator(listIterator0);
      iteratorArray0[5] = (Iterator<DataTruncation>) listIterator2;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 203;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) null, 203, 203);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("yE(tPAj]AID");
      iIOMetadataNode0.getAttributeNodeNS("w|0R; dQP<^&", (String) null);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "", "", "");
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      IteratorUtils.singletonListIterator(batchUpdateException0);
      IteratorUtils.emptyIterator();
      DataTruncation dataTruncation0 = new DataTruncation((-1224), false, false, (-1224), 16);
      DataTruncation dataTruncation1 = new DataTruncation((-1224), false, false, 4084, 16);
      DataTruncation dataTruncation2 = new DataTruncation(0, false, false, 112, 0, dataTruncation0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      dataTruncationArray0[0] = dataTruncation2;
      dataTruncationArray0[1] = dataTruncation1;
      MapIterator<PriorityQueue<IIOMetadataNode>, Iterator<SQLNonTransientConnectionException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<PriorityQueue<IIOMetadataNode>, Iterator<SQLNonTransientConnectionException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.getIterator(mapIterator1);
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, 100, (-2469));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.load(class0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = serviceLoader0.iterator();
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      DataTruncation dataTruncation0 = new DataTruncation(4084, true, true, 0, (-2524));
      DataTruncation dataTruncation1 = new DataTruncation(1459, true, true, (-1319), (-357), (Throwable) null);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      dataTruncationArray0[0] = dataTruncation1;
      dataTruncationArray0[1] = dataTruncation0;
      dataTruncationArray0[2] = dataTruncation1;
      dataTruncationArray0[3] = dataTruncation1;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 6
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) orderedIterator0, class0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedException0.getStackTrace();
      sQLFeatureNotSupportedException0.printStackTrace();
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 612, sQLFeatureNotSupportedException0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[7];
      dataTruncationArray0[0] = dataTruncation0;
      dataTruncationArray0[1] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, false, false, 924, 0, sQLFeatureNotSupportedException0);
      dataTruncationArray0[2] = dataTruncation1;
      dataTruncationArray0[3] = dataTruncation0;
      dataTruncationArray0[4] = dataTruncation0;
      dataTruncationArray0[5] = dataTruncation0;
      DataTruncation dataTruncation2 = new DataTruncation(1, false, false, 924, 924, dataTruncation1);
      dataTruncationArray0[6] = dataTruncation2;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 1860);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1853
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) orderedIterator0, class0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      StackTraceElement[] stackTraceElementArray0 = sQLFeatureNotSupportedException0.getStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 1786);
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      DataTruncation[] dataTruncationArray0 = new DataTruncation[0];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      iIOMetadataNode1.getAttributeNodeNS((String) null, (String) null);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = null;
      try {
        reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>((List<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ReverseListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9KQk";
      stringArray0[1] = "";
      stringArray0[2] = "?~";
      stringArray0[3] = "P{/GF,p`{ZQ";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, (-2833));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "", "", "");
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((Throwable) null);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>) null, (Iterator<?>) resettableListIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.load(class0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<StringTokenizer>) null, (Transformer<? super StringTokenizer, String>) transformer0, "", "i1=5g@4n:GTR*U(=^hb", "i1=5g@4n:GTR*U(=^hb");
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, (-2051L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) orderedIterator0, class0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      StackTraceElement[] stackTraceElementArray0 = sQLFeatureNotSupportedException0.getStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 1786);
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", (String) null, sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("LESS_OR_EQUAL");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNode0.getTagName();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("]");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      IteratorUtils.chainedIterator((Iterator<?>) objectArrayIterator0, (Iterator<?>) resettableListIterator0);
      ResettableListIterator<String> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      IteratorUtils.matchesAny((Iterator<String>) resettableListIterator1, (Predicate<? super String>) notPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "LESS_OR_EQUAL", 1786, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) orderedIterator0, class0);
      OrderedMapIterator<Iterator<SQLNonTransientConnectionException>, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Iterator<SQLNonTransientConnectionException>, SQLFeatureNotSupportedException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Iterator<SQLNonTransientConnectionException>, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      String string0 = "vS\"RTM$+qf|4Y";
      SQLDataException sQLDataException0 = new SQLDataException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("vS\"RTM$+qf|4Y", sQLDataException0);
      Factory<SQLFeatureNotSupportedException> factory0 = ConstantFactory.constantFactory(sQLFeatureNotSupportedException0);
      FactoryTransformer<Object, SQLFeatureNotSupportedException> factoryTransformer0 = new FactoryTransformer<Object, SQLFeatureNotSupportedException>(factory0);
      IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLNonTransientConnectionException>>) mapIterator0, (Transformer<? super Iterator<SQLNonTransientConnectionException>, ? extends SQLFeatureNotSupportedException>) factoryTransformer0);
      PriorityQueue<Iterator<SQLNonTransientConnectionException>> priorityQueue0 = new PriorityQueue<Iterator<SQLNonTransientConnectionException>>();
      // Undeclared exception!
      try { 
        priorityQueue0.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = "^iWXdX!vW";
      iIOMetadataNode0.getAttributeNodeNS("^iWXdX!vW", "No previous() entry in the iteration");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "^iWXdX!vW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Vector<BatchUpdateException>[] vectorArray0 = (Vector<BatchUpdateException>[]) Array.newInstance(Vector.class, 2);
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      vectorArray0[0] = vector0;
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1512);
      intArray0[1] = (-1199);
      intArray0[2] = 1;
      intArray0[3] = (-1512);
      intArray0[4] = 1;
      intArray0[5] = 8;
      intArray0[6] = (-1426);
      intArray0[7] = 717;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      stack0.add(batchUpdateException0);
      vectorArray0[1] = (Vector<BatchUpdateException>) stack0;
      IteratorUtils.arrayIterator(vectorArray0, 1, 1);
      ResettableListIterator<Stack<SQLNonTransientException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      IteratorUtils.singletonListIterator(batchUpdateException0);
      IteratorUtils.emptyIterator();
      Iterator<SQLRecoverableException> iterator0 = EmptyIterator.emptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(batchUpdateException0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) iterator0, (Predicate<? super SQLRecoverableException>) equalPredicate0);
      Integer integer0 = new Integer(1459);
      Integer integer1 = new Integer(4);
      int int0 = 166;
      Integer[] integerArray0 = null;
      ObjectArrayIterator<Integer> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<Integer>((Integer[]) null, 166, (-110));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MapIterator<SQLRecoverableException, HashSet<LinkedHashSet>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      int int0 = (-110);
      Integer integer1 = new Integer((-110));
      integerArray0[1] = integer1;
      ObjectArrayIterator<Integer> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0, int0, 166);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) orderedIterator0, class0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      StackTraceElement[] stackTraceElementArray0 = sQLFeatureNotSupportedException0.getStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 1786);
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      Iterator<?> iterator0 = IteratorUtils.getIterator("o1{=B$u");
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0, 1786, 1786);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) resettableListIterator0, class0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 121;
      intArray0[2] = 3382;
      intArray0[3] = (-1309);
      intArray0[4] = (-3597);
      intArray0[5] = 0;
      intArray0[6] = 30;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("YA/e", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("YA/e", intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("Iterator must not be null", intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException((String) null, intArray0, batchUpdateException2);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0, (-3597));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      IteratorUtils.singletonListIterator(batchUpdateException0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) resettableIterator0, 1L, 1L);
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) boundedIterator0, (Iterator<? extends SQLDataException>) boundedIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) boundedIterator0);
      int int0 = (-2909);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null, (-2909));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", (String) null, 123);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", (-1), sQLTransactionRollbackException0);
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 10, 1142);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = (-6062);
      int int1 = (-2284);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-6062), (-2284));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, TreeSet<SQLDataException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLRecoverableException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("NodeList must not be null");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 0);
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) objectArrayIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(100);
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(100);
      Integer integer4 = new Integer(2052);
      Integer integer5 = new Integer(125);
      Integer integer6 = new Integer(2552);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.getIterator((Object) null);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(100);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3043);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-547));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(100);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(125);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(0);
      integerArray0[8] = integer8;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      DataTruncation dataTruncation0 = new DataTruncation(1, false, false, 1, 279);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(279, false, true, 1, 0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-17), false, true, 0, (-17), dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-1), false, true, 2264, 2787, dataTruncation1);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(10, false, true, 658, (-6289));
      dataTruncationArray0[4] = dataTruncation4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("No value has been returned yet", "No value has been returned yet", dataTruncation4);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      int int0 = 123;
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", (String) null, 123);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(hashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingIterator0, (-210L), 1160L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("L&o!]p]R@IOld");
      iIOMetadataNode0.getOwnerDocument();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Jppy1;z6Ec$]7n 4m";
      stringArray0[1] = "";
      stringArray0[2] = "InstantiateTransformer: Constructor must be public";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "u$] H3@^]eH4?VW4z=";
      stringArray0[6] = "";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLFeatureNotSupportedException>(orderedMapIterator0);
      OrderedMapIterator<SQLTimeoutException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLNonTransientException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, SQLNonTransientException>) orderedMapIterator1);
      OrderedMapIterator<DataTruncation, String> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, String> orderedMapIterator3 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends String>) orderedMapIterator2);
      ListIteratorWrapper<SQLWarning> listIteratorWrapper0 = new ListIteratorWrapper<SQLWarning>(orderedMapIterator3);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 2);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[1] = class1;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("no", classArray0, classArray0);
      String string0 = IteratorUtils.toString((Iterator<SQLWarning>) listIteratorWrapper0, (Transformer<? super SQLWarning, String>) invokerTransformer0);
      assertEquals("[]", string0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("RG1->db!8.M~ys`&&", "Predicate must not be null", (-1920));
      IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      Integer integer0 = new Integer((-1084));
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      MapIterator<Integer, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) mapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) iterator0, 3241L, 1L);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ArrayListIterator<BatchUpdateException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<BatchUpdateException>((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      OrderedMapIterator<Iterator<SQLNonTransientConnectionException>, DataTruncation> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Iterator<SQLNonTransientConnectionException>, Object> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Iterator<SQLNonTransientConnectionException>, ?>) orderedMapIterator0);
      Enumeration<Iterator<SQLNonTransientConnectionException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLNonTransientConnectionException>>) mapIterator0);
      PriorityQueue<Iterator<SQLNonTransientConnectionException>> priorityQueue0 = new PriorityQueue<Iterator<SQLNonTransientConnectionException>>();
      PriorityQueue<Iterator<SQLNonTransientConnectionException>> priorityQueue1 = new PriorityQueue<Iterator<SQLNonTransientConnectionException>>(priorityQueue0);
      Iterator<Iterator<SQLNonTransientConnectionException>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLNonTransientConnectionException>>) enumeration0, (Collection<? super Iterator<SQLNonTransientConnectionException>>) priorityQueue1);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Iterator<SQLNonTransientConnectionException>>) iterator0, (Transformer<? super Iterator<SQLNonTransientConnectionException>, ? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Iterator<Properties> iterator0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends StringTokenizer>) iterator0);
      StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) null, 2140);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) resettableListIterator0);
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (-1512));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("NodeList must not be null");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader0.setClassAssertionStatus("", false);
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      ServiceLoader.load(class1);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = serviceLoader0.iterator();
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      IteratorUtils.singletonListIterator((SQLTransientException) null);
      Integer integer0 = new Integer(52);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, (-504), (-1610));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      IteratorUtils.singletonListIterator("Estimated size must be greater than 0");
      HashSet<SQLTimeoutException> hashSet0 = new HashSet<SQLTimeoutException>();
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(hashSet0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) loopingIterator0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.load(class0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      Class<DataTruncation> class1 = DataTruncation.class;
      ServiceLoader.load(class1);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = serviceLoader0.iterator();
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) iterator0);
      SQLTransientException sQLTransientException0 = null;
      IteratorUtils.singletonListIterator((SQLTransientException) null);
      Integer[] integerArray0 = new Integer[1];
      int int0 = (-980);
      Integer integer0 = new Integer((-980));
      integerArray0[0] = integer0;
      int int1 = (-538);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, (-980), (-538));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Iterator<SQLRecoverableException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) orderedIterator0, class0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      int int0 = 1786;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", ", ", 1786, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException1.spliterator();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 1786, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fH3BqDRPr}~[h");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fH3BqDRPr}~[h", sQLFeatureNotSupportedException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLIntegrityConstraintViolationException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("v%WJT63Di #)wwkUce", "py", sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("ov(", "py");
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator");
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      int int0 = (-1047);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, (-1047));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTimeoutException, SQLFeatureNotSupportedException>(orderedMapIterator0);
      OrderedMapIterator<SQLTimeoutException, SQLNonTransientException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTimeoutException, ? extends SQLNonTransientException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, SQLNonTransientException>) orderedMapIterator1);
      OrderedMapIterator<DataTruncation, String> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, String> orderedMapIterator3 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends String>) orderedMapIterator2);
      ListIteratorWrapper<SQLWarning> listIteratorWrapper0 = new ListIteratorWrapper<SQLWarning>(orderedMapIterator3);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 1);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[5];
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException1;
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException0;
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException0;
      ObjectArrayIterator<SQLTransactionRollbackException> objectArrayIterator0 = new ObjectArrayIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransactionRollbackException>) objectArrayIterator0, (Predicate<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<DataTruncation> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super DataTruncation>>) priorityQueue0);
      IteratorUtils.find((Iterator<DataTruncation>) null, (Predicate<? super DataTruncation>) predicate0);
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 2);
      OrderedMapIterator<SQLRecoverableException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) orderedMapIterator0;
      long long0 = 2575L;
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator(iteratorArray0[0], 2575L);
      iteratorArray0[1] = (Iterator<SQLRecoverableException>) skippingIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      SQLDataException sQLDataException0 = new SQLDataException("");
      linkedList0.add(sQLDataException0);
      SQLDataException sQLDataException1 = new SQLDataException(";A;t", ";A;t", 323);
      linkedList0.add(sQLDataException1);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) linkedList0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLDataException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      String string0 = "";
      SQLWarning sQLWarning0 = new SQLWarning("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLWarning0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLSyntaxErrorException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<String>) orderedIterator0, (Predicate<? super String>) predicate1);
      EntrySetMapIterator<StringTokenizer, SQLDataException> entrySetMapIterator0 = null;
      try {
        entrySetMapIterator0 = new EntrySetMapIterator<StringTokenizer, SQLDataException>((Map<StringTokenizer, SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, LinkedHashSet<SQLIntegrityConstraintViolationException>> hashMap0 = new HashMap<SQLFeatureNotSupportedException, LinkedHashSet<SQLIntegrityConstraintViolationException>>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Iterator remove() can only be called once after next()", "", sQLNonTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Iterator remove() can only be called once after next()", sQLInvalidAuthorizationSpecException0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      hashMap0.put(sQLFeatureNotSupportedException0, linkedHashSet0);
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet1 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      hashMap0.put((SQLFeatureNotSupportedException) null, linkedHashSet1);
      EntrySetMapIterator<SQLFeatureNotSupportedException, LinkedHashSet<SQLIntegrityConstraintViolationException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, LinkedHashSet<SQLIntegrityConstraintViolationException>>(hashMap0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      entrySetMapIterator0.forEachRemaining(consumer0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("Collection must not be null", "fromIndex(", (-1762));
      ArrayListIterator<Predicate<SQLNonTransientConnectionException>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Predicate<SQLNonTransientConnectionException>>(sQLInvalidAuthorizationSpecException1, 16, (-5991));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, LinkedHashSet<SQLIntegrityConstraintViolationException>> hashMap0 = new HashMap<SQLFeatureNotSupportedException, LinkedHashSet<SQLIntegrityConstraintViolationException>>();
      LinkedHashSet<SQLIntegrityConstraintViolationException> linkedHashSet0 = new LinkedHashSet<SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, LinkedHashSet<SQLIntegrityConstraintViolationException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, LinkedHashSet<SQLIntegrityConstraintViolationException>>(hashMap0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Iterator remove() can only be called once after next()", "Iterator remove() can only be called once after next()", (-1762));
      HashMap<BatchUpdateException, DataTruncation> hashMap1 = new HashMap<BatchUpdateException, DataTruncation>();
      EntrySetMapIterator<BatchUpdateException, DataTruncation> entrySetMapIterator1 = new EntrySetMapIterator<BatchUpdateException, DataTruncation>(hashMap1);
      // Undeclared exception!
      try { 
        entrySetMapIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      int int0 = 6219;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 6219, 6219);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 6);
      Hashtable<DataTruncation, SQLDataException> hashtable0 = new Hashtable<DataTruncation, SQLDataException>();
      EntrySetMapIterator<DataTruncation, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLDataException>(hashtable0);
      iteratorArray0[0] = (Iterator<DataTruncation>) entrySetMapIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<BatchUpdateException, SQLWarning> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLWarning>) orderedMapIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) mapIterator0);
      TreeSet<Class<Object>>[] treeSetArray0 = (TreeSet<Class<Object>>[]) Array.newInstance(TreeSet.class, 2);
      TreeSet<Class<Object>> treeSet0 = new TreeSet<Class<Object>>();
      treeSetArray0[0] = treeSet0;
      TreeSet<Class<Object>> treeSet1 = new TreeSet<Class<Object>>();
      TreeSet<Class<Object>> treeSet2 = new TreeSet<Class<Object>>((SortedSet<Class<Object>>) treeSet1);
      treeSetArray0[1] = treeSet2;
      ObjectArrayListIterator<TreeSet<Class<Object>>> objectArrayListIterator0 = new ObjectArrayListIterator<TreeSet<Class<Object>>>(treeSetArray0);
      IteratorUtils.skippingIterator((Iterator<TreeSet<Class<Object>>>) objectArrayListIterator0, 767L);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, (String) null, sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("ZhNx.r|VunF");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("ZhNx.r|VunF", sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException((String) null, "\")%@N38l?jnF,X");
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("ZhNx.r|VunF", sQLTransactionRollbackException3);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("ZhNx.r|VunF");
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException("S");
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) orderedIterator0, class0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      MapIterator<StringTokenizer, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("8Rwp");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<StringTokenizer>) mapIterator0, (Transformer<? super StringTokenizer, String>) transformer0, "{,", "{,", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) resettableListIterator0, class0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 6);
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTransactionRollbackException) null);
      iteratorArray0[1] = (Iterator<SQLTransactionRollbackException>) resettableIterator0;
      BoundedIterator<SQLTransactionRollbackException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, 1L);
      iteratorArray0[2] = (Iterator<SQLTransactionRollbackException>) boundedIterator0;
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(linkedList0);
      iteratorArray0[3] = (Iterator<SQLTransactionRollbackException>) loopingListIterator0;
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLTransactionRollbackException> iterator1 = IteratorUtils.objectGraphIterator((SQLTransactionRollbackException) null, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      iteratorArray0[4] = iterator1;
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) iterator0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      iteratorArray0[5] = (Iterator<SQLTransactionRollbackException>) resettableListIterator1;
      Iterator<SQLTransactionRollbackException> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      Transformer<SQLTransactionRollbackException, String> transformer1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator2, (Transformer<? super SQLTransactionRollbackException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("");
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedMapIterator<Integer, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>) orderedMapIterator0, (Iterator<? extends Integer>) orderedMapIterator0);
      Iterator<Integer> iterator1 = IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>) iterator0, (Iterator<? extends Integer>) iterator0);
      Class<Integer> class0 = Integer.class;
      Integer[] integerArray0 = IteratorUtils.toArray((Iterator<? extends Integer>) iterator1, class0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<StringTokenizer> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>) resettableIterator0, (Iterator<? extends StringTokenizer>) resettableIterator0);
      String string0 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super StringTokenizer, String>) null, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      IteratorUtils.singletonListIterator(batchUpdateException0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) resettableIterator0, 1L, 1L);
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) boundedIterator0, (Iterator<? extends SQLDataException>) boundedIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) boundedIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_FilteringMode0, 300, 300);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = null;
      String string1 = "\";#pv";
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("\";#pv", (int[]) null);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((String) null, "\";#pv", (-1288), (int[]) null, batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, batchUpdateException1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, 0, (-1350));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[8];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 14;
      intArray0[2] = (-1037);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("3JcO9>l2'ke", "#u1", intArray0, sQLTimeoutException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0, batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("!o7A96", "!o7A96", (-1037), sQLClientInfoException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("3JcO9>l2'ke", "3JcO9>l2'ke", (-1037));
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("#u1", "w0zGM", (-1037));
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("w0zGM", "");
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException(", ", "3JcO9>l2'ke", sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      SQLTransactionRollbackException sQLTransactionRollbackException7 = new SQLTransactionRollbackException(sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[7] = sQLTransactionRollbackException7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, (-1037));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      IteratorUtils.emptyOrderedIterator();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("delimiter may not be null", "", 798, sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("org.apache.commons.collections4.iterators.ArrayIterator", sQLRecoverableException1);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("", (String) null);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException((String) null, "");
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException(sQLRecoverableException1);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("@~", "@~", true);
      stringTokenizer0.nextToken();
      stringTokenizer0.nextElement();
      stringTokenizer0.hasMoreTokens();
      stringTokenizer0.hasMoreElements();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) stringTokenizer0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Iterator<TreeSet<SQLTransientConnectionException>> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator0, (-641L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[2];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("NodeList must not be null");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      int int0 = 0;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) objectArrayIterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) priorityQueue0);
      try { 
        iIOMetadataNode1.isEqualNode(iIOMetadataNode1);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      DataTruncation dataTruncation0 = new DataTruncation(1, false, false, 1, 257);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1, false, true, 0, (-3185), dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, false, true, 0, 0, dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-1), false, true, 2264, 2787, dataTruncation1);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(10, false, true, 658, (-6289));
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(10, false, true, (-1224), 0);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(1600, false, false, 0, (-1266));
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(10, false, true, (-1919), 10);
      dataTruncationArray0[7] = dataTruncation7;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) objectArrayListIterator0, (-6289));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -6289
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      IteratorUtils.singletonListIterator(batchUpdateException0);
      IteratorUtils.emptyIterator();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) resettableListIterator0, (Object) resettableListIterator0);
      // Undeclared exception!
      try { 
        UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLException, ? extends DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      IteratorUtils.contains((Iterator<String>) null, (Object) null);
      ArrayIterator<SQLFeatureNotSupportedException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLFeatureNotSupportedException>((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) null, (Object) null);
      // Undeclared exception!
      try { 
        UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLException, ? extends DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.stringPropertyNames();
      int int0 = 824;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0, 1043, 824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 5);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.noneOf(class0);
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.copyOf(enumSet0);
      enumSetArray0[0] = enumSet1;
      EnumSet<Locale.FilteringMode> enumSet2 = EnumSet.noneOf(class0);
      enumSetArray0[1] = enumSet2;
      EnumSet<Locale.FilteringMode> enumSet3 = EnumSet.complementOf(enumSet1);
      enumSetArray0[2] = enumSet3;
      EnumSet<Locale.FilteringMode> enumSet4 = EnumSet.copyOf(enumSet2);
      enumSetArray0[3] = enumSet4;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      locale_FilteringModeArray0[4] = locale_FilteringMode0;
      locale_FilteringModeArray0[5] = locale_FilteringMode0;
      locale_FilteringModeArray0[6] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet5 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      enumSetArray0[4] = enumSet5;
      ResettableListIterator<EnumSet<Locale.FilteringMode>> resettableListIterator0 = IteratorUtils.arrayListIterator(enumSetArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      StringValueTransformer.stringValueTransformer();
      String string0 = "";
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (-825L), (-825L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      int int0 = 123;
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", (String) null, 123);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", (-1), sQLTransactionRollbackException0);
      IteratorUtils.getIterator(sQLSyntaxErrorException0);
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) treeSet0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 7);
      int int1 = 1142;
      int int2 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0, 1142, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Vector<SQLNonTransientException> vector0 = new Vector<SQLNonTransientException>(0);
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) vector0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0);
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientException>[] iteratorArray0 = (Iterator<SQLTransientException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) comparator0, (Iterator<? extends SQLTransientException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }
}
