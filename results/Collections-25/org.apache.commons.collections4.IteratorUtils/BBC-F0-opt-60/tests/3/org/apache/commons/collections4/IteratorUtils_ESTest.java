/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 09 05:24:17 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.toString((Iterator<Integer>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<Boolean> class0 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) orderedMapIterator0, class0);
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("");
      OnePredicate<String> onePredicate0 = new OnePredicate<String>((Predicate<? super String>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<String>) resettableIterator0, (Predicate<? super String>) onePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OnePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicateTransformer<SQLException> predicateTransformer0 = new PredicateTransformer<SQLException>(uniquePredicate0);
      int int0 = (-647);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("sB\"!O!", "sB\"!O!", (-647));
      Boolean boolean0 = predicateTransformer0.transform(sQLTransactionRollbackException0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Transformer<Boolean, Boolean> transformer1 = IfTransformer.ifTransformer((Predicate<? super Boolean>) uniquePredicate0, (Transformer<? super Boolean, ? extends Boolean>) transformer0);
      Iterator<Boolean> iterator0 = IteratorUtils.objectGraphIterator(boolean0, (Transformer<? super Boolean, ? extends Boolean>) transformer1);
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Boolean>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 3008);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      DataTruncation dataTruncation0 = new DataTruncation(67, true, false, 13, 0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(13, false, false, 646, 13, dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, true, false, 646, 91);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(91, true, true, 13, 1491, dataTruncation1);
      dataTruncationArray0[3] = dataTruncation3;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("(", "Transformer must not be null", dataTruncation0);
      DataTruncation dataTruncation4 = new DataTruncation(1491, false, true, 0, 14, sQLTransactionRollbackException0);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(963, false, false, 1491, 67, dataTruncation4);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(1462, true, true, 0, 0);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(1893, false, false, 0, 963);
      DataTruncation dataTruncation8 = new DataTruncation(0, true, true, 958, 33, dataTruncation7);
      dataTruncationArray0[7] = dataTruncation8;
      DataTruncation dataTruncation9 = new DataTruncation((-1629), true, true, 14, 4, dataTruncation3);
      dataTruncationArray0[8] = dataTruncation9;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0, 4);
      IteratorUtils.toList((Iterator<? extends SQLWarning>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Class<Boolean> class0 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) orderedMapIterator0, class0);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      ListIterator<Class<SQLSyntaxErrorException>> listIterator0 = IteratorUtils.singletonListIterator(class1);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(uniquePredicate0, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Class<SQLSyntaxErrorException>>) listIterator0, (Transformer<? super Class<SQLSyntaxErrorException>, String>) ifTransformer0, "", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>((Object) null);
      IteratorUtils.get((Iterator<Object>) singletonIterator0, 0);
      IteratorUtils.getIterator((Object) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      closureArray0[0] = closure0;
      closureArray0[1] = closure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      TreeSet<Object>[] treeSetArray0 = (TreeSet<Object>[]) Array.newInstance(TreeSet.class, 6);
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSetArray0[0] = treeSet0;
      TreeSet<Object> treeSet1 = new TreeSet<Object>((Comparator<? super Object>) null);
      TreeSet<Object> treeSet2 = new TreeSet<Object>((Collection<?>) treeSet0);
      treeSetArray0[2] = treeSet2;
      TreeSet<Object> treeSet3 = new TreeSet<Object>();
      treeSetArray0[3] = treeSet3;
      TreeSet<Object> treeSet4 = new TreeSet<Object>();
      treeSetArray0[4] = treeSet4;
      TreeSet<Object> treeSet5 = new TreeSet<Object>();
      treeSetArray0[5] = treeSet5;
      ObjectArrayListIterator<TreeSet<Object>> objectArrayListIterator0 = new ObjectArrayListIterator<TreeSet<Object>>(treeSetArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<TreeSet<Object>>) objectArrayListIterator0, (Closure<? super TreeSet<Object>>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 7);
      closureArray0[0] = closure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      closureArray0[1] = (Closure<Object>) chainedClosure0;
      closureArray0[2] = closure0;
      closureArray0[3] = closure0;
      closureArray0[4] = closure0;
      closureArray0[5] = closure0;
      closureArray0[6] = closure0;
      ChainedClosure<Object> chainedClosure1 = new ChainedClosure<Object>(closureArray0);
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      IteratorUtils.apply((Iterator<TreeSet<Object>>) null, (Closure<? super TreeSet<Object>>) closure0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      IteratorUtils.getIterator(closure0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      OrderedMapIterator<StringTokenizer, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) orderedMapIterator0, (Predicate<? super StringTokenizer>) notPredicate0);
      IteratorUtils.getIterator(uniquePredicate0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      DataTruncation dataTruncation0 = new DataTruncation((-795), false, false, (-795), (-795), sQLTimeoutException0);
      Transformer<Object, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("Q_H?2%^ix<z?ivIw");
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) iterator0, 622);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Q_H?2%^ix<z?ivIw' on 'class java.sql.DataTruncation' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      stack0.elements();
      IteratorUtils.emptyOrderedMapIterator();
      TruePredicate.truePredicate();
      TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) orderedMapIterator0, comparator0);
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLIntegrityConstraintViolationException>>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<TreeSet<Object>>) null, (Closure<? super TreeSet<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedHashSet<Closure<Object>> linkedHashSet0 = new LinkedHashSet<Closure<Object>>();
      ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLIntegrityConstraintViolationException>>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<TreeSet<Object>>) null, (Closure<? super TreeSet<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      TruePredicate.truePredicate();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SingletonListIterator<TreeSet<Object>> singletonListIterator0 = new SingletonListIterator<TreeSet<Object>>(treeSet0);
      SkippingIterator<TreeSet<Object>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<TreeSet<Object>>) singletonListIterator0, 0L);
      Hashtable<Object, DataTruncation> hashtable0 = new Hashtable<Object, DataTruncation>();
      Transformer<Object, SQLException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLException>) hashtable0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<TreeSet<Object>>) skippingIterator0, (Closure<? super TreeSet<Object>>) closure0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      IteratorUtils.getIterator(treeSet0);
      IteratorUtils.emptyOrderedMapIterator();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      SQLWarning sQLWarning0 = new SQLWarning("Z['t';j", ",F0|([e}Uz");
      sQLWarning0.getSuppressed();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w\"Z)!yv");
      sQLWarning0.getStackTrace();
      sQLWarningArray0[0] = sQLWarning0;
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0, 0, 0);
      IteratorUtils.emptyMapIterator();
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("(this Collection)");
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(stringTokenizer0);
      IteratorUtils.get((Iterator<Object>) singletonIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) uniquePredicate0, 0, (-1158));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      stack0.elements();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.singletonListIterator(locale_Category0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Closure<Object>[]) null, 1320, (-2544));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.Category>) objectArrayIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(instanceofPredicate0);
      Boolean[] booleanArray0 = new Boolean[7];
      PredicateTransformer<SQLException> predicateTransformer0 = new PredicateTransformer<SQLException>(predicate0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      SQLWarning sQLWarning0 = new SQLWarning("FilterListIterator.remove() is not supported.", "org.apache.commons.collections4.FunctorException");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("FilterListIterator.remove() is not supported.", "FilterListIterator.remove() is not supported.", 2, sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLInvalidAuthorizationSpecException0);
      Boolean boolean0 = predicateTransformer0.transform(batchUpdateException0);
      booleanArray0[0] = boolean0;
      PredicateTransformer<SQLException> predicateTransformer1 = new PredicateTransformer<SQLException>(instanceofPredicate0);
      Boolean boolean1 = predicateTransformer1.transform(sQLInvalidAuthorizationSpecException0);
      booleanArray0[1] = boolean1;
      Boolean boolean2 = predicateTransformer0.transform(sQLWarning0);
      booleanArray0[2] = boolean2;
      PredicateTransformer<SQLException> predicateTransformer2 = new PredicateTransformer<SQLException>(instanceofPredicate0);
      Boolean boolean3 = predicateTransformer2.transform(sQLInvalidAuthorizationSpecException0);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = predicateTransformer2.transform(sQLInvalidAuthorizationSpecException0);
      booleanArray0[4] = boolean4;
      Boolean boolean5 = predicateTransformer0.transform(sQLWarning0);
      booleanArray0[5] = boolean5;
      Boolean boolean6 = predicateTransformer0.transform(sQLInvalidAuthorizationSpecException0);
      booleanArray0[6] = boolean6;
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0, 2);
      Class<Boolean> class1 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) objectArrayIterator0, class1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      String string0 = "l[Kv9:6$+-U.\\/pD";
      Locale locale0 = new Locale("a2");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(set0);
      loopingIterator0.size();
      Iterator<String> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends String>) loopingIterator0);
      IteratorUtils.toListIterator((Iterator<? extends String>) iterator0);
      OrderedMapIterator<DataTruncation, InstanceofPredicate> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) orderedMapIterator0);
      Class<String> class1 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class1);
      Factory<String> factory0 = ConstantFactory.constantFactory("l[Kv9:6$+-U./pD");
      FactoryTransformer<DataTruncation, String> factoryTransformer0 = new FactoryTransformer<DataTruncation, String>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) listIterator0, (Transformer<? super DataTruncation, String>) factoryTransformer0, "", "a2", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MapIterator<TreeSet<Object>, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      closureArray0[0] = closure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      HashSet<Closure<Object>> hashSet0 = new HashSet<Closure<Object>>();
      ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLIntegrityConstraintViolationException>>) hashSet0);
      IteratorUtils.apply((Iterator<TreeSet<Object>>) mapIterator0, (Closure<? super TreeSet<Object>>) chainedClosure0);
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLException>) orderedIterator0);
      int int0 = 716;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(closureArray0, 716);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Boolean, SQLFeatureNotSupportedException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      IteratorUtils.getIterator(orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 202);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      OrderedMapIterator<Boolean, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      Class<Boolean> class0 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) orderedMapIterator0, class0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OrderedIterator<SQLWarning> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<SQLWarning>) orderedIterator0, (Predicate<? super SQLWarning>) uniquePredicate0);
      TruePredicate.truePredicate();
      DataTruncation dataTruncation0 = new DataTruncation(2, true, false, 2, 2);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<DataTruncation>) singletonIterator0, (Transformer<? super DataTruncation, String>) transformer0, "", "", "");
      TruePredicate.truePredicate();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      IteratorUtils.toListIterator((Iterator<?>) objectArrayIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ListIterator<Locale.Category> listIterator0 = IteratorUtils.singletonListIterator(locale_Category0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      Transformer<Object, SQLClientInfoException> transformer0 = ExceptionTransformer.exceptionTransformer();
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) allPredicate0, (Predicate<? super Object>) allPredicate0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) null, (Predicate<? super SQLTransientException>) transformedPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      DataTruncation dataTruncation0 = new DataTruncation(512, false, false, 512, 123);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      ConstantTransformer<SQLWarning, String> constantTransformer0 = new ConstantTransformer<SQLWarning, String>("");
      IteratorUtils.toString((Iterator<DataTruncation>) singletonIterator0, (Transformer<? super DataTruncation, String>) constantTransformer0, "", "", "");
      TruePredicate.truePredicate();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      EmptyMapIterator.emptyMapIterator();
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("iterator", "iterator", true);
      stack0.add(stringTokenizer0);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<StringTokenizer>) stack0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) uniquePredicate0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      EmptyMapIterator.emptyMapIterator();
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<StringTokenizer>) stack0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) uniquePredicate0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      MapIterator<SQLClientInfoException, Locale> mapIterator0 = IteratorUtils.emptyMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      Predicate<SQLException> predicate1 = AnyPredicate.anyPredicate((Predicate<? super SQLException>[]) predicateArray0);
      Predicate<SQLException> predicate2 = AndPredicate.andPredicate((Predicate<? super SQLException>) predicate1, (Predicate<? super SQLException>) predicate1);
      Predicate<SQLException> predicate3 = OrPredicate.orPredicate((Predicate<? super SQLException>) predicate2, (Predicate<? super SQLException>) predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (Predicate<? super SQLClientInfoException>) predicate3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      Locale locale0 = Locale.PRC;
      SingletonListIterator<Locale> singletonListIterator0 = new SingletonListIterator<Locale>(locale0);
      IteratorUtils.asIterable((Iterator<? extends Locale>) singletonListIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("v/i>N%S6SJ2", (String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("z>h($r\"k}BFM!", (String) null, 4605, sQLIntegrityConstraintViolationException0);
      MockFile mockFile0 = new MockFile("", "z>h($r\"k}BFM!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.printf("z>h($r\"k}BFM!", (Object[]) null);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter0);
      // Undeclared exception!
      try { 
        sQLIntegrityConstraintViolationException1.initCause(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLIntegrityConstraintViolationException: v/i>N%S6SJ2
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MapIterator<TreeSet<DataTruncation>, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<TreeSet<DataTruncation>>) mapIterator0, (Predicate<? super TreeSet<DataTruncation>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      IteratorUtils.toListIterator((Iterator<?>) objectArrayIterator0);
      Iterator<ComparatorPredicate.Criterion>[] iteratorArray0 = (Iterator<ComparatorPredicate.Criterion>[]) Array.newInstance(Iterator.class, 8);
      Iterator<ComparatorPredicate.Criterion> iterator0 = (Iterator<ComparatorPredicate.Criterion>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = iterator0;
      iteratorArray0[2] = iterator0;
      iteratorArray0[3] = iterator0;
      iteratorArray0[4] = iterator0;
      iteratorArray0[5] = iterator0;
      iteratorArray0[6] = iterator0;
      iteratorArray0[7] = iterator0;
      ObjectArrayListIterator<Iterator<ComparatorPredicate.Criterion>> objectArrayListIterator0 = new ObjectArrayListIterator<Iterator<ComparatorPredicate.Criterion>>(iteratorArray0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Iterator<ComparatorPredicate.Criterion>>) objectArrayListIterator0, (Predicate<? super Iterator<ComparatorPredicate.Criterion>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      EmptyMapIterator.emptyMapIterator();
      Stack<StringTokenizer> stack1 = new Stack<StringTokenizer>();
      Iterator<StringTokenizer> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) null, (-697));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0);
      OrderedMapIterator<Boolean, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Boolean>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OrderedIterator<SQLWarning> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.matchesAll((Iterator<SQLWarning>) orderedIterator0, (Predicate<? super SQLWarning>) predicate0);
      TruePredicate.truePredicate();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) singletonIterator0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Locale>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Locale>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      locale_CategoryArray0[1] = locale_Category0;
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicate0, predicate0);
      Predicate<SQLTransientException> predicate1 = new UniquePredicate<SQLTransientException>();
      IteratorUtils.emptyListIterator();
      OrderedMapIterator<Class<SQLIntegrityConstraintViolationException>, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Class<SQLIntegrityConstraintViolationException>, SQLClientInfoException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Class<SQLIntegrityConstraintViolationException>, ? extends SQLClientInfoException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<Class<SQLIntegrityConstraintViolationException>, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Class<SQLIntegrityConstraintViolationException>, SQLClientInfoException>(orderedMapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Class<SQLIntegrityConstraintViolationException>>) abstractOrderedMapIteratorDecorator0, (Predicate<? super Class<SQLIntegrityConstraintViolationException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NotNullPredicate.notNullPredicate();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>();
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) vector0);
      EmptyOrderedIterator.emptyOrderedIterator();
      MapIterator<SQLDataException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLNonTransientException, Object> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientException, ?>) mapIterator0);
      AbstractMapIteratorDecorator<SQLNonTransientException, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientException, Object>(mapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      stack0.elements();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size(orderedMapIterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedMapIterator0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(andPredicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(nullIsTruePredicate0);
      predicateArray1[0] = (Predicate<Object>) notPredicate0;
      Predicate<Object>[] predicateArray2 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray2[0] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) predicateArray2[0]);
      predicateArray2[1] = predicate1;
      predicateArray2[2] = (Predicate<Object>) notPredicate0;
      predicateArray2[3] = (Predicate<Object>) andPredicate0;
      predicateArray2[4] = (Predicate<Object>) andPredicate0;
      predicateArray2[5] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray2);
      predicateArray1[1] = predicate2;
      Predicate<Object> predicate3 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicateArray2[2]);
      predicateArray1[2] = predicate3;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicateArray2[4], notPredicate0);
      predicateArray1[3] = (Predicate<Object>) orPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray1);
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      PredicateTransformer<SQLException> predicateTransformer0 = new PredicateTransformer<SQLException>(predicateArray2[3]);
      Boolean boolean0 = predicateTransformer0.transform((SQLException) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(boolean0, defaultEquator0);
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate4 = ComparatorPredicate.comparatorPredicate((Object) nonePredicate0, comparator0);
      predicateArray0[2] = predicate4;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("w^I%<[^!cS]", "w^I%<[^!cS]", (Throwable) null);
      Predicate<Object> predicate5 = IdentityPredicate.identityPredicate((Object) sQLTransientConnectionException0);
      Predicate<Object> predicate6 = AndPredicate.andPredicate((Predicate<? super Object>) predicate5, (Predicate<? super Object>) predicate3);
      predicateArray0[3] = predicate6;
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>(boolean0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(constantTransformer0);
      predicateArray0[4] = (Predicate<Object>) transformerPredicate0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(predicateArray0, 0, (-1604));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Boolean, SQLFeatureNotSupportedException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Boolean, ? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      Class<Boolean> class0 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) orderedMapIterator1, class0);
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) iterator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<SQLNonTransientException>) null, (Transformer<? super SQLNonTransientException, String>) transformer0, "remove() can only be called once after next()", "wyvFa@bHnW1wkl", "remove() can only be called once after next()");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("List must not be null", "wyvFa@bHnW1wklremove() can only be called once after next()");
      Factory<SQLSyntaxErrorException> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLNonTransientException, SQLSyntaxErrorException> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends SQLSyntaxErrorException>) factory0);
      IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<SQLTimeoutException> stack1 = new Stack<SQLTimeoutException>();
      stack1.elements();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.size((Iterator<?>) null);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientException0, 512, 512);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyListIterator();
      EmptyMapIterator.emptyMapIterator();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class1;
      classArray0[3] = class0;
      classArray0[4] = class0;
      ResettableIterator<Class<SQLIntegrityConstraintViolationException>> resettableIterator0 = IteratorUtils.arrayIterator(classArray0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) resettableIterator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      IteratorUtils.matchesAny((Iterator<Class<SQLIntegrityConstraintViolationException>>) resettableIterator0, (Predicate<? super Class<SQLIntegrityConstraintViolationException>>) nullIsExceptionPredicate0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      Transformer<SQLException, SQLNonTransientException> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, ?>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      Enumeration<SQLTimeoutException> enumeration0 = stack0.elements();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      IteratorUtils.toString(iterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[10];
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      TruePredicate.truePredicate();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[]");
      IteratorUtils.getIterator(iIOMetadataNode0);
      OrderedMapIterator<SQLNonTransientException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientException, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientException, Object>(orderedMapIterator0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 2);
      classArray0[0] = class0;
      classArray0[1] = class1;
      ResettableIterator<Class<SQLIntegrityConstraintViolationException>> resettableIterator0 = IteratorUtils.arrayIterator(classArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[]", "[]");
      IdentityPredicate.identityPredicate((Object) sQLSyntaxErrorException0);
      IteratorUtils.isEmpty(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyListIterator();
      EmptyMapIterator.emptyMapIterator();
      TruePredicate.truePredicate();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(5);
      ListIterator<Integer> listIterator1 = IteratorUtils.singletonListIterator(integer0);
      SkippingIterator<Integer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Integer>) listIterator1, (long) 5);
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) listIterator1, (Iterator<? extends Integer>) skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NotNullPredicate.notNullPredicate();
      MapIterator<Integer, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<Integer, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, SQLException>(mapIterator0);
      IteratorUtils.size(abstractMapIteratorDecorator0);
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("K]?L", "K]?L", 0, (Throwable) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      stack0.elements();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Transformer<? super SQLFeatureNotSupportedException, ?>) transformer0);
      IteratorUtils.size(orderedMapIterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((Throwable) null);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException0;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      stack0.add((SQLTimeoutException) null);
      stack0.elements();
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<Object> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Transformer<? super SQLFeatureNotSupportedException, ?>) transformer0);
      IteratorUtils.size(iterator0);
      IteratorUtils.toListIterator((Iterator<?>) iterator0);
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", "", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 0, sQLTransientConnectionException1);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null, "", (-742), (Throwable) null);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      ObjectArrayListIterator<SQLFeatureNotSupportedException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) objectArrayListIterator0, (-1508L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      stack0.add((SQLTimeoutException) null);
      stack0.elements();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLWarning[]) null, 1884, 1873);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IteratorUtils.toString((Iterator<Integer>) null);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      Predicate<IIOMetadataNode> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super IIOMetadataNode>>) treeSet0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Locale.Category>) objectArrayIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("ListIterator must not be null");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      stack0.add((SQLTimeoutException) null);
      stack0.elements();
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Transformer<? super SQLFeatureNotSupportedException, ?>) transformer0);
      IteratorUtils.size(iterator0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      sQLTimeoutExceptionArray0[0] = null;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutExceptionArray0[0];
      sQLTimeoutExceptionArray0[2] = null;
      sQLTimeoutExceptionArray0[3] = null;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(";&Nd", ";&Nd", 0);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[5] = null;
      sQLTimeoutExceptionArray0[6] = null;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException1;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      Enumeration<SQLTimeoutException> enumeration0 = stack0.elements();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      IteratorUtils.toString(iterator0);
      OrderedMapIterator<SQLNonTransientException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientException, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientException, Object>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Class<SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null, 1919);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.emptyMapIterator();
      NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) predicate0);
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>((SQLTimeoutException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(resettableListIterator0);
      MapIterator<Boolean, IIOMetadataNode> mapIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Boolean, IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      MapIterator<Integer, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<Integer, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, SQLException>(mapIterator0);
      IteratorUtils.size(abstractMapIteratorDecorator0);
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>(arrayDeque0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      Properties properties6 = new Properties();
      Properties[] propertiesArray0 = new Properties[1];
      propertiesArray0[0] = properties3;
      IteratorUtils.arrayListIterator(propertiesArray0, 0);
      IteratorUtils.getIterator(properties2);
      OrderedMapIterator<SQLNonTransientException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientException, Object> abstractMapIteratorDecorator1 = new AbstractMapIteratorDecorator<SQLNonTransientException, Object>(orderedMapIterator0);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 9);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      classArray0[0] = class0;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      classArray0[1] = class1;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      classArray0[2] = class2;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      classArray0[3] = class3;
      Class<SQLIntegrityConstraintViolationException> class4 = SQLIntegrityConstraintViolationException.class;
      classArray0[4] = class4;
      Class<SQLIntegrityConstraintViolationException> class5 = SQLIntegrityConstraintViolationException.class;
      classArray0[5] = class5;
      Class<SQLIntegrityConstraintViolationException> class6 = SQLIntegrityConstraintViolationException.class;
      classArray0[6] = class6;
      Class<SQLIntegrityConstraintViolationException> class7 = SQLIntegrityConstraintViolationException.class;
      classArray0[7] = class7;
      Class<SQLIntegrityConstraintViolationException> class8 = SQLIntegrityConstraintViolationException.class;
      classArray0[8] = class8;
      ResettableIterator<Class<SQLIntegrityConstraintViolationException>> resettableIterator0 = IteratorUtils.arrayIterator(classArray0);
      IteratorUtils.matchesAny((Iterator<Class<SQLIntegrityConstraintViolationException>>) resettableIterator0, (Predicate<? super Class<SQLIntegrityConstraintViolationException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      OrderedMapIterator<SQLRecoverableException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, IIOMetadataNode>(orderedMapIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.toString(iterator0);
      Hashtable<DataTruncation, Predicate<Object>> hashtable0 = new Hashtable<DataTruncation, Predicate<Object>>();
      EntrySetMapIterator<DataTruncation, Predicate<Object>> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, Predicate<Object>>(hashtable0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<DataTruncation>) entrySetMapIterator0, (Transformer<? super DataTruncation, String>) transformer0, "[[sJ[", "", "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      NotNullPredicate.notNullPredicate();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>();
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) vector0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      int int0 = (-1370);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, (-1370));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[4];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<StringTokenizer, SQLInvalidAuthorizationSpecException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<StringTokenizer>) mapIterator0;
      iteratorArray0[1] = (Iterator<StringTokenizer>) mapIterator0;
      iteratorArray0[2] = (Iterator<StringTokenizer>) mapIterator0;
      Iterator<StringTokenizer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>[]) iteratorArray0);
      Iterator<StringTokenizer> iterator1 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>) mapIterator0, (Iterator<? extends StringTokenizer>) iterator0);
      OrderedMapIterator<SQLTransactionRollbackException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLTransactionRollbackException, SQLTimeoutException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLTransactionRollbackException, ? extends SQLTimeoutException>) orderedMapIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) mapIterator1);
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, 359);
      StringTokenizer stringTokenizer0 = new StringTokenizer("[", "n\u0005g--_^;v1");
      Factory<StringTokenizer> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, StringTokenizer> factoryTransformer0 = new FactoryTransformer<Object, StringTokenizer>(factory0);
      Iterator<StringTokenizer> iterator2 = IteratorUtils.objectGraphIterator(stringTokenizer0, (Transformer<? super StringTokenizer, ? extends StringTokenizer>) factoryTransformer0);
      Iterator<StringTokenizer> iterator3 = IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>) iterator1, (Iterator<? extends StringTokenizer>) iterator2);
      // Undeclared exception!
      try { 
        IteratorUtils.isEmpty(iterator3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      OrderedMapIterator<SQLRecoverableException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, IIOMetadataNode>(orderedMapIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.toString(iterator0);
      Hashtable<DataTruncation, Predicate<Object>> hashtable0 = new Hashtable<DataTruncation, Predicate<Object>>();
      EntrySetMapIterator<DataTruncation, Predicate<Object>> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, Predicate<Object>>(hashtable0);
      StringValueTransformer.stringValueTransformer();
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", mockThrowable0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLFeatureNotSupportedException0);
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0, false);
      IteratorUtils.peekingIterator((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0);
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0, 1116);
      IteratorUtils.isEmpty(iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      MapIterator<SQLWarning, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>();
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) vector0);
      EmptyOrderedIterator.emptyOrderedIterator();
      EmptyMapIterator.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      IteratorUtils.matchesAll((Iterator<Properties>) singletonIterator0, (Predicate<? super Properties>) notPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      MapIterator<Integer, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<Integer, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, SQLException>(mapIterator0);
      IteratorUtils.size(abstractMapIteratorDecorator0);
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>();
      EmptyOrderedIterator.emptyOrderedIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(abstractMapIteratorDecorator0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties[] propertiesArray0 = new Properties[9];
      propertiesArray0[0] = properties2;
      propertiesArray0[1] = properties1;
      propertiesArray0[2] = properties0;
      propertiesArray0[3] = properties0;
      propertiesArray0[4] = properties2;
      propertiesArray0[5] = properties2;
      propertiesArray0[6] = properties1;
      Properties properties3 = new Properties();
      Properties properties4 = new Properties(properties3);
      propertiesArray0[7] = properties4;
      propertiesArray0[8] = properties1;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      InvokerTransformer.invokerTransformer("_@*Wj'A3W;&S366]H@&");
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      Predicate<Object> predicate2 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.constantTransformer(iIOMetadataNode0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(transformedPredicate0);
      IteratorUtils.matchesAll((Iterator<Properties>) objectArrayListIterator0, (Predicate<? super Properties>) predicate2);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer> iterator0 = null;
      Comparator<SQLInvalidAuthorizationSpecException> comparator1 = (Comparator<SQLInvalidAuthorizationSpecException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLInvalidAuthorizationSpecException, ? extends SQLTransientException>) orderedMapIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator1, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator1, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>) null, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      OrderedMapIterator<SQLRecoverableException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, IIOMetadataNode>(orderedMapIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.toString(iterator0);
      Hashtable<DataTruncation, Predicate<Object>> hashtable0 = new Hashtable<DataTruncation, Predicate<Object>>();
      EntrySetMapIterator<DataTruncation, Predicate<Object>> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, Predicate<Object>>(hashtable0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<DataTruncation>) entrySetMapIterator0, (Transformer<? super DataTruncation, String>) transformer0, "[[sJ[", "org.apache.commons.collections4.iterators.ObjectGraphIterator", "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedMapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0, (Iterator<? extends String>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) zippingIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NotNullPredicate.notNullPredicate();
      MapIterator<Integer, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<Integer, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, SQLException>(mapIterator0);
      IteratorUtils.size(abstractMapIteratorDecorator0);
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>();
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) vector0);
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(abstractMapIteratorDecorator0);
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) identityPredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) orderedIterator0, (Predicate<? super StringTokenizer>) identityPredicate0);
      MapIterator<SQLDataException, SQLNonTransientException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLNonTransientException, Object> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLNonTransientException, ?>) mapIterator1);
      AbstractMapIteratorDecorator<SQLNonTransientException, Object> abstractMapIteratorDecorator1 = new AbstractMapIteratorDecorator<SQLNonTransientException, Object>(mapIterator2);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) abstractMapIteratorDecorator1, (Predicate<? super SQLNonTransientException>) predicate0);
      IteratorUtils.isEmpty(mapIterator1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      Enumeration<SQLTimeoutException> enumeration0 = stack0.elements();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      IteratorUtils.toString(iterator0);
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator1, (Transformer<? super SQLFeatureNotSupportedException, ?>) transformer0);
      IteratorUtils.size(orderedMapIterator1);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicate0, predicate0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLTransientException>) predicate0);
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) objectArrayListIterator0, (Predicate<? super SQLTransientException>) andPredicate0);
      IteratorUtils.contains((Iterator<Iterator<Transformer<Object, String>>>) null, (Object) listIterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientException0);
      sQLTransientException0.addSuppressed(sQLTransactionRollbackException0);
      sQLExceptionArray0[0] = (SQLException) sQLTransactionRollbackException0;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0, 0);
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[java.sql.SQLTransactionRollbackException: java.sql.SQLTransientException]");
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      sQLTransientException0.getStackTrace();
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 0);
      IteratorUtils.getIterator("[java.sql.SQLTransactionRollbackException: java.sql.SQLTransientException]");
      IteratorUtils.unmodifiableIterator((Iterator<PriorityQueue<Stack>>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 1664, 1664);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("Array class must not be null", "Array class must not be null", true);
      Predicate<Object> predicate0 = null;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      OrderedMapIterator<StringTokenizer, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) orderedMapIterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      stack0.elements();
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) null, (Predicate<? super StringTokenizer>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      Enumeration<SQLTimeoutException> enumeration0 = stack0.elements();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayDeque<StringTokenizer> arrayDeque0 = new ArrayDeque<StringTokenizer>();
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>(arrayDeque0);
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(arrayList0);
      IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>) reverseListIterator0, (Iterator<? extends StringTokenizer>) reverseListIterator0);
      IteratorUtils.toArray(iterator0);
      int int0 = (-2528);
      String string0 = "MC";
      int int1 = 123;
      SQLException sQLException0 = new SQLException("MC", "MC", 123);
      SQLWarning sQLWarning0 = new SQLWarning("MC", sQLException0);
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) sQLWarning0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(resettableListIterator0);
      listIteratorWrapper0.previousIndex();
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) listIteratorWrapper0, 1873);
      IteratorUtils.isEmpty(resettableListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      EmptyMapIterator.emptyMapIterator();
      Iterator<SQLSyntaxErrorException> iterator0 = null;
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      Transformer<Object, SQLTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("");
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate1);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(transformedPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Properties>) objectArrayListIterator0, (Predicate<? super Properties>) notPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.Properties' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("KME =\"w@ujO", "KME =\"w@ujO", 0, batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLNonTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLNonTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("KME =\"w@ujO", "");
      sQLTimeoutException1.fillInStackTrace();
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException((String) null, "", sQLTimeoutException1);
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException((Throwable) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>(hashSet0);
      IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) priorityQueue0);
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException();
      OrderedMapIterator<DataTruncation, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) orderedMapIterator0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) listIterator0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Iterator<SQLWarning> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0, (Collection<? super SQLWarning>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLWarning>) iterator0, 451L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OrderedIterator<SQLWarning> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<SQLWarning>) orderedIterator0, (Predicate<? super SQLWarning>) predicate0);
      MapIterator<Integer, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<Integer, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, SQLException>(mapIterator0);
      IteratorUtils.size(mapIterator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("zQa/(Rnq8Mk!3|", (Map<String, ClientInfoStatus>) null);
      TruePredicate.truePredicate();
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) vector0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EmptyOrderedIterator.emptyOrderedIterator();
      ListIterator<Vector<SQLInvalidAuthorizationSpecException>> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<Vector<SQLInvalidAuthorizationSpecException>> listIterator1 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator1);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<SQLInvalidAuthorizationSpecException>>) listIterator0, (Transformer<? super Vector<SQLInvalidAuthorizationSpecException>, String>) transformer0, "G=&\u0005v%", (String) null, "transformer may not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientException0);
      sQLTransientException0.addSuppressed(sQLTransactionRollbackException0);
      SQLTransientException sQLTransientException1 = new SQLTransientException("t]8^qxD-", "%D~x<L1z9)?[M]cOD", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientException1, (-2598));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(resettableListIterator0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) listIteratorWrapper0, 1873);
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>(list0);
      IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) priorityQueue0);
      MapIterator<SQLWarning, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      Hashtable<String, SQLException> hashtable0 = new Hashtable<String, SQLException>();
      EntrySetMapIterator<String, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLException>(hashtable0);
      iteratorArray0[0] = (Iterator<String>) entrySetMapIterator0;
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      iteratorArray0[1] = (Iterator<String>) singletonIterator0;
      Iterator<String> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends String>) singletonIterator0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) singletonIterator0, (Iterator<? extends String>) iterator0);
      iteratorArray0[2] = (Iterator<String>) zippingIterator0;
      SkippingIterator<String> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<String>) entrySetMapIterator0, 0L);
      iteratorArray0[3] = (Iterator<String>) skippingIterator0;
      Iterator<String> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      BoundedIterator<String> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends String>) iterator1, 604L);
      SingletonIterator<String> singletonIterator1 = new SingletonIterator<String>((String) null);
      IteratorUtils.zippingIterator((Iterator<? extends String>) boundedIterator0, (Iterator<? extends String>) iteratorArray0[1], (Iterator<? extends String>) singletonIterator1);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyListIterator();
      EmptyMapIterator.emptyMapIterator();
      TruePredicate.truePredicate();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "";
      Comparator<StringTokenizer> comparator0 = null;
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 1);
      StringTokenizer stringTokenizer0 = new StringTokenizer("[Cb?9xQ", (String) null);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator(stringTokenizer0);
      iteratorArray0[0] = (Iterator<StringTokenizer>) listIterator0;
      Iterator<StringTokenizer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) iterator0, 109L, (-3L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Closure must not be null", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("(Kg}#XS", "", (-2122), sQLWarning0);
      Hashtable<Object, SQLTransactionRollbackException> hashtable0 = new Hashtable<Object, SQLTransactionRollbackException>();
      Transformer<SQLException, SQLTransactionRollbackException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends SQLTransactionRollbackException>) hashtable0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransactionRollbackException>) iterator0);
      Transformer<SQLTransientException, InstanceofPredicate> transformer1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, (Transformer<? super SQLTransactionRollbackException, ? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      Enumeration<SQLTimeoutException> enumeration0 = stack0.elements();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      IteratorUtils.toString(iterator0);
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator1, (Transformer<? super SQLFeatureNotSupportedException, ?>) transformer0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties[] propertiesArray0 = new Properties[1];
      propertiesArray0[0] = properties0;
      IteratorUtils.arrayListIterator(propertiesArray0, 0);
      IteratorUtils.getIterator(properties0);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 3);
      // Undeclared exception!
      try { 
        TransformerPredicate.transformerPredicate((Transformer<? super SQLException, Boolean>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The transformer to call must not be null
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(resettableListIterator0);
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) listIteratorWrapper0, 1873);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(listIteratorWrapper0, comparator0, comparatorPredicate_Criterion0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = (Predicate<Object>) nullIsTruePredicate0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-719)).when(comparator1).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion1 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) sQLTransactionRollbackException0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion1);
      predicateArray0[3] = predicate1;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = (Predicate<Object>) nullIsTruePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate1 = new NullIsTruePredicate<Object>(predicate1);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLTransactionRollbackException0);
      Predicate<SQLWarning> predicate2 = NonePredicate.nonePredicate((Predicate<? super SQLWarning>[]) predicateArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(predicate2, (Equator<Object>) null);
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) allPredicate1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      MapIterator<EnumSet<Locale.Category>, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) mapIterator0, 11);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      OrderedIterator<SQLWarning> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<SQLWarning>) orderedIterator0, (Predicate<? super SQLWarning>) predicate0);
      MapIterator<Integer, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<Integer, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, SQLException>(mapIterator0);
      IteratorUtils.size(abstractMapIteratorDecorator0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Iterator getKey() can only be called after next() and before remove()", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("b3LR&k,2I]^:@", "transformer may not be null", 726, (Map<String, ClientInfoStatus>) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("b3LR&k,2I]^:@", "NNi@", sQLClientInfoException1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("NNi@", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("b3LR&k,2I]^:@");
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException2;
      IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException0 = new SQLDataException("EIn8B", "NNi@", sQLTransactionRollbackException2);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("transformer may not be null", "transformer may not be null", sQLTransactionRollbackException2);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException(sQLTransactionRollbackException2);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("NNi@", "EIn8B", 0, sQLDataException0);
      sQLDataExceptionArray0[3] = sQLDataException3;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      InvokerTransformer<SQLDataException, String> invokerTransformer0 = new InvokerTransformer<SQLDataException, String>((String) null, (Class<?>[]) null, sQLDataExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) objectArrayListIterator0, (Transformer<? super SQLDataException, String>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Hashtable<SQLRecoverableException, IIOMetadataNode> hashtable0 = new Hashtable<SQLRecoverableException, IIOMetadataNode>();
      Properties[] propertiesArray0 = new Properties[2];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      ObjectArrayIterator<Properties> objectArrayIterator0 = new ObjectArrayIterator<Properties>(propertiesArray0);
      IteratorUtils.size(objectArrayIterator0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Iterator<Integer> iterator0 = arrayDeque0.iterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) arrayDeque0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      String string0 = "U";
      String string1 = "KME =\"w@ujO";
      int int0 = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("KME =\"w@ujO", "KME =\"w@ujO", 0, batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("U", sQLNonTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("U", sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("KME =\"w@ujO", "U");
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException1;
      Throwable throwable0 = null;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException((Throwable) null);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException2;
      TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("KME =\"w@ujO", "KME =\"w@ujO", 0, batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLNonTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLNonTransientConnectionException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("KME =\"w@ujO", "");
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException((String) null, "", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException((Throwable) null);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicate0, predicate0);
      Predicate<SQLTransientException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLTransientException>) andPredicate0);
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) objectArrayListIterator0, (Predicate<? super SQLTransientException>) predicate1);
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) vector0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("P$\"6%qR#R~a2C%`T3", sQLTimeoutException1);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0);
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(listIterator0);
      Predicate<Object> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) identityPredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) orderedIterator0, (Predicate<? super StringTokenizer>) predicate2);
      ListIterator<Vector<SQLInvalidAuthorizationSpecException>> listIterator1 = EmptyListIterator.emptyListIterator();
      ListIterator<Vector<SQLInvalidAuthorizationSpecException>> listIterator2 = IteratorUtils.unmodifiableListIterator(listIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<SQLInvalidAuthorizationSpecException>>) listIterator2, (Transformer<? super Vector<SQLInvalidAuthorizationSpecException>, String>) null, "KME =\"w@ujO", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      int int0 = (-2093);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.emptyListIterator();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "0{AS)Ec,k'o", (-1163));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("%zr0cZ", sQLFeatureNotSupportedException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, (-1163), 75);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("KME =\"w@ujO", "KME =\"w@ujO", 0, batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLNonTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLNonTransientException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("KME =\"w@ujO", "");
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException((Throwable) null);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicate0, predicate0);
      Predicate<SQLTransientException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLTransientException>) andPredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) objectArrayListIterator0, (Predicate<? super SQLTransientException>) predicate1);
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<BatchUpdateException>) vector0);
      IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) resettableListIterator0, 0L, 0L);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("P$=\"6%qR#R~a2C%`T3", sQLTimeoutException1);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      Enumeration<SQLRecoverableException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLRecoverableException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) enumeration0);
      HashMap<String, SQLException> hashMap0 = new HashMap<String, SQLException>();
      EntrySetMapIterator<String, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<String, SQLException>(hashMap0);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) entrySetMapIterator0);
      IteratorUtils.loopingListIterator(list0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(resettableListIterator0);
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) listIteratorWrapper0, 1873);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(listIteratorWrapper0, comparator0, comparatorPredicate_Criterion0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = (Predicate<Object>) nullIsTruePredicate0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion1 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) sQLTransactionRollbackException0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion1);
      predicateArray0[3] = predicate1;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = (Predicate<Object>) nullIsTruePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      NullIsTruePredicate<Object> nullIsTruePredicate1 = new NullIsTruePredicate<Object>(predicate1);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLTransactionRollbackException0);
      Predicate<SQLWarning> predicate2 = NonePredicate.nonePredicate((Predicate<? super SQLWarning>[]) predicateArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(predicate2, (Equator<Object>) null);
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) allPredicate1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("^GcAK18dy{'2");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 5);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableIterator0;
      iteratorArray0[1] = (Iterator<DataTruncation>) resettableIterator0;
      iteratorArray0[2] = (Iterator<DataTruncation>) resettableIterator0;
      iteratorArray0[3] = (Iterator<DataTruncation>) resettableIterator0;
      iteratorArray0[4] = (Iterator<DataTruncation>) resettableIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("KME =\"w@ujO", "KME =\"w@ujO", 0, batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLNonTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLNonTransientException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("KME =\"w@ujO", "");
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.emptyOrderedIterator();
      SQLDataException sQLDataException0 = new SQLDataException("");
      IteratorUtils.getIterator(sQLDataException0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      int int0 = 1664;
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      Properties properties6 = new Properties();
      Properties properties7 = new Properties();
      Properties properties8 = new Properties();
      Properties[] propertiesArray0 = new Properties[3];
      propertiesArray0[0] = properties1;
      propertiesArray0[1] = properties3;
      propertiesArray0[2] = properties4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 1664);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("^GcAKZ1{'2");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      OrderedMapIterator<Integer, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedMapIterator0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      objectArrayIterator0.reset();
      IteratorUtils.toListIterator((Iterator<?>) objectArrayIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Locale>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(":&(JbO${n92V^;+", "KME =\"w@ujO", (-2210), batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("KME =\"w@ujO", sQLNonTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("^GcAKZ1{'2", (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("delimiter may not be null", sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(":&(JbO${n92V^;+", "K(1Q>*C^1ZLQ");
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException(sQLTimeoutException1);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException1;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicate0, predicate0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLTransientException>) predicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) objectArrayListIterator0, (Predicate<? super SQLTransientException>) andPredicate0);
      IteratorUtils.toString((Iterator<StringTokenizer>) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientException0);
      sQLTransientException0.addSuppressed(sQLTransactionRollbackException0);
      sQLExceptionArray0[0] = (SQLException) sQLTransactionRollbackException0;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0, 0);
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[java.sql.SQLTransactionRollbackException: java.sql.SQLTransientException]");
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      IteratorUtils.arrayListIterator(propertiesArray0, 0);
      IteratorUtils.getIterator("[java.sql.SQLTransactionRollbackException: java.sql.SQLTransientException]");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 1664, 1664);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Hashtable<SQLRecoverableException, IIOMetadataNode> hashtable0 = new Hashtable<SQLRecoverableException, IIOMetadataNode>();
      EntrySetMapIterator<SQLRecoverableException, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, IIOMetadataNode>(hashtable0);
      MapIterator<SQLRecoverableException, IIOMetadataNode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, IIOMetadataNode>) entrySetMapIterator0);
      IteratorUtils.isEmpty(mapIterator0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.getIterator(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("KME =\"w@ujO", "KME =\"w@ujO", 0, batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLNonTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLNonTransientException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1, 1873);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ResettableIterator<ArrayDeque<SQLIntegrityConstraintViolationException>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<ArrayDeque<SQLIntegrityConstraintViolationException>>) resettableIterator0, (Transformer<? super ArrayDeque<SQLIntegrityConstraintViolationException>, String>) transformer0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[]", sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[]", "[]", sQLFeatureNotSupportedException0);
      int int0 = 0;
      int int1 = (-117);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0, 0, (-117));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IteratorUtils.singletonIterator((SQLDataException) null);
      Stack<Iterator<SQLTimeoutException>> stack0 = new Stack<Iterator<SQLTimeoutException>>();
      ReverseListIterator<Iterator<SQLTimeoutException>> reverseListIterator0 = new ReverseListIterator<Iterator<SQLTimeoutException>>(stack0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[6];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("V");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("V", "", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("C}6Dqp", "Y;ZL$h~Qal:U", 1837);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException((String) null, "hv)RR+ VnSb)(", (-663));
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException(sQLTimeoutException3);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 1837);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "";
      int int0 = (-2848);
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException("", "", (-2848), sQLException0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) singletonListIterator0, (Predicate<? super SQLDataException>) predicate0);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends BatchUpdateException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<IIOMetadataNode, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<IIOMetadataNode, BatchUpdateException>(orderedMapIterator1);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) abstractOrderedMapIteratorDecorator0;
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(arrayList0);
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) loopingIterator0;
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) orderedIterator0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      String string0 = "o*jPB98s7T*9\"+";
      String string1 = "3Crv4f/&myS";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(string0, string1, sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      Enumeration<SQLTimeoutException> enumeration0 = stack0.elements();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      IteratorUtils.toString(iterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, true, false, 864, 0);
      dataTruncationArray0[1] = dataTruncation1;
      SQLDataException sQLDataException0 = new SQLDataException("1W>tWF]+{-_", "", 0, dataTruncation0);
      DataTruncation dataTruncation2 = new DataTruncation(2889, false, false, 0, 1530, sQLDataException0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(4, false, false, 0, 1530);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(0, false, false, 1530, 1071);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-159), true, false, 4, 0);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(16, true, false, 864, 1668);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(864, true, true, 1735, (-1));
      dataTruncationArray0[7] = dataTruncation7;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0, 0, 0);
      IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Iterator<SQLTransactionRollbackException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NotNullPredicate.notNullPredicate();
      MapIterator<Integer, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<Integer, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, SQLException>(mapIterator0);
      IteratorUtils.size(abstractMapIteratorDecorator0);
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>(arrayDeque0);
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) vector0);
      OrderedIterator<StringTokenizer> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>("Iterator getKey() can only be called after next() and before remove()");
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredIterator((Iterator<? extends StringTokenizer>) orderedIterator0, (Predicate<? super StringTokenizer>) predicate0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(predicateTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) transformerPredicate0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Iterator> class0 = Iterator.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) instanceofPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ResettableListIterator<HashSet<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      int int0 = 737;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<HashSet<SQLInvalidAuthorizationSpecException>>) resettableListIterator0, 737);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 737
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MapIterator<EnumSet<Locale.Category>, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends EnumSet<Locale.Category>>) mapIterator0, (-1604));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientException0);
      sQLExceptionArray0[0] = (SQLException) sQLTransactionRollbackException0;
      int int0 = 0;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0, 0);
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[java.sql.SQLTransactionRollbackException: java.sql.SQLTransientException]");
      int int1 = 1664;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 1664, 1664);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      ServiceLoader<SQLFeatureNotSupportedException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      IteratorUtils.singletonListIterator((ServiceLoader<ServiceLoader>) serviceLoader0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 2);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      String string0 = "";
      SQLTransientException sQLTransientException0 = new SQLTransientException("4#BdA*zB4|600");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "v$#9qY4RO%%mW", 650, sQLTransientException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "", (-1259), batchUpdateException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLTimeoutException1);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("", "4#BdA*zB4|600", (-1259));
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0, 0);
      // Undeclared exception!
      try { 
        objectArrayIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() method is not supported for an ObjectArrayIterator
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientException0);
      SQLTransientException sQLTransientException1 = new SQLTransientException("gQ@N|%4}bp,<", sQLRecoverableException0);
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransientException1);
      IteratorUtils.peekingIterator((Iterator<? extends SQLTransientException>) listIterator0);
      IteratorUtils.size(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Yd+,)FD56Zxah*");
      Node node0 = iIOMetadataNode0.cloneNode(true);
      IteratorUtils.nodeListIterator(node0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      int int0 = (-1446);
      iIOMetadataNode0.getPreviousSibling();
      iIOMetadataNode0.item((-1446));
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(resettableListIterator0);
      int int0 = 1873;
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) listIteratorWrapper0, 1873);
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>(list0);
      IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      SingletonIterator<Locale.Category> singletonIterator0 = new SingletonIterator<Locale.Category>(locale_Category0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.Category>) singletonIterator0, (-2055L), (-2055L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("^GcAKZ1{'2");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("^GcAKZ1{'2");
      IteratorUtils.nodeListIterator(nodeList0);
      Iterator<StringTokenizer> iterator0 = null;
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) null, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.size(resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("^GcAKZ1{'2");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) null, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(resettableListIterator0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) listIteratorWrapper0, 1873);
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>(list0);
      IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) priorityQueue0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 1873, 1873);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 758, (-572));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("^GcAKZ1{'2");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.getIterator((Object) null);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[1];
      SQLWarning sQLWarning0 = new SQLWarning("", "org.apache.commons.collections4.iterators.BoundedIterator", 1);
      sQLWarningArray0[0] = sQLWarning0;
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.arrayIterator(sQLWarningArray0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "";
      String string1 = "KME =\"w@ujO";
      int int0 = (-20);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("KME =\"w@ujO", "KME =\"w@ujO", (-20), batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLNonTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("KME =\"w@ujO", "");
      Throwable throwable0 = sQLTimeoutException0.fillInStackTrace();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((Throwable) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      sQLTimeoutExceptionArray0[0] = (SQLTimeoutException) throwable0;
      sQLTimeoutExceptionArray0[1] = (SQLTimeoutException) throwable0;
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[4] = (SQLTimeoutException) throwable0;
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException0;
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException1;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      String string2 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", sQLTimeoutException0);
      SingletonIterator<SQLFeatureNotSupportedException> singletonIterator0 = new SingletonIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0, false);
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) singletonIterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      int int1 = 14;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      String string3 = null;
      String string4 = "delimiter may not be null";
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, "KME =\"w@ujO", "delimiter may not be null", 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>();
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      vector0.iterator();
      IteratorUtils.loopingListIterator((List<BatchUpdateException>) vector0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[2];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, " '*E]g';s_", 10);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLNonTransientException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      TruePredicate.truePredicate();
      Hashtable<SQLFeatureNotSupportedException, LinkedHashSet<Properties>> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, LinkedHashSet<Properties>>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, LinkedHashSet<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, LinkedHashSet<Properties>>(hashtable0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      IteratorUtils.find(iterator0, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      int int0 = 14;
      IteratorUtils.find((Iterator<LinkedHashSet<StringTokenizer>>) null, (Predicate<? super LinkedHashSet<StringTokenizer>>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1652), 592);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      Enumeration<SQLTimeoutException> enumeration0 = stack0.elements();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      IteratorUtils.toString(iterator0);
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator1, (Transformer<? super SQLFeatureNotSupportedException, ?>) transformer0);
      IteratorUtils.size(orderedMapIterator1);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Predicate<SQLException> predicate0 = TruePredicate.truePredicate();
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator1, (Predicate<? super SQLFeatureNotSupportedException>) predicate0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 14, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator0);
      int int0 = (-1324);
      SQLTransientException sQLTransientException0 = new SQLTransientException("NodeList must not be null", "NodeList must not be null", (-1324));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Entry does not exist: ", "org.apache.commons.collections4.map.AbstractIterableMap", sQLTransientException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("");
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      predicateArray0[0] = (Predicate<Object>) transformerPredicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicateArray0[0]);
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(listIterator0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[2] = (Predicate<Object>) comparatorPredicate0;
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      predicateArray0[3] = (Predicate<Object>) nullIsTruePredicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[4] = (Predicate<Object>) uniquePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[5] = (Predicate<Object>) allPredicate0;
      NullIsTruePredicate<Object> nullIsTruePredicate1 = new NullIsTruePredicate<Object>(predicateArray0[4]);
      predicateArray0[6] = (Predicate<Object>) nullIsTruePredicate1;
      SQLDataException sQLDataException0 = new SQLDataException("Entry does not exist: ", sQLTransientException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLDataException0, (Equator<Object>) null);
      predicateArray0[7] = (Predicate<Object>) equalPredicate0;
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[8] = (Predicate<Object>) allPredicate1;
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      OrderedMapIterator<ComparatorPredicate.Criterion, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      ListIterator<IIOMetadataNode> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.hasNext());
      assertNotNull(listIterator1);
      
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLInvalidAuthorizationSpecException>) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      assertEquals(1, predicateArray0.length);
      assertNotNull(allPredicate0);
      
      boolean boolean0 = uniquePredicate0.evaluate(allPredicate0);
      assertEquals(1, predicateArray0.length);
      assertTrue(boolean0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(uniquePredicate0);
      assertNotNull(iterator0);
      
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) resettableListIterator0;
      Iterator<SQLTransientException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLTransientException>) null, (Iterator<? extends SQLTransientException>[]) iteratorArray0);
      assertEquals(1, iteratorArray0.length);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Locale.Category> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>[]) iteratorArray0);
      assertEquals(0, iteratorArray0.length);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Hashtable<SQLRecoverableException, IIOMetadataNode> hashtable0 = new Hashtable<SQLRecoverableException, IIOMetadataNode>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      EntrySetMapIterator<SQLRecoverableException, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, IIOMetadataNode>(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(entrySetMapIterator0);
      
      MapIterator<SQLRecoverableException, IIOMetadataNode> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLRecoverableException, IIOMetadataNode>) entrySetMapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(mapIterator0);
      
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(boolean0);
      
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode((String) null);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode1);
      
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode2.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode2);
      
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode((String) null);
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode3.equals((Object)iIOMetadataNode0));
      assertNotNull(iIOMetadataNode3);
      
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode1));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode4.equals((Object)iIOMetadataNode2));
      assertNotNull(iIOMetadataNode4);
      
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode0));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode3));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode2));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode4));
      assertFalse(iIOMetadataNode5.equals((Object)iIOMetadataNode1));
      assertNotNull(iIOMetadataNode5);
      
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((InstanceofPredicate[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>) orderedIterator0, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      OrderedIterator<SQLIntegrityConstraintViolationException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Iterator<StringTokenizer> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<StringTokenizer>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ResettableListIterator<EnumSet<Locale.Category>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Iterator<Object> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0, (Transformer<? super SQLFeatureNotSupportedException, ?>) transformer0);
      assertNotNull(iterator0);
      
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[1];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientException0);
      sQLTransientException0.addSuppressed(sQLTransactionRollbackException0);
      sQLExceptionArray0[0] = (SQLException) sQLTransactionRollbackException0;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.arrayIterator(sQLExceptionArray0, 0);
      IteratorUtils.toString((Iterator<SQLException>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[java.sql.SQLTransactionRollbackException: java.sql.SQLTransientException]");
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      Predicate<SQLTransientException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLTransientException>) predicate0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientException>) resettableListIterator0, (Predicate<? super SQLTransientException>) predicate1);
      ResettableIterator<DataTruncation> resettableIterator1 = IteratorUtils.emptyIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator1, (Iterator<? extends DataTruncation>) resettableIterator1);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) zippingIterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) listIterator0);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 2);
      SQLDataException sQLDataException0 = new SQLDataException("SF6N<#Z{=6U]]4]", ":L8}*");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[1] = integer1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, 149, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }
}
