/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:20:29 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      sQLTransientConnectionException0.getStackTrace();
      IteratorUtils.get((Iterator<HashSet<ServiceLoader>>) singletonListIterator0, 0);
      IteratorUtils.unmodifiableListIterator((ListIterator<HashSet<LinkedHashSet>>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "Iterator must not be null.");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 100, sQLFeatureNotSupportedException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("uZC)]n%:}om?v`A-;\"`", "uZC)]n%:}om?v`A-;\"`", 100, batchUpdateException0);
      Transformer<SQLTransientConnectionException, SQLTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      OrderedMapIterator<Properties, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends Properties>) orderedMapIterator0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<?>) resettableListIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Properties properties0 = new Properties();
      Transformer<Properties, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 5);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", (-842));
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "");
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 1, (-842));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = new Object();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Closure must not be null");
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 6);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      classArray0[0] = class0;
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      classArray0[1] = class1;
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      classArray0[2] = class2;
      Class<SQLTimeoutException> class3 = SQLTimeoutException.class;
      classArray0[3] = class3;
      Class<SQLTimeoutException> class4 = SQLTimeoutException.class;
      classArray0[4] = class4;
      Class<SQLTimeoutException> class5 = SQLTimeoutException.class;
      classArray0[5] = class5;
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("Closure must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<HashSet<ServiceLoader>>) iterator0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Closure must not be null' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) mapIterator0, class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, 10, sQLTransientConnectionException0);
      InvokerTransformer<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> invokerTransformer0 = new InvokerTransformer<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException>((String) null, (Class<?>[]) null, sQLTransientConnectionExceptionArray0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<LinkedList<Stack>>) singletonListIterator0, (Predicate<? super LinkedList<Stack>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>((SQLTransientConnectionException) null);
      IteratorUtils.get((Iterator<HashSet<ServiceLoader>>) singletonListIterator0, 0);
      LinkedList<SQLNonTransientException> linkedList0 = new LinkedList<SQLNonTransientException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.AndPredicate");
      linkedList0.add((SQLNonTransientException) sQLIntegrityConstraintViolationException0);
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLNonTransientException>) linkedList0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLNonTransientException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      int int0 = 0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dn[E5=lTPwe]Y,(mn");
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0);
      IteratorUtils.get((Iterator<SQLRecoverableException>) resettableListIterator0, 0);
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(linkedHashSet0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", 1073741821);
      linkedHashSet0.add(sQLTransientConnectionException0);
      loopingIterator0.reset();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "Dn[E5=lTPwe]Y,(mn");
      sQLTransientConnectionException1.getStackTrace();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dn[E5=lTPwe]Y,(mn");
      linkedHashSet0.add(sQLTransientConnectionException1);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) loopingIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashMap$LinkedHashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dn[E5=lTPwe]Y,(mn");
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0);
      IteratorUtils.get((Iterator<SQLRecoverableException>) resettableListIterator0, 0);
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(linkedHashSet0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      linkedHashSet0.add(sQLTransientConnectionException0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) loopingIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ListIterator<SQLDataException> listIterator0 = EmptyListIterator.emptyListIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer0 = ConstantTransformer.nullTransformer();
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends SQLIntegrityConstraintViolationException>) transformer0, (Transformer<? super Object, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) listIterator0, (Transformer<? super SQLDataException, ? extends SQLIntegrityConstraintViolationException>) transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends Class<IIOMetadataNode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<Vector<BatchUpdateException>> linkedList0 = new LinkedList<Vector<BatchUpdateException>>();
      LinkedList<Vector<BatchUpdateException>> linkedList1 = new LinkedList<Vector<BatchUpdateException>>();
      String string0 = "";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      int[] intArray0 = new int[2];
      intArray0[0] = (-1452);
      intArray0[1] = (-1452);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("F", "F", (-1452), intArray0, sQLRecoverableException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("F", "F", (-1452), batchUpdateException0);
      sQLFeatureNotSupportedException0.fillInStackTrace();
      ConstantTransformer.constantTransformer((SQLNonTransientException) sQLFeatureNotSupportedException0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(batchUpdateException0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("");
      IfTransformer<SQLDataException, String> ifTransformer0 = new IfTransformer<SQLDataException, String>(equalPredicate0, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) null, (Transformer<? super SQLDataException, String>) null, "", "", "@5sV}$5?dO?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = new Object();
      EmptyOrderedIterator.emptyOrderedIterator();
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      SingletonListIterator<SQLNonTransientException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientException>((SQLNonTransientException) null);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) singletonListIterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[5];
      sQLNonTransientExceptionArray0[0] = null;
      sQLNonTransientExceptionArray0[1] = null;
      sQLNonTransientExceptionArray0[2] = null;
      sQLNonTransientExceptionArray0[3] = null;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("(?>li}*w,3s{eHySA");
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLSyntaxErrorException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, (-3458));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(vector0);
      LinkedList<Vector<BatchUpdateException>> linkedList0 = new LinkedList<Vector<BatchUpdateException>>();
      loopingListIterator0.reset();
      LinkedList<Vector<BatchUpdateException>> linkedList1 = new LinkedList<Vector<BatchUpdateException>>();
      IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLRecoverableException>) resettableListIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("NodeList must not be null", "QJ@&BaZenS4;yEUy", 93);
      Class<SQLSyntaxErrorException>[] classArray0 = (Class<SQLSyntaxErrorException>[]) Array.newInstance(Class.class, 9);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      classArray0[0] = class0;
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      classArray0[1] = class1;
      Class<SQLSyntaxErrorException> class2 = SQLSyntaxErrorException.class;
      classArray0[2] = class2;
      Class<SQLSyntaxErrorException> class3 = SQLSyntaxErrorException.class;
      classArray0[3] = class3;
      Class<SQLSyntaxErrorException> class4 = SQLSyntaxErrorException.class;
      classArray0[4] = class4;
      Class<SQLSyntaxErrorException> class5 = SQLSyntaxErrorException.class;
      classArray0[5] = class5;
      Class<SQLSyntaxErrorException> class6 = SQLSyntaxErrorException.class;
      classArray0[6] = class6;
      Class<SQLSyntaxErrorException> class7 = SQLSyntaxErrorException.class;
      classArray0[7] = class7;
      Class<SQLSyntaxErrorException> class8 = SQLSyntaxErrorException.class;
      classArray0[8] = class8;
      InvokerTransformer<Object, SQLWarning> invokerTransformer0 = new InvokerTransformer<Object, SQLWarning>("NodeList must not be null", classArray0, classArray0);
      Iterator<Object> iterator0 = IteratorUtils.objectGraphIterator((Object) sQLRecoverableException0, (Transformer<? super Object, ?>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'NodeList must not be null' on 'class java.sql.SQLRecoverableException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      IteratorUtils.loopingListIterator((List<SQLTransientException>) vector0);
      OrderedMapIterator<IIOMetadataNode, ClientInfoStatus> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, ClientInfoStatus> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<IIOMetadataNode, ? extends ClientInfoStatus>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) orderedMapIterator1, (Transformer<? super IIOMetadataNode, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate<Object> uniquePredicate1 = new UniquePredicate<Object>();
      OrderedMapIterator<BatchUpdateException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FalsePredicate.falsePredicate();
      Transformer<Object, EnumSet<Locale.FilteringMode>> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Transformer<? super SQLException, ? extends EnumSet<Locale.FilteringMode>>) transformer0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-175));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(10);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(10);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(10);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(10);
      integerArray0[4] = integer4;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Integer>) resettableListIterator0, (Transformer<? super Integer, ? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OrderedIterator<TreeSet<SQLInvalidAuthorizationSpecException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IteratorUtils.matchesAll((Iterator<TreeSet<SQLInvalidAuthorizationSpecException>>) orderedIterator0, (Predicate<? super TreeSet<SQLInvalidAuthorizationSpecException>>) predicate0);
      EmptyMapIterator.emptyMapIterator();
      OrderedMapIterator<SQLTransientConnectionException, ArrayDeque<BatchUpdateException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLException, SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = new Object();
      StringTokenizer stringTokenizer0 = new StringTokenizer("ExceptionClosure invoked", "yKs6vo8IThy");
      IteratorUtils.getIterator(stringTokenizer0);
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("Sql8A{ub@v", "PPUx;3cr=1a#=H@Jg");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("ExceptionClosure invoked", "Sf'{a1Pccj");
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("Class to instantiate must not be null", "PPUx;3cr=1a#=H@Jg");
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("Sf'{a1Pccj");
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException("Class to instantiate must not be null", "Iterator must not be null", (-1), sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException7;
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("u}M", "u}M");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = new Object();
      UniquePredicate<SQLTimeoutException> uniquePredicate0 = new UniquePredicate<SQLTimeoutException>();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(factory0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 91;
      longArray0[1] = (long) 91;
      longArray0[2] = (long) 91;
      longArray0[3] = (long) 91;
      longArray0[4] = (long) 91;
      longArray0[5] = (long) 91;
      longArray0[6] = (long) 91;
      longArray0[7] = 1L;
      longArray0[8] = (long) 91;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("transformer may not be null", "[", 91);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[", hashtable0, sQLRecoverableException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("transformer may not be null", "[", 91, longArray0, sQLClientInfoException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) singletonIterator0, (Transformer<? super BatchUpdateException, String>) factoryTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(vector0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.iterators.ListIteratorWrapper", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      loopingListIterator0.add(sQLTimeoutException0);
      LinkedList<Vector<BatchUpdateException>> linkedList0 = new LinkedList<Vector<BatchUpdateException>>();
      loopingListIterator0.reset();
      LinkedList<Vector<BatchUpdateException>> linkedList1 = new LinkedList<Vector<BatchUpdateException>>();
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends BatchUpdateException>) listIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) iterator0, (Iterator<? extends BatchUpdateException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate<Object> uniquePredicate1 = new UniquePredicate<Object>();
      MapIterator<SQLTimeoutException, Iterator<SQLClientInfoException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTimeoutException>) mapIterator0, (-2420L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      ServiceLoader<SQLTransientException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      ListIterator<ServiceLoader<SQLTransientException>> listIterator0 = IteratorUtils.singletonListIterator(serviceLoader0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      IteratorUtils.matchesAll((Iterator<ServiceLoader<SQLTransientException>>) listIterator0, (Predicate<? super ServiceLoader<SQLTransientException>>) predicate0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 5);
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", sQLTransientException0);
      SQLException sQLException0 = new SQLException("", "org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", sQLTimeoutException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLException0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0;
      OrderedMapIterator<SQLNonTransientConnectionException, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLNonTransientConnectionException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, SQLSyntaxErrorException>) orderedMapIterator0);
      Transformer<SQLException, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("");
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientConnectionException>) mapIterator0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      iteratorArray0[1] = iterator0;
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[9];
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator");
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException2;
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException0;
      sQLInvalidAuthorizationSpecExceptionArray0[8] = sQLInvalidAuthorizationSpecException0;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      iteratorArray0[2] = (Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0;
      ArrayIterator<SQLInvalidAuthorizationSpecException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(stack0);
      UniquePredicate<SQLTimeoutException> uniquePredicate0 = new UniquePredicate<SQLTimeoutException>();
      Predicate<SQLException> predicate0 = new UniquePredicate<SQLException>();
      Transformer<SQLException, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super SQLException>) predicate0);
      Predicate<SQLException> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super SQLException, Boolean>) transformer0);
      PredicateTransformer<SQLException> predicateTransformer0 = new PredicateTransformer<SQLException>(predicate1);
      TransformerPredicate<SQLDataException> transformerPredicate0 = new TransformerPredicate<SQLDataException>(transformer0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 2);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      ConstantTransformer<Object, SQLDataException> constantTransformer0 = new ConstantTransformer<Object, SQLDataException>(sQLDataException1);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) constantTransformer0);
      iteratorArray0[0] = iterator0;
      Iterator<SQLDataException> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      iteratorArray0[1] = iterator1;
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      IteratorUtils.matchesAll((Iterator<SQLDataException>) zippingIterator0, (Predicate<? super SQLDataException>) predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("1S)P'S/R~u'");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) iteratorArray0, 44, 99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 6);
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[0] = iterator0;
      int[] intArray0 = new int[4];
      intArray0[0] = 123;
      intArray0[1] = 123;
      intArray0[2] = 123;
      intArray0[3] = 123;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.IteratorUtils", "org.apache.commons.collections4.IteratorUtils", 123, intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      iteratorArray0[1] = (Iterator<BatchUpdateException>) singletonIterator0;
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) iteratorArray0[1]);
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(list0);
      iteratorArray0[2] = (Iterator<BatchUpdateException>) loopingListIterator0;
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 10;
      longArray0[1] = (long) 10;
      longArray0[2] = (long) 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("#~`5}", "Estimated size must be greater than 0", 10, longArray0, (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(batchUpdateException0);
      IteratorUtils.getIterator(sQLTimeoutException0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      OrderedMapIterator<BatchUpdateException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransactionRollbackException, DataTruncation> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator1);
      IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) reverseListIterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ClientInfoStatus[]) null, 123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null);
      LinkedList<Vector<BatchUpdateException>> linkedList0 = new LinkedList<Vector<BatchUpdateException>>();
      ResettableIterator<Boolean> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      SkippingIterator<Boolean> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Boolean>) resettableIterator0, 761L);
      IteratorUtils.toArray((Iterator<?>) skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(vector0);
      UniquePredicate<SQLTimeoutException> uniquePredicate0 = new UniquePredicate<SQLTimeoutException>();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) loopingListIterator0, (Predicate<? super SQLTimeoutException>) uniquePredicate0);
      LinkedList<Vector<BatchUpdateException>> linkedList0 = new LinkedList<Vector<BatchUpdateException>>();
      loopingListIterator0.reset();
      loopingListIterator0.reset();
      LinkedList<Vector<BatchUpdateException>> linkedList1 = new LinkedList<Vector<BatchUpdateException>>();
      IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0);
      IteratorUtils.get((Iterator<SQLRecoverableException>) resettableListIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("-';yj");
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      LoopingListIterator<SQLTimeoutException> loopingListIterator0 = new LoopingListIterator<SQLTimeoutException>(vector0);
      UniquePredicate<SQLTimeoutException> uniquePredicate0 = new UniquePredicate<SQLTimeoutException>();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) loopingListIterator0, (Predicate<? super SQLTimeoutException>) uniquePredicate0);
      LinkedList<Vector<BatchUpdateException>> linkedList0 = new LinkedList<Vector<BatchUpdateException>>();
      loopingListIterator0.reset();
      LinkedList<Vector<BatchUpdateException>> linkedList1 = new LinkedList<Vector<BatchUpdateException>>();
      IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("-';yj", "-';yj");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 0);
      IteratorUtils.get((Iterator<SQLRecoverableException>) resettableListIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("-';y@");
      OrderedMapIterator<BatchUpdateException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<HashSet<BatchUpdateException>>) null, (Predicate<? super HashSet<BatchUpdateException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<String>) orderedIterator0;
      iteratorArray0[1] = (Iterator<String>) orderedIterator0;
      iteratorArray0[2] = (Iterator<String>) orderedIterator0;
      iteratorArray0[3] = (Iterator<String>) orderedIterator0;
      iteratorArray0[4] = (Iterator<String>) orderedIterator0;
      iteratorArray0[5] = (Iterator<String>) orderedIterator0;
      iteratorArray0[6] = (Iterator<String>) orderedIterator0;
      iteratorArray0[7] = (Iterator<String>) orderedIterator0;
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
      IteratorUtils.zippingIterator((Iterator<? extends String>) zippingIterator0, (Iterator<? extends String>) iteratorArray0[7]);
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("-';y@");
      OrderedMapIterator<BatchUpdateException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0, (Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) nonePredicate0;
      NonePredicate<Object> nonePredicate1 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) nonePredicate1;
      Predicate<SQLException> predicate0 = OnePredicate.onePredicate((Predicate<? super SQLException>[]) predicateArray0);
      PredicateTransformer<SQLException> predicateTransformer0 = new PredicateTransformer<SQLException>(predicate0);
      TransformerPredicate<SQLDataException> transformerPredicate0 = new TransformerPredicate<SQLDataException>(predicateTransformer0);
      IteratorUtils.matchesAll((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) transformerPredicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("-';y@");
      ArrayListIterator<SQLClientInfoException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLClientInfoException>(sQLFeatureNotSupportedException0, (-1883), 2413);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      OrderedMapIterator<DataTruncation, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLRecoverableException>(orderedMapIterator0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.matchesAny((Iterator<Closure<ServiceLoader>>) iterator0, (Predicate<? super Closure<ServiceLoader>>) instanceofPredicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      IteratorUtils.singletonIterator((SQLTransientException) sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.spliterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.functors.PrototypeFactory", "$Hm");
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) stringTokenizer0, (Collection<? super Object>) arrayDeque0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.matchesAny((Iterator<Closure<ServiceLoader>>) iterator0, (Predicate<? super Closure<ServiceLoader>>) instanceofPredicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      IteratorUtils.singletonIterator((SQLTransientException) sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OrderedIterator<Class<IIOMetadataNode>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends Class<IIOMetadataNode>>) orderedIterator0);
      ConstantTransformer<SQLDataException, String> constantTransformer0 = new ConstantTransformer<SQLDataException, String>("NodeList must not be null");
      IteratorUtils.toString((Iterator<SQLDataException>) null, (Transformer<? super SQLDataException, String>) constantTransformer0, "org.apache.commons.collections4.functors.IfClosure", "NodeList must not be null", "");
      OrderedMapIterator<Stack<SQLException>, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      predicateArray0[0] = null;
      predicateArray0[1] = null;
      predicateArray0[2] = null;
      predicateArray0[3] = null;
      predicateArray0[4] = null;
      predicateArray0[5] = null;
      predicateArray0[6] = null;
      predicateArray0[7] = null;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Stack<SQLException>>) orderedMapIterator0, (Predicate<? super Stack<SQLException>>) predicateArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      OrderedMapIterator<DataTruncation, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLRecoverableException>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLRecoverableException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLRecoverableException>(abstractOrderedMapIteratorDecorator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, SQLRecoverableException>) abstractOrderedMapIteratorDecorator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ? extends SQLRecoverableException>) abstractOrderedMapIteratorDecorator0);
      IteratorUtils.isEmpty(iterator0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashSet<BatchUpdateException>[] hashSetArray0 = (HashSet<BatchUpdateException>[]) Array.newInstance(HashSet.class, 15);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      ObjectArrayListIterator<HashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<HashSet<BatchUpdateException>>(hashSetArray0, 10);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) stack0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.spliterator();
      IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) arrayDeque0);
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) "");
      predicate0.negate();
      predicate0.negate();
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("^.m+GPB%loY Ye", true);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((ServiceLoader<SQLWarning>[]) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      Vector<SQLDataException> vector1 = new Vector<SQLDataException>();
      OrderedIterator<Boolean> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Boolean>) orderedIterator0, (Predicate<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      Iterator<SQLDataException> iterator0 = stack0.iterator();
      ConstantTransformer<SQLDataException, String> constantTransformer0 = new ConstantTransformer<SQLDataException, String>("");
      IteratorUtils.toString(iterator0, (Transformer<? super SQLDataException, String>) constantTransformer0, "U%q=7{7yy^3", "", "");
      OrderedMapIterator<Stack<SQLException>, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = null;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      predicateArray0[0] = null;
      predicateArray0[1] = null;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Stack<SQLException>>) orderedMapIterator0, (Predicate<? super Stack<SQLException>>) predicateArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      AllPredicate.allPredicate((Collection<? extends Predicate<? super Boolean>>) treeSet0);
      OrderedMapIterator<DataTruncation, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLRecoverableException>(orderedMapIterator0);
      MapIterator<DataTruncation, SQLRecoverableException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, SQLRecoverableException>) orderedMapIterator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ? extends SQLRecoverableException>) mapIterator0);
      IteratorUtils.isEmpty(abstractOrderedMapIteratorDecorator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      String string0 = "to=F^%?8>G^aJ6#N";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("to=F^%?8>G^aJ6#N");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("Array class must not be null", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      String string1 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException((String) null, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("2h8nLg/5cLQa5R$<K", "", 4070);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("to=F^%?8>G^aJ6#N", "to=F^%?8>G^aJ6#N", 4070);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("Array class must not be null");
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("Array class must not be null", "2h8nLg/5cLQa5R$<K");
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 1, 1);
      Transformer<SQLException, String>[] transformerArray0 = (Transformer<SQLException, String>[]) Array.newInstance(Transformer.class, 0);
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Predicate<? super SQLException>[]) null, (Transformer<? super SQLException, ? extends String>[]) transformerArray0, (Transformer<? super SQLException, ? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'PyUfey9#yMy");
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      IteratorUtils.toString((Iterator<SQLRecoverableException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Transformer<Predicate<Object>, Transformer<SQLException, String>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>((Predicate<? super SQLException>) null);
      Predicate<SQLException> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) nullIsFalsePredicate0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e`<QX@,#P}");
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator((SQLInvalidAuthorizationSpecException) null, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) null);
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      LinkedList<Vector<BatchUpdateException>> linkedList0 = new LinkedList<Vector<BatchUpdateException>>();
      linkedList0.push(vector0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("e`<QX@,#P}", "", 512, hashMap0, (Throwable) null);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", map0, sQLClientInfoException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException1, false);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLClientInfoException>) singletonIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsFalsePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Class<IIOMetadataNode>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends Class<IIOMetadataNode>>) orderedIterator0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      Iterator<SQLDataException> iterator0 = vector0.iterator();
      ConstantTransformer<SQLDataException, String> constantTransformer0 = new ConstantTransformer<SQLDataException, String>("");
      IteratorUtils.toString(iterator0, (Transformer<? super SQLDataException, String>) constantTransformer0, "", "U%q=7{7yy^3", "ye");
      OrderedMapIterator<Stack<SQLException>, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = null;
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      predicateArray0[1] = (Predicate<Object>) notPredicate0;
      predicateArray0[2] = null;
      predicateArray0[3] = null;
      predicateArray0[4] = null;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      IteratorUtils.matchesAny((Iterator<Stack<SQLException>>) orderedMapIterator0, (Predicate<? super Stack<SQLException>>) allPredicate0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "ye";
      stringArray0[5] = "U%q=7{7yy^3";
      stringArray0[6] = "ye";
      ResettableIterator<String> resettableIterator0 = new SingletonIterator<String>("U%q=7{7yy^3", false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTransientConnectionException) null);
      IteratorUtils.get((Iterator<HashSet<ServiceLoader>>) resettableIterator0, 0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "koayJ)wYR", (Throwable) null);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("<3", "LttF0OHL}b", 0, sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.functors.MapTransformer", "", (Throwable) null);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.bidimap.TreeBidiMap");
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("", "LttF0OHL}b", 0);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 0, (-468));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<LinkedList<SQLTransientException>>) null);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "79enA+@");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException1;
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      Integer integer0 = new Integer((-2715));
      LinkedList<Vector<BatchUpdateException>> linkedList1 = new LinkedList<Vector<BatchUpdateException>>();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 10;
      HashSet<BatchUpdateException>[] hashSetArray0 = (HashSet<BatchUpdateException>[]) Array.newInstance(HashSet.class, 15);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      ObjectArrayListIterator<HashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<HashSet<BatchUpdateException>>(hashSetArray0, 10);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) uniquePredicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "e`<QX@,#P}", (int[]) null);
      batchUpdateException0.getStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("dTNSF+", batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      Closure<SQLDataException> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<SQLDataException>) null, (Closure<? super SQLDataException>) closure0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      IteratorUtils.emptyOrderedIterator();
      String string0 = "suffix may not be null";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      String string1 = "";
      String string2 = null;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", (String) null, 10, sQLTimeoutException0);
      sQLTimeoutException0.addSuppressed(sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("suffix may not be null", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException1, 675, 4070);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, DataTruncation> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, DataTruncation>(mapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>) abstractMapIteratorDecorator0, (Iterator<? extends SQLNonTransientException>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.iterators.PushbackIterator");
      try { 
        iIOMetadataNode0.getBaseURI();
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      SingletonIterator<ArrayDeque<SQLDataException>> singletonIterator0 = new SingletonIterator<ArrayDeque<SQLDataException>>(arrayDeque0, false);
      NOPClosure.nopClosure();
      Integer integer0 = new Integer((-3389));
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>();
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) null);
      java.util.function.Predicate<Object> predicate1 = predicate0.negate();
      java.util.function.Predicate<Object> predicate2 = predicate0.or(predicate1);
      arrayDeque1.removeIf(predicate2);
      String string0 = "";
      Transformer<SQLException, EnumSet<Locale.FilteringMode>> transformer0 = InvokerTransformer.invokerTransformer("");
      IteratorUtils.transformedIterator((Iterator<? extends SQLException>) listIterator0, (Transformer<? super SQLException, ? extends EnumSet<Locale.FilteringMode>>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<String>) orderedIterator0;
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
      ZippingIterator<String> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends String>) zippingIterator0, (Iterator<? extends String>) zippingIterator0);
      IteratorUtils.toArray((Iterator<?>) zippingIterator1);
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLSyntaxErrorException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("?p.eL3m~LlJcU$qZ?q#", "?p.eL3m~LlJcU$qZ?q#", sQLNonTransientConnectionException0);
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      Integer integer0 = new Integer((-1));
      int int0 = 2136;
      Integer integer1 = new Integer(2136);
      LinkedList<Vector<BatchUpdateException>> linkedList0 = new LinkedList<Vector<BatchUpdateException>>();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 4);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("FilterListIterator.add(Object) is not supported.", "FilterListIterator.add(Object) is not supported.");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      int int0 = 4;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("=", "FilterListIterator.add(Object) is not supported.", 4, sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("Iterator must not be null", sQLTransactionRollbackException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      ObjectArrayIterator<SQLSyntaxErrorException> objectArrayIterator0 = new ObjectArrayIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) objectArrayIterator0);
      iteratorArray0[0] = iterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) iterator0, (Iterator<? extends SQLSyntaxErrorException>) iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<String>) orderedIterator0;
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
      ZippingIterator<String> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends String>) zippingIterator0, (Iterator<? extends String>) zippingIterator0);
      IteratorUtils.toArray((Iterator<?>) zippingIterator1);
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(arrayList0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) reverseListIterator0);
      ConstantTransformer<SQLDataException, String> constantTransformer0 = new ConstantTransformer<SQLDataException, String>((String) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("^>tB/Gwrw).", sQLNonTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException("", ":`y=e:J.D%cLzgH ", sQLTransientException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      Transformer<SQLDataException, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<SQLDataException>) listIterator0, (Transformer<? super SQLDataException, String>) transformer0, "", "", "");
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.size(zippingIterator1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) iterator0);
      ReverseListIterator<SQLTimeoutException> reverseListIterator0 = new ReverseListIterator<SQLTimeoutException>(list0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      reverseListIterator0.nextIndex();
      reverseListIterator0.previousIndex();
      Predicate<SQLException> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) uniquePredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) reverseListIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "e`<QX@,#P}", (int[]) null);
      batchUpdateException0.getStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("dTNSF+", batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "dTNSF+");
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Iterator<SQLTransientConnectionException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      IteratorUtils.contains(iterator1, (Object) sQLTransactionRollbackException1);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashSet<BatchUpdateException>[] hashSetArray0 = (HashSet<BatchUpdateException>[]) Array.newInstance(HashSet.class, 15);
      ObjectArrayListIterator<HashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<HashSet<BatchUpdateException>>(hashSetArray0, 10);
      UniquePredicate.uniquePredicate();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("KI6wJ}", "KI6wJ}");
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) resettableIterator0, (Object) sQLTransientConnectionException0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashSet<BatchUpdateException>[] hashSetArray0 = (HashSet<BatchUpdateException>[]) Array.newInstance(HashSet.class, 15);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      ObjectArrayListIterator<HashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<HashSet<BatchUpdateException>>(hashSetArray0, 10);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("dTNSF+", batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("dTNSF+", "KI6wJ}");
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("Node must not be null", ";e2");
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException1);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      IteratorUtils.contains(iterator0, (Object) resettableIterator0);
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashSet<BatchUpdateException>[] hashSetArray0 = (HashSet<BatchUpdateException>[]) Array.newInstance(HashSet.class, 15);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      ObjectArrayListIterator<HashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<HashSet<BatchUpdateException>>(hashSetArray0, 10);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object> predicate1 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<HashSet<BatchUpdateException>>) objectArrayListIterator0, (Predicate<? super HashSet<BatchUpdateException>>) predicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, class0);
      ObjectArrayListIterator<HashSet<BatchUpdateException>> objectArrayListIterator1 = new ObjectArrayListIterator<HashSet<BatchUpdateException>>(hashSetArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("H", "H", 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("E4_un~+4}6;fqJ=.", "H", sQLWarning0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("E4_un~+4}6;fqJ=.", sQLInvalidAuthorizationSpecException0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstantiateFactory<SQLRecoverableException> instantiateFactory0 = new InstantiateFactory<SQLRecoverableException>(class0);
      Transformer<SQLException, SQLRecoverableException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLRecoverableException>) instantiateFactory0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.objectGraphIterator(sQLRecoverableException0, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) transformer0);
      instantiateFactory0.create();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sQLWarning0.spliterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OrderedMapIterator<Stack<SQLClientInfoException>, Iterator<SQLWarning>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.getIterator(orderedMapIterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SQLTransientException> priorityQueue0 = new PriorityQueue<SQLTransientException>(comparator0);
      priorityQueue0.stream();
      IteratorUtils.singletonListIterator(priorityQueue0);
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>();
      IteratorUtils.singletonIterator((LinkedHashSet<HashSet>) linkedHashSet0);
      Transformer<Object, Transformer<Properties, Transformer<Predicate<Object>, Transformer<SQLException, String>>>> transformer0 = ConstantTransformer.nullTransformer();
      int int0 = (-422);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) transformer0, (-422));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = new Object();
      IteratorUtils.getIterator(object0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0);
      LinkedList<Vector<BatchUpdateException>> linkedList0 = new LinkedList<Vector<BatchUpdateException>>();
      OrderedMapIterator<DataTruncation, Iterator<SQLWarning>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.getIterator(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Class<IIOMetadataNode>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends Class<IIOMetadataNode>>) orderedIterator0);
      LinkedList<SQLTransientConnectionException> linkedList0 = new LinkedList<SQLTransientConnectionException>();
      Integer integer0 = new Integer((-2670));
      LinkedList<Vector<BatchUpdateException>> linkedList1 = new LinkedList<Vector<BatchUpdateException>>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-2670));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<String>) orderedIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) singletonIterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 9
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      SingletonIterator<ArrayDeque<SQLDataException>> singletonIterator0 = new SingletonIterator<ArrayDeque<SQLDataException>>(arrayDeque0, false);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<ArrayDeque<SQLDataException>>) singletonIterator0, (Closure<? super ArrayDeque<SQLDataException>>) closure0);
      DataTruncation dataTruncation0 = new DataTruncation(1242, false, true, 1242, 1, (Throwable) null);
      DataTruncation dataTruncation1 = new DataTruncation(1, true, true, 1, 1242);
      java.util.function.Predicate.isEqual((Object) dataTruncation1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((String) null);
      IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Transformer<SQLException, EnumSet<Locale.FilteringMode>> transformer0 = InvokerTransformer.invokerTransformer("8q^n^y");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) null, (Transformer<? super SQLException, ? extends EnumSet<Locale.FilteringMode>>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      SingletonIterator<ArrayDeque<SQLDataException>> singletonIterator0 = new SingletonIterator<ArrayDeque<SQLDataException>>(arrayDeque0, false);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<ArrayDeque<SQLDataException>>) singletonIterator0, (Closure<? super ArrayDeque<SQLDataException>>) closure0);
      DataTruncation dataTruncation0 = new DataTruncation(1242, false, true, 1242, 1, (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 2838, (Throwable) null);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException0;
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException0;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 1);
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(dataTruncation0);
      int int0 = 34;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 34);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      EvoSuiteFile evoSuiteFile0 = null;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 12, (-1127));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<String>) orderedIterator0;
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
      ZippingIterator<String> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends String>) zippingIterator0, (Iterator<? extends String>) zippingIterator0);
      IteratorUtils.toArray((Iterator<?>) zippingIterator1);
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(arrayList0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) reverseListIterator0);
      int[] intArray0 = new int[2];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)91;
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)121;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      intArray0[0] = 0;
      intArray0[1] = 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      batchUpdateException0.setNextException(sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLSyntaxErrorException0);
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) listIterator0, (Object) sQLDataException0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      SingletonIterator<ArrayDeque<SQLDataException>> singletonIterator0 = new SingletonIterator<ArrayDeque<SQLDataException>>(arrayDeque0, false);
      NOPClosure.nopClosure();
      Integer integer0 = new Integer((-3389));
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      IteratorUtils.matchesAny((Iterator<Stack<SQLException>>) null, (Predicate<? super Stack<SQLException>>) onePredicate0);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) iterator0);
      ReverseListIterator<SQLTimeoutException> reverseListIterator0 = new ReverseListIterator<SQLTimeoutException>(list0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      reverseListIterator0.nextIndex();
      reverseListIterator0.previousIndex();
      Predicate<SQLException> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) uniquePredicate0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e`<QX@,#P}");
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) reverseListIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.objectGraphIterator((SQLInvalidAuthorizationSpecException) null, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) null);
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1));
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      IteratorUtils.matchesAny((Iterator<Stack<SQLException>>) null, (Predicate<? super Stack<SQLException>>) onePredicate0);
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0, 4070);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<String>) orderedIterator0;
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
      ZippingIterator<String> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends String>) zippingIterator0, (Iterator<? extends String>) zippingIterator0);
      IteratorUtils.toArray((Iterator<?>) zippingIterator1);
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(arrayList0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) reverseListIterator0);
      int[] intArray0 = new int[2];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)121;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      intArray0[0] = 0;
      intArray0[1] = 10;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      batchUpdateException0.setNextException(sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLSyntaxErrorException0);
      IteratorUtils.contains((Iterator<SQLTransientConnectionException>) listIterator0, (Object) sQLDataException0);
      IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
      IteratorUtils.emptyIterator();
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      IteratorUtils.loopingListIterator((List<SQLDataException>) stack0);
      Iterator<SQLSyntaxErrorException>[] iteratorArray1 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray1);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 10, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("-';y@");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("S>i*J<OY\"WNHn", "List must not be null");
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "-';y@", (-2049), hashtable0, sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("Itl+U2DCrszWK", sQLClientInfoException0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      vector0.add(sQLDataException0);
      int int0 = 1;
      Integer integer0 = new Integer(1);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      IteratorUtils.arrayListIterator(integerArray0);
      Vector<EnumSet<Locale.FilteringMode>> vector1 = new Vector<EnumSet<Locale.FilteringMode>>();
      ArrayList<EnumSet<Locale.FilteringMode>> arrayList0 = new ArrayList<EnumSet<Locale.FilteringMode>>();
      IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) arrayList0);
      Properties[] propertiesArray0 = new Properties[4];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties(properties0);
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, int0);
      IdentityPredicate<Properties> identityPredicate0 = new IdentityPredicate<Properties>(properties3);
      Iterator<Properties> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Properties>) resettableIterator0, (Predicate<? super Properties>) identityPredicate0);
      IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      HashMap<SQLTransientConnectionException, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<SQLTransientConnectionException, SQLInvalidAuthorizationSpecException>();
      Transformer<SQLTransientConnectionException, SQLInvalidAuthorizationSpecException> transformer0 = MapTransformer.mapTransformer((Map<? super SQLTransientConnectionException, ? extends SQLInvalidAuthorizationSpecException>) hashMap0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) iterator0, (Transformer<? super SQLTransientConnectionException, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator1);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      int int0 = 100;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 100);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("e:}KUe#G8\\L1|", "", 100, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Spliterator<Object> spliterator0 = arrayDeque0.spliterator();
      IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) arrayDeque0);
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) "org.apache.commons.collections4.functors.TransformerPredicate");
      java.util.function.Predicate<Object> predicate1 = java.util.function.Predicate.isEqual((Object) spliterator0);
      java.util.function.Predicate<Object> predicate2 = predicate0.or(predicate1);
      java.util.function.Predicate<Object> predicate3 = predicate0.and(predicate2);
      predicate0.and(predicate3);
      java.util.function.Predicate<Object> predicate4 = predicate0.and(predicate0);
      predicate4.or(predicate0);
      DataTruncation dataTruncation0 = new DataTruncation(10, false, true, 10, 10);
      SQLDataException sQLDataException0 = new SQLDataException(dataTruncation0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      vector0.add(sQLDataException0);
      Integer integer0 = new Integer(540);
      Integer[] integerArray0 = new Integer[0];
      IteratorUtils.arrayListIterator(integerArray0);
      Vector<EnumSet<Locale.FilteringMode>> vector1 = new Vector<EnumSet<Locale.FilteringMode>>();
      IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) vector1);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.functors.TransformerPredicate", "", 125, hashtable0, dataTruncation0);
      IteratorUtils.getIterator(sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Comparator<DataTruncation> comparator0 = (Comparator<DataTruncation>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      DataTruncation dataTruncation0 = new DataTruncation(1237, false, false, 930, 1237, (Throwable) null);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      dataTruncationArray0[0] = dataTruncation0;
      dataTruncationArray0[1] = dataTruncation0;
      dataTruncationArray0[2] = dataTruncation0;
      dataTruncationArray0[3] = dataTruncation0;
      dataTruncationArray0[4] = dataTruncation0;
      dataTruncationArray0[5] = dataTruncation0;
      dataTruncationArray0[6] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1237, true, false, 1, 2122);
      dataTruncationArray0[7] = dataTruncation1;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) singletonIterator0, (Iterator<? extends DataTruncation>) objectArrayIterator0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[5];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("", dataTruncation0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("", ",Kk2|]?1C+(^\"}w", 1237);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("", "", dataTruncation0);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 1634, 930);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, class0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) orderedMapIterator0);
      IteratorUtils.find((Iterator<SQLSyntaxErrorException>) orderedMapIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) orderedMapIterator0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) orderedMapIterator0;
      objectArray0[3] = (Object) orderedMapIterator0;
      objectArray0[4] = (Object) orderedMapIterator0;
      objectArray0[5] = (Object) predicate0;
      Object[] objectArray1 = new Object[6];
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) orderedMapIterator0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      MockFile mockFile0 = new MockFile("PrototypeCloneFactory: The clone method must exist and be public ", "PrototypeCloneFactory: The clone method must exist and be public ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.ITALIAN;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", (Object[]) null);
      sQLWarning0.printStackTrace(printStream0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("PrototypeCloneFactory: The clone method must exist and be public ", "/aR=&CXjEL5rS FG", (int[]) null, sQLWarning0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      IteratorUtils.toString((Iterator<BatchUpdateException>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) priorityQueue0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Iterator<? extends SQLNonTransientException>) resettableIterator0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 6);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[2] = class2;
      Class<SQLNonTransientConnectionException> class3 = SQLNonTransientConnectionException.class;
      classArray0[3] = class3;
      Class<SQLNonTransientConnectionException> class4 = SQLNonTransientConnectionException.class;
      classArray0[4] = class4;
      Class<SQLNonTransientConnectionException> class5 = SQLNonTransientConnectionException.class;
      classArray0[5] = class5;
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("q{K`5P,KP|mpU@8", classArray0, classArray0);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("8e<zZ/rs4hON%$zU");
      TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(class0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      HashSet<BatchUpdateException>[] hashSetArray0 = (HashSet<BatchUpdateException>[]) Array.newInstance(HashSet.class, 9);
      hashSetArray0[0] = (HashSet<BatchUpdateException>) linkedHashSet0;
      HashSet<BatchUpdateException> hashSet0 = new LinkedHashSet<BatchUpdateException>();
      hashSetArray0[1] = hashSet0;
      hashSetArray0[2] = (HashSet<BatchUpdateException>) linkedHashSet0;
      hashSetArray0[3] = (HashSet<BatchUpdateException>) linkedHashSet0;
      hashSetArray0[4] = (HashSet<BatchUpdateException>) linkedHashSet0;
      hashSetArray0[5] = (HashSet<BatchUpdateException>) linkedHashSet0;
      hashSetArray0[6] = (HashSet<BatchUpdateException>) linkedHashSet0;
      hashSetArray0[7] = (HashSet<BatchUpdateException>) linkedHashSet0;
      hashSetArray0[8] = (HashSet<BatchUpdateException>) linkedHashSet0;
      ObjectArrayListIterator<HashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<HashSet<BatchUpdateException>>(hashSetArray0, 1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      SingletonIterator<ArrayDeque<SQLDataException>> singletonIterator0 = new SingletonIterator<ArrayDeque<SQLDataException>>(arrayDeque0, false);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<ArrayDeque<SQLDataException>>) singletonIterator0, (Closure<? super ArrayDeque<SQLDataException>>) closure0);
      DataTruncation dataTruncation0 = new DataTruncation(1242, false, true, 1242, 1, (Throwable) null);
      dataTruncation0.getNextWarning();
      java.util.function.Predicate.isEqual((Object) null);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (Throwable) null);
      Integer integer0 = new Integer(1242);
      SQLDataException sQLDataException1 = new SQLDataException(dataTruncation0);
      DataTruncation dataTruncation1 = new DataTruncation((-1), false, true, (-1), 1242);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      UniquePredicate.uniquePredicate();
      EmptyListIterator.resettableEmptyListIterator();
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.singletonListIterator((Iterator<SQLTransientConnectionException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.spliterator();
      IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) arrayDeque0);
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) "");
      java.util.function.Predicate<Object> predicate1 = predicate0.and(predicate0);
      predicate1.or(predicate0);
      DataTruncation dataTruncation0 = new DataTruncation(10, false, true, 10, 10);
      SQLDataException sQLDataException0 = new SQLDataException(dataTruncation0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 1);
      DataTruncation dataTruncation1 = new DataTruncation(32, false, false, 724, 724, sQLTimeoutException0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      UniquePredicate.uniquePredicate();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.singletonListIterator((Iterator<SQLTransientConnectionException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) null, (Iterator<? extends EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("-';y@");
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (Throwable) null);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      vector0.add(sQLDataException0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Transformer<SQLDataException, String> transformer0 = InvokerTransformer.invokerTransformer("`#6*E^Bo%C5hhf`K", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) singletonListIterator0, (Transformer<? super SQLDataException, String>) transformer0, "", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iIOMetadataNode0.getNextSibling();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) priorityQueue0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("NodeList must not be null", "NodeList must not be null");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("NodeList must not be null", "`#6*E^Bo%C5hhf`K", (-2049), hashtable0, sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLSyntaxErrorException0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      vector0.add(sQLDataException0);
      vector0.iterator();
      Integer integer0 = new Integer((-2049));
      Integer[] integerArray0 = new Integer[0];
      IteratorUtils.arrayListIterator(integerArray0);
      Vector<EnumSet<Locale.FilteringMode>> vector1 = new Vector<EnumSet<Locale.FilteringMode>>();
      IteratorUtils.loopingListIterator((List<EnumSet<Locale.FilteringMode>>) vector1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = new Object();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("delimiter may not be null");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.getAttributeNodeNS("delimiter may not be null", "delimiter may not be null");
      iIOMetadataNode0.replaceChild(iIOMetadataNode1, iIOMetadataNode1);
      IteratorUtils.getIterator(iIOMetadataNode0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      iIOMetadataNodeArray0[0] = iIOMetadataNode1;
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0);
      Hashtable<StringTokenizer, SQLTransientConnectionException> hashtable0 = new Hashtable<StringTokenizer, SQLTransientConnectionException>(0);
      Enumeration<SQLTransientConnectionException> enumeration0 = hashtable0.elements();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) iterator0, class0);
      LinkedList<Vector<BatchUpdateException>> linkedList0 = new LinkedList<Vector<BatchUpdateException>>();
      LoopingListIterator<Vector<BatchUpdateException>> loopingListIterator0 = new LoopingListIterator<Vector<BatchUpdateException>>(linkedList0);
      Class<Locale.FilteringMode>[] classArray0 = (Class<Locale.FilteringMode>[]) Array.newInstance(Class.class, 2);
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      linkedList0.push(vector0);
      classArray0[0] = class1;
      classArray0[1] = class1;
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) loopingListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) iterator0);
      ReverseListIterator<SQLTimeoutException> reverseListIterator0 = new ReverseListIterator<SQLTimeoutException>(list0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      reverseListIterator0.nextIndex();
      reverseListIterator0.previousIndex();
      Predicate<SQLException> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) uniquePredicate0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e`<QX@,#P}");
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) reverseListIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.objectGraphIterator((SQLInvalidAuthorizationSpecException) null, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) null);
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1));
      LinkedList<Vector<BatchUpdateException>> linkedList0 = new LinkedList<Vector<BatchUpdateException>>();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.toArray((Iterator<?>) listIterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(linkedList0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) reverseListIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) arrayDeque0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-Sw*");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("-Sw*");
      Comparator<SQLTransientException> comparator1 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<SQLTransientException> comparatorPredicate0 = new ComparatorPredicate<SQLTransientException>(sQLTransientConnectionException0, comparator1, comparatorPredicate_Criterion0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) comparatorPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashSet<BatchUpdateException>[] hashSetArray0 = (HashSet<BatchUpdateException>[]) Array.newInstance(HashSet.class, 15);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      ObjectArrayListIterator<HashSet<BatchUpdateException>> objectArrayListIterator0 = new ObjectArrayListIterator<HashSet<BatchUpdateException>>(hashSetArray0, 10);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "EZ.96M#BsIphot2t");
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate<Object> uniquePredicate1 = new UniquePredicate<Object>();
      FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("-';y@");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedMapIterator<BatchUpdateException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>((Factory<? extends String>) null);
      IteratorUtils.toString((Iterator<BatchUpdateException>) orderedMapIterator0, (Transformer<? super BatchUpdateException, String>) factoryTransformer0);
      String string0 = "+b[e0D3(Rv}";
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(mockThrowable0);
      // Undeclared exception!
      try { 
        sQLRecoverableException0.setStackTrace((StackTraceElement[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("-';y@");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      OrderedMapIterator<BatchUpdateException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>((Factory<? extends String>) null);
      IteratorUtils.toString((Iterator<BatchUpdateException>) orderedMapIterator0, (Transformer<? super BatchUpdateException, String>) factoryTransformer0);
      IteratorUtils.emptyOrderedMapIterator();
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("8e<zZ/rs4hON%$zU", classArray0, classArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("8e<zZ/rs4hON%$zU");
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[0] = predicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(invokerTransformer0, comparator0, comparatorPredicate_Criterion0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      HashSet<BatchUpdateException>[] hashSetArray0 = (HashSet<BatchUpdateException>[]) Array.newInstance(HashSet.class, 3);
      hashSetArray0[0] = (HashSet<BatchUpdateException>) linkedHashSet0;
      hashSetArray0[1] = (HashSet<BatchUpdateException>) linkedHashSet0;
      hashSetArray0[2] = (HashSet<BatchUpdateException>) linkedHashSet0;
      ObjectArrayListIterator<HashSet<BatchUpdateException>> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<HashSet<BatchUpdateException>>(hashSetArray0, 1009);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Boolean> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Boolean>>) treeSet0);
      OrderedMapIterator<Boolean, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.filteredIterator((Iterator<? extends Boolean>) orderedMapIterator0, (Predicate<? super Boolean>) predicate0);
      List<Boolean> list0 = new ArrayList<Boolean>();
      IteratorUtils.loopingIterator((Collection<? extends Boolean>) list0);
      DataTruncation dataTruncation0 = new DataTruncation((-3854), false, true, (-3854), 1);
      SQLDataException sQLDataException0 = new SQLDataException(dataTruncation0);
      DataTruncation dataTruncation1 = new DataTruncation(32, false, false, 1, 10, sQLDataException0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      LoopingListIterator<Vector<BatchUpdateException>> loopingListIterator0 = null;
      try {
        loopingListIterator0 = new LoopingListIterator<Vector<BatchUpdateException>>((List<Vector<BatchUpdateException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The list must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("delimiter may not be null");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.getAttributeNodeNS("delimiter may not be null", "delimiter may not be null");
      iIOMetadataNode0.replaceChild(iIOMetadataNode1, iIOMetadataNode1);
      IteratorUtils.getIterator(iIOMetadataNode0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      iIOMetadataNodeArray0[0] = iIOMetadataNode1;
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      int int0 = 0;
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0);
      Hashtable<StringTokenizer, SQLTransientConnectionException> hashtable0 = new Hashtable<StringTokenizer, SQLTransientConnectionException>(0);
      Enumeration<SQLTransientConnectionException> enumeration0 = hashtable0.elements();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) iterator0, class0);
      LinkedList<Vector<BatchUpdateException>> linkedList0 = new LinkedList<Vector<BatchUpdateException>>();
      LoopingListIterator<Vector<BatchUpdateException>> loopingListIterator0 = new LoopingListIterator<Vector<BatchUpdateException>>(linkedList0);
      Class<Locale.FilteringMode>[] classArray0 = (Class<Locale.FilteringMode>[]) Array.newInstance(Class.class, 2);
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      String string0 = "org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator";
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null, 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashSet<BatchUpdateException>[] hashSetArray0 = (HashSet<BatchUpdateException>[]) Array.newInstance(HashSet.class, 1);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(linkedList0);
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) reverseListIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) arrayDeque0);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("$=xyL7V'Z,ZB<CH");
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(transformer0, comparator0, comparatorPredicate_Criterion0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      HashSet<BatchUpdateException>[] hashSetArray0 = (HashSet<BatchUpdateException>[]) Array.newInstance(HashSet.class, 3);
      hashSetArray0[0] = (HashSet<BatchUpdateException>) linkedHashSet0;
      LinkedHashSet<BatchUpdateException> linkedHashSet1 = new LinkedHashSet<BatchUpdateException>();
      Stack<Vector<BatchUpdateException>> stack0 = new Stack<Vector<BatchUpdateException>>();
      LoopingListIterator<Vector<BatchUpdateException>> loopingListIterator0 = new LoopingListIterator<Vector<BatchUpdateException>>(stack0);
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      LinkedList<Vector<BatchUpdateException>> linkedList1 = new LinkedList<Vector<BatchUpdateException>>();
      linkedList1.push(vector0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode2, locale_FilteringMode0);
      EnumSet<Locale.FilteringMode> enumSet1 = enumSet0.clone();
      SingletonIterator<EnumSet<Locale.FilteringMode>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.FilteringMode>>(enumSet1, true);
      List<EnumSet<Locale.FilteringMode>> list0 = IteratorUtils.toList((Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonIterator0, 66);
      IteratorUtils.loopingListIterator(list0);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<SQLDataException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) resettableListIterator0, (Predicate<? super SQLDataException>) predicate0);
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) listIterator1, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) null, 1013);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Class<IIOMetadataNode>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends Class<IIOMetadataNode>>) orderedIterator0);
      Integer integer0 = new Integer(100);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1109);
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer(1130);
      Integer integer5 = new Integer(1);
      Integer integer6 = new Integer(1130);
      LinkedList<Vector<BatchUpdateException>> linkedList0 = new LinkedList<Vector<BatchUpdateException>>();
      LoopingListIterator<Vector<BatchUpdateException>> loopingListIterator0 = new LoopingListIterator<Vector<BatchUpdateException>>(linkedList0);
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      LinkedList<Vector<BatchUpdateException>> linkedList1 = new LinkedList<Vector<BatchUpdateException>>();
      linkedList1.push(vector0);
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("delimiter may not be null");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.getAttributeNodeNS("delimiter may not be null", "delimiter may not be null");
      iIOMetadataNode0.replaceChild(iIOMetadataNode1, iIOMetadataNode1);
      IteratorUtils.getIterator(iIOMetadataNode0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      iIOMetadataNodeArray0[0] = iIOMetadataNode1;
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0);
      Hashtable<StringTokenizer, SQLTransientConnectionException> hashtable0 = new Hashtable<StringTokenizer, SQLTransientConnectionException>(0);
      Enumeration<SQLTransientConnectionException> enumeration0 = hashtable0.elements();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) iterator0, class0);
      LinkedList<Vector<BatchUpdateException>> linkedList0 = new LinkedList<Vector<BatchUpdateException>>();
      LoopingListIterator<Vector<BatchUpdateException>> loopingListIterator0 = new LoopingListIterator<Vector<BatchUpdateException>>(linkedList0);
      Class<Locale.FilteringMode>[] classArray0 = (Class<Locale.FilteringMode>[]) Array.newInstance(Class.class, 2);
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      linkedList0.push(vector0);
      classArray0[0] = class1;
      OrderedMapIterator<EnumSet<Locale.FilteringMode>, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<EnumSet<Locale.FilteringMode>> list0 = IteratorUtils.toList((Iterator<? extends EnumSet<Locale.FilteringMode>>) orderedMapIterator0, 66);
      IteratorUtils.loopingListIterator(list0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PriorityQueue<SQLDataException> priorityQueue0 = new PriorityQueue<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) priorityQueue0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      vector0.iterator();
      ConstantTransformer<SQLDataException, String> constantTransformer0 = new ConstantTransformer<SQLDataException, String>("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator");
      IteratorUtils.toString((Iterator<SQLDataException>) resettableIterator0, (Transformer<? super SQLDataException, String>) constantTransformer0, "", "org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", "^>tB/Gwrw).");
      OrderedMapIterator<Stack<SQLException>, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Stack<SQLException>>) orderedMapIterator0, (Predicate<? super Stack<SQLException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Predicate<Boolean> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Boolean>>) treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Boolean>) null, (Predicate<? super Boolean>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte) (-41);
      byteArray0[8] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.isEmpty((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "YM[p>/25bxL]r<", 10, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Iterator<DataTruncation>[] iteratorArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OrderedMapIterator<Integer, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, SQLTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<Integer, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, SQLTransientConnectionException>(orderedMapIterator1);
      IteratorUtils.peekingIterator((Iterator<? extends Integer>) abstractOrderedMapIteratorDecorator0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, 1062L, 3228L);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> orderedMapIterator3 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLInvalidAuthorizationSpecException, ? extends BatchUpdateException>) orderedMapIterator2);
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, BatchUpdateException>(orderedMapIterator3);
      MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLInvalidAuthorizationSpecException, ? extends BatchUpdateException>) abstractOrderedMapIteratorDecorator1);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("delimiter may not be null");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.getAttributeNodeNS("delimiter may not be null", "delimiter may not be null");
      iIOMetadataNode0.replaceChild(iIOMetadataNode1, iIOMetadataNode1);
      IteratorUtils.getIterator(iIOMetadataNode0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      iIOMetadataNodeArray0[0] = iIOMetadataNode1;
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0);
      Hashtable<StringTokenizer, SQLTransientConnectionException> hashtable0 = new Hashtable<StringTokenizer, SQLTransientConnectionException>(0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Enumeration must not be null", "delimiter may not be null", true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("delimiter may not be null", (Throwable) null);
      hashtable0.put(stringTokenizer0, sQLTransientConnectionException0);
      Enumeration<SQLTransientConnectionException> enumeration0 = hashtable0.elements();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) iterator0, class0);
      LinkedList<Vector<BatchUpdateException>> linkedList0 = new LinkedList<Vector<BatchUpdateException>>();
      LoopingListIterator<Vector<BatchUpdateException>> loopingListIterator0 = new LoopingListIterator<Vector<BatchUpdateException>>(linkedList0);
      Class<Locale.FilteringMode>[] classArray0 = (Class<Locale.FilteringMode>[]) Array.newInstance(Class.class, 2);
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      linkedList0.push(vector0);
      classArray0[0] = class1;
      Class<Locale.FilteringMode> class2 = Locale.FilteringMode.class;
      classArray0[1] = class2;
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.singletonListIterator((Closure<Object>) null);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 9);
      Hashtable<SQLClientInfoException, SQLSyntaxErrorException> hashtable0 = new Hashtable<SQLClientInfoException, SQLSyntaxErrorException>();
      EntrySetMapIterator<SQLClientInfoException, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, SQLSyntaxErrorException>(hashtable0);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) entrySetMapIterator0;
      MapIterator<SQLClientInfoException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[3] = (Iterator<SQLClientInfoException>) mapIterator0;
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(":", "$D.*", hashtable1, sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable1, sQLClientInfoException0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":");
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(":", map0);
      Transformer<SQLClientInfoException, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("qc");
      IteratorUtils.objectGraphIterator(sQLClientInfoException2, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      iteratorArray0[4] = iteratorArray0[3];
      MapIterator<SQLClientInfoException, String> mapIterator1 = IteratorUtils.emptyMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends String>) mapIterator1);
      iteratorArray0[5] = (Iterator<SQLClientInfoException>) mapIterator1;
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 24;
      OrderedMapIterator<Properties, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends Properties>) orderedMapIterator0, (long) 24);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataException1.initCause(sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) objectArrayListIterator0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedMapIterator<Properties, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends Properties>) orderedMapIterator0, (long) 0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException1;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) objectArrayListIterator0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      HashSet<BatchUpdateException>[] hashSetArray0 = (HashSet<BatchUpdateException>[]) Array.newInstance(HashSet.class, 6);
      hashSetArray0[0] = (HashSet<BatchUpdateException>) linkedHashSet0;
      hashSetArray0[1] = (HashSet<BatchUpdateException>) linkedHashSet0;
      hashSetArray0[2] = (HashSet<BatchUpdateException>) linkedHashSet0;
      hashSetArray0[3] = (HashSet<BatchUpdateException>) linkedHashSet0;
      hashSetArray0[4] = (HashSet<BatchUpdateException>) linkedHashSet0;
      hashSetArray0[5] = (HashSet<BatchUpdateException>) linkedHashSet0;
      ObjectArrayListIterator<HashSet<BatchUpdateException>> objectArrayListIterator1 = new ObjectArrayListIterator<HashSet<BatchUpdateException>>(hashSetArray0, 0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<HashSet<BatchUpdateException>>) objectArrayListIterator1, (Predicate<? super HashSet<BatchUpdateException>>) predicate0);
      IteratorUtils.size(objectArrayListIterator1);
      IteratorUtils.singletonIterator((Iterator<String>) null);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 3);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("gzZF|xN]I)Q", "NodeList must not be null");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("gzZF|xN]I)Q", "NodeList must not be null", 4088, hashtable0, sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("NodeList must not be null", sQLClientInfoException0);
      vector0.add(sQLDataException0);
      Iterator<SQLDataException> iterator0 = vector0.iterator();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      classArray0[2] = class2;
      Transformer<SQLDataException, String> transformer0 = InvokerTransformer.invokerTransformer("gzZF|xN]I)Q", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLDataException, String>) transformer0, "gzZF|xN]I)Q", "J @UY)3", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'gzZF|xN]I)Q' on 'class java.sql.SQLDataException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "s[V2\"),$3";
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.find((Iterator<String>) objectArrayIterator0, (Predicate<? super String>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 4037, (-27));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.isEmpty(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) listIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("delimiter may not be null");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("delimiter may not be null");
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.spliterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) null, (Collection<? super Object>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLClientInfoException0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      OrderedMapIterator<DataTruncation, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLRecoverableException>(orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, SQLRecoverableException>) abstractOrderedMapIteratorDecorator0);
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLWarning, ? extends SQLRecoverableException>) orderedMapIterator0);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      vector0.iterator();
      ConstantTransformer<SQLDataException, String> constantTransformer0 = new ConstantTransformer<SQLDataException, String>("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate.andPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.find((Iterator<HashSet<BatchUpdateException>>) null, (Predicate<? super HashSet<BatchUpdateException>>) uniquePredicate0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "&\"%M0{u}", 962, hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(":,s(a}d$:EuM;l", "org.apache.commons.collections4.iterators.ObjectArrayIterator", (-523), hashMap0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(hashMap0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(hashMap0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(hashMap0, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      SingletonIterator<ArrayDeque<SQLDataException>> singletonIterator0 = new SingletonIterator<ArrayDeque<SQLDataException>>(arrayDeque0, false);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<ArrayDeque<SQLDataException>>) singletonIterator0, (Closure<? super ArrayDeque<SQLDataException>>) closure0);
      DataTruncation dataTruncation0 = new DataTruncation(1242, false, true, 1242, 1, (Throwable) null);
      dataTruncation0.getNextWarning();
      java.util.function.Predicate.isEqual((Object) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(dataTruncation0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.objectGraphIterator(sQLInvalidAuthorizationSpecException0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) null);
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      Integer integer0 = new Integer(1242);
      LinkedList<Vector<BatchUpdateException>> linkedList0 = new LinkedList<Vector<BatchUpdateException>>();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OrderedMapIterator<Properties, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends Properties>) orderedMapIterator0, (long) 0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException1;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) objectArrayListIterator0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      HashSet<BatchUpdateException>[] hashSetArray0 = (HashSet<BatchUpdateException>[]) Array.newInstance(HashSet.class, 1);
      LinkedHashSet<BatchUpdateException> linkedHashSet0 = new LinkedHashSet<BatchUpdateException>();
      hashSetArray0[0] = (HashSet<BatchUpdateException>) linkedHashSet0;
      ObjectArrayListIterator<HashSet<BatchUpdateException>> objectArrayListIterator1 = new ObjectArrayListIterator<HashSet<BatchUpdateException>>(hashSetArray0, 0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<HashSet<BatchUpdateException>>) objectArrayListIterator1, (Predicate<? super HashSet<BatchUpdateException>>) predicate1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Iterator<SQLTimeoutException> iterator0 = EmptyIterator.emptyIterator();
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) iterator0);
      ReverseListIterator<SQLTimeoutException> reverseListIterator0 = new ReverseListIterator<SQLTimeoutException>(list0);
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      reverseListIterator0.nextIndex();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      reverseListIterator0.previousIndex();
      reverseListIterator0.forEachRemaining(consumer0);
      Predicate<SQLException> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLException>) uniquePredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) reverseListIterator0, (Predicate<? super SQLTimeoutException>) predicate0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator1 = IteratorUtils.objectGraphIterator((SQLInvalidAuthorizationSpecException) null, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLInvalidAuthorizationSpecException>) null);
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<Locale.FilteringMode>) null, (Predicate<? super Locale.FilteringMode>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.singletonListIterator((Closure<Object>) null);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 9);
      Hashtable<SQLClientInfoException, SQLSyntaxErrorException> hashtable0 = new Hashtable<SQLClientInfoException, SQLSyntaxErrorException>();
      EntrySetMapIterator<SQLClientInfoException, SQLSyntaxErrorException> entrySetMapIterator0 = new EntrySetMapIterator<SQLClientInfoException, SQLSyntaxErrorException>(hashtable0);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) entrySetMapIterator0;
      OrderedMapIterator<SQLClientInfoException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[1] = (Iterator<SQLClientInfoException>) orderedMapIterator0;
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) arrayDeque0);
      iteratorArray0[2] = (Iterator<SQLClientInfoException>) resettableIterator0;
      MapIterator<SQLClientInfoException, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[3] = (Iterator<SQLClientInfoException>) mapIterator0;
      Hashtable<String, ClientInfoStatus> hashtable1 = new Hashtable<String, ClientInfoStatus>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(":", "$D.*", hashtable1, sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashtable1, sQLClientInfoException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(":", map0);
      Transformer<SQLClientInfoException, SQLClientInfoException> transformer0 = InvokerTransformer.invokerTransformer("qc");
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.objectGraphIterator(sQLClientInfoException2, (Transformer<? super SQLClientInfoException, ? extends SQLClientInfoException>) transformer0);
      iteratorArray0[4] = iterator0;
      MapIterator<SQLClientInfoException, String> mapIterator1 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLClientInfoException, String> mapIterator2 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends String>) mapIterator1);
      iteratorArray0[5] = (Iterator<SQLClientInfoException>) mapIterator2;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[6] = (Iterator<SQLClientInfoException>) resettableListIterator0;
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[7];
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", "'=U-4;7+3>|`x>!", 0, map0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("The map size must be 0 or 1", "", hashtable1, sQLTransactionRollbackException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException4;
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("", hashtable1, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException5;
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("delimiter may not be null", map0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException6;
      ResettableListIterator<SQLClientInfoException> resettableListIterator1 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0);
      iteratorArray0[7] = (Iterator<SQLClientInfoException>) resettableListIterator1;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, (-1687));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Class<IIOMetadataNode>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends Class<IIOMetadataNode>>) orderedIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("whS)q9*zt;Jt[XUF");
      int int0 = 0;
      iIOMetadataNode0.getAttributeNode("whS)q9*zt;Jt[XUF");
      // Undeclared exception!
      try { 
        iIOMetadataNode0.setAttributeNodeNS((Attr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<IIOMetadataNode>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLException> mapIterator0 = IteratorUtils.emptyMapIterator();
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) orderedMapIterator0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[7];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("$nebtG");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLTimeoutException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException(sQLSyntaxErrorException0);
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("", "", 3040);
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException3 = new SQLSyntaxErrorException("$nebtG", (String) null, (-1670), sQLIntegrityConstraintViolationException0);
      sQLSyntaxErrorExceptionArray0[3] = sQLSyntaxErrorException3;
      SQLSyntaxErrorException sQLSyntaxErrorException4 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.ExceptionFactory", "", (-1670));
      sQLSyntaxErrorExceptionArray0[4] = sQLSyntaxErrorException4;
      SQLSyntaxErrorException sQLSyntaxErrorException5 = new SQLSyntaxErrorException("$nebtG", "!J*}=|<z3/Pv5");
      sQLSyntaxErrorExceptionArray0[5] = sQLSyntaxErrorException5;
      SQLSyntaxErrorException sQLSyntaxErrorException6 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[6] = sQLSyntaxErrorException6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 106, 3040);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedIterator0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.spliterator();
      Iterator<Object> iterator0 = IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) arrayDeque0);
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) "");
      java.util.function.Predicate<Object> predicate1 = predicate0.negate();
      java.util.function.Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate2.or(predicate1);
      predicate0.negate();
      java.util.function.Predicate<Object> predicate3 = predicate2.or(predicate1);
      arrayDeque0.removeIf(predicate3);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 128;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 128;
      longArray0[5] = (long) 0;
      SQLWarning sQLWarning0 = new SQLWarning("Index: ", "ListIterator must not be null", 0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("aN|M5<:\"`w0aQP<L", "Index: ", 128, longArray0, sQLWarning0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.Flat3Map$KeySetIterator", "ListIterator must not be null", 128, batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 128, 0, sQLTransientConnectionException0);
      linkedList0.add(dataTruncation0);
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(linkedList0);
      linkedList0.removeLastOccurrence(reverseListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) reverseListIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iteratorArray0, 10, 1088);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OrderedMapIterator<Integer, Vector<Integer>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<Integer> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Integer>) orderedMapIterator0);
      IteratorUtils.toList((Iterator<?>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("`");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("`", "`", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("`", "`", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException((String) null, sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      int int0 = (-5474);
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException((String) null, "suffix may not be null", (-5474), sQLTransactionRollbackException3);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, (-1), (-622));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("delimiter may not be null");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("delimiter may not be null");
      iIOMetadataNode1.getElementsByTagNameNS("delimiter may not be null", "org.apache.commons.collections4.functors.OrPredicate");
      iIOMetadataNode1.getAttributeNodeNS("delimiter may not be null", "delimiter may not be null");
      iIOMetadataNode0.replaceChild(iIOMetadataNode1, iIOMetadataNode1);
      IteratorUtils.getIterator(iIOMetadataNode0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      iIOMetadataNodeArray0[0] = iIOMetadataNode1;
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 0);
      Hashtable<StringTokenizer, SQLTransientConnectionException> hashtable0 = new Hashtable<StringTokenizer, SQLTransientConnectionException>(0);
      Enumeration<SQLTransientConnectionException> enumeration0 = hashtable0.elements();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) enumeration0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) iterator0, class0);
      LinkedList<Vector<BatchUpdateException>> linkedList0 = new LinkedList<Vector<BatchUpdateException>>();
      LoopingListIterator<Vector<BatchUpdateException>> loopingListIterator0 = new LoopingListIterator<Vector<BatchUpdateException>>(linkedList0);
      Class<Locale.FilteringMode>[] classArray0 = (Class<Locale.FilteringMode>[]) Array.newInstance(Class.class, 2);
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      linkedList0.push(vector0);
      classArray0[0] = class1;
      Class<Locale.FilteringMode> class2 = Locale.FilteringMode.class;
      classArray0[1] = class2;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("::", classArray0, iIOMetadataNodeArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Vector<BatchUpdateException>>) loopingListIterator0, (Transformer<? super Vector<BatchUpdateException>, String>) invokerTransformer0, "org.apache.commons.collections4.functors.OrPredicate", "8N=VLQLWY", "::");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IteratorUtils.getIterator((Object) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IteratorUtils.emptyIterator();
      MapIterator<SQLClientInfoException, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      SQLWarning sQLWarning0 = new SQLWarning("");
      sQLExceptionArray0[0] = (SQLException) sQLWarning0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "gE", (-632));
      sQLExceptionArray0[1] = (SQLException) sQLNonTransientConnectionException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLWarning0);
      sQLExceptionArray0[2] = (SQLException) sQLIntegrityConstraintViolationException0;
      StackTraceElement[] stackTraceElementArray0 = sQLIntegrityConstraintViolationException0.getStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLExceptionArray0[3] = (SQLException) sQLTransactionRollbackException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("gE", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gE");
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      sQLTransactionRollbackException0.setNextException(sQLTimeoutException0);
      sQLTimeoutException0.printStackTrace(printWriter0);
      sQLExceptionArray0[4] = (SQLException) sQLTimeoutException0;
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLExceptionArray0[5] = (SQLException) sQLDataException0;
      IteratorUtils.arrayListIterator(sQLExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "", (-632), (-111));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<DataTruncation, Integer> hashMap0 = new HashMap<DataTruncation, Integer>();
      EntrySetMapIterator<DataTruncation, Integer> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, Integer>(hashMap0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.map.Flat3Map$EntrySetIterator");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.apache.commons.collections4.map.Flat3Map$EntrySetIterator", "org.apache.commons.collections4.map.Flat3Map$EntrySetIterator", sQLTransactionRollbackException0);
      DataTruncation dataTruncation0 = new DataTruncation(128, false, false, 32, 128, sQLNonTransientException0);
      Integer integer0 = new Integer(32);
      hashMap0.put(dataTruncation0, integer0);
      DataTruncation dataTruncation1 = new DataTruncation(128, false, false, 0, 128);
      dataTruncation1.getDataSize();
      dataTruncation1.getTransferSize();
      dataTruncation1.getRead();
      Integer integer1 = new Integer(0);
      hashMap0.put(dataTruncation1, integer1);
      MapIterator<DataTruncation, Integer> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends DataTruncation, ? extends Integer>) entrySetMapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      // Undeclared exception!
      try { 
        entrySetMapIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedIterator<Class<IIOMetadataNode>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<? extends Class<IIOMetadataNode>>) orderedIterator0);
      Integer integer0 = new Integer(100);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1109);
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer(1130);
      Integer integer5 = new Integer(1);
      Integer integer6 = new Integer(1130);
      Class<SQLWarning>[] classArray0 = (Class<SQLWarning>[]) Array.newInstance(Class.class, 3);
      Class<SQLWarning> class0 = SQLWarning.class;
      classArray0[0] = class0;
      Class<SQLWarning> class1 = SQLWarning.class;
      classArray0[1] = class1;
      Class<SQLWarning> class2 = SQLWarning.class;
      classArray0[2] = class2;
      Transformer<SQLDataException, String> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) loopingIterator0, (Transformer<? super SQLDataException, String>) transformer0, "{nSM3R<8", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      instantiateFactory0.create();
      FactoryTransformer<SQLFeatureNotSupportedException, String> factoryTransformer0 = new FactoryTransformer<SQLFeatureNotSupportedException, String>(instantiateFactory0);
      instantiateFactory0.create();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", (Throwable) null);
      factoryTransformer0.transform(sQLFeatureNotSupportedException0);
      instantiateFactory0.create();
      String string0 = "ofk(d$[L";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) null, (Transformer<? super SQLFeatureNotSupportedException, String>) factoryTransformer0, (String) null, "ofk(d$[L", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(484);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(484);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2207);
      integerArray0[4] = integer4;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0, 0, 0);
      IteratorUtils.toString((Iterator<Integer>) resettableListIterator0);
      Hashtable<Stack<IIOMetadataNode>, Integer> hashtable0 = new Hashtable<Stack<IIOMetadataNode>, Integer>();
      EntrySetMapIterator<Stack<IIOMetadataNode>, Integer> entrySetMapIterator0 = new EntrySetMapIterator<Stack<IIOMetadataNode>, Integer>(hashtable0);
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      hashtable0.put(stack0, integer1);
      entrySetMapIterator0.toString();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Stack<IIOMetadataNode>, Integer>) entrySetMapIterator0);
      ResettableListIterator<DataTruncation> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableListIterator1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(linkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("K~gJ,f(%");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.removeChild(iIOMetadataNode1);
      Node node1 = iIOMetadataNode0.replaceChild(node0, iIOMetadataNode1);
      iIOMetadataNode0.replaceChild(node1, node0);
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      IteratorUtils.find((Iterator<String>) resettableListIterator0, (Predicate<? super String>) nullIsExceptionPredicate0);
      IteratorUtils.getIterator((Object) null);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[3];
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(iIOMetadataNodeArray0, 1313);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) vector0);
      Class<SQLNonTransientException>[] classArray0 = (Class<SQLNonTransientException>[]) Array.newInstance(Class.class, 3);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("gzZF|xN]I)Q", "NodeList must not be null");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("gzZF|xN]I)Q", "NodeList must not be null", 4088, hashtable0, sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("NodeList must not be null", sQLClientInfoException0);
      vector0.add(sQLDataException0);
      vector0.iterator();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      classArray0[0] = class0;
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      classArray0[1] = class1;
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      classArray0[2] = class2;
      Transformer<SQLDataException, String> transformer0 = InvokerTransformer.invokerTransformer("gzZF|xN]I)Q", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) resettableIterator0, (Transformer<? super SQLDataException, String>) transformer0, "gzZF|xN]I)Q", "J @UY)3", "");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", (String) null, sQLTransactionRollbackException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      stack0.toArray(sQLIntegrityConstraintViolationExceptionArray0);
      sQLTransactionRollbackException0.spliterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("p|ukD", sQLTransactionRollbackException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLRecoverableException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      stack0.add((SQLTransientException) sQLTimeoutException0);
      IteratorUtils.loopingListIterator((List<SQLTransientException>) stack0);
      ResettableListIterator<ArrayDeque<SQLTimeoutException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<ArrayDeque<SQLTimeoutException>>) resettableListIterator0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("ys`Xh\\GBUX{cYzh\"Cn", "I7VR,V^sx21H", hashMap0, sQLRecoverableException0);
      ArrayIterator<SQLIntegrityConstraintViolationException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLIntegrityConstraintViolationException>(sQLClientInfoException0, 3342, 123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<IIOMetadataNode, Object> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ?>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) mapIterator1, (-1121L), (-1121L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "H2IC5ffu.p");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLIntegrityConstraintViolationException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", sQLTransactionRollbackException0);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLRecoverableException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLDataException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLRecoverableException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("+nzzW9)", (String) null, 1851);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLIntegrityConstraintViolationException2;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("'&|(W7Guj7", "", 1851, sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[3] = sQLNonTransientException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("", "", 1851);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLIntegrityConstraintViolationException3;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("900`n", sQLIntegrityConstraintViolationException0);
      sQLNonTransientExceptionArray0[5] = sQLNonTransientException1;
      SQLNonTransientException sQLNonTransientException2 = new SQLNonTransientException(sQLNonTransientException0);
      sQLNonTransientExceptionArray0[6] = sQLNonTransientException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", (-1), sQLNonTransientException0);
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("The method to invoke must not be null", "The method to invoke must not be null", 2049);
      sQLNonTransientExceptionArray0[8] = (SQLNonTransientException) sQLNonTransientConnectionException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 2049);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Enumeration must not be null", "Enumeration must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 2);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "^I\"0j", (-834));
      DataTruncation dataTruncation0 = new DataTruncation((-2257), false, false, 3033, (-2257), sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(dataTruncation0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) listIterator0;
      OrderedMapIterator<SQLRecoverableException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[1] = (Iterator<SQLRecoverableException>) orderedMapIterator0;
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[0];
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      enumSet0.addAll(arrayDeque0);
      IteratorUtils.singletonIterator(enumSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((TreeSet<String>[]) null, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      LinkedList<Class<SQLNonTransientException>>[] linkedListArray0 = (LinkedList<Class<SQLNonTransientException>>[]) Array.newInstance(LinkedList.class, 2);
      LinkedList<Class<SQLNonTransientException>> linkedList0 = new LinkedList<Class<SQLNonTransientException>>();
      linkedListArray0[0] = linkedList0;
      LinkedList<Class<SQLNonTransientException>> linkedList1 = new LinkedList<Class<SQLNonTransientException>>();
      linkedListArray0[1] = linkedList1;
      ResettableIterator<LinkedList<Class<SQLNonTransientException>>> resettableIterator0 = IteratorUtils.arrayIterator(linkedListArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0);
      ArrayDeque<SQLDataException> arrayDeque0 = new ArrayDeque<SQLDataException>();
      SingletonIterator<ArrayDeque<SQLDataException>> singletonIterator0 = new SingletonIterator<ArrayDeque<SQLDataException>>(arrayDeque0, false);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<ArrayDeque<SQLDataException>>) singletonIterator0, (Closure<? super ArrayDeque<SQLDataException>>) closure0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", (Throwable) null);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("", "", (-5099));
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException((String) null, "");
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("", "Cannot add to list until next() or previous() called", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("prefix may not be null", sQLFeatureNotSupportedException5);
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException8 = new SQLFeatureNotSupportedException("uc(l!7rbf+g");
      sQLFeatureNotSupportedExceptionArray0[8] = sQLFeatureNotSupportedException8;
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("prefix may not be null");
      ListIterator<SQLFeatureNotSupportedException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) equalPredicate0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) listIterator1);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      assertFalse(resettableListIterator1.equals((Object)resettableListIterator0));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LinkedList<Hashtable<DataTruncation, SQLRecoverableException>> linkedList0 = new LinkedList<Hashtable<DataTruncation, SQLRecoverableException>>();
      Hashtable<DataTruncation, SQLRecoverableException> hashtable0 = new Hashtable<DataTruncation, SQLRecoverableException>();
      linkedList0.add(hashtable0);
      linkedList0.iterator();
      Hashtable<DataTruncation, SQLRecoverableException> hashtable1 = new Hashtable<DataTruncation, SQLRecoverableException>();
      linkedList0.add(hashtable1);
      linkedList0.add(hashtable1);
      IteratorUtils.loopingListIterator((List<Hashtable<DataTruncation, SQLRecoverableException>>) linkedList0);
      IteratorUtils.emptyMapIterator();
      int int0 = (-364);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) linkedList0, (-364));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, 130, 130);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(object0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLWarning0);
      sQLWarning0.initCause(sQLInvalidAuthorizationSpecException0);
      DataTruncation dataTruncation0 = new DataTruncation(1, false, true, 1, 3388, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
