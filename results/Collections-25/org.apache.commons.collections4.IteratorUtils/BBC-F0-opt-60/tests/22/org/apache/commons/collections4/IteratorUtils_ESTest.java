/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 07:54:33 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[20];
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      IteratorUtils.get((Iterator<Properties>) resettableIterator0, 17);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ResettableIterator<LinkedHashSet<String>> resettableIterator1 = IteratorUtils.singletonIterator(linkedHashSet0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-101);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(onePredicate0, onePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<LinkedHashSet<String>>) resettableIterator1, (Predicate<? super LinkedHashSet<String>>) andPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OnePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      EmptyIterator.emptyIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Cq#%U%Na0f");
      arrayDeque0.add(sQLTransactionRollbackException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) arrayDeque0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) resettableIterator0, (Transformer<? super SQLTransactionRollbackException, String>) constantTransformer0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.functors.InstantiateFactory", "Predicate must not be null", (-3218), hashMap0);
      DataTruncation dataTruncation0 = new DataTruncation((-3218), true, true, (-3218), (-3218), sQLClientInfoException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-1003), true, false, (-2246), (-1003));
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(886, false, false, (-3218), 886);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-3218), false, false, 1, (-1003), dataTruncation2);
      dataTruncationArray0[3] = dataTruncation3;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 4, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode0, locale_FilteringMode2, locale_FilteringMode2);
      enumSet0.add(locale_FilteringMode2);
      IteratorUtils.singletonListIterator(enumSet0);
      int int0 = (-271);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("L}<", "z[N]U_\"1@W(i44zmVaG", (-271), hashtable0);
      MockFile mockFile0 = new MockFile((File) null, "L}<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = "delimiter may not be null";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "z[N]U_\"1@W(i44zmVaG";
      objectArray0[2] = (Object) hashtable0;
      objectArray0[3] = (Object) hashtable0;
      objectArray0[4] = (Object) enumSet0;
      objectArray0[5] = (Object) locale_FilteringMode1;
      objectArray0[6] = (Object) locale_FilteringMode2;
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Iterator<Object> iterator0 = arrayDeque0.iterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("4+ l)gQQwa|aKY");
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, String>) constantTransformer0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[9];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("0UpD", (String) null, 1282);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("f8i8qU{P[", "4+ l)gQQwa|aKY", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("[]");
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("", (String) null);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("");
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("f8i8qU{P[");
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException("L+");
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      SQLTimeoutException sQLTimeoutException8 = new SQLTimeoutException(sQLTimeoutException0);
      sQLTimeoutExceptionArray0[8] = sQLTimeoutException8;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      predicateArray0[0] = (Predicate<Object>) andPredicate0;
      Predicate<Object> predicate1 = TruePredicate.truePredicate();
      predicateArray0[1] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) allPredicate0;
      Transformer<Object, SQLDataException> transformer0 = ConstantTransformer.nullTransformer();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicateArray0[2]);
      predicateArray0[3] = (Predicate<Object>) transformedPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[4] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate2 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) constantTransformer0, (Predicate<? super Object>) onePredicate0);
      predicateArray0[5] = predicate2;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate2);
      predicateArray0[6] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate3 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[7] = predicate3;
      Predicate<Object> predicate4 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) resettableIterator0, (Predicate<? super SQLTimeoutException>) predicate4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      UniquePredicate<IIOMetadataNode> uniquePredicate0 = new UniquePredicate<IIOMetadataNode>();
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<String> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends String>) resettableListIterator0);
      IteratorUtils.size(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.size(listIterator0);
      IteratorUtils.contains((Iterator<Properties>) listIterator0, (Object) listIterator0);
      IteratorUtils.getIterator(listIterator0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "", 0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException((String) null, "", sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException((String) null, "", sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException((String) null);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException(",4wG\"Cw-^bN ", (String) null, 0, sQLDataException2);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException();
      sQLDataExceptionArray0[5] = sQLDataException5;
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0, 0, 0);
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLDataException2);
      IteratorUtils.filteredIterator((Iterator<? extends SQLException>) resettableIterator0, (Predicate<? super SQLException>) predicate0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("w_Q3g#)L=oJt");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<IIOMetadataNode>) singletonIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      UniquePredicate<IIOMetadataNode> uniquePredicate0 = new UniquePredicate<IIOMetadataNode>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.find((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = null;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>((Predicate<? super Object>) null, transformer0, transformer0);
      MapIterator<Locale.FilteringMode, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<Locale.FilteringMode, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.toString((Iterator<Locale.FilteringMode>) mapIterator1, (Transformer<? super Locale.FilteringMode, String>) ifTransformer0, "", "", "");
      SQLWarning sQLWarning0 = new SQLWarning("`KV2c_U cx", "", sQLNonTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      UniquePredicate<IIOMetadataNode> uniquePredicate0 = new UniquePredicate<IIOMetadataNode>();
      Properties properties0 = new Properties();
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties1 = new Properties();
      propertiesArray0[0] = properties1;
      propertiesArray0[1] = properties0;
      propertiesArray0[2] = properties0;
      propertiesArray0[3] = properties0;
      propertiesArray0[4] = properties0;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      IteratorUtils.get((Iterator<Properties>) resettableIterator0, 1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      UniquePredicate<IIOMetadataNode> uniquePredicate0 = new UniquePredicate<IIOMetadataNode>();
      Properties properties0 = new Properties();
      Properties[] propertiesArray0 = new Properties[20];
      propertiesArray0[0] = properties0;
      propertiesArray0[1] = properties0;
      propertiesArray0[2] = properties0;
      propertiesArray0[3] = properties0;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      IteratorUtils.get((Iterator<Properties>) resettableIterator0, 7);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      Hashtable<SQLRecoverableException, SQLIntegrityConstraintViolationException> hashtable0 = new Hashtable<SQLRecoverableException, SQLIntegrityConstraintViolationException>();
      EntrySetMapIterator<SQLRecoverableException, SQLIntegrityConstraintViolationException> entrySetMapIterator0 = null;
      try {
        entrySetMapIterator0 = new EntrySetMapIterator<SQLRecoverableException, SQLIntegrityConstraintViolationException>((Map<SQLRecoverableException, SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.isEmpty((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 512);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      UniquePredicate<IIOMetadataNode> uniquePredicate0 = new UniquePredicate<IIOMetadataNode>();
      IteratorUtils.getIterator(uniquePredicate0);
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) resettableIterator0, 5341);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 5340
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      UniquePredicate<IIOMetadataNode> uniquePredicate0 = new UniquePredicate<IIOMetadataNode>();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<ArrayDeque<ArrayDeque>>) null, (Closure<? super ArrayDeque<ArrayDeque>>) closure0);
      ExceptionTransformer.exceptionTransformer();
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) closure0, 2662);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ResettableIterator<Boolean> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ExceptionClosure.exceptionClosure();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<ArrayDeque<ArrayDeque>>) resettableIterator0, (Closure<? super ArrayDeque<ArrayDeque>>) closure0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("m<A6}[sdK");
      ResettableIterator<IIOMetadataNode> resettableIterator1 = IteratorUtils.singletonIterator(iIOMetadataNode0);
      ListIteratorWrapper<IIOMetadataNode> listIteratorWrapper0 = new ListIteratorWrapper<IIOMetadataNode>(resettableIterator1);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("m<A6}[sdK");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      IteratorUtils.toString((Iterator<IIOMetadataNode>) listIteratorWrapper0, (Transformer<? super IIOMetadataNode, String>) transformer0, "m<A6}[sdK", "m<A6}[sdK", "[");
      IteratorUtils.getIterator(transformer0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ResettableIterator<Boolean> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<ArrayDeque<ArrayDeque>>) resettableIterator0, (Closure<? super ArrayDeque<ArrayDeque>>) closure0);
      ExceptionTransformer.exceptionTransformer();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[9];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "0!,%+", hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", 1, hashMap0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("%3]\"U<P;Gn><]Xs^y9", "UYU|1~Ljk;Ky", (Map<String, ClientInfoStatus>) null, sQLClientInfoException2);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("@8$ts>F,", "odpD4ZS?O", hashMap0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException6;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException(hashtable0, sQLClientInfoException6);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException3);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException8;
      SQLClientInfoException sQLClientInfoException9 = new SQLClientInfoException("%3]\"U<P;Gn><]Xs^y9", hashMap0);
      sQLClientInfoExceptionArray0[8] = sQLClientInfoException9;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("delimiter may not be null");
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) sQLClientInfoExceptionArray0);
      sQLClientInfoException9.printStackTrace(printWriter0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      Iterator<SQLException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLException>) listIterator0, (Iterator<? extends SQLException>) listIterator0);
      IteratorUtils.unmodifiableIterator(iterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      NOPClosure.nopClosure();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<ArrayDeque<ArrayDeque>>) resettableIterator0, (Closure<? super ArrayDeque<ArrayDeque>>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      UniquePredicate<IIOMetadataNode> uniquePredicate0 = new UniquePredicate<IIOMetadataNode>();
      EmptyIterator.resettableEmptyIterator();
      UniquePredicate<IIOMetadataNode> uniquePredicate1 = new UniquePredicate<IIOMetadataNode>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) uniquePredicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      Transformer<IIOMetadataNode, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString(iterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "", "VZbn}", "");
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "prefix may not be null");
      IteratorUtils.getIterator(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      UniquePredicate<IIOMetadataNode> uniquePredicate0 = new UniquePredicate<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) closure0;
      objectArray0[1] = (Object) predicate0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) closure0;
      objectArray0[4] = (Object) predicate0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) predicate0;
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      IteratorUtils.apply((Iterator<ArrayDeque<ArrayDeque>>) objectArrayListIterator0, (Closure<? super ArrayDeque<ArrayDeque>>) closure0);
      ExceptionTransformer.exceptionTransformer();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      linkedList0.iterator();
      IteratorUtils.isEmpty(iterator0);
      Hashtable<Integer, BatchUpdateException> hashtable0 = new Hashtable<Integer, BatchUpdateException>();
      EntrySetMapIterator<Integer, BatchUpdateException> entrySetMapIterator0 = new EntrySetMapIterator<Integer, BatchUpdateException>(hashtable0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) entrySetMapIterator0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      linkedList0.add(iIOMetadataNode0);
      linkedList0.addLast(iIOMetadataNode0);
      DefaultEquator.defaultEquator();
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      ExceptionTransformer.exceptionTransformer();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IteratorUtils.loopingListIterator((List<Object>) arrayList0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "Yx%#k.'dXlv6bz,>h", 2722, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", sQLFeatureNotSupportedException0);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      Factory<Boolean> factory0 = ConstantFactory.constantFactory((Boolean) null);
      Transformer<Object, Boolean> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Boolean>) factory0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) listIterator0, (Predicate<? super SQLSyntaxErrorException>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(transformer0, defaultEquator0);
      Predicate<Object> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) equalPredicate0);
      NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, 898, 10);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(420, false, false, 420, 626, dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-1453), false, false, (-1453), 898, dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-2453), false, false, (-1453), 4704);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(10, true, true, (-3069), (-3069), dataTruncation1);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-2453), false, true, (-1453), 0);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(621, false, false, (-1109), 123, dataTruncation1);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(4704, true, true, 512, 59);
      dataTruncationArray0[7] = dataTruncation7;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0, 5);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Iterator<? extends DataTruncation>) resettableIterator0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) zippingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) listIterator0, (-239L), 736L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0, defaultEquator0);
      NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      IteratorUtils.matchesAny((Iterator<Closure<Object>>) null, (Predicate<? super Closure<Object>>) equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      Stack<Properties> stack0 = new Stack<Properties>();
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(stack0);
      Properties properties0 = new Properties();
      stack0.add(properties0);
      // Undeclared exception!
      try { 
        IteratorUtils.contains((Iterator<Properties>) loopingIterator0, (Object) loopingIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<?>) orderedIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      Class<SQLWarning> class0 = SQLWarning.class;
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      linkedList0.iterator();
      IteratorUtils.isEmpty(iterator0);
      Hashtable<Integer, BatchUpdateException> hashtable0 = new Hashtable<Integer, BatchUpdateException>();
      EntrySetMapIterator<Integer, BatchUpdateException> entrySetMapIterator0 = new EntrySetMapIterator<Integer, BatchUpdateException>(hashtable0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) entrySetMapIterator0);
      IteratorUtils.emptyListIterator();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      linkedList0.iterator();
      DefaultEquator.defaultEquator();
      Predicate<SQLRecoverableException> predicate0 = new UniquePredicate<SQLRecoverableException>();
      IteratorUtils.getIterator(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.size(listIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IteratorUtils.contains((Iterator<Properties>) listIterator0, (Object) listIterator0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ForClosure<Object> forClosure0 = new ForClosure<Object>(61, closure0);
      IteratorUtils.apply((Iterator<ArrayDeque<ArrayDeque>>) listIterator0, (Closure<? super ArrayDeque<ArrayDeque>>) forClosure0);
      ExceptionTransformer.exceptionTransformer();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, class0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      OrderedMapIterator<IIOMetadataNode, SQLTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLTransientConnectionException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLTransientConnectionException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) abstractMapIteratorDecorator0, (-3029L), (-3029L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0, defaultEquator0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<ArrayList<Stack>>) iterator0, (Transformer<? super ArrayList<Stack>, String>) transformer0, "_,%^G(KS]kQAb$}N/|", "org.apache.commons.collections4.functors.ExceptionPredicate", "Iterator getKey() can only be called after next() and before remove()");
      MapIterator<Closure<Object>, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.matchesAny((Iterator<Closure<Object>>) mapIterator0, (Predicate<? super Closure<Object>>) equalPredicate0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 2);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(arrayDeque0);
      iteratorArray0[0] = (Iterator<Integer>) loopingIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.size(listIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      IteratorUtils.contains((Iterator<Properties>) listIterator0, (Object) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.size(listIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackException0.printStackTrace();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IteratorUtils.contains((Iterator<Properties>) listIterator0, (Object) listIterator0);
      IteratorUtils.isEmpty(singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null, 3562, 3965);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      linkedList0.iterator();
      Iterator<HashSet<SQLInvalidAuthorizationSpecException>> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<HashSet<SQLInvalidAuthorizationSpecException>>) null, (Predicate<? super HashSet<SQLInvalidAuthorizationSpecException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      ExceptionTransformer.exceptionTransformer();
      IteratorUtils.asIterable((Iterator<?>) iterator1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "BgbsjQ";
      stringArray0[1] = "ew";
      stringArray0[2] = "suffix may not be null";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "q-b\"eV[fgJ`.jNw";
      stringArray0[6] = "transformer may not be null";
      stringArray0[7] = "";
      IteratorUtils.arrayIterator(stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<?>) orderedIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      Predicate<BatchUpdateException> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterable<Object> iterable0 = IteratorUtils.asIterable((Iterator<?>) orderedIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      IteratorUtils.contains((Iterator<Object>) null, (Object) iterable0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", "");
      IteratorUtils.nodeListIterator(nodeList0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      IdentityPredicate<IIOMetadataNode> identityPredicate0 = new IdentityPredicate<IIOMetadataNode>((IIOMetadataNode) null);
      DataTruncation dataTruncation0 = new DataTruncation((-3498), true, true, (-3498), (-3498));
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(dataTruncation0, (Equator<Object>) null);
      NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      IteratorUtils.find(iterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asIterable((Iterator<?>) orderedIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      Class<SQLWarning> class0 = SQLWarning.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAll((Iterator<HashSet<SQLInvalidAuthorizationSpecException>>) null, (Predicate<? super HashSet<SQLInvalidAuthorizationSpecException>>) predicate0);
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<ArrayList<Stack>>) null, (Transformer<? super ArrayList<Stack>, String>) transformer0, "q^Z<rS%%4Vw", "org.apache.commons.collections4.functors.ExceptionPredicate", "org.apache.commons.collections4.functors.ExceptionPredicate");
      MapIterator<Closure<Object>, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.matchesAny((Iterator<Closure<Object>>) mapIterator0, (Predicate<? super Closure<Object>>) predicate1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      DefaultEquator.defaultEquator();
      ExceptionTransformer.exceptionTransformer();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      Transformer<IIOMetadataNode, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, (String) null, "VZbn}", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      int[] intArray0 = new int[3];
      intArray0[0] = 842;
      intArray0[1] = 0;
      intArray0[2] = 1838;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(batchUpdateException0);
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      IteratorUtils.getIterator(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      linkedList0.iterator();
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) resettableListIterator0);
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      linkedList1.descendingIterator();
      IteratorUtils.asIterable((Iterator<?>) listIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("M$v9ct", (String) null, 2662);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("M$v9ct", "M$v9ct", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, 2662);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      MapIterator<SQLRecoverableException, HashSet<Integer>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, (Iterator<? extends SQLRecoverableException>) mapIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      OrderedMapIterator<IIOMetadataNode, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      Transformer<IIOMetadataNode, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) orderedMapIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "y%Ku//", (String) null, "y%Ku//");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 580);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      ExceptionTransformer.exceptionTransformer();
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, IIOMetadataNode>(orderedMapIterator0);
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("uiWdW7OthT", classArray0, classArray0);
      IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLNonTransientException, ? extends String>) invokerTransformer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("uiWdW7OthT", (String) null);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      IteratorUtils.asIterable((Iterator<? extends SQLRecoverableException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      MapIterator<String, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) mapIterator0, 5);
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(list0);
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>) mapIterator0, (Iterator<? extends String>) loopingIterator0);
      IteratorUtils.toListIterator((Iterator<? extends String>) iterator0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      linkedList1.descendingIterator();
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<HashSet<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.singletonIterator(hashSet0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.map.AbstractHashedMap$KeySet", ", size=", (-1774), hashMap0, batchUpdateException0);
      notPredicate0.evaluate(sQLClientInfoException0);
      OrPredicate.orPredicate((Predicate<? super Object>) notPredicate0, (Predicate<? super Object>) notPredicate0);
      IteratorUtils.matchesAll((Iterator<HashSet<SQLInvalidAuthorizationSpecException>>) resettableIterator0, (Predicate<? super HashSet<SQLInvalidAuthorizationSpecException>>) notPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) orderedIterator0, (Transformer<? super SQLNonTransientException, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      OrderedMapIterator<Boolean, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<Boolean> list0 = IteratorUtils.toList((Iterator<? extends Boolean>) orderedMapIterator0, 123);
      ReverseListIterator<Boolean> reverseListIterator0 = new ReverseListIterator<Boolean>(list0);
      IteratorUtils.skippingIterator((Iterator<Boolean>) reverseListIterator0, 1L);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[0];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Predicate<BatchUpdateException> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      OrderedMapIterator<SQLTransactionRollbackException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransactionRollbackException, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransactionRollbackException, ? extends BatchUpdateException>) orderedMapIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) null, (Transformer<? super IIOMetadataNode, String>) transformer0, "", "6l_zkQ1ZR!", "6*PLmNm?r");
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0);
      IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) zippingIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator1);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(602);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(602);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(12);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      integerArray0[5] = integer5;
      IteratorUtils.arrayListIterator(integerArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.size(orderedIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) orderedIterator0, (Transformer<? super SQLNonTransientException, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      ExceptionTransformer.exceptionTransformer();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      OrPredicate.orPredicate((Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.matchesAll((Iterator<HashSet<SQLInvalidAuthorizationSpecException>>) null, (Predicate<? super HashSet<SQLInvalidAuthorizationSpecException>>) notPredicate0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      MapIterator<SQLRecoverableException, HashSet<Integer>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, (Iterator<? extends SQLRecoverableException>) mapIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends String>) resettableListIterator0);
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      linkedList1.descendingIterator();
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<HashSet<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.singletonIterator(hashSet0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      notPredicate0.evaluate((Object) null);
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) notPredicate0, (Predicate<? super Object>) notPredicate0);
      IteratorUtils.matchesAll((Iterator<HashSet<SQLInvalidAuthorizationSpecException>>) resettableIterator0, (Predicate<? super HashSet<SQLInvalidAuthorizationSpecException>>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) null, (Transformer<? super SQLNonTransientException, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator((IIOMetadataNode) null);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      EmptyIterator.emptyIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLRecoverableException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLNonTransientConnectionException0, defaultEquator0);
      NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      IteratorUtils.find((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      IteratorUtils.find((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) equalPredicate0);
      int int0 = 3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1453), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0, defaultEquator0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      IteratorUtils.find(iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(linkedList0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) loopingListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("R}t/?Bh76*");
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      OrderedMapIterator<Properties, Stack<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Properties, Stack<Object>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, Stack<Object>>(orderedMapIterator0);
      IteratorUtils.contains((Iterator<Properties>) abstractMapIteratorDecorator0, (Object) sQLTransactionRollbackException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 8);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, 0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("R}t/?Bh76*", (String) null);
      SQLWarning sQLWarning0 = new SQLWarning("Predicate must not be null", sQLTransientException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLWarning0);
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("s99(wOwh", "s99(wOwh", 3975);
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) listIterator0;
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(arrayList0);
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) loopingIterator0;
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) loopingIterator0);
      iteratorArray0[3] = iterator0;
      ConstantTransformer.nullTransformer();
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) listIterator0);
      iteratorArray0[7] = iterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", "delimiter may not be null", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("", "prefix may not be null", (-1), sQLTimeoutException2);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("prefix may not be null");
      IteratorUtils.toString(iterator0, (Transformer<? super SQLTimeoutException, String>) transformer0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator((IIOMetadataNode) null);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      Iterator<Boolean> iterator0 = EmptyIterator.emptyIterator();
      List<Boolean> list0 = IteratorUtils.toList((Iterator<? extends Boolean>) iterator0, 123);
      ReverseListIterator<Boolean> reverseListIterator0 = new ReverseListIterator<Boolean>(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Boolean>) reverseListIterator0, (-1928L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Array class must not be null";
      stringArray0[1] = "XO|ztIh%bn";
      stringArray0[2] = "";
      stringArray0[3] = "|9L}Zp)&:L(oYc-f-$A";
      stringArray0[4] = "transformer may not be null";
      stringArray0[5] = "oKIJ3y0H";
      stringArray0[6] = "izc:+3P|>eoSb";
      int int0 = 0;
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) objectArrayListIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EmptyListIterator.resettableEmptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("J1cpptE$IBu");
      ExceptionTransformer.exceptionTransformer();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) singletonIterator0, (Transformer<? super IIOMetadataNode, String>) null, "YMhkmB4Th", "k", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, class0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonListIterator<SQLNonTransientException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientException>(sQLDataException0);
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientException>) singletonListIterator0);
      IteratorUtils.pushbackIterator((Iterator<?>) listIterator0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[7];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("start", sQLDataException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("InstantiateTransformer: Constructor threw an exception");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(" cannot be null", "start", (-1865));
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException("", " cannot be null", (-2028));
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayDeque<Transformer<Object, String>> arrayDeque0 = new ArrayDeque<Transformer<Object, String>>();
      ListIterator<ArrayDeque<Transformer<Object, String>>> listIterator0 = IteratorUtils.singletonListIterator(arrayDeque0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      arrayDeque0.poll();
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IteratorUtils.getIterator(listIterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.singletonIterator(locale_FilteringMode0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, 2267, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(linkedList0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) loopingListIterator0);
      ExceptionTransformer.exceptionTransformer();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.functors.ClosureTransformer");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, false);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      linkedList0.offerLast((IIOMetadataNode) null);
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      Transformer<IIOMetadataNode, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator1, (Transformer<? super IIOMetadataNode, String>) transformer0, "YMhkmB4Th", "YMhkmB4Th", "YMhkmB4Th");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(linkedList0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) loopingListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      SQLException sQLException0 = new SQLException("R}t/?Bh76*", "", 16);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "R}t/?Bh76*", 266, hashMap0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLClientInfoException0, comparator0, comparatorPredicate_Criterion0);
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(comparatorPredicate0);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) comparatorPredicate0);
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator1 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(arrayList0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) loopingListIterator1, (long) 266);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LoopingListIterator<Object> loopingListIterator2 = new LoopingListIterator<Object>(linkedList1);
      IteratorUtils.size(loopingListIterator2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Iterator<Boolean> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<Boolean> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Boolean>) iterator0);
      HashSet<Boolean> hashSet0 = new HashSet<Boolean>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration0, (Collection<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null, (Collection<? super Properties>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      OrderedMapIterator<Integer, LinkedHashSet<SQLRecoverableException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Integer>) orderedMapIterator0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>((SortedSet<?>) treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends StringTokenizer>) null, (Collection<? super StringTokenizer>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Integer integer0 = new Integer(1486);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>(linkedHashSet0);
      linkedList0.add(integer0);
      linkedList0.remove();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(linkedList0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) loopingListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      String[] stringArray0 = new String[0];
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) predicate0);
      OrderedMapIterator<SQLDataException, LinkedList<BatchUpdateException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, LinkedList<BatchUpdateException>>) orderedMapIterator0);
      EntrySetMapIterator<SQLSyntaxErrorException, DataTruncation> entrySetMapIterator0 = null;
      try {
        entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, DataTruncation>((Map<SQLSyntaxErrorException, DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.size(listIterator0);
      IteratorUtils.contains((Iterator<Properties>) listIterator0, (Object) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      ExceptionTransformer.exceptionTransformer();
      IteratorUtils.emptyOrderedIterator();
      Boolean[] booleanArray0 = new Boolean[0];
      ObjectArrayIterator<Boolean> objectArrayIterator0 = new ObjectArrayIterator<Boolean>(booleanArray0);
      Enumeration<Boolean> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Boolean>) objectArrayIterator0);
      LinkedHashSet<Boolean> linkedHashSet0 = new LinkedHashSet<Boolean>();
      Iterator<Boolean> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Boolean>) enumeration0, (Collection<? super Boolean>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator1, (Predicate<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      linkedList0.iterator();
      Properties[] propertiesArray0 = new Properties[8];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      properties6.entrySet();
      propertiesArray0[7] = properties7;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.contains((Iterator<Properties>) resettableListIterator0, (Object) properties0);
      IteratorUtils.isEmpty(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[3];
      int[] intArray0 = new int[4];
      intArray0[0] = (-1496);
      intArray0[1] = (-1303);
      intArray0[2] = 123;
      intArray0[3] = 251;
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      SQLTransientException sQLTransientException1 = new SQLTransientException("&h1>Vf{", "", 1747, sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientException1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLFeatureNotSupportedException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Predicate<BatchUpdateException> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLTransientException1);
      IteratorUtils.contains((Iterator<BatchUpdateException>) objectArrayListIterator0, (Object) sQLRecoverableException0);
      OrderedMapIterator<SQLTransactionRollbackException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransactionRollbackException, ? extends BatchUpdateException>) orderedMapIterator0);
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) orderedMapIterator0, 251);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableListIterator0, defaultEquator0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.isEmpty(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(linkedList0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) loopingListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingListIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("R}t/?Bh76*");
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      OrderedMapIterator<Properties, Stack<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Properties, Stack<Object>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, Stack<Object>>(orderedMapIterator0);
      IteratorUtils.contains((Iterator<Properties>) abstractMapIteratorDecorator0, (Object) sQLTransactionRollbackException0);
      IteratorUtils.isEmpty(iterator0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 8);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, 0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("R}t/?Bh76*", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException((String) null, (String) null, 3975, sQLTimeoutException2);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("R}t/?Bh76*", "R}t/?Bh76*", sQLTimeoutException2);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTransientException sQLTransientException0 = new SQLTransientException("R}t/?Bh76*", (String) null);
      SQLWarning sQLWarning0 = new SQLWarning("Predicate must not be null", sQLTransientException0);
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException(sQLWarning0);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator", ".", 3975, sQLTimeoutException3);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException("s99(wOwh", "s99(wOwh", 3975);
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      iteratorArray0[0] = (Iterator<SQLTimeoutException>) resettableListIterator0;
      ListIterator<SQLTimeoutException> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[1] = (Iterator<SQLTimeoutException>) listIterator0;
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      LoopingIterator<SQLTimeoutException> loopingIterator0 = new LoopingIterator<SQLTimeoutException>(arrayList0);
      iteratorArray0[2] = (Iterator<SQLTimeoutException>) loopingIterator0;
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) loopingIterator0);
      iteratorArray0[3] = iterator1;
      Transformer<Object, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLTimeoutException> iterator2 = IteratorUtils.objectGraphIterator(sQLTimeoutException3, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      iteratorArray0[4] = iterator2;
      Iterator<SQLTimeoutException> iterator3 = IteratorUtils.unmodifiableIterator(iterator2);
      iteratorArray0[5] = iterator3;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0, 0);
      iteratorArray0[6] = (Iterator<SQLTimeoutException>) objectArrayListIterator0;
      Iterator<SQLTimeoutException> iterator4 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) listIterator0);
      iteratorArray0[7] = iterator4;
      Iterator<SQLTimeoutException> iterator5 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) iteratorArray0[0], (Equator<Object>) defaultEquator0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      NullIsTruePredicate<SQLException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLException>(predicate1);
      IteratorUtils.matchesAny(iterator5, (Predicate<? super SQLTimeoutException>) nullIsTruePredicate0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("J1cpptE$IBu");
      Transformer<IIOMetadataNode, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<IIOMetadataNode>) singletonIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "YMhkmB4Th", "YMhkmB4Th", "QU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      IteratorUtils.getIterator("");
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<ArrayDeque<ArrayDeque>>) iterator0, (Closure<? super ArrayDeque<ArrayDeque>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "The current criterion '";
      IteratorUtils.getIterator("");
      HashMap<LinkedList<Class<SQLTransactionRollbackException>>, ArrayList<SQLDataException>> hashMap0 = new HashMap<LinkedList<Class<SQLTransactionRollbackException>>, ArrayList<SQLDataException>>();
      EntrySetMapIterator<LinkedList<Class<SQLTransactionRollbackException>>, ArrayList<SQLDataException>> entrySetMapIterator0 = new EntrySetMapIterator<LinkedList<Class<SQLTransactionRollbackException>>, ArrayList<SQLDataException>>(hashMap0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedList<Class<SQLTransactionRollbackException>>, ArrayList<SQLDataException>>) entrySetMapIterator0);
      Properties properties0 = new Properties();
      int int0 = 2352;
      ArrayIterator<SQLInvalidAuthorizationSpecException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLInvalidAuthorizationSpecException>(hashMap0, 2352, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IteratorUtils.getIterator((Object) null);
      HashMap<LinkedList<Class<SQLTransactionRollbackException>>, ArrayList<SQLDataException>> hashMap0 = new HashMap<LinkedList<Class<SQLTransactionRollbackException>>, ArrayList<SQLDataException>>();
      EntrySetMapIterator<LinkedList<Class<SQLTransactionRollbackException>>, ArrayList<SQLDataException>> entrySetMapIterator0 = new EntrySetMapIterator<LinkedList<Class<SQLTransactionRollbackException>>, ArrayList<SQLDataException>>(hashMap0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedList<Class<SQLTransactionRollbackException>>, ArrayList<SQLDataException>>) entrySetMapIterator0);
      Properties properties0 = new Properties();
      int int0 = 1;
      ArrayIterator<SQLInvalidAuthorizationSpecException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLInvalidAuthorizationSpecException>(properties0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      Transformer<IIOMetadataNode, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString(iterator1, (Transformer<? super IIOMetadataNode, String>) transformer0, "YMhkmB4Th", "YMhkmB4Th", "YMhkmB4Th");
      IteratorUtils.toArray(iterator0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("YMhkmB4Th", batchUpdateException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("qv\"'N<W1Y(N,8", "", 1, sQLRecoverableException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("Iterator must not be null", sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("YMhkmB4Th", "", (-2828), sQLTimeoutException1);
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[4] = "";
      stringArray0[1] = "";
      String string1 = "The current criterion '";
      stringArray0[2] = "The current criterion '";
      IteratorUtils.getIterator(stringArray0[0]);
      HashMap<LinkedList<Class<SQLTransactionRollbackException>>, ArrayList<SQLDataException>> hashMap0 = new HashMap<LinkedList<Class<SQLTransactionRollbackException>>, ArrayList<SQLDataException>>();
      EntrySetMapIterator<LinkedList<Class<SQLTransactionRollbackException>>, ArrayList<SQLDataException>> entrySetMapIterator0 = new EntrySetMapIterator<LinkedList<Class<SQLTransactionRollbackException>>, ArrayList<SQLDataException>>(hashMap0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedList<Class<SQLTransactionRollbackException>>, ArrayList<SQLDataException>>) entrySetMapIterator0);
      Properties properties0 = new Properties();
      int int0 = 2328;
      int int1 = 1;
      ArrayIterator<SQLInvalidAuthorizationSpecException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLInvalidAuthorizationSpecException>(hashMap0, 2328, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.size(listIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IteratorUtils.contains((Iterator<Properties>) listIterator0, (Object) listIterator0);
      IteratorUtils.isEmpty(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(linkedList0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) loopingListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      SQLException sQLException0 = new SQLException("R}t/?Bh76*", "", 16);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLException0);
      ConstantTransformer<SQLFeatureNotSupportedException, SQLFeatureNotSupportedException> constantTransformer0 = new ConstantTransformer<SQLFeatureNotSupportedException, SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) constantTransformer0);
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator1, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      linkedList0.iterator();
      IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      MapIterator<SQLRecoverableException, HashSet<Integer>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, (Iterator<? extends SQLRecoverableException>) mapIterator0);
      IteratorUtils.toString(iterator0);
      OrderedMapIterator<SQLRecoverableException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, 0L, 0L);
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 9);
      String[] stringArray0 = new String[0];
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      iteratorArray0[0] = (Iterator<String>) objectArrayIterator0;
      iteratorArray0[1] = (Iterator<String>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<String>) resettableListIterator0;
      iteratorArray0[3] = (Iterator<String>) resettableListIterator0;
      iteratorArray0[4] = (Iterator<String>) resettableListIterator0;
      iteratorArray0[5] = (Iterator<String>) resettableListIterator0;
      iteratorArray0[6] = (Iterator<String>) resettableListIterator0;
      iteratorArray0[7] = (Iterator<String>) resettableListIterator0;
      iteratorArray0[8] = (Iterator<String>) resettableListIterator0;
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
      IteratorUtils.toListIterator((Iterator<? extends String>) zippingIterator0);
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      linkedList1.descendingIterator();
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.singletonIterator(hashSet0);
      Predicate<Object> predicate0 = null;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        PredicateTransformer.predicateTransformer((Predicate<? super Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.PredicateTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.size(listIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      IteratorUtils.contains((Iterator<Properties>) listIterator0, (Object) listIterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 199;
      Integer integer0 = new Integer(199);
      linkedList0.add(integer0);
      IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, 199, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ResettableListIterator<ArrayDeque<Boolean>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("J1cpptE$IBu");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      IteratorUtils.asIterable((Iterator<?>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      String string0 = "J1cpptE$IBu";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("J1cpptE$IBu");
      iIOMetadataNode0.getFirstChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      String string0 = "J1cpptE$IBu";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("J1cpptE$IBu");
      iIOMetadataNode0.getFirstChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends String>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<ArrayDeque<ArrayDeque>>) resettableListIterator0, (Closure<? super ArrayDeque<ArrayDeque>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableListIterator0, defaultEquator0);
      DataTruncation dataTruncation0 = new DataTruncation(3734, true, true, 61, 1890);
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.singletonListIterator((SQLWarning) dataTruncation0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[6];
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      SQLWarning sQLWarning0 = new SQLWarning("ListIterator must not be null", "ListIterator must not be null");
      sQLWarningArray0[1] = sQLWarning0;
      sQLWarningArray0[2] = (SQLWarning) dataTruncation0;
      sQLWarningArray0[3] = (SQLWarning) dataTruncation0;
      sQLWarningArray0[4] = (SQLWarning) dataTruncation0;
      sQLWarningArray0[5] = (SQLWarning) dataTruncation0;
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0);
      IteratorUtils.zippingIterator((Iterator<?>) listIterator0, (Iterator<?>) listIterator0, (Iterator<?>) objectArrayIterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<IIOMetadataNode> linkedList1 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList1.iterator();
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      linkedList1.add((IIOMetadataNode) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<SQLRecoverableException> list0 = new ArrayList<SQLRecoverableException>();
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) list0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLSyntaxErrorException>) resettableListIterator0);
      IteratorUtils.emptyIterator();
      MapIterator<SQLRecoverableException, HashSet<Integer>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, (Iterator<? extends SQLRecoverableException>) orderedMapIterator0);
      IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedMapIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0, (long) 0, (long) 0);
      ResettableListIterator<String> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends String>) resettableListIterator1);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      linkedList0.descendingIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 8);
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(linkedList0);
      iteratorArray0[0] = (Iterator<SQLDataException>) loopingListIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) loopingListIterator0);
      iteratorArray0[1] = iterator0;
      iteratorArray0[2] = (Iterator<SQLDataException>) loopingListIterator0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<Boolean> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<Boolean> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends Boolean>) resettableIterator0, (Iterator<? extends Boolean>) resettableIterator0);
      Iterator<Boolean> iterator2 = IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>) iterator1, (Iterator<? extends Boolean>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator2, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 9
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PriorityQueue<SQLSyntaxErrorException>[] priorityQueueArray0 = (PriorityQueue<SQLSyntaxErrorException>[]) Array.newInstance(PriorityQueue.class, 4);
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLSyntaxErrorException> priorityQueue1 = new PriorityQueue<SQLSyntaxErrorException>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLSyntaxErrorException> priorityQueue2 = new PriorityQueue<SQLSyntaxErrorException>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLSyntaxErrorException> priorityQueue3 = new PriorityQueue<SQLSyntaxErrorException>();
      priorityQueueArray0[3] = priorityQueue3;
      ResettableListIterator<PriorityQueue<SQLSyntaxErrorException>> resettableListIterator0 = IteratorUtils.arrayListIterator(priorityQueueArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1987), 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLRecoverableException0, comparator0);
      IteratorUtils.find((Iterator<PriorityQueue<SQLSyntaxErrorException>>) resettableListIterator0, (Predicate<? super PriorityQueue<SQLSyntaxErrorException>>) predicate0);
      Integer[] integerArray0 = new Integer[5];
      int int0 = 14;
      Integer integer0 = new Integer(14);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2387));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(807);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 9, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "9c'eTXHQbN_?Zu;");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      sQLInvalidAuthorizationSpecException0.spliterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLInvalidAuthorizationSpecException0, defaultEquator0);
      NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) equalPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("9c'eTXHQbN_?Zu;");
      ListIterator<IIOMetadataNode> listIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      IteratorUtils.find((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (-1453));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      linkedList0.iterator();
      IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      MapIterator<SQLRecoverableException, HashSet<Integer>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, (Iterator<? extends SQLRecoverableException>) mapIterator0);
      IteratorUtils.toString(iterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, 0L, 394L);
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends String>) resettableListIterator0);
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      linkedList1.descendingIterator();
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<HashSet<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.singletonIterator(hashSet0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) nullIsExceptionPredicate0);
      IfTransformer<Object, Boolean> ifTransformer0 = new IfTransformer<Object, Boolean>(nullIsExceptionPredicate0, transformer0, transformer0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) notPredicate0, (Predicate<? super Object>) notPredicate0);
      IteratorUtils.matchesAll((Iterator<HashSet<SQLInvalidAuthorizationSpecException>>) resettableIterator0, (Predicate<? super HashSet<SQLInvalidAuthorizationSpecException>>) predicate1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) equalPredicate0);
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator((IIOMetadataNode) null);
      IteratorUtils.find((Iterator<IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(linkedList0);
      LinkedList<IIOMetadataNode> linkedList1 = new LinkedList<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) linkedList1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("hKHV@H?Ow\"F/A6UBmC.");
      linkedList1.add(iIOMetadataNode0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableListIterator0, defaultEquator0);
      NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PriorityQueue<SQLSyntaxErrorException>[] priorityQueueArray0 = (PriorityQueue<SQLSyntaxErrorException>[]) Array.newInstance(PriorityQueue.class, 4);
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLSyntaxErrorException> priorityQueue1 = new PriorityQueue<SQLSyntaxErrorException>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLSyntaxErrorException> priorityQueue2 = new PriorityQueue<SQLSyntaxErrorException>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLSyntaxErrorException> priorityQueue3 = new PriorityQueue<SQLSyntaxErrorException>();
      priorityQueueArray0[3] = priorityQueue3;
      ResettableListIterator<PriorityQueue<SQLSyntaxErrorException>> resettableListIterator0 = IteratorUtils.arrayListIterator(priorityQueueArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLRecoverableException0, comparator0);
      IteratorUtils.find((Iterator<PriorityQueue<SQLSyntaxErrorException>>) resettableListIterator0, (Predicate<? super PriorityQueue<SQLSyntaxErrorException>>) predicate0);
      Integer[] integerArray0 = new Integer[5];
      int int0 = 14;
      Integer integer0 = new Integer(14);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2387));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(807);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0, 9, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      linkedList0.iterator();
      IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      EmptyListIterator.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListIterator<Boolean> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<Boolean> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Boolean>) comparator0, (Iterator<? extends Boolean>) listIterator0, (Iterator<? extends Boolean>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 32
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      IdentityPredicate<IIOMetadataNode> identityPredicate0 = new IdentityPredicate<IIOMetadataNode>((IIOMetadataNode) null);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) identityPredicate0);
      Transformer<IIOMetadataNode, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString(iterator1, (Transformer<? super IIOMetadataNode, String>) transformer0, "VZbn}", "VZbn}", "VZbn}");
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) vector0);
      IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      DefaultEquator.defaultEquator();
      OrderedMapIterator<SQLRecoverableException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Properties>(orderedMapIterator0);
      OrderedMapIterator<SQLRecoverableException, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLRecoverableException, ?>) orderedMapIterator0);
      IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedMapIterator1);
      OrderedMapIterator<SQLRecoverableException, SQLInvalidAuthorizationSpecException> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) orderedMapIterator2, 1L, 0L);
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends String>) resettableListIterator0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLDataException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashtable0, sQLSyntaxErrorException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("[]", "V^{V", (-1), map0);
      linkedList0.add(sQLClientInfoException1);
      Iterator<SQLClientInfoException> iterator0 = linkedList0.descendingIterator();
      IteratorUtils.unmodifiableIterator(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      linkedList0.iterator();
      IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      MapIterator<SQLRecoverableException, HashSet<Integer>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, (Iterator<? extends SQLRecoverableException>) mapIterator0);
      IteratorUtils.toString(iterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, 0L, 394L);
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends String>) resettableListIterator0);
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      linkedList1.descendingIterator();
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<HashSet<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.singletonIterator(hashSet0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) nullIsExceptionPredicate0);
      IfTransformer<Object, Boolean> ifTransformer0 = new IfTransformer<Object, Boolean>(nullIsExceptionPredicate0, transformer0, transformer0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) ifTransformer0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      Predicate<Object> predicate1 = OrPredicate.orPredicate((Predicate<? super Object>) notPredicate0, (Predicate<? super Object>) notPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<HashSet<SQLInvalidAuthorizationSpecException>>) resettableIterator0, (Predicate<? super HashSet<SQLInvalidAuthorizationSpecException>>) predicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableListIterator0, defaultEquator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, (String) null, sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("B +*o}NS3");
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      ResettableListIterator<String> resettableListIterator1 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends String>) resettableListIterator1);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 8);
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedIterator0, (Iterator<? extends DataTruncation>) orderedIterator0);
      iteratorArray0[0] = (Iterator<DataTruncation>) zippingIterator0;
      ListIteratorWrapper<DataTruncation> listIteratorWrapper0 = new ListIteratorWrapper<DataTruncation>(orderedIterator0);
      iteratorArray0[1] = (Iterator<DataTruncation>) listIteratorWrapper0;
      DataTruncation dataTruncation0 = new DataTruncation(9, true, false, 9, 636);
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, true);
      iteratorArray0[2] = (Iterator<DataTruncation>) singletonIterator0;
      MapIterator<DataTruncation, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[3] = (Iterator<DataTruncation>) mapIterator0;
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[4] = (Iterator<DataTruncation>) listIterator0;
      OrderedMapIterator<DataTruncation, EnumSet<Locale.FilteringMode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[5] = (Iterator<DataTruncation>) orderedMapIterator0;
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) iteratorArray0[2], (long) 9, (long) 636);
      iteratorArray0[6] = (Iterator<DataTruncation>) boundedIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 3);
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-462), 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ResettableListIterator<LinkedList<ServiceLoader>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ArrayList<SQLTransientException> arrayList0 = new ArrayList<SQLTransientException>();
      ResettableListIterator<SQLTransientException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLTransientException>) arrayList0);
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.boundedIterator((Iterator<?>) resettableListIterator1, (long) 0, (long) 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLTransactionRollbackException0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableListIterator1, (Iterator<? extends SQLException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      Transformer<IIOMetadataNode, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString(iterator1, (Transformer<? super IIOMetadataNode, String>) transformer0, "YMhkmB4Th", "YMhkmB4Th", "YMhkmB4Th");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      linkedList0.iterator();
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      HashSet<SQLInvalidAuthorizationSpecException> hashSet1 = new HashSet<SQLInvalidAuthorizationSpecException>();
      HashSet<SQLInvalidAuthorizationSpecException> hashSet2 = new HashSet<SQLInvalidAuthorizationSpecException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 8);
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(linkedList0);
      iteratorArray0[0] = (Iterator<SQLDataException>) loopingListIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) loopingListIterator0);
      iteratorArray0[1] = iterator0;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) linkedList0);
      iteratorArray0[2] = (Iterator<SQLDataException>) resettableListIterator0;
      OrderedMapIterator<SQLDataException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends SQLException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLException>(orderedMapIterator1);
      MapIterator<SQLDataException, SQLException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, SQLException>) abstractOrderedMapIteratorDecorator0);
      iteratorArray0[3] = (Iterator<SQLDataException>) mapIterator0;
      IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) orderedMapIterator1);
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      HashSet<SQLInvalidAuthorizationSpecException>[] hashSetArray0 = (HashSet<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(HashSet.class, 6);
      hashSetArray0[0] = hashSet0;
      hashSetArray0[1] = hashSet0;
      hashSetArray0[2] = hashSet0;
      hashSetArray0[3] = hashSet0;
      hashSetArray0[4] = hashSet0;
      hashSetArray0[5] = hashSet0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(hashSetArray0, 10, (-2183));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) class0, (-2028));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 8);
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(linkedList0);
      iteratorArray0[0] = (Iterator<SQLDataException>) loopingListIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) loopingListIterator0);
      iteratorArray0[1] = iterator0;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) linkedList0);
      iteratorArray0[2] = (Iterator<SQLDataException>) resettableListIterator0;
      OrderedMapIterator<SQLDataException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends SQLException>) orderedMapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate(iIOMetadataNode0);
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      Transformer<IIOMetadataNode, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<IIOMetadataNode>) orderedIterator0, (Transformer<? super IIOMetadataNode, String>) transformer0, "YMhkmB4Th", "YMhkmB4Th", "YMhkmB4Th");
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      int[] intArray0 = new int[4];
      intArray0[0] = 100;
      intArray0[1] = (-1);
      intArray0[2] = 3343;
      intArray0[3] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      long[] longArray0 = new long[0];
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("YMhkmB4ThYMhkmB4Th", "YMhkmB4Th", 0, longArray0, (Throwable) null);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("#\\'mQFKeSi/@jgjklz", intArray0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0, (Throwable) null);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("Enumeration must not be null", "U:Oj%fP{,Mq6gp", (-1), intArray0);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("YMhkmB4Th", intArray0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException((Throwable) null);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException(intArray0, batchUpdateException6);
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0, (-1902), 3786);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, class0);
      ExceptionTransformer.exceptionTransformer();
      String string0 = "YMhkmB4Th";
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      int int0 = 1073741824;
      Iterator<SQLTransientConnectionException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTransientConnectionException>) null, 1073741824);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Iterator<SQLTransientConnectionException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((StringTokenizer[]) null, 2992);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableListIterator0, defaultEquator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.find((Iterator<IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      int int0 = (-1689);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) predicate0, (-1689));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MapIterator<SQLInvalidAuthorizationSpecException, Transformer<SQLWarning, PriorityQueue>> mapIterator0 = IteratorUtils.emptyMapIterator();
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      Integer integer0 = new Integer((-1640));
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) singletonIterator0);
      IteratorUtils.loopingIterator((Collection<? extends Integer>) list0);
      MapIterator<String, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<String, Properties> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.toList((Iterator<? extends String>) mapIterator1);
      int int0 = 0;
      String string0 = "nQvG$@7N0GR";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("nQvG$@7N0GR");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, (-1512), (-1965));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      IteratorUtils.loopingIterator((Collection<?>) vector0);
      Boolean[] booleanArray0 = new Boolean[4];
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      InstantiateFactory<SQLSyntaxErrorException> instantiateFactory0 = new InstantiateFactory<SQLSyntaxErrorException>(class0);
      FactoryTransformer<Object, SQLSyntaxErrorException> factoryTransformer0 = new FactoryTransformer<Object, SQLSyntaxErrorException>(instantiateFactory0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) instantiateFactory0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) factoryTransformer0, (Predicate<? super Object>) predicate0);
      Predicate<Object> predicate2 = OrPredicate.orPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) predicate1);
      PredicateTransformer<Integer> predicateTransformer0 = new PredicateTransformer<Integer>(predicate2);
      Integer integer0 = new Integer(962);
      Boolean boolean0 = predicateTransformer0.transform(integer0);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = predicateTransformer0.transform(integer0);
      booleanArray0[1] = boolean1;
      PredicateTransformer<Integer> predicateTransformer1 = new PredicateTransformer<Integer>(predicate1);
      Boolean boolean2 = predicateTransformer1.transform(integer0);
      booleanArray0[2] = boolean2;
      Boolean boolean3 = predicateTransformer1.transform(integer0);
      booleanArray0[3] = boolean3;
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.arrayListIterator(booleanArray0);
      Class<Boolean> class1 = Boolean.class;
      IteratorUtils.toArray((Iterator<? extends Boolean>) resettableListIterator0, class1);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) null, (Transformer<? super SQLIntegrityConstraintViolationException, String>) constantTransformer0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[9];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "Cannot use setValue() when the object being set is already in the map", (-400), sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("Transformer must not be null", "", 962, sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("pcC%", "uf+&K+B$:", sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException((String) null, "Iterator must not be null.", (-400), sQLInvalidAuthorizationSpecException2);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException((String) null);
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException5);
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException("", "K", 1433, sQLInvalidAuthorizationSpecException5);
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException7;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException8 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecExceptionArray0[8] = sQLInvalidAuthorizationSpecException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, (-400));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("4+ l)gV~wa|aKY");
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, String>) constantTransformer0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "The current criterion '";
      stringArray0[3] = "";
      stringArray0[4] = "";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) predicate0);
      OrderedMapIterator<SQLDataException, LinkedList<BatchUpdateException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, LinkedList<BatchUpdateException>>) orderedMapIterator0);
      EntrySetMapIterator<SQLSyntaxErrorException, DataTruncation> entrySetMapIterator0 = null;
      try {
        entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, DataTruncation>((Map<SQLSyntaxErrorException, DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0, defaultEquator0);
      NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Boolean[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) null, 904L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.emptyIterator();
      HashMap<ComparatorPredicate.Criterion, ServiceLoader<String>> hashMap0 = new HashMap<ComparatorPredicate.Criterion, ServiceLoader<String>>();
      hashMap0.remove((Object) resettableIterator0);
      EntrySetMapIterator<ComparatorPredicate.Criterion, ServiceLoader<String>> entrySetMapIterator0 = new EntrySetMapIterator<ComparatorPredicate.Criterion, ServiceLoader<String>>(hashMap0);
      entrySetMapIterator0.reset();
      IteratorUtils.unmodifiableMapIterator((MapIterator<ComparatorPredicate.Criterion, ServiceLoader<String>>) entrySetMapIterator0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2289);
      intArray0[1] = (-2289);
      intArray0[2] = (-2289);
      intArray0[3] = (-2289);
      intArray0[4] = (-2289);
      intArray0[5] = (-2289);
      intArray0[6] = 123;
      intArray0[7] = (-2289);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Predicate must not be null", (String) null, (-2289), intArray0);
      IteratorUtils.singletonListIterator(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IteratorUtils.singletonListIterator((SQLIntegrityConstraintViolationException) null);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, false, 0, 0, (Throwable) null);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, true, true, (-1553), 742);
      dataTruncationArray0[1] = dataTruncation1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (Throwable) null);
      DataTruncation dataTruncation2 = new DataTruncation((-1), true, true, 0, 530, sQLInvalidAuthorizationSpecException0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-859), true, true, 969, 0, (Throwable) null);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(1228, true, true, 530, (-1), dataTruncation0);
      dataTruncationArray0[4] = dataTruncation4;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("4Lcb\"&#", "4Lcb\"&#", 1644);
      IteratorUtils.singletonListIterator((SQLNonTransientException) sQLInvalidAuthorizationSpecException0);
      HashSet<SQLInvalidAuthorizationSpecException>[] hashSetArray0 = (HashSet<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(HashSet.class, 6);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      hashSetArray0[0] = (HashSet<SQLInvalidAuthorizationSpecException>) linkedHashSet0;
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet1 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      hashSetArray0[1] = (HashSet<SQLInvalidAuthorizationSpecException>) linkedHashSet1;
      HashSet<SQLInvalidAuthorizationSpecException> hashSet0 = new HashSet<SQLInvalidAuthorizationSpecException>();
      hashSetArray0[2] = hashSet0;
      HashSet<SQLInvalidAuthorizationSpecException> hashSet1 = new HashSet<SQLInvalidAuthorizationSpecException>();
      hashSetArray0[3] = hashSet1;
      HashSet<SQLInvalidAuthorizationSpecException> hashSet2 = new HashSet<SQLInvalidAuthorizationSpecException>();
      hashSetArray0[4] = hashSet2;
      HashSet<SQLInvalidAuthorizationSpecException> hashSet3 = new HashSet<SQLInvalidAuthorizationSpecException>();
      hashSetArray0[5] = hashSet3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(hashSetArray0, 1644, 1644);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAll((Iterator<SQLTransientException>) orderedMapIterator0, (Predicate<? super SQLTransientException>) predicate1);
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      OrderedMapIterator<SQLRecoverableException, Properties> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, Properties>(orderedMapIterator1);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(iterator0, defaultEquator0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      IteratorUtils.find(iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.size((Iterator<?>) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("HdK%3PK(nidzaJ'!#+O", "HdK%3PK(nidzaJ'!#+O", (-1));
      ArrayIterator<Properties> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<Properties>(sQLRecoverableException0, (-746));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "U`", sQLSyntaxErrorException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("orgJapache.commons.collections4..ap.AbstractHashedMap$EntrySet", "", 5, sQLNonTransientExceptionArray0[1]);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLIntegrityConstraintViolationException1;
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      IteratorUtils.size(objectArrayIterator0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Hashtable<EnumSet<ComparatorPredicate.Criterion>, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<EnumSet<ComparatorPredicate.Criterion>, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<EnumSet<ComparatorPredicate.Criterion>, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<EnumSet<ComparatorPredicate.Criterion>, SQLInvalidAuthorizationSpecException>(hashtable0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<EnumSet<ComparatorPredicate.Criterion>, SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      MapIterator<SQLInvalidAuthorizationSpecException, SQLTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(entrySetMapIterator0);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) anyPredicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null, (Equator<Object>) defaultEquator0);
      predicateArray0[2] = predicate0;
      OnePredicate<SQLTransientConnectionException> onePredicate0 = new OnePredicate<SQLTransientConnectionException>(predicateArray0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLTransientConnectionException>) onePredicate0);
      IteratorUtils.size(mapIterator0);
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) hashtable0, (-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1073741824, false, false, 1073741824, 1046);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) resettableIterator0, (Transformer<? super DataTruncation, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ResettableListIterator<LinkedList<ServiceLoader>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ArrayList<SQLTransientException> arrayList0 = new ArrayList<SQLTransientException>();
      ResettableListIterator<SQLTransientException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLTransientException>) arrayList0);
      IteratorUtils.size(resettableListIterator0);
      IteratorUtils.boundedIterator((Iterator<?>) resettableListIterator1, (long) 0, (long) 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", sQLTransactionRollbackException0);
      ArrayIterator<SQLFeatureNotSupportedException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLFeatureNotSupportedException>(sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) orderedIterator0, 2402L, 2402L);
      Integer integer0 = new Integer((-769));
      ArrayListIterator<SQLNonTransientConnectionException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLNonTransientConnectionException>(integer0, (-769));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, class0);
      int int0 = 0;
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[7];
      SQLTransientException sQLTransientException0 = new SQLTransientException("k\"y2(T|#]", "k\"y2(T|#]");
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      int int1 = 2;
      SQLTransientException sQLTransientException1 = new SQLTransientException("k\"y2(T|#]", "lFb/aL^I=S\"=?", 2, sQLTransientException0);
      sQLTransientExceptionArray0[1] = sQLTransientException1;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("k\"y2(T|#]", sQLTransientException1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("tlt", "^W[Z7:rVtS2Q", sQLTransientException1);
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("lFb/aL^I=S\"=?");
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("lFb/aL^I=S\"=?", "", (-2028));
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransactionRollbackException2;
      SQLTransientException sQLTransientException2 = new SQLTransientException("3", "lFb/aL^I=S\"=?", sQLTransactionRollbackException0);
      sQLTransientExceptionArray0[6] = sQLTransientException2;
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) resettableIterator0, (Transformer<? super SQLTransientException, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      linkedList0.iterator();
      IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      MapIterator<SQLRecoverableException, HashSet<Integer>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, (Iterator<? extends SQLRecoverableException>) mapIterator0);
      IteratorUtils.toString(iterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) mapIterator0, 0L, 394L);
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toListIterator((Iterator<? extends String>) resettableListIterator0);
      LinkedList<SQLClientInfoException> linkedList1 = new LinkedList<SQLClientInfoException>();
      Iterator<SQLClientInfoException> iterator1 = linkedList1.descendingIterator();
      IteratorUtils.unmodifiableIterator(iterator1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IteratorUtils.emptyIterator();
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      HashMap<Predicate<Object>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap0);
      IteratorUtils.toString(iterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) transformer0);
      IteratorUtils.objectGraphIterator("org.apache.commons.collections4.functors.PrototypeFactory", (Transformer<? super String, ? extends String>) transformer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Enumeration must not be null");
      iIOMetadataNode0.getAttributes();
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iIOMetadataNode0, (-4289), 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Vector<Properties> vector0 = new Vector<Properties>();
      Properties properties0 = new Properties();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.close();
      properties0.store((OutputStream) byteArrayOutputStream0, "");
      vector0.add(properties0);
      IteratorUtils.loopingListIterator((List<Properties>) vector0);
      OrderedIterator<Vector<IIOMetadataNode>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<Vector<IIOMetadataNode>>) orderedIterator0);
      LinkedList<SQLRecoverableException> linkedList0 = new LinkedList<SQLRecoverableException>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Entry does not exist: ", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[]", "[]", (-270), sQLNonTransientConnectionException0);
      linkedList0.add(sQLRecoverableException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[]");
      SQLWarning sQLWarning0 = new SQLWarning("H=gLT:;j", "[]", (-513), sQLTransactionRollbackException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "H=gLT:;j", "Cannot set to list until next() or previous() called", (-41));
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("[]", "[]", (-513), sQLWarning0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLNonTransientConnectionException1);
      linkedList0.add(sQLRecoverableException1);
      linkedList0.sort(comparator0);
      IteratorUtils.loopingIterator((Collection<? extends SQLRecoverableException>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[9];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException((String) null, "", 0, sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("");
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException(sQLTransientConnectionException1);
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("The method to invoke must not be null", "U}#~QgK}/}", 0);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      SQLTransientConnectionException sQLTransientConnectionException6 = new SQLTransientConnectionException("U}#~QgK}/}", (String) null, sQLTransientConnectionException4);
      sQLTransientConnectionExceptionArray0[6] = sQLTransientConnectionException6;
      SQLTransientConnectionException sQLTransientConnectionException7 = new SQLTransientConnectionException(sQLTransientConnectionException2);
      sQLTransientConnectionExceptionArray0[7] = sQLTransientConnectionException7;
      SQLTransientConnectionException sQLTransientConnectionException8 = new SQLTransientConnectionException("#VKTdjvS,HE@LK7", "", 304, sQLTransientConnectionException7);
      sQLTransientConnectionExceptionArray0[8] = sQLTransientConnectionException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 1963, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedMapIterator<SQLTransactionRollbackException, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asIterable((Iterator<?>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) null, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedIterator0, 0, (-2028));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IteratorUtils.find((Iterator<ArrayDeque<SQLTransactionRollbackException>>) null, (Predicate<? super ArrayDeque<SQLTransactionRollbackException>>) orPredicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("1[@b-cEF^F^Kn^xrj");
      SQLException sQLException0 = new SQLException("1[@b-cEF^F^Kn^xrj", "y=&=O]", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.addSuppressed(sQLException0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) null);
      IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      LinkedHashSet<SQLWarning>[] linkedHashSetArray0 = (LinkedHashSet<SQLWarning>[]) Array.newInstance(LinkedHashSet.class, 2);
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<SQLWarning> linkedHashSet1 = new LinkedHashSet<SQLWarning>();
      linkedHashSetArray0[1] = linkedHashSet1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(linkedHashSetArray0, (-385));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLFeatureNotSupportedException0, defaultEquator0);
      NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Iterator<SQLTimeoutException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      Iterator<IIOMetadataNode> iterator0 = linkedList0.iterator();
      Predicate<IIOMetadataNode> predicate0 = IdentityPredicate.identityPredicate((IIOMetadataNode) null);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) null, (-10));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(199);
      linkedList0.add(integer0);
      linkedList0.remove();
      Integer integer1 = new Integer((-3323));
      linkedList0.add(integer1);
      IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedList0);
      MapIterator<String, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<String, Properties> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.toList((Iterator<? extends String>) mapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0, (-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      SQLException sQLException0 = new SQLException("Enumeration must not be null");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Enumeration must not be null", "(c9my^K*&", 0, sQLException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Enumeration must not be null", "Enumeration must not be null", 0, longArray0, sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(batchUpdateException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException1;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Enumeration must not be null", "_jTSu", "(c9my^K*&", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Enumeration must not be null", "Enumeration must not be null", "(c9my^K*&", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("org.apache.commons.collections4.bidimap.DualTreeBidiMap", "org.apache.commons.collections4.bidimap.DualTreeBidiMap", "/Z H&N7$Cyz-kq", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("org.apache.commons.collections4.bidimap.DualTreeBidiMap", "org.apache.commons.collections4.bidimap.DualTreeBidiMap", "_jTSu", 4);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("Enumeration must not be null", "_jTSu", "ey/HCa0", 2144);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("_jTSu", "", "(c9my^K*&", 4);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("/Z H&N7$Cyz-kq", "No previous() entry in the iteration", "", (-1775));
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("}|5_\"HrE=7", "l{#>^#\"W+K", "End index must not be less than start index", (-1775));
      stackTraceElementArray0[7] = stackTraceElement7;
      StackTraceElement stackTraceElement8 = new StackTraceElement("org.apache.commons.collections4.bidimap.DualTreeBidiMap", "Wr9VigO~^_", "", 0);
      stackTraceElementArray0[8] = stackTraceElement8;
      sQLException0.setStackTrace(stackTraceElementArray0);
      sQLRecoverableException1.fillInStackTrace();
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("|w,", "bV6[_p8|+q|eFYax;w");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException2;
      IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableListIterator0, defaultEquator0);
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) equalPredicate0);
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.find((Iterator<IIOMetadataNode>) resettableListIterator0, (Predicate<? super IIOMetadataNode>) predicate1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.iterators.SingletonIterator", "org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef", sQLDataException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.SingletonIterator", "org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef", 0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef", "org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef", sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[2] = sQLTransientConnectionException2;
      SQLTransientConnectionException sQLTransientConnectionException3 = new SQLTransientConnectionException("", "org.apache.commons.collections4.iterators.SingletonIterator");
      sQLTransientConnectionExceptionArray0[3] = sQLTransientConnectionException3;
      SQLTransientConnectionException sQLTransientConnectionException4 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef", "org.apache.commons.collections4.iterators.SingletonIterator");
      sQLTransientConnectionExceptionArray0[4] = sQLTransientConnectionException4;
      SQLTransientConnectionException sQLTransientConnectionException5 = new SQLTransientConnectionException("!", "org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef", 0);
      sQLTransientConnectionExceptionArray0[5] = sQLTransientConnectionException5;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) orderedMapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      int int0 = 1073741824;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) listIterator0, 1073741824);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1073741824
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[8];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[6] = locale_FilteringMode6;
      Locale.FilteringMode locale_FilteringMode7 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[7] = locale_FilteringMode7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(locale_FilteringModeArray0, 1900);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      String string0 = "CiMa~c(a";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("CiMa~c(a", hashMap0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLClientInfoException0);
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) listIterator0;
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[8] = sQLNonTransientConnectionException0;
      ObjectArrayIterator<SQLNonTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0);
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) objectArrayIterator0;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      objectArrayIterator0.next();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[3] = (Iterator<SQLNonTransientConnectionException>) resettableIterator1;
      IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
      int int0 = (-841);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) objectArrayIterator0, (-841));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 8);
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(linkedList0);
      iteratorArray0[0] = (Iterator<SQLDataException>) loopingListIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) loopingListIterator0);
      iteratorArray0[1] = iterator0;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) linkedList0);
      iteratorArray0[2] = (Iterator<SQLDataException>) resettableListIterator0;
      OrderedMapIterator<SQLDataException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends SQLException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLDataException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, SQLException>(orderedMapIterator1);
      MapIterator<SQLDataException, SQLException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, SQLException>) abstractOrderedMapIteratorDecorator0);
      iteratorArray0[3] = (Iterator<SQLDataException>) mapIterator0;
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) orderedMapIterator1);
      Iterator<SQLDataException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      iteratorArray0[4] = iterator1;
      OrderedMapIterator<SQLDataException, SQLIntegrityConstraintViolationException> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[5] = (Iterator<SQLDataException>) orderedMapIterator2;
      ArrayListIterator<SQLDataException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLDataException>(linkedList0, 0, 2339);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
