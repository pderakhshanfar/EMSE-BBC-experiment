/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:16:28 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      DataTruncation dataTruncation0 = new DataTruncation(1126, false, false, 3464, 1, sQLRecoverableException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<DataTruncation>) listIterator0, 1126);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1125
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) resettableIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) linkedList0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableListIterator0, (Iterator<? extends SQLException>) resettableListIterator1, (Iterator<? extends SQLException>) resettableListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MapIterator<SQLClientInfoException, Hashtable<SQLRecoverableException, LinkedHashSet>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[6];
      Closure<Object> closure0 = ForClosure.forClosure(632, (Closure<? super Object>) null);
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(sQLRecoverableExceptionArray0);
      IteratorUtils.apply((Iterator<Object>) objectArrayListIterator0, (Closure<? super Object>) closure0);
      assertEquals(5, objectArrayListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLNonTransientException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      ObjectArrayListIterator<SQLInvalidAuthorizationSpecException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecExceptionArray0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      IteratorUtils.toArray((Iterator<? extends SQLInvalidAuthorizationSpecException>) objectArrayListIterator0, class0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLException>) objectArrayListIterator0);
      ListIterator<SQLException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OrderedIterator<SQLTimeoutException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLClientInfoException>(orderedMapIterator0);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("");
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super BatchUpdateException, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ArrayDeque<SQLWarning> arrayDeque0 = new ArrayDeque<SQLWarning>();
      SingletonIterator<ArrayDeque<SQLWarning>> singletonIterator0 = new SingletonIterator<ArrayDeque<SQLWarning>>(arrayDeque0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      String string0 = IteratorUtils.toString((Iterator<ArrayDeque<SQLWarning>>) singletonIterator0, (Transformer<? super ArrayDeque<SQLWarning>, String>) transformer0);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(".@aYU}>y A;<F", "-)h!E7MN", (-735), hashMap0);
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableIterator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) objectArrayIterator0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Hashtable<String, PriorityQueue<SQLWarning>> hashtable0 = new Hashtable<String, PriorityQueue<SQLWarning>>();
      Enumeration<String> enumeration0 = hashtable0.keys();
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0);
      Iterator<String> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends String>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Stack<Closure<Object>> stack0 = new Stack<Closure<Object>>();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      stack0.add(closure0);
      ResettableListIterator<Closure<Object>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Closure<Object>>) stack0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) hashtable0;
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      IteratorUtils.get((Iterator<Object>) objectArrayListIterator0, 1);
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertEquals(2, objectArrayListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", sQLClientInfoException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 0);
      SkippingIterator<SQLTransientConnectionException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLTransientConnectionException>) resettableIterator0, 0L);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLTransientConnectionException>) skippingIterator0, (Object) sQLTransientConnectionException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Boolean, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Boolean, SQLDataException>(orderedMapIterator0);
      Iterator<Boolean> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Boolean>) null, (Iterator<? extends Boolean>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends Boolean>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) orderedIterator0, 373L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ArrayList<IIOMetadataNode>[] arrayListArray0 = (ArrayList<IIOMetadataNode>[]) Array.newInstance(ArrayList.class, 2);
      ResettableListIterator<ArrayList<IIOMetadataNode>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayListArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, class0);
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.arrayListIterator((SQLException[]) sQLTransientConnectionExceptionArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>) orderedIterator0, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<ClientInfoStatus, Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[5];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("delimiter may not be null", "delimiter may not be null", (-1280), intArray0, sQLSyntaxErrorException0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 8);
      InvokerTransformer<BatchUpdateException, String> invokerTransformer0 = new InvokerTransformer<BatchUpdateException, String>("delimiter may not be null", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) singletonIterator0, (Transformer<? super BatchUpdateException, String>) invokerTransformer0, "9`nESxjMc", "#:6gZ(|!8>x#[5x", "delimiter may not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'delimiter may not be null' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Hashtable<SQLException, String> hashtable0 = new Hashtable<SQLException, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) objectArrayListIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "", "#", "#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<SQLNonTransientException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) singletonIterator0, (Transformer<? super SQLDataException, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      hashSet0.add((StringTokenizer) null);
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(hashSet0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<StringTokenizer>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Transformer<SQLException, SQLTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) transformer0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Hashtable<SQLTransientConnectionException, Hashtable<SQLException, Properties>> hashtable0 = new Hashtable<SQLTransientConnectionException, Hashtable<SQLException, Properties>>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("9TNZnic_-Kr", "org.apache.commons.collections4.iterators.EmptyMapIterator", (Throwable) null);
      Hashtable<SQLException, Properties> hashtable1 = new Hashtable<SQLException, Properties>();
      hashtable0.put(sQLTransientConnectionException0, hashtable1);
      EntrySetMapIterator<SQLTransientConnectionException, Hashtable<SQLException, Properties>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, Hashtable<SQLException, Properties>>(hashtable0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException((Throwable) null);
      hashtable0.put(sQLTransientConnectionException1, hashtable1);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) entrySetMapIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable$Enumerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[7];
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLException>) resettableListIterator0, (-938L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-3081), false, true, (-3081), (-3081));
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<DataTruncation>) resettableIterator0, (Predicate<? super DataTruncation>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[1];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>((Predicate<? super SQLException>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) onePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OnePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      Integer integer0 = new Integer((-1943));
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Integer integer0 = new Integer((-806));
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.EqualPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Class<StringTokenizer>[] classArray0 = (Class<StringTokenizer>[]) Array.newInstance(Class.class, 1);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("U',m'-ez*I +Mrq-Xk", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLRecoverableException0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLException>) allPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'U',m'-ez*I +Mrq-Xk' on 'class java.sql.SQLRecoverableException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("iterator");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) singletonListIterator0, (-1L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLRecoverableException[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 0, (-1923));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, (-2056), (-766));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Closure<Object>[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(instanceofPredicateArray0, 4334);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.OnePredicate", "org.apache.commons.collections4.functors.OnePredicate", (Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0, 720, 720);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableExceptionArray0[2], 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, 4, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) sQLRecoverableExceptionArray0, 0, (-2420));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, 2665, 1894);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ArrayDeque<SQLTransactionRollbackException>[] arrayDequeArray0 = (ArrayDeque<SQLTransactionRollbackException>[]) Array.newInstance(ArrayDeque.class, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(arrayDequeArray0, (-323));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((LinkedHashSet<SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 1022, 187);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1247);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("", ">0HG;XsetM724zJZ", 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      SingletonListIterator<ClientInfoStatus> singletonListIterator0 = new SingletonListIterator<ClientInfoStatus>(clientInfoStatus0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) transformer0, (Equator<Object>) defaultEquator0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, closure0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<ClientInfoStatus>) singletonListIterator0, (Closure<? super ClientInfoStatus>) whileClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      OrderedMapIterator<BatchUpdateException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLClientInfoException>(orderedMapIterator0);
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super BatchUpdateException, String>) transformer0, "5NEx?Mq>", "5NEx?Mq>", "5NEx?Mq>");
      assertEquals("5NEx?Mq>5NEx?Mq>", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLClientInfoException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super BatchUpdateException, String>) null, "org.apache.commons.collections4.map.Flat3Map", "", "org.apache.commons.collections4.map.Flat3Map");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) objectArrayListIterator0, (Predicate<? super BatchUpdateException>) onePredicate0);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException(",zou", ",zou");
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) singletonIterator0, 25);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      int[] intArray0 = new int[4];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, (Throwable) null);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      batchUpdateExceptionArray0[1] = batchUpdateExceptionArray0[0];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      Hashtable<SQLException, String> hashtable0 = new Hashtable<SQLException, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashtable0);
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) objectArrayListIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "", "#", "#");
      assertEquals("#nullnull#", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) null, (Transformer<? super BatchUpdateException, String>) transformer0, "Index '", "Index '", "]");
      assertEquals("Index ']", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.map.Flat3Map");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) orderedMapIterator0, (Transformer<? super BatchUpdateException, String>) constantTransformer0, "C^sx}i]vZ,DHI=zeol(", "O}SPaP_", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      OrderedMapIterator<BatchUpdateException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) orderedMapIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "org.apache.commons.collections4.map.Flat3Map", (String) null, ")m(T$PwIWt/d9u@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      OrderedMapIterator<BatchUpdateException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) orderedMapIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, (String) null, ")rXh<:WZ/", ")KW3,sLg`m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<String> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) objectArrayIterator0, (Transformer<? super SQLClientInfoException, ? extends String>) transformer0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLDataException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Boolean, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Boolean, SQLDataException>(orderedMapIterator0);
      int int0 = IteratorUtils.size(abstractOrderedMapIteratorDecorator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      IteratorUtils.get((Iterator<Object>) objectArrayListIterator0, 1);
      assertEquals(1, objectArrayListIterator0.previousIndex());
      assertEquals(2, objectArrayListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) arrayList0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      arrayList0.add(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLClientInfoException>) resettableListIterator0, 1365);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      Integer integer0 = new Integer((-1943));
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) transformedPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) orderedIterator0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Integer>) null, (Predicate<? super Integer>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MapIterator<SQLTimeoutException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, IIOMetadataNode>(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLTimeoutException>) abstractMapIteratorDecorator0, (Predicate<? super SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLClientInfoException0);
      Integer integer0 = new Integer((-1943));
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((Throwable) null);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, true);
      EqualPredicate<SQLRecoverableException> equalPredicate0 = new EqualPredicate<SQLRecoverableException>(sQLRecoverableException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLRecoverableException>) singletonIterator0, (Predicate<? super SQLRecoverableException>) equalPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", mockThrowable0);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) sQLFeatureNotSupportedException0, (Equator<SQLException>) defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer[] integerArray0 = new Integer[18];
      Integer integer0 = new Integer((-511));
      integerArray0[0] = integer0;
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = new ObjectArrayListIterator<Integer>(integerArray0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) null);
      Integer integer1 = IteratorUtils.find((Iterator<Integer>) objectArrayListIterator0, (Predicate<? super Integer>) predicate0);
      assertNull(integer1);
      assertEquals(1, objectArrayListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Iterator<SQLException> iterator0 = EmptyIterator.emptyIterator();
      SQLException sQLException0 = IteratorUtils.find(iterator0, (Predicate<? super SQLException>) allPredicate0);
      assertNull(sQLException0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Predicate<? super SQLException>[]) predicateArray0);
      SQLException sQLException0 = IteratorUtils.find((Iterator<SQLException>) null, (Predicate<? super SQLException>) predicate0);
      assertNull(sQLException0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MapIterator<SQLException, TreeSet<Iterator>> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLException>) mapIterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((Throwable) null);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0, false);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) singletonIterator0, (Iterator<? extends SQLException>) singletonIterator0, (Iterator<? extends SQLException>) singletonIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.find((Iterator<SQLException>) zippingIterator0, (Predicate<? super SQLException>) uniquePredicate0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator((Object[]) sQLRecoverableExceptionArray0, 0, 0);
      Closure<Object> closure0 = ForClosure.forClosure((-1), (Closure<? super Object>) null);
      IteratorUtils.apply((Iterator<Object>) resettableIterator0, (Closure<? super Object>) closure0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<Object>) null, (Closure<? super Object>) closure0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[5];
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.arrayIterator((Object[]) sQLRecoverableExceptionArray0, 0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Object>) resettableIterator0, (Closure<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(predicate0, (Closure<? super SQLException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) ifClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("a", "a");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLClientInfoExceptionArray0[0]);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vector<Closure<Object>> vector0 = new Vector<Closure<Object>>();
      ResettableListIterator<Closure<Object>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Closure<Object>>) vector0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) orderedMapIterator0, (-1943));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) null, (-1366));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Class<SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends BatchUpdateException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[9];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", batchUpdateException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("5<>g", "5<>g", 23, sQLRecoverableException0);
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<Object, SQLNonTransientConnectionException> ifTransformer0 = new IfTransformer<Object, SQLNonTransientConnectionException>((Predicate<? super Object>) null, transformer0, transformer0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) ifTransformer0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientConnectionException>) iterator0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, Closure<SQLFeatureNotSupportedException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterable<Object> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<?>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterable<SQLException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLException>) orderedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0, 0L, 0L);
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) boundedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<?>) enumeration0, (Collection<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) null, (Collection<? super SQLTransientException>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) stack0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("8XUJyX+");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Closure<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, Closure<SQLFeatureNotSupportedException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0, 10);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedHashSet<SQLTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) linkedHashSet0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (Throwable) null);
      linkedHashSet0.add(sQLTransientConnectionException0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) objectArrayListIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ArrayDeque<SQLWarning> arrayDeque0 = new ArrayDeque<SQLWarning>();
      SingletonIterator<ArrayDeque<SQLWarning>> singletonIterator0 = new SingletonIterator<ArrayDeque<SQLWarning>>(arrayDeque0);
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(singletonIterator0);
      ListIterator<SQLException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) identityPredicate0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0, (Predicate<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      AndPredicate<Integer> andPredicate0 = new AndPredicate<Integer>(predicate0, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Integer>) null, (Predicate<? super Integer>) andPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Iterator<Object> iterator1 = IteratorUtils.filteredIterator(iterator0, (Predicate<? super Object>) onePredicate0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) orderedIterator0, (Transformer<? super SQLClientInfoException, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, ? extends String>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      OrderedIterator<SQLClientInfoException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<String> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) orderedIterator0, (Transformer<? super SQLClientInfoException, ? extends String>) transformer0);
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) iterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.singletonIterator(locale_Category0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>((Predicate<? super Object>) null, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Locale.Category>) resettableIterator0, (Transformer<? super Locale.Category, String>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1444), 3044);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, Closure<SQLFeatureNotSupportedException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLSyntaxErrorException, Closure<SQLFeatureNotSupportedException>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, Closure<SQLFeatureNotSupportedException>>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[4];
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.arrayIterator(instanceofPredicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<InstanceofPredicate>) resettableIterator0, (Transformer<? super InstanceofPredicate, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Boolean>) null, (Iterator<? extends Boolean>) null, (Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashSet<IIOMetadataNode>[] hashSetArray0 = (HashSet<IIOMetadataNode>[]) Array.newInstance(HashSet.class, 3);
      ResettableListIterator<HashSet<IIOMetadataNode>> resettableListIterator0 = IteratorUtils.arrayListIterator(hashSetArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashSet<StringTokenizer> hashSet0 = new HashSet<StringTokenizer>();
      LoopingIterator<StringTokenizer> loopingIterator0 = new LoopingIterator<StringTokenizer>(hashSet0);
      String string0 = IteratorUtils.toString((Iterator<StringTokenizer>) loopingIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.singletonIterator(sQLDataException0);
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) resettableIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 1130, 1130);
      Transformer<DataTruncation, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer("H'\"A/J UiOKc_=xx");
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'H'\"A/J UiOKc_=xx' on 'class java.sql.DataTruncation' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.arrayListIterator(dataTruncationArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) resettableListIterator0, (-1032L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("<>gFy93~x`8pR#l9", "eo!XB4ur~3_Gr", (-1862), mockThrowable0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Boolean>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1067, 785);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[0];
      ResettableListIterator<SQLTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SingletonIterator<InstanceofPredicate> singletonIterator0 = new SingletonIterator<InstanceofPredicate>(instanceofPredicate0, true);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean0 = IteratorUtils.contains((Iterator<InstanceofPredicate>) singletonIterator0, (Object) locale_Category0);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1493));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) transformer0, 1366);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }
}
