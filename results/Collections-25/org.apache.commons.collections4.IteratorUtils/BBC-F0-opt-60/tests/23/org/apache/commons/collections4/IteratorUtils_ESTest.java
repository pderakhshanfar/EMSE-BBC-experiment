/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 10:53:06 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("(g(\"T!]'vFr}uq^,", intArray0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      IteratorUtils.get((Iterator<ArrayList<ServiceLoader>>) listIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator((SQLIntegrityConstraintViolationException) null);
      IteratorUtils.get((Iterator<ArrayList<ServiceLoader>>) resettableIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      IteratorUtils.getIterator(locale_FilteringMode0);
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      String string0 = " WI[T f`E";
      InvokerTransformer.invokerTransformer(" WI[T f`E");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) resettableIterator0, (Transformer<? super Locale.FilteringMode, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YlhNp35I8");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Stack<Properties>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[6];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("4~_{1fog~(6^}w", "4~_{1fog~(6^}w", 93, (Throwable) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientException0);
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("4~_{1fog~(6^}w", (String) null, sQLNonTransientException0);
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTimeoutException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("4~_{1fog~(6^}w", "", 93);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("4~_{1fog~(6^}w");
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException1;
      SQLTransientException sQLTransientException1 = new SQLTransientException("", "");
      sQLTransientExceptionArray0[4] = sQLTransientException1;
      SQLTransientConnectionException sQLTransientConnectionException2 = new SQLTransientConnectionException("", (Throwable) null);
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransientConnectionException2;
      ObjectArrayListIterator<SQLTransientException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientException>(sQLTransientExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) instanceofPredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) nullIsExceptionPredicate0);
      predicateArray0[0] = predicate1;
      Predicate<Object> predicate2 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransientException>) objectArrayListIterator0, (Predicate<? super SQLTransientException>) predicate2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, 1547);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      SQLDataException sQLDataException0 = new SQLDataException("iterator");
      arrayList0.add(sQLDataException0);
      IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      int[] intArray0 = new int[4];
      intArray0[1] = (-1274);
      intArray0[2] = 0;
      intArray0[3] = (-1053);
      MockThrowable mockThrowable0 = new MockThrowable(sQLRecoverableException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("#,V%+xis+", intArray0, mockThrowable0);
      IteratorUtils.size((Iterator<?>) null);
      OrderedIterator<Iterator<SQLTimeoutException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<Iterator<SQLTimeoutException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) orderedIterator0);
      PriorityQueue<Iterator<SQLTimeoutException>> priorityQueue0 = new PriorityQueue<Iterator<SQLTimeoutException>>();
      IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLTimeoutException>>) enumeration0, (Collection<? super Iterator<SQLTimeoutException>>) priorityQueue0);
      IteratorUtils.emptyMapIterator();
      ArrayDeque<SQLInvalidAuthorizationSpecException>[] arrayDequeArray0 = (ArrayDeque<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(ArrayDeque.class, 2);
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque1 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      arrayDequeArray0[1] = arrayDeque1;
      ObjectArrayIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>> objectArrayIterator0 = new ObjectArrayIterator<ArrayDeque<SQLInvalidAuthorizationSpecException>>(arrayDequeArray0);
      IteratorUtils.contains((Iterator<ArrayDeque<SQLInvalidAuthorizationSpecException>>) objectArrayIterator0, (Object) arrayDeque1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Class<SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "96g=H!@gKM&";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "96g=H!@gKM&");
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      IteratorUtils.singletonIterator((SQLIntegrityConstraintViolationException) null);
      OrderedMapIterator<SQLTransactionRollbackException, StringTokenizer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, (Iterator<? extends SQLTransactionRollbackException>) singletonIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[8];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Khaxxbe7,,:s/N3RE7", "Khaxxbe7,,:s/N3RE7", 32);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "", 32);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("NodeList must not be null", "", 512, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLDataException sQLDataException0 = new SQLDataException("Khaxxbe7,,:s/N3RE7");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("i)Y(AixP'", "NodeList must not be null", sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException(sQLTimeoutException0);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("NodeList must not be null", "[", (-478), sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("i)Y(AixP'", sQLFeatureNotSupportedException5);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException7 = new SQLFeatureNotSupportedException("NodeList must not be null", sQLDataException1);
      sQLFeatureNotSupportedExceptionArray0[7] = sQLFeatureNotSupportedException7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 1, (-2299));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 4);
      OrderedIterator<SQLWarning> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<SQLWarning>) orderedIterator0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EmptyIterator.resettableEmptyIterator();
      UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "Ar8t%kn.sTe[t|g14";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Ar8t%kn.sTe[t|g14");
      String string1 = "z60Vxyk(:}_";
      int int0 = 3;
      SQLTransientException sQLTransientException0 = new SQLTransientException("Ar8t%kn.sTe[t|g14", "z60Vxyk(:}_", 3, sQLNonTransientException0);
      String string2 = "org.apache.commons.collections4.functors.InstantiateTransformer";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.InstantiateTransformer");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ar8t%kn.sTe[t|g14");
      Locale locale0 = Locale.CHINESE;
      String string3 = "<ko^l;d?$dJ1w69@(x";
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ResettableIterator<Object> resettableIterator0 = IteratorUtils.emptyIterator();
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) resettableIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.singletonIterator(locale_FilteringMode0);
      Transformer<Locale.FilteringMode, Properties> transformer0 = InvokerTransformer.invokerTransformer("(");
      Iterator<Object> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) resettableIterator0, (Transformer<? super Locale.FilteringMode, ?>) transformer0);
      IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ArrayList<ServiceLoader>>) iterator0, 182);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '(' on 'class java.util.Locale$FilteringMode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      IteratorUtils.singletonIterator(locale_FilteringMode0);
      IteratorUtils.emptyOrderedIterator();
      int int0 = 182;
      int int1 = 24;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLTransientException sQLTransientException0 = new SQLTransientException("*|[y_:<(m(nt=&", "", 24, sQLNonTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientException0);
      sQLNonTransientException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ArrayList<ServiceLoader>>) resettableIterator0, 24);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 23
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.singletonIterator(locale_FilteringMode0);
      Transformer<Locale.FilteringMode, Properties> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.EmptyOrderedIterator");
      IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) resettableIterator0, (Transformer<? super Locale.FilteringMode, ?>) transformer0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      PriorityQueue<Predicate<Object>> priorityQueue1 = new PriorityQueue<Predicate<Object>>();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) null, (Transformer<? super SQLTransientConnectionException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, class0);
      ArrayList<Iterator<SQLTimeoutException>> arrayList0 = new ArrayList<Iterator<SQLTimeoutException>>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLTimeoutException>>) null, (Collection<? super Iterator<SQLTimeoutException>>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) arrayDeque0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = null;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      predicateArray0[0] = (Predicate<Object>) nullIsFalsePredicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate1);
      predicateArray0[2] = predicate2;
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      Predicate<Object> predicate3 = EqualPredicate.equalPredicate((Object) sQLFeatureNotSupportedException0);
      predicateArray0[3] = predicate3;
      NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator((SQLClientInfoException) null);
      ListIterator<SQLClientInfoException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) listIterator1, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      OrderedIterator<Iterator<SQLTimeoutException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) orderedIterator0);
      OrderedMapIterator<DataTruncation, ArrayList<Properties>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, ArrayList<Properties>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, ArrayList<Properties>>(orderedMapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      Properties properties0 = new Properties();
      IteratorUtils.asIterable((Iterator<?>) orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Hashtable<SQLNonTransientException, Stack<SQLNonTransientConnectionException>> hashtable0 = new Hashtable<SQLNonTransientException, Stack<SQLNonTransientConnectionException>>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      IteratorUtils.singletonIterator(locale_FilteringMode0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      IteratorUtils.getIterator(properties1);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) uniquePredicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      IteratorUtils.toString((Iterator<Object>) null, (Transformer<? super Object, String>) transformer1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      OrderedIterator<Iterator<SQLTimeoutException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) orderedIterator0);
      PriorityQueue<Iterator<SQLTimeoutException>> priorityQueue1 = new PriorityQueue<Iterator<SQLTimeoutException>>();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.singletonIterator(stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<StringTokenizer>) resettableIterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0, 0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) objectArrayIterator0, (Iterator<? extends DataTruncation>) objectArrayIterator0);
      Iterator<String> iterator0 = null;
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<?>) null, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>((StringTokenizer) null);
      IteratorUtils.unmodifiableListIterator((ListIterator<StringTokenizer>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Cursor closed");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("c)*^", hashtable0, sQLTimeoutException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("L[$)c9mArZ", "Cursor closed", map0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException1);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) singletonIterator0, (Predicate<? super SQLClientInfoException>) uniquePredicate0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) uniquePredicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      UniquePredicate<Object> uniquePredicate1 = new UniquePredicate<Object>();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientException0, false);
      IteratorUtils.find((Iterator<SQLTransientException>) singletonIterator0, (Predicate<? super SQLTransientException>) predicate1);
      ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(arrayDeque0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) loopingIterator0, (Iterator<? extends SQLTransactionRollbackException>) loopingIterator0, (Iterator<? extends SQLTransactionRollbackException>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[4];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0, 0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) objectArrayIterator0, (Iterator<? extends DataTruncation>) objectArrayIterator0);
      Properties properties0 = new Properties();
      IteratorUtils.asIterable((Iterator<?>) zippingIterator0);
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLDataException>(orderedMapIterator0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) objectArrayIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) list0);
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 3);
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      iteratorArray0[0] = (Iterator<Properties>) singletonListIterator0;
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Iterator<Properties> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends Properties>) singletonListIterator0, (Predicate<? super Properties>) predicate0);
      iteratorArray0[1] = iterator0;
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[2] = (Iterator<Properties>) listIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      IteratorUtils.singletonIterator(locale_FilteringMode0);
      InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.EmptyOrderedIterator");
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.EmptyOrderedIterator", "org.apache.commons.collections4.iterators.EmptyOrderedIterator");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientConnectionException0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IteratorUtils.find((Iterator<SQLTransientException>) singletonIterator0, (Predicate<? super SQLTransientException>) orPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 12, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0, 0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) objectArrayIterator0, (Iterator<? extends DataTruncation>) objectArrayIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<?>) objectArrayIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(3260, false, false, 3260, (-22));
      IteratorUtils.singletonListIterator(dataTruncation0);
      HashMap<SQLException, String> hashMap0 = new HashMap<SQLException, String>();
      hashMap0.replace((SQLException) dataTruncation0, "@Ej*", "@Ej*");
      Transformer<DataTruncation, String> transformer0 = MapTransformer.mapTransformer((Map<? super DataTruncation, ? extends String>) hashMap0);
      IteratorUtils.getIterator(transformer0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("@Ej*", "");
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 1);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLSyntaxErrorException>) resettableListIterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("@Ej*", "@Ej*");
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "", (-1247), sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("", "", (-3421));
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("", "InstantiateTransformer: The constructor must exist and be public ");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("", "", (-1247), sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("", "@Ej*", sQLNonTransientConnectionException4);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, (-518), (-518));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-1021), true, false, (-1021), (-1021));
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      HashMap<SQLException, String> hashMap0 = new HashMap<SQLException, String>();
      MapTransformer.mapTransformer((Map<? super DataTruncation, ? extends String>) hashMap0);
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashMap0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) listIterator0, (Transformer<? super DataTruncation, String>) transformer0, "Transformer must not be null", "3]g%Gr+JS", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = (IIOMetadataNode)iIOMetadataNode0.getChildNodes();
      iIOMetadataNode1.replaceChild(iIOMetadataNode0, iIOMetadataNode0);
      iIOMetadataNode0.getLength();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/^ejX?G");
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTimeoutException0, true);
      IteratorUtils.find((Iterator<SQLTransientException>) singletonIterator0, (Predicate<? super SQLTransientException>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) arrayDeque0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("bg", sQLTransactionRollbackExceptionArray0[0]);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      sQLTransactionRollbackException1.getSuppressed();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(sQLTransactionRollbackExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",");
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator1, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.isEmpty((Iterator<?>) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) arrayDeque0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      Properties properties0 = new Properties();
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) transformer0);
      Iterator<Properties> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator1, (Predicate<? super Properties>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(3292, false, false, 3292, 16);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      HashMap<SQLException, String> hashMap0 = new HashMap<SQLException, String>();
      MapTransformer.mapTransformer((Map<? super DataTruncation, ? extends String>) hashMap0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) listIterator0, (Equator<Object>) defaultEquator0);
      PredicateTransformer<StringTokenizer> predicateTransformer0 = new PredicateTransformer<StringTokenizer>(predicate0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("3]g%Gr+JS");
      Boolean boolean0 = predicateTransformer0.transform(stringTokenizer0);
      IteratorUtils.singletonListIterator(boolean0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[1];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0, 0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) objectArrayIterator0, (Iterator<? extends DataTruncation>) objectArrayIterator0);
      Properties properties0 = new Properties();
      IteratorUtils.isEmpty(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) singletonIterator0, (Predicate<? super SQLClientInfoException>) predicate1);
      Predicate<Object> predicate2 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      PredicateTransformer<StringTokenizer> predicateTransformer0 = new PredicateTransformer<StringTokenizer>(predicate2);
      StringTokenizer stringTokenizer0 = new StringTokenizer("ListIterator must not be null", "No value can be removed at present");
      Boolean boolean0 = predicateTransformer0.transform(stringTokenizer0);
      IteratorUtils.singletonListIterator(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0, 0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) objectArrayIterator0, (Iterator<? extends DataTruncation>) objectArrayIterator0);
      Properties properties0 = new Properties();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Vector<SQLDataException>[] vectorArray0 = (Vector<SQLDataException>[]) Array.newInstance(Vector.class, 4);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      vectorArray0[0] = vector0;
      Vector<SQLDataException> vector1 = new Vector<SQLDataException>();
      vectorArray0[1] = vector1;
      Vector<SQLDataException> vector2 = new Vector<SQLDataException>();
      vectorArray0[2] = vector2;
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      vectorArray0[3] = (Vector<SQLDataException>) stack0;
      ResettableIterator<Vector<SQLDataException>> resettableIterator0 = IteratorUtils.arrayIterator(vectorArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(uniquePredicate0, uniquePredicate0);
      IteratorUtils.matchesAll((Iterator<Vector<SQLDataException>>) resettableIterator0, (Predicate<? super Vector<SQLDataException>>) orPredicate0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.singletonIterator(locale_FilteringMode0);
      Transformer<Locale.FilteringMode, Properties> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.EmptyOrderedIterator");
      IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) resettableIterator0, (Transformer<? super Locale.FilteringMode, ?>) transformer0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Properties properties0 = new Properties();
      DataTruncation dataTruncation0 = new DataTruncation(1185, false, true, 1185, 1185);
      SingletonListIterator<DataTruncation> singletonListIterator0 = new SingletonListIterator<DataTruncation>(dataTruncation0);
      FactoryTransformer<SQLWarning, String> factoryTransformer0 = new FactoryTransformer<SQLWarning, String>((Factory<? extends String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) singletonListIterator0, (Transformer<? super DataTruncation, String>) factoryTransformer0, "3]g%Gr+JS", "", "3]g%Gr+JS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(3260, true, true, 3260, 16);
      IteratorUtils.singletonListIterator(dataTruncation0);
      HashMap<SQLException, String> hashMap0 = new HashMap<SQLException, String>();
      MapTransformer.mapTransformer((Map<? super DataTruncation, ? extends String>) hashMap0);
      Iterator<SQLDataException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      EntrySetMapIterator<Object, String> entrySetMapIterator0 = new EntrySetMapIterator<Object, String>(hashtable0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      SkippingIterator<Object> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Object>) entrySetMapIterator0, 0L);
      IteratorUtils.apply((Iterator<Object>) skippingIterator0, (Closure<? super Object>) closure0);
      Properties properties0 = new Properties();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      EntrySetMapIterator<Object, String> entrySetMapIterator0 = new EntrySetMapIterator<Object, String>(hashtable0);
      ExceptionClosure.exceptionClosure();
      IteratorUtils.skippingIterator((Iterator<Object>) entrySetMapIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Object>) null, (Closure<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      nodeList0.getLength();
      IteratorUtils.nodeListIterator(nodeList0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IteratorUtils.find((Iterator<Properties>) null, (Predicate<? super Properties>) orPredicate0);
      Hashtable<SQLNonTransientException, SQLRecoverableException> hashtable0 = new Hashtable<SQLNonTransientException, SQLRecoverableException>();
      EntrySetMapIterator<SQLNonTransientException, SQLRecoverableException> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientException, SQLRecoverableException>(hashtable0);
      MapIterator<SQLNonTransientException, SQLRecoverableException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientException, SQLRecoverableException>) entrySetMapIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientException>) mapIterator0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OrderedMapIterator<Properties, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<Properties, SQLNonTransientConnectionException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends Properties, ? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      int int0 = 2019;
      IteratorUtils.toList((Iterator<? extends Properties>) mapIterator0, 2019);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      ArrayList<SQLNonTransientException>[] arrayListArray0 = (ArrayList<SQLNonTransientException>[]) Array.newInstance(ArrayList.class, 1);
      ArrayList<SQLNonTransientException> arrayList0 = new ArrayList<SQLNonTransientException>();
      arrayListArray0[0] = arrayList0;
      IteratorUtils.arrayListIterator(arrayListArray0);
      ArrayListIterator<SQLTransientConnectionException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTransientConnectionException>(mapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      EntrySetMapIterator<Object, String> entrySetMapIterator0 = new EntrySetMapIterator<Object, String>(hashtable0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      SkippingIterator<Object> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Object>) entrySetMapIterator0, 0L);
      IteratorUtils.apply((Iterator<Object>) skippingIterator0, (Closure<? super Object>) closure0);
      TreeSet<SQLNonTransientException> treeSet0 = new TreeSet<SQLNonTransientException>();
      Properties properties0 = new Properties();
      IteratorUtils.getIterator(properties0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      DataTruncation dataTruncation0 = new DataTruncation(1830, true, true, 1830, 1830);
      dataTruncationArray0[0] = dataTruncation0;
      Iterator<Iterator<SQLTimeoutException>> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<Iterator<SQLTimeoutException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) iterator0);
      HashSet<Iterator<SQLTimeoutException>> hashSet0 = new HashSet<Iterator<SQLTimeoutException>>();
      IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLTimeoutException>>) enumeration0, (Collection<? super Iterator<SQLTimeoutException>>) hashSet0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Aw*GeVvIuI?|,o&");
      MapIterator<SQLFeatureNotSupportedException, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("$^1");
      IdentityPredicate<SQLFeatureNotSupportedException> identityPredicate0 = new IdentityPredicate<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) mapIterator0, (Predicate<? super SQLFeatureNotSupportedException>) identityPredicate0);
      IteratorUtils.getIterator((Object) null);
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends IIOMetadataNode>) orderedMapIterator0);
      MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException> mapIterator1 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLDataException, SQLInvalidAuthorizationSpecException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, SQLInvalidAuthorizationSpecException>(mapIterator1);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) abstractMapIteratorDecorator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) abstractMapIteratorDecorator0);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) arrayList0);
      EmptyMapIterator.emptyMapIterator();
      Iterator<SQLTimeoutException> iterator1 = EmptyIterator.emptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>) iterator1, (Iterator<? extends SQLTimeoutException>) iterator1);
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 2);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.range(locale_FilteringMode0, locale_FilteringMode1);
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.copyOf(enumSet0);
      enumSetArray0[0] = enumSet1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet2 = EnumSet.of(locale_FilteringMode2, locale_FilteringMode2, locale_FilteringMode2);
      enumSetArray0[1] = enumSet2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(enumSetArray0, 3489);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IteratorUtils.emptyIterator();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      String string0 = "The current criterion '";
      ListIterator<DataTruncation> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) listIterator0, (-22L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      int int0 = 0;
      ArrayList<Locale.FilteringMode>[] arrayListArray0 = (ArrayList<Locale.FilteringMode>[]) Array.newInstance(ArrayList.class, 5);
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      arrayListArray0[0] = arrayList0;
      arrayListArray0[1] = arrayList0;
      ArrayList<Locale.FilteringMode> arrayList1 = new ArrayList<Locale.FilteringMode>();
      arrayListArray0[2] = arrayList1;
      ArrayList<Locale.FilteringMode> arrayList2 = new ArrayList<Locale.FilteringMode>();
      arrayListArray0[3] = arrayList2;
      ArrayList<Locale.FilteringMode> arrayList3 = new ArrayList<Locale.FilteringMode>();
      arrayListArray0[4] = arrayList3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(arrayListArray0, 0, (-2136));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(3280, true, true, 3280, 16);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      HashMap<SQLException, String> hashMap0 = new HashMap<SQLException, String>();
      Transformer<DataTruncation, String> transformer0 = MapTransformer.mapTransformer((Map<? super DataTruncation, ? extends String>) hashMap0);
      IteratorUtils.toString((Iterator<DataTruncation>) listIterator0, (Transformer<? super DataTruncation, String>) transformer0, "Closure must not be null", "The current criterion '", "Closure must not be null");
      OrderedMapIterator<SQLTransactionRollbackException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLTransactionRollbackException, BatchUpdateException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLTransactionRollbackException, ? extends BatchUpdateException>) orderedMapIterator0);
      MapIterator<SQLTransactionRollbackException, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, BatchUpdateException>) orderedMapIterator1);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      ListIterator<ServiceLoader<BatchUpdateException>> listIterator1 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("NS7", "NS7");
      IteratorUtils.getIterator(stringTokenizer0);
      EmptyMapIterator.emptyMapIterator();
      PriorityQueue<Iterator<SQLTimeoutException>> priorityQueue0 = new PriorityQueue<Iterator<SQLTimeoutException>>();
      Integer integer0 = new Integer(100);
      Integer integer1 = new Integer(100);
      Predicate<Integer> predicate0 = IdentityPredicate.identityPredicate(integer1);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<Integer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      IteratorUtils.matchesAll(iterator0, (Predicate<? super Integer>) predicate0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Iterator<Iterator<SQLTimeoutException>> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<Iterator<SQLTimeoutException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) iterator0);
      Collection<Iterator<SQLTimeoutException>> collection0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLTimeoutException>>) enumeration0, (Collection<? super Iterator<SQLTimeoutException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "i%De";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("i%De");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i%De");
      IteratorUtils.nodeListIterator(nodeList0);
      String string1 = null;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTimeoutException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, sQLTransactionRollbackException0);
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, (-1023));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-84);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      DataTruncation dataTruncation0 = new DataTruncation(1202, false, true, (byte)5, 2510);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashtable0, dataTruncation0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("AR#[d~RN +eAh", "", (-1437), map0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(map1);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("", hashtable0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.map.AbstractHashedMap$HashEntry", map1);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("", map1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException5;
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException("org.apache.commons.collections4.map.AbstractHashedMap$EntrySet", map1, dataTruncation0);
      Map<String, ClientInfoStatus> map2 = sQLClientInfoException6.getFailedProperties();
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("Factory must not be null", "Factory must not be null", map2, sQLClientInfoException6);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException7;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      IteratorUtils.toArray((Iterator<?>) objectArrayListIterator0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(3280, true, true, 3280, 16);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      HashMap<SQLException, String> hashMap0 = new HashMap<SQLException, String>();
      MapTransformer.mapTransformer((Map<? super DataTruncation, ? extends String>) hashMap0);
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) listIterator0, (Transformer<? super DataTruncation, String>) transformer0, "Closure must not be null", "Closure must not be null", "Closure must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) arrayDeque0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.filteredIterator((Iterator<?>) resettableIterator0, (Predicate<? super Object>) predicate0);
      IteratorUtils.asIterable((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedList0);
      IteratorUtils.emptyOrderedIterator();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("g`eBoN\"oFg~~jPf.I|", hashtable0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 52;
      intArray0[2] = (-45);
      intArray0[3] = 2282;
      intArray0[4] = 908;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLClientInfoException0);
      IteratorUtils.size(resettableIterator0);
      OrderedIterator<Iterator<SQLTimeoutException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) orderedIterator0);
      PriorityQueue<Iterator<SQLTimeoutException>> priorityQueue0 = new PriorityQueue<Iterator<SQLTimeoutException>>();
      EmptyIterator.resettableEmptyIterator();
      Enumeration<Iterator<SQLTimeoutException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) orderedIterator0);
      PriorityQueue<Iterator<SQLTimeoutException>> priorityQueue1 = new PriorityQueue<Iterator<SQLTimeoutException>>();
      IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLTimeoutException>>) enumeration0, (Collection<? super Iterator<SQLTimeoutException>>) priorityQueue0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("pgC*5oh9qL@");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      IteratorUtils.getIterator(iIOMetadataNode0);
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends IIOMetadataNode>) orderedMapIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) orderedMapIterator1);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) arrayList0);
      MapIterator<SQLTransactionRollbackException, Predicate<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<SQLTransactionRollbackException>) mapIterator0);
      IteratorUtils.emptyOrderedIterator();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedList0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      OrderedMapIterator<SQLRecoverableException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException>(orderedMapIterator0);
      InvokerTransformer.invokerTransformer("[P?GcM'");
      String string0 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLRecoverableException, String>) null, "[P?GcM'", "[P?GcM'", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InvokerTransformer.invokerTransformer("or.apache.commons.collections4.iterators.EmptyOrderedIterator");
      StringTokenizer stringTokenizer0 = new StringTokenizer("or.apache.commons.collections4.iterators.EmptyOrderedIterator", "or.apache.commons.collections4.iterators.EmptyOrderedIterator");
      IteratorUtils.getIterator("or.apache.commons.collections4.iterators.EmptyOrderedIterator");
      SQLDataException sQLDataException0 = new SQLDataException("or.apache.commons.collections4.iterators.EmptyOrderedIterator", "or.apache.commons.collections4.iterators.EmptyOrderedIterator", 27);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 100, (Throwable) null);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(100, 100);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", 100, hashMap0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Transformer must not be null", "", (-2311), hashMap0, (Throwable) null);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException();
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("Transformer must not be null", "FCRe10b0VE?S_R6b\"u", (-3421), hashMap0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("Transformer must not be null", hashMap1);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(" d}>$Gjvh!0hz/I:\u0000", hashMap1, sQLClientInfoException4);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      ObjectArrayListIterator<SQLClientInfoException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) objectArrayListIterator0, 0L);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null, 2460, 2460);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Integer integer0 = new Integer(547);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 547);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("NS7");
      IteratorUtils.getIterator(stringTokenizer0);
      MapIterator<Vector<SQLDataException>, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>("NS7");
      IteratorUtils.matchesAll((Iterator<Vector<SQLDataException>>) mapIterator0, (Predicate<? super Vector<SQLDataException>>) identityPredicate0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Transformer<Locale.FilteringMode, Properties> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.EmptyOrderedIterator");
      Iterator<Object> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) singletonIterator0, (Transformer<? super Locale.FilteringMode, ?>) transformer0);
      IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.emptyOrderedIterator();
      Vector<Properties> vector0 = new Vector<Properties>(0, 125);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      ExceptionClosure.exceptionClosure();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLRecoverableException0);
      arrayList0.add(sQLDataException0);
      arrayList0.add(sQLDataException0);
      int int0 = (-611);
      Integer integer0 = new Integer((-611));
      IdentityPredicate.identityPredicate(integer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException2.getFailedProperties();
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("/?Sg#Esi==", "/?Sg#Esi==", (-615), (Map<String, ClientInfoStatus>) null, sQLClientInfoException2);
      sQLClientInfoException1.getLocalizedMessage();
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      arrayList0.add(sQLClientInfoException0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      ListIterator<SQLClientInfoException> listIterator0 = linkedList0.listIterator();
      sQLClientInfoException1.addSuppressed(sQLClientInfoException3);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) integer0);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("/?Sg#Esi==");
      Transformer<Object, Boolean> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends Boolean>) transformer0, (Transformer<? super Object, ? extends Boolean>) transformer0);
      Predicate<SQLClientInfoException> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super SQLClientInfoException, Boolean>) transformer1);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) listIterator0, (Predicate<? super SQLClientInfoException>) predicate1);
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(")%", ")%", sQLClientInfoException3);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) listIterator0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedList0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      OrderedMapIterator<SQLRecoverableException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException>(orderedMapIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLFeatureNotSupportedException0);
      int[] intArray0 = new int[15];
      intArray0[0] = (-1053);
      intArray0[1] = (-1053);
      intArray0[2] = (-1053);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Estimated size must be greater than 0", intArray0, sQLFeatureNotSupportedException0);
      IteratorUtils.size(abstractOrderedMapIteratorDecorator0);
      OrderedIterator<Iterator<SQLTimeoutException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<Iterator<SQLTimeoutException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) orderedIterator0);
      PriorityQueue<Iterator<SQLTimeoutException>> priorityQueue0 = new PriorityQueue<Iterator<SQLTimeoutException>>();
      ResettableIterator<Iterator<SQLTimeoutException>> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) resettableIterator1);
      PriorityQueue<Iterator<SQLTimeoutException>> priorityQueue1 = new PriorityQueue<Iterator<SQLTimeoutException>>();
      IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLTimeoutException>>) enumeration0, (Collection<? super Iterator<SQLTimeoutException>>) priorityQueue1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Estimated size must be greater than 0");
      IteratorUtils.getIterator(sQLIntegrityConstraintViolationException0);
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLDataException, IIOMetadataNode> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLDataException, ? extends IIOMetadataNode>) orderedMapIterator1);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLDataException>) orderedMapIterator2);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedList0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      OrderedMapIterator<SQLRecoverableException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException>(orderedMapIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLFeatureNotSupportedException0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1053);
      intArray0[1] = (-1053);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Z6V%;$[N)h4MQ)", intArray0, sQLFeatureNotSupportedException0);
      IteratorUtils.size(abstractOrderedMapIteratorDecorator0);
      OrderedIterator<Iterator<SQLTimeoutException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) orderedIterator0);
      PriorityQueue<Iterator<SQLTimeoutException>> priorityQueue0 = new PriorityQueue<Iterator<SQLTimeoutException>>();
      EmptyIterator.resettableEmptyIterator();
      Enumeration<Iterator<SQLTimeoutException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) orderedIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLTimeoutException>>) enumeration0, (Collection<? super Iterator<SQLTimeoutException>>) priorityQueue0);
      IteratorUtils.getIterator(enumeration0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, class0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      PriorityQueue<Predicate<Object>> priorityQueue1 = new PriorityQueue<Predicate<Object>>();
      AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue1);
      Vector<Properties> vector0 = new Vector<Properties>(125, 125);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null, 22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Transformer<Locale.FilteringMode, Properties> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.EmptyOrderedIterator");
      Iterator<Object> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) singletonIterator0, (Transformer<? super Locale.FilteringMode, ?>) transformer0);
      IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.emptyOrderedIterator();
      Vector<Properties> vector0 = new Vector<Properties>(0, 125);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.iterators.EmptyOrderedIterator' on 'class java.util.Locale$FilteringMode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Transformer<Locale.FilteringMode, Properties> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.EmptyOrderedIterator");
      Iterator<Object> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) singletonIterator0, (Transformer<? super Locale.FilteringMode, ?>) transformer0);
      IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.emptyOrderedIterator();
      Vector<Properties> vector0 = new Vector<Properties>(0, 125);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.iterators.EmptyOrderedIterator' on 'class java.util.Locale$FilteringMode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InvokerTransformer.invokerTransformer("or.apache.commons.collections4.iterators.EmptyOrderedIterator");
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      int[] intArray0 = new int[0];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Equator must not be null.", hashtable0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Equator must not be null.", intArray0, sQLClientInfoException0);
      IteratorUtils.size(orderedIterator0);
      OrderedIterator<Iterator<SQLTimeoutException>> orderedIterator1 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) orderedIterator1);
      PriorityQueue<Iterator<SQLTimeoutException>> priorityQueue0 = new PriorityQueue<Iterator<SQLTimeoutException>>();
      Vector<Properties> vector0 = new Vector<Properties>(3439, (-215));
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      SQLWarning sQLWarning0 = new SQLWarning("|Sx", "Initial capacity must be a non negative number", 0, sQLClientInfoException0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLWarning0);
      IteratorUtils.toString((Iterator<Object>) singletonIterator0);
      IteratorUtils.apply((Iterator<Object>) singletonIterator0, (Closure<? super Object>) closure0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(arrayList0);
      IteratorUtils.isEmpty(reverseListIterator0);
      IteratorUtils.getIterator((Object) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedList0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      OrderedMapIterator<SQLRecoverableException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException>(orderedMapIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLFeatureNotSupportedException0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1053);
      intArray0[1] = (-1053);
      intArray0[2] = (-1053);
      intArray0[3] = (-1053);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Estimated size must be greater than 0", intArray0, sQLFeatureNotSupportedException0);
      IteratorUtils.size(resettableIterator0);
      OrderedIterator<Iterator<SQLTimeoutException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) orderedIterator0);
      PriorityQueue<Iterator<SQLTimeoutException>> priorityQueue0 = new PriorityQueue<Iterator<SQLTimeoutException>>();
      ResettableIterator<Iterator<SQLTimeoutException>> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      Enumeration<Iterator<SQLTimeoutException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) resettableIterator1);
      IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLTimeoutException>>) enumeration0, (Collection<? super Iterator<SQLTimeoutException>>) priorityQueue0);
      IteratorUtils.getIterator(mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("_1eSP>W)%D @IO;P");
      IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) transformer0, "gL$X'y'aC!xa)fn*nz9", "remove() method is not supported", "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("gL$X'y'aC!xa)fn*nz9");
      iIOMetadataNode0.getAttributeNodeNS("", "TQze$");
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLNonTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLNonTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLIntegrityConstraintViolationException, SQLNonTransientConnectionException>(orderedMapIterator0);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLNonTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) orderedMapIterator1);
      linkedList0.addAll((Collection<? extends SQLIntegrityConstraintViolationException>) list0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedList0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      OrderedMapIterator<SQLRecoverableException, SQLTransientException> orderedMapIterator2 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException>(orderedMapIterator2);
      IteratorUtils.asIterable((Iterator<? extends SQLRecoverableException>) orderedMapIterator2);
      Vector<Properties> vector0 = new Vector<Properties>(841, 928);
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(vector0);
      IteratorUtils.chainedIterator((Iterator<? extends Properties>) reverseListIterator0, (Iterator<? extends Properties>) reverseListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "[P?GcM'", 100, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InvokerTransformer.invokerTransformer("or.apache.commons.collections4.iterators.EmptyOrderedIterator");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("=HjH6R!mr", "=HjH6R!mr");
      MockThrowable mockThrowable0 = new MockThrowable(sQLInvalidAuthorizationSpecException0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1053);
      intArray0[1] = 0;
      intArray0[2] = (-1053);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1053);
      DataTruncation dataTruncation0 = new DataTruncation((-1053), false, false, (-637), (-1274), sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Closure must not be null", intArray0, dataTruncation0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(dataTruncation0);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      IteratorUtils.size(singletonListIterator0);
      OrderedIterator<Iterator<SQLTimeoutException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<Iterator<SQLTimeoutException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) orderedIterator0);
      PriorityQueue<Iterator<SQLTimeoutException>> priorityQueue0 = new PriorityQueue<Iterator<SQLTimeoutException>>();
      IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLTimeoutException>>) enumeration0, (Collection<? super Iterator<SQLTimeoutException>>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, 2002L, 2002L);
      ListIterator<SQLTransientConnectionException> listIterator1 = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) listIterator0, comparator0);
      Predicate<SQLTransientConnectionException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLTransientConnectionException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) predicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IteratorUtils.emptyIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Boolean>) null, (Predicate<? super Boolean>) nullIsExceptionPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      OrderedMapIterator<SQLRecoverableException, SQLTransientException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException>(orderedMapIterator1);
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("[P?GcM'");
      IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedMapIterator1, (Transformer<? super SQLRecoverableException, String>) transformer0, "", "", "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      String string0 = null;
      iIOMetadataNode0.getAttributeNodeNS((String) null, "");
      ListIteratorWrapper<SQLRecoverableException> listIteratorWrapper0 = new ListIteratorWrapper<SQLRecoverableException>(orderedMapIterator1);
      IteratorUtils.asIterable((Iterator<? extends SQLRecoverableException>) listIteratorWrapper0);
      // Undeclared exception!
      try { 
        iIOMetadataNode0.setAttributeNode((Attr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      int[] intArray0 = new int[4];
      intArray0[1] = (-1274);
      intArray0[2] = 0;
      intArray0[3] = (-1053);
      MockThrowable mockThrowable0 = new MockThrowable(sQLRecoverableException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("#,V%+xis+", intArray0, mockThrowable0);
      IteratorUtils.size(resettableListIterator0);
      OrderedIterator<Iterator<SQLTimeoutException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<Iterator<SQLTimeoutException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) orderedIterator0);
      PriorityQueue<Iterator<SQLTimeoutException>> priorityQueue0 = new PriorityQueue<Iterator<SQLTimeoutException>>();
      IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLTimeoutException>>) enumeration0, (Collection<? super Iterator<SQLTimeoutException>>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Predicate<SQLIntegrityConstraintViolationException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLIntegrityConstraintViolationException>>) arrayDeque0);
      IteratorUtils.singletonListIterator(predicate0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1274);
      intArray0[2] = 0;
      intArray0[3] = 14;
      intArray0[4] = (-1053);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("delimiter may not be null", intArray0, sQLFeatureNotSupportedException0);
      IteratorUtils.size((Iterator<?>) null);
      OrderedIterator<Iterator<SQLTimeoutException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<Iterator<SQLTimeoutException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) orderedIterator0);
      PriorityQueue<Iterator<SQLTimeoutException>> priorityQueue0 = new PriorityQueue<Iterator<SQLTimeoutException>>();
      IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLTimeoutException>>) enumeration0, (Collection<? super Iterator<SQLTimeoutException>>) priorityQueue0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      DataTruncation dataTruncation0 = new DataTruncation(1830, true, true, 1830, 1830);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1830, false, false, 100, 419);
      dataTruncationArray0[0] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-936), true, true, 1830, 0);
      dataTruncationArray0[0] = dataTruncation2;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0, 0);
      IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) objectArrayIterator0, (Iterator<? extends DataTruncation>) objectArrayIterator0);
      Properties properties0 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) listIterator0, 908);
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(list0);
      IteratorUtils.chainedIterator((Iterator<? extends Properties>) reverseListIterator0, (Iterator<? extends Properties>) reverseListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) listIterator0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLRecoverableException0);
      arrayList0.add(sQLDataException0);
      arrayList0.add(sQLDataException0);
      Integer integer0 = new Integer(9);
      IteratorUtils.contains((Iterator<SQLException>) null, (Object) integer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null, 0, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      OrderedMapIterator<SQLRecoverableException, SQLTransientException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException>(orderedMapIterator1);
      String string0 = "(bd~=/}gP:";
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("(bd~=/}gP:");
      IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedMapIterator1, (Transformer<? super SQLRecoverableException, String>) transformer0, "(bd~=/}gP:", "[P?GcM'", "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      int int0 = 7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 7, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Vector<Properties> vector0 = new Vector<Properties>(0, 125);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.iterators.EmptyOrderedIterator", "", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLException>) null, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedList0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      OrderedMapIterator<SQLRecoverableException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException>(orderedMapIterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InvokerTransformer.invokerTransformer("[P?GcM'");
      MockThrowable mockThrowable0 = new MockThrowable("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "[P?GcM'", mockThrowable0);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      singletonIterator0.next();
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, 1974L, 0L);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Transformer must not be null", "");
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      EntrySetMapIterator<Object, String> entrySetMapIterator0 = new EntrySetMapIterator<Object, String>(hashtable0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<Object>) entrySetMapIterator0, (Closure<? super Object>) closure0);
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      int int0 = (-3421);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) orderedMapIterator1, (-3421));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      OrderedIterator<Iterator<SQLTimeoutException>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Enumeration<Iterator<SQLTimeoutException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) orderedIterator0);
      PriorityQueue<Iterator<SQLTimeoutException>> priorityQueue1 = new PriorityQueue<Iterator<SQLTimeoutException>>();
      IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLTimeoutException>>) enumeration0, (Collection<? super Iterator<SQLTimeoutException>>) priorityQueue1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.singletonIterator(locale_FilteringMode0);
      String string0 = "org.apache.commons.collections4.iterators.EmptyOrderedIterator";
      Transformer<Locale.FilteringMode, Properties> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.EmptyOrderedIterator");
      Iterator<Object> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) resettableIterator0, (Transformer<? super Locale.FilteringMode, ?>) transformer0);
      IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyOrderedIterator();
      Vector<Properties> vector0 = new Vector<Properties>(10, 100);
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(vector0);
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(vector0);
      IteratorUtils.chainedIterator((Iterator<? extends Properties>) loopingIterator0, (Iterator<? extends Properties>) reverseListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) transformer0, 0, (-107));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(arrayList0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("+T0q?C8}4cp~<<");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("kc'DMSyXyM", sQLNonTransientException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("+T0q?C8}4cp~<<", "+T0q?C8}4cp~<<", hashMap0, sQLInvalidAuthorizationSpecException0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put(";|P=NL|", clientInfoStatus0);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      sQLClientInfoException1.getLocalizedMessage();
      IteratorUtils.emptyOrderedMapIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (int[]) null);
      IteratorUtils.singletonListIterator(batchUpdateException0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) transformer0, (String) null, ";|P=NL|", "aAOL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLTransientConnectionException>(orderedMapIterator0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, class0);
      MockThrowable mockThrowable0 = new MockThrowable("]z,/cY<!rD`.N&=D");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("BP", "", mockThrowable0);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      singletonIterator0.next();
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, 0L, 0L);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Entry does not exist: ", "Transformer must not be null");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      EntrySetMapIterator<Object, String> entrySetMapIterator0 = new EntrySetMapIterator<Object, String>(hashtable0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<Object>) entrySetMapIterator0, (Closure<? super Object>) closure0);
      int int0 = (-491);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.singletonIterator(locale_FilteringMode0);
      String string0 = "org.apache.commons.collections4.iterators.EmptyOrderedIterator";
      Transformer<Locale.FilteringMode, Properties> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.EmptyOrderedIterator");
      Iterator<Object> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) resettableIterator0, (Transformer<? super Locale.FilteringMode, ?>) transformer0);
      IteratorUtils.unmodifiableIterator(iterator0);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<ArrayList<ServiceLoader>>) resettableListIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.FilteringMode>[] iteratorArray0 = (Iterator<Locale.FilteringMode>[]) Array.newInstance(Iterator.class, 7);
      OrderedMapIterator<Locale.FilteringMode, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<Locale.FilteringMode>) orderedMapIterator0;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ConstantTransformer<Object, Locale.FilteringMode> constantTransformer0 = new ConstantTransformer<Object, Locale.FilteringMode>(locale_FilteringMode1);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.objectGraphIterator(locale_FilteringMode0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) constantTransformer0);
      iteratorArray0[1] = iterator0;
      OrderedMapIterator<Locale.FilteringMode, LinkedList<SQLException>> orderedMapIterator1 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Locale.FilteringMode, LinkedList<SQLException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.FilteringMode, LinkedList<SQLException>>(orderedMapIterator1);
      iteratorArray0[2] = (Iterator<Locale.FilteringMode>) abstractMapIteratorDecorator0;
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[3] = (Iterator<Locale.FilteringMode>) resettableListIterator0;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[9];
      locale_FilteringModeArray0[0] = locale_FilteringMode1;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      locale_FilteringModeArray0[3] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode3;
      locale_FilteringModeArray0[5] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[6] = locale_FilteringMode4;
      locale_FilteringModeArray0[7] = locale_FilteringMode1;
      locale_FilteringModeArray0[8] = locale_FilteringMode1;
      int int0 = (-2409);
      int int1 = (-1);
      ObjectArrayListIterator<Locale.FilteringMode> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Locale.FilteringMode>(locale_FilteringModeArray0, (-2409), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      DataTruncation dataTruncation0 = new DataTruncation(1830, true, true, 1830, 1830);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1830, false, false, 100, 419);
      dataTruncationArray0[0] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-936), true, true, 1830, 0);
      SQLDataException sQLDataException0 = new SQLDataException(", ", "", 12);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(", ", dataTruncation1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(", ", "", dataTruncation1);
      Transformer<Object, SQLClientInfoException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLException> iterator0 = IteratorUtils.objectGraphIterator((SQLException) sQLTransactionRollbackException0, (Transformer<? super SQLException, ? extends SQLException>) transformer0);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) iterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Iterator<? extends SQLTransactionRollbackException>) resettableIterator0);
      int int0 = 100;
      Integer integer0 = new Integer(100);
      Predicate<Integer> predicate0 = IdentityPredicate.identityPredicate(integer0);
      IteratorUtils.matchesAll((Iterator<Integer>) null, (Predicate<? super Integer>) predicate0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      IteratorUtils.singletonListIterator(batchUpdateException0);
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      IteratorUtils.singletonIterator(locale_FilteringMode0);
      String string0 = "[P?GcM'";
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("[P?GcM'");
      String string1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) transformer0, "", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedList0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      OrderedMapIterator<SQLRecoverableException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException>(orderedMapIterator0);
      Transformer<Locale.FilteringMode, Properties> transformer0 = InvokerTransformer.invokerTransformer("Cannot add to list until next() or previous() called");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) null, (Transformer<? super Locale.FilteringMode, ?>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator1, class0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      IteratorUtils.matchesAny((Iterator<SQLClientInfoException>) resettableListIterator0, (Predicate<? super SQLClientInfoException>) predicate1);
      ObjectArrayListIterator<Object> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Object>(sQLFeatureNotSupportedExceptionArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Predicate<Object> predicate0 = null;
      ServiceLoader<SQLDataException>[] serviceLoaderArray0 = (ServiceLoader<SQLDataException>[]) Array.newInstance(ServiceLoader.class, 0);
      ResettableIterator<ServiceLoader<SQLDataException>> resettableIterator0 = IteratorUtils.arrayIterator(serviceLoaderArray0);
      IteratorUtils.getIterator(resettableIterator0);
      MapIterator<SQLInvalidAuthorizationSpecException, ArrayList<Hashtable>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) mapIterator0);
      ArrayListIterator<Integer> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Integer>(iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("+T0q?C8}4cp~<<");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("kc'DMSyXyM", sQLNonTransientException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("+T0q?C8}4cp~<<", "+T0q?C8}4cp~<<", hashMap0, sQLInvalidAuthorizationSpecException0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put(">Y4lD?HXk", clientInfoStatus0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("kc'DMSyXyM", "+T0q?C8}4cp~<<", 1790, map0, sQLInvalidAuthorizationSpecException0);
      sQLClientInfoException1.getLocalizedMessage();
      IteratorUtils.emptyOrderedMapIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.bidimap.DualTreeBidiMap$BidiOrderedMapIterator", (int[]) null);
      IteratorUtils.singletonListIterator(batchUpdateException0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      IteratorUtils.toString((Iterator<SQLException>) null, (Transformer<? super SQLException, String>) transformer0, "kc'DMSyXyM", "JtuZtx3wU", "aAOL");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      arrayList0.add((SQLDataException) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataException0.spliterator();
      sQLDataException0.printStackTrace();
      arrayList0.add(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IteratorUtils.emptyIterator();
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator", (String) null, (-1), sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("<!v='&yCsW~C3wha", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("<!v='&yCsW~C3wha", sQLFeatureNotSupportedException2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("tPexK(S;FGH", (String) null);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Entry does not exist: ", "Entry does not exist: ", 1);
      linkedList0.add(sQLIntegrityConstraintViolationException0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedList0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      DataTruncation dataTruncation0 = new DataTruncation(1830, true, true, 1830, 1830);
      dataTruncationArray0[0] = dataTruncation0;
      int int0 = 100;
      DataTruncation dataTruncation1 = new DataTruncation(1830, false, false, 100, 419);
      dataTruncationArray0[1] = dataTruncation1;
      int int1 = 16;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((ArrayList<Locale.FilteringMode>[]) null, 16, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = null;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      sQLRecoverableException0.fillInStackTrace();
      int int0 = (-176);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "", (-176), 3475);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      IteratorUtils.emptyListIterator();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedList0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      OrderedMapIterator<SQLRecoverableException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException>(orderedMapIterator0);
      String string0 = "[P?GcM'";
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("[P?GcM'");
      IteratorUtils.toString((Iterator<SQLRecoverableException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "[P?GcM'", "[P?GcM'", "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[P?GcM'");
      String string1 = "";
      iIOMetadataNode0.getAttributeNodeNS("", (String) null);
      IteratorUtils.asIterable((Iterator<? extends SQLRecoverableException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        iIOMetadataNode0.setAttributeNode((Attr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      IteratorUtils.singletonIterator(locale_FilteringMode0);
      IteratorUtils.emptyListIterator();
      IteratorUtils.emptyOrderedIterator();
      int int0 = 0;
      Vector<Properties> vector0 = new Vector<Properties>(0, 142);
      ReverseListIterator<Properties> reverseListIterator0 = new ReverseListIterator<Properties>(vector0);
      IteratorUtils.chainedIterator((Iterator<? extends Properties>) reverseListIterator0, (Iterator<? extends Properties>) reverseListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) vector0, 142, 142);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      String[] stringArray0 = new String[5];
      String string0 = "8z|\"&ET7UZ";
      stringArray0[0] = "8z|\"&ET7UZ";
      stringArray0[1] = "org.apache.commons.collections4.functors.AllPredicate";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      int int0 = 0;
      IteratorUtils.arrayIterator(stringArray0, 0, 0);
      Hashtable<Properties, Properties>[] hashtableArray0 = (Hashtable<Properties, Properties>[]) Array.newInstance(Hashtable.class, 7);
      Hashtable<Properties, Properties> hashtable0 = new Hashtable<Properties, Properties>();
      hashtableArray0[0] = hashtable0;
      Hashtable<Properties, Properties> hashtable1 = new Hashtable<Properties, Properties>();
      hashtableArray0[1] = hashtable1;
      Hashtable<Properties, Properties> hashtable2 = new Hashtable<Properties, Properties>();
      hashtableArray0[2] = hashtable2;
      Hashtable<Properties, Properties> hashtable3 = new Hashtable<Properties, Properties>();
      hashtableArray0[3] = hashtable3;
      Hashtable<Properties, Properties> hashtable4 = new Hashtable<Properties, Properties>();
      hashtableArray0[4] = hashtable4;
      Hashtable<Properties, Properties> hashtable5 = new Hashtable<Properties, Properties>();
      hashtableArray0[5] = hashtable5;
      Hashtable<Properties, Properties> hashtable6 = new Hashtable<Properties, Properties>();
      hashtableArray0[6] = hashtable6;
      ObjectArrayIterator<Hashtable<Properties, Properties>> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<Hashtable<Properties, Properties>>(hashtableArray0, 0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = (-26);
      MapIterator<SQLInvalidAuthorizationSpecException, ArrayList<Hashtable>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) zippingIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ArrayListIterator<Integer> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Integer>(sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      DataTruncation dataTruncation0 = new DataTruncation(1830, true, true, 1830, 1830);
      dataTruncationArray0[0] = dataTruncation0;
      int int0 = 100;
      int int1 = 419;
      DataTruncation dataTruncation1 = new DataTruncation(1830, false, false, 100, 419);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-936), true, true, 1830, 0);
      dataTruncationArray0[2] = dataTruncation2;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0, 0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) objectArrayIterator0, (Iterator<? extends DataTruncation>) objectArrayIterator0);
      objectArrayIterator0.reset();
      BoundedIterator<DataTruncation> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) zippingIterator0, 2441L);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) comparator0, (Iterator<? extends DataTruncation>) objectArrayIterator0, (Iterator<? extends DataTruncation>) boundedIterator0);
      Integer integer0 = new Integer((-1124));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[3];
      DataTruncation dataTruncation0 = new DataTruncation(1830, true, true, 1830, 1830);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(1830, false, false, 100, 419);
      dataTruncationArray0[0] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation((-936), true, true, 1830, 0);
      dataTruncationArray0[0] = dataTruncation2;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0, 0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) objectArrayIterator0, (Iterator<? extends DataTruncation>) objectArrayIterator0);
      objectArrayIterator0.reset();
      IteratorUtils.boundedIterator((Iterator<? extends DataTruncation>) zippingIterator0, 2441L);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) nullIsTruePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) predicate0, 1221);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("NS7", "NS7");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      EmptyMapIterator.emptyMapIterator();
      PriorityQueue<Iterator<SQLTimeoutException>> priorityQueue0 = new PriorityQueue<Iterator<SQLTimeoutException>>();
      Iterator<Iterator<SQLTimeoutException>> iterator1 = EmptyIterator.emptyIterator();
      Enumeration<Iterator<SQLTimeoutException>> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Iterator<SQLTimeoutException>>) iterator1);
      IteratorUtils.asIterator((Enumeration<? extends Iterator<SQLTimeoutException>>) enumeration0, (Collection<? super Iterator<SQLTimeoutException>>) priorityQueue0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("NS7");
      Iterator<Object> iterator2 = IteratorUtils.collatedIterator((Comparator<? super Object>) null, (Iterator<?>) iterator1, iterator0);
      IteratorUtils.skippingIterator(iterator2, 0L);
      Class<StringTokenizer> class0 = StringTokenizer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) instanceofPredicate0, (Predicate<? super Object>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.functors.WhileClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(0);
      linkedHashSet0.add(integer0);
      linkedHashSet0.spliterator();
      IteratorUtils.loopingIterator((Collection<? extends Integer>) linkedHashSet0);
      Iterator<SQLSyntaxErrorException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLTransientConnectionException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLTransientConnectionException>(orderedMapIterator0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, class0);
      MockThrowable mockThrowable0 = new MockThrowable("]z,/cY<!rD`.N&=D");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("BP", "", mockThrowable0);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      singletonIterator0.next();
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, 0L, 0L);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Entry does not exist: ", "Transformer must not be null");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      EntrySetMapIterator<Object, String> entrySetMapIterator0 = new EntrySetMapIterator<Object, String>(hashtable0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<Object>) entrySetMapIterator0, (Closure<? super Object>) closure0);
      int int0 = (-491);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ArrayList<SQLClientInfoException> arrayList0 = new ArrayList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(arrayList0);
      String string0 = "kc'DMSyXyM";
      int int0 = 1790;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("+T0q?C8}4cp~<<");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("kc'DMSyXyM", sQLNonTransientException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("+T0q?C8}4cp~<<", "+T0q?C8}4cp~<<", hashMap0, sQLInvalidAuthorizationSpecException0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put(">Y4lD?HXk", clientInfoStatus0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("kc'DMSyXyM", "+T0q?C8}4cp~<<", 1790, map0, sQLInvalidAuthorizationSpecException0);
      sQLClientInfoException1.getLocalizedMessage();
      arrayList0.add(sQLClientInfoException1);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLClientInfoException>) reverseListIterator0, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.isEmpty(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      Predicate<SQLIntegrityConstraintViolationException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLIntegrityConstraintViolationException>>) arrayDeque0);
      IteratorUtils.singletonListIterator(predicate0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1274);
      intArray0[2] = 0;
      intArray0[3] = 14;
      intArray0[4] = (-1053);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("delimiter may not be null", intArray0, sQLFeatureNotSupportedException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("delimiter may not be null", "delimiter may not be null", batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientConnectionException0, 0, 2285);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableListIterator0;
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<DataTruncation>) zippingIterator0, (-2025L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLDataException, SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Stack<IIOMetadataNode> stack0 = new Stack<IIOMetadataNode>();
      stack0.add((IIOMetadataNode) null);
      stack0.spliterator();
      IteratorUtils.loopingListIterator((List<IIOMetadataNode>) stack0);
      Predicate<SQLInvalidAuthorizationSpecException> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.singletonIterator(predicate0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 4);
      AbstractMapIteratorDecorator<SQLTransientConnectionException, LinkedList<DataTruncation>> abstractMapIteratorDecorator0 = null;
      try {
        abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, LinkedList<DataTruncation>>((MapIterator<SQLTransientConnectionException, LinkedList<DataTruncation>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      int int0 = 1362;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0, 1362);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<SQLNonTransientException>) resettableListIterator0);
      EntrySetMapIterator<SQLFeatureNotSupportedException, StringTokenizer> entrySetMapIterator0 = null;
      try {
        entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, StringTokenizer>((Map<SQLFeatureNotSupportedException, StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MapIterator<BatchUpdateException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<BatchUpdateException, BatchUpdateException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) mapIterator1, (Iterator<? extends BatchUpdateException>) mapIterator1, (Iterator<? extends BatchUpdateException>) mapIterator1);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      int int0 = 91;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0, 0, 91);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutException0.fillInStackTrace();
      IteratorUtils.getIterator(sQLTimeoutException0);
      MapIterator<SQLInvalidAuthorizationSpecException, ArrayList<Hashtable>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) mapIterator0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0);
      ArrayListIterator<Integer> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Integer>(sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PriorityQueue<SQLTransactionRollbackException>[] priorityQueueArray0 = (PriorityQueue<SQLTransactionRollbackException>[]) Array.newInstance(PriorityQueue.class, 3);
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLTransactionRollbackException> priorityQueue1 = new PriorityQueue<SQLTransactionRollbackException>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLTransactionRollbackException> priorityQueue2 = new PriorityQueue<SQLTransactionRollbackException>();
      priorityQueueArray0[2] = priorityQueue2;
      IteratorUtils.arrayIterator(priorityQueueArray0, 1);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      SQLDataException sQLDataException0 = new SQLDataException("iterator", "2H'7Iet-Ro1|.ZQ~y", 1);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("iterator", "2H'7Iet-Ro1|.ZQ~y");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("2H'7Iet-Ro1|.ZQ~y", "", sQLDataException1);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException();
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator", sQLDataException1);
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("org.apache.commons.collections4.iterators.ArrayListIterator", sQLDataException3);
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[7] = sQLDataException7;
      SQLDataException sQLDataException8 = new SQLDataException("2H'7Iet-Ro1|.ZQ~y");
      sQLDataExceptionArray0[8] = sQLDataException8;
      IteratorUtils.arrayIterator(sQLDataExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      SQLDataException sQLDataException0 = null;
      arrayList0.add((SQLDataException) null);
      SQLDataException sQLDataException1 = new SQLDataException();
      arrayList0.add(sQLDataException1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) arrayList0, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[5];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("CW`kyb+lZ.vaYDP~", "CW`kyb+lZ.vaYDP~", 0);
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTimeoutException0;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("CW`kyb+lZ.vaYDP~");
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransientConnectionException0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("CW`kyb+lZ.vaYDP~", "CW`kyb+lZ.vaYDP~");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLRecoverableException0);
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException1;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("CW`kyb+lZ.vaYDP~", "CW`kyb+lZ.vaYDP~", 0);
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("CW`kyb+lZ.vaYDP~", "3c-Upl!!:$Zw' U/RR", 1039);
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTimeoutException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 0, 2626);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[5];
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarningArray0[0] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning("List must not be null", "List must not be null");
      sQLWarningArray0[1] = sQLWarning1;
      String string0 = "Transformer must not be null";
      SQLWarning sQLWarning2 = new SQLWarning("List must not be null", "Transformer must not be null");
      sQLWarningArray0[2] = sQLWarning2;
      sQLWarning2.initCause(sQLWarning1);
      sQLWarning2.spliterator();
      sQLWarning1.setNextWarning(sQLWarning2);
      SQLWarning sQLWarning3 = new SQLWarning("List must not be null");
      sQLWarningArray0[3] = sQLWarning3;
      SQLWarning sQLWarning4 = new SQLWarning("Transformer must not be null", "Transformer must not be null");
      sQLWarningArray0[4] = sQLWarning4;
      sQLWarning4.initCause(sQLWarning1);
      sQLWarning1.getStackTrace();
      sQLWarning0.getLocalizedMessage();
      sQLWarning4.setNextWarning(sQLWarning1);
      int int0 = 2;
      IteratorUtils.arrayIterator(sQLWarningArray0, 2, 2);
      IteratorUtils.emptyOrderedMapIterator();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[1];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 2, (-3104));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) stack0);
      OrderedMapIterator<SQLSyntaxErrorException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLDataException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLDataException>(orderedMapIterator0);
      OrderedMapIterator<SQLSyntaxErrorException, SQLDataException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      MapIterator<SQLSyntaxErrorException, SQLDataException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, SQLDataException>) orderedMapIterator1);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      IteratorUtils.emptyIterator();
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1371);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2284);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1440));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(10);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2292);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(405);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[1]);
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(100);
      integerArray0[8] = integer8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, (-2366), (int) integerArray0[6]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1385;
      intArray0[1] = (-1884);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-882);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0, 1385, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 5);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableListIterator0;
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      iteratorArray0[1] = iterator0;
      MapIterator<IIOMetadataNode, ServiceLoader<DataTruncation>> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<IIOMetadataNode, ServiceLoader<DataTruncation>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, ServiceLoader<DataTruncation>>(mapIterator0);
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) abstractMapIteratorDecorator0;
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) iteratorArray0[2]);
      iteratorArray0[3] = iterator1;
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ObjectArrayListIterator<IIOMetadataNode> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 5014, 848);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.replaceChild(iIOMetadataNode0, iIOMetadataNode0);
      iIOMetadataNode0.getLength();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getPreviousSibling();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedList0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      OrderedMapIterator<SQLRecoverableException, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLTransientException>(orderedMapIterator0);
      String string0 = "[P?GcM'";
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("[P?GcM'");
      IteratorUtils.toString((Iterator<SQLRecoverableException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLRecoverableException, String>) transformer0, "[P?GcM'", "[P?GcM'", "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[P?GcM'");
      iIOMetadataNode0.getAttributeNode("");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<SQLTransactionRollbackException>[] classArray0 = (Class<SQLTransactionRollbackException>[]) Array.newInstance(Class.class, 8);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      classArray0[0] = class0;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      classArray0[1] = class1;
      Class<SQLTransactionRollbackException> class2 = SQLTransactionRollbackException.class;
      classArray0[2] = class2;
      Class<SQLTransactionRollbackException> class3 = SQLTransactionRollbackException.class;
      classArray0[3] = class3;
      Class<SQLTransactionRollbackException> class4 = SQLTransactionRollbackException.class;
      classArray0[4] = class4;
      Class<SQLTransactionRollbackException> class5 = SQLTransactionRollbackException.class;
      classArray0[5] = class5;
      Class<SQLTransactionRollbackException> class6 = SQLTransactionRollbackException.class;
      classArray0[6] = class6;
      Class<SQLTransactionRollbackException> class7 = SQLTransactionRollbackException.class;
      classArray0[7] = class7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(classArray0, (-292), (-292));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientConnectionException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends SQLTransientConnectionException>) orderedMapIterator0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator1, class0);
      MockThrowable mockThrowable0 = new MockThrowable("]z,/cY<!rD`.N&=D");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", mockThrowable0);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, 0L, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mockThrowable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IteratorUtils.emptyIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      int[] intArray0 = new int[3];
      intArray0[0] = 552;
      intArray0[1] = (-1029);
      intArray0[2] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((String) null, ",&wD>c0duc9/,=", 287, intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("iQ7<<8", (String) null, 0, intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException();
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException(intArray0, batchUpdateException4);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      Hashtable<SQLNonTransientException, Stack<SQLNonTransientConnectionException>> hashtable0 = new Hashtable<SQLNonTransientException, Stack<SQLNonTransientConnectionException>>();
      EntrySetMapIterator<SQLNonTransientException, Stack<SQLNonTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLNonTransientException, Stack<SQLNonTransientConnectionException>>(hashtable0);
      MapIterator<Vector<SQLDataException>, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(hashtable0);
      IteratorUtils.matchesAll((Iterator<Vector<SQLDataException>>) mapIterator0, (Predicate<? super Vector<SQLDataException>>) identityPredicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      SingletonIterator<Locale.FilteringMode> singletonIterator0 = new SingletonIterator<Locale.FilteringMode>(locale_FilteringMode0);
      Transformer<Locale.FilteringMode, Properties> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.EmptyOrderedIterator");
      Iterator<Object> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) singletonIterator0, (Transformer<? super Locale.FilteringMode, ?>) transformer0);
      Iterator<Object> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.emptyOrderedIterator();
      Vector<Properties> vector0 = new Vector<Properties>(0, 125);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      EntrySetMapIterator<Object, String> entrySetMapIterator0 = new EntrySetMapIterator<Object, String>(hashtable0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator1, (Closure<? super Object>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.iterators.EmptyOrderedIterator' on 'class java.util.Locale$FilteringMode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, SQLTransientConnectionException> orderedMapIterator1 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, SQLTransientConnectionException>(orderedMapIterator0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      IteratorUtils.toArray((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator1, class0);
      MockThrowable mockThrowable0 = new MockThrowable("]z,/cY<!rD`.N&=D");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("BP", "", mockThrowable0);
      SingletonIterator<SQLNonTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      singletonIterator0.next();
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonIterator0, 0L, 0L);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Entry does not exist: ", "Transformer must not be null");
      sQLSyntaxErrorExceptionArray0[1] = sQLSyntaxErrorException1;
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException();
      sQLSyntaxErrorExceptionArray0[2] = sQLSyntaxErrorException2;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      EntrySetMapIterator<Object, String> entrySetMapIterator0 = new EntrySetMapIterator<Object, String>(hashtable0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<Object>) entrySetMapIterator0, (Closure<? super Object>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) null, (-491));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = "";
      int int0 = 0;
      IteratorUtils.arrayListIterator(stringArray0, 0, 0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "yi}~wf1{(k.\"s=!9V.", (-170), hashtable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("yi}~wf1{(k.\"s=!9V.", map0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", hashMap0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("' on '", "", (-3960), hashMap0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("", "", hashtable0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException5;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      Class<Object> class0 = Object.class;
      IteratorUtils.toArray((Iterator<?>) resettableIterator0, class0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(map0, defaultEquator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      predicateArray0[4] = (Predicate<Object>) equalPredicate0;
      predicateArray0[5] = (Predicate<Object>) equalPredicate0;
      predicateArray0[6] = (Predicate<Object>) equalPredicate0;
      predicateArray0[7] = (Predicate<Object>) equalPredicate0;
      predicateArray0[8] = (Predicate<Object>) equalPredicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 9);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      closureArray0[0] = closure0;
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) predicateArray0[5], (Closure<? super Object>) closure0, (Closure<? super Object>) closure0);
      closureArray0[1] = closure1;
      ForClosure<Object> forClosure0 = new ForClosure<Object>(100, closure1);
      closureArray0[2] = (Closure<Object>) forClosure0;
      Closure<Object> closure2 = IfClosure.ifClosure((Predicate<? super Object>) predicateArray0[8], (Closure<? super Object>) closure0);
      closureArray0[3] = closure2;
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(equalPredicate0, closure2, true);
      closureArray0[4] = (Closure<Object>) whileClosure0;
      Closure<Object> closure3 = IfClosure.ifClosure((Predicate<? super Object>) predicateArray0[1], (Closure<? super Object>) closure0, (Closure<? super Object>) closureArray0[4]);
      closureArray0[5] = closure3;
      ForClosure<Object> forClosure1 = new ForClosure<Object>(44, closureArray0[2]);
      closureArray0[6] = (Closure<Object>) forClosure1;
      Closure<Object> closure4 = NOPClosure.nopClosure();
      closureArray0[7] = closure4;
      HashMap<Predicate<Object>, Closure<Object>> hashMap1 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure5 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap1);
      closureArray0[8] = closure5;
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, closure3);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(equalPredicate0, switchClosure0, forClosure0);
      IteratorUtils.apply((Iterator<Properties>) null, (Closure<? super Properties>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.singletonIterator(locale_FilteringMode0);
      Transformer<Locale.FilteringMode, Properties> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.EmptyOrderedIterator");
      Iterator<Object> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) resettableIterator0, (Transformer<? super Locale.FilteringMode, ?>) transformer0);
      IteratorUtils.unmodifiableIterator(iterator0);
      IteratorUtils.emptyListIterator();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      sQLRecoverableException0.fillInStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/$gs.", "", (-2237), sQLRecoverableException0);
      IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.singletonIterator(locale_FilteringMode0);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure<Locale.FilteringMode> transformerClosure0 = new TransformerClosure<Locale.FilteringMode>(transformer0);
      IteratorUtils.apply((Iterator<Locale.FilteringMode>) resettableIterator0, (Closure<? super Locale.FilteringMode>) transformerClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null);
      sQLTransientConnectionException0.printStackTrace();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      sQLTransientConnectionException0.getLocalizedMessage();
      sQLTransientConnectionException0.setNextException(sQLTransientConnectionException0);
      IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 0);
      IteratorUtils.arrayListIterator((SQLTransientException[]) sQLTransientConnectionExceptionArray0);
      LinkedList<BatchUpdateException>[] linkedListArray0 = (LinkedList<BatchUpdateException>[]) Array.newInstance(LinkedList.class, 8);
      LinkedList<BatchUpdateException> linkedList0 = new LinkedList<BatchUpdateException>();
      linkedListArray0[0] = linkedList0;
      LinkedList<BatchUpdateException> linkedList1 = new LinkedList<BatchUpdateException>();
      linkedListArray0[1] = linkedList1;
      LinkedList<BatchUpdateException> linkedList2 = new LinkedList<BatchUpdateException>();
      linkedListArray0[2] = linkedList2;
      LinkedList<BatchUpdateException> linkedList3 = new LinkedList<BatchUpdateException>();
      linkedListArray0[3] = linkedList3;
      LinkedList<BatchUpdateException> linkedList4 = new LinkedList<BatchUpdateException>();
      linkedListArray0[4] = linkedList4;
      LinkedList<BatchUpdateException> linkedList5 = new LinkedList<BatchUpdateException>();
      linkedListArray0[5] = linkedList5;
      LinkedList<BatchUpdateException> linkedList6 = new LinkedList<BatchUpdateException>();
      linkedListArray0[6] = linkedList6;
      LinkedList<BatchUpdateException> linkedList7 = new LinkedList<BatchUpdateException>();
      linkedListArray0[7] = linkedList7;
      IteratorUtils.arrayIterator(linkedListArray0, 0, 0);
  }
}
