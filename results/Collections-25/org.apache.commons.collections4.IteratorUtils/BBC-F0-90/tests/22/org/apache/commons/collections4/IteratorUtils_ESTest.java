/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 02:05:41 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<SQLClientInfoException, SQLClientInfoException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLClientInfoException, ? extends SQLClientInfoException>) mapIterator0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) mapIterator1, (Iterator<? extends SQLClientInfoException>) mapIterator1, (Iterator<? extends SQLClientInfoException>) mapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.emptyIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("%({eJs", (Map<String, ClientInfoStatus>) null, (Throwable) null);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.singletonListIterator(sQLClientInfoException0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) resettableIterator0, (Iterator<? extends SQLClientInfoException>) listIterator0, (Iterator<? extends SQLClientInfoException>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MapIterator<SQLDataException, SQLTransactionRollbackException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) mapIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MapIterator<SQLDataException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLDataException, ArrayList<DataTruncation>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, ArrayList<DataTruncation>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, ArrayList<DataTruncation>>(orderedMapIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) mapIterator0, (Iterator<? extends SQLDataException>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.range(locale_FilteringMode0, locale_FilteringMode0);
      SingletonListIterator<EnumSet<Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      Closure<Object> closure0 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) chainedClosure0);
      IteratorUtils.apply((Iterator<EnumSet<Locale.FilteringMode>>) singletonListIterator0, (Closure<? super EnumSet<Locale.FilteringMode>>) closure0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, singletonListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Nh8JO_=!", "NN$}Z3sf", sQLNonTransientConnectionException0);
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) singletonListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ListIterator<Boolean> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<Boolean> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[]");
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) singletonListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Iterator<Locale.LanguageRange> iterator0 = linkedList0.descendingIterator();
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      Locale.LanguageRange[] locale_LanguageRangeArray0 = IteratorUtils.toArray((Iterator<? extends Locale.LanguageRange>) iterator0, class0);
      assertEquals(0, locale_LanguageRangeArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>(0);
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) linkedHashSet0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, Predicate<Object>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SkippingIterator<SQLClientInfoException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLClientInfoException>) orderedMapIterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties[] propertiesArray0 = new Properties[9];
      propertiesArray0[5] = properties0;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      Properties properties1 = IteratorUtils.get((Iterator<Properties>) resettableListIterator0, 5);
      assertSame(properties1, properties0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Comparator<Locale.LanguageRange> comparator0 = (Comparator<Locale.LanguageRange>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.LanguageRange>[] iteratorArray0 = (Iterator<Locale.LanguageRange>[]) Array.newInstance(Iterator.class, 1);
      ResettableListIterator<Locale.LanguageRange> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[0] = (Iterator<Locale.LanguageRange>) resettableListIterator0;
      Iterator<Locale.LanguageRange> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.LanguageRange>) comparator0, (Iterator<? extends Locale.LanguageRange>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 0);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MapIterator<SQLDataException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) mapIterator0, (Iterator<? extends SQLDataException>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0, 1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[5];
      ResettableListIterator<Locale.FilteringMode> resettableListIterator0 = IteratorUtils.arrayListIterator(locale_FilteringModeArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[5];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0, 5);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      ResettableListIterator<Closure<Object>> resettableListIterator0 = IteratorUtils.arrayListIterator(closureArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException>[] arrayDequeArray0 = (ArrayDeque<SQLIntegrityConstraintViolationException>[]) Array.newInstance(ArrayDeque.class, 8);
      ResettableIterator<ArrayDeque<SQLIntegrityConstraintViolationException>> resettableIterator0 = IteratorUtils.arrayIterator(arrayDequeArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, ClientInfoStatus>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("yHHCNGM9`^Z.\"^0f%+U", (Class<?>[]) classArray0, (Object[]) classArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) singletonListIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "#Dv_wN42ARh", "9k5Hy<]5gPpa+kva", ";(]U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'yHHCNGM9`^Z.\"^0f%+U' on 'class java.sql.SQLClientInfoException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(arrayList0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Q(b(qi<iN$oE3{W", "Node must not be Hull", true);
      arrayList0.add(stringTokenizer0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Stack<Stack>>) iterator0, (Transformer<? super Stack<Stack>, String>) transformer0, "", "Node must not be Hull", "");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Locale.FilteringMode, Locale.FilteringMode> invokerTransformer0 = new InvokerTransformer<Locale.FilteringMode, Locale.FilteringMode>("e$0*iWN0-y", classArray0, classArray0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.objectGraphIterator(locale_FilteringMode0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) iterator0, 1855);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'e$0*iWN0-y' on 'class java.util.Locale$FilteringMode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>(0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      linkedHashSet0.add(locale_FilteringMode0);
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) linkedHashSet0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<Integer>>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 3);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLClientInfoException>) comparator0, (Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Properties>) null, (-3381L), (-3564L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null, 481, 497);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EnumSet<Locale.FilteringMode>[] enumSetArray0 = (EnumSet<Locale.FilteringMode>[]) Array.newInstance(EnumSet.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(enumSetArray0, 3401, 860);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, (-986));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("iterator", "}g>Td(6f%6'n]%;m", 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, 0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("J,^8&DU)6H46MS", "", 4175);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(")", (String) null, 4175, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Integer[]) null, 1, 1431);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, (-2528), (-4703));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((ArrayDeque<SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[9];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Predicate must not be null", intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.map.AbstractMapDecorator", "org.apache.commons.collections4.map.AbstractMapDecorator", batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.range(locale_FilteringMode0, locale_FilteringMode0);
      SingletonListIterator<EnumSet<Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      Closure<Object> closure0 = IfClosure.ifClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) chainedClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<EnumSet<Locale.FilteringMode>>) singletonListIterator0, (Closure<? super EnumSet<Locale.FilteringMode>>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) null, (Transformer<? super SQLIntegrityConstraintViolationException, String>) transformer0, "", "org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", "\"ks9:\"^Zf");
      assertEquals("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList\"ks9:\"^Zf", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) comparatorPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[6];
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) objectArrayListIterator0, 10);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Iterator<Integer> iterator0 = arrayList0.iterator();
      BoundedIterator<Integer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Integer>) iterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "L$ioK-r");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "", 1261, hashtable0, sQLTransactionRollbackException0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>) singletonIterator0, (Iterator<? extends SQLClientInfoException>) singletonIterator0, (Iterator<? extends SQLClientInfoException>) singletonIterator0);
      int int0 = IteratorUtils.size(zippingIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      int int0 = IteratorUtils.size(mapIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[5];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) resettableListIterator0, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTimeoutException) null);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Iterator<Integer> iterator0 = arrayList0.iterator();
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException>[] arrayDequeArray0 = (ArrayDeque<SQLIntegrityConstraintViolationException>[]) Array.newInstance(ArrayDeque.class, 7);
      ResettableIterator<ArrayDeque<SQLIntegrityConstraintViolationException>> resettableIterator0 = IteratorUtils.arrayIterator(arrayDequeArray0);
      List<ArrayDeque<SQLIntegrityConstraintViolationException>> list0 = IteratorUtils.toList((Iterator<? extends ArrayDeque<SQLIntegrityConstraintViolationException>>) resettableIterator0);
      ResettableListIterator<ArrayDeque<SQLIntegrityConstraintViolationException>> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLIntegrityConstraintViolationException>>) resettableListIterator0, (Predicate<? super ArrayDeque<SQLIntegrityConstraintViolationException>>) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ArrayDeque<SQLIntegrityConstraintViolationException>[] arrayDequeArray0 = (ArrayDeque<SQLIntegrityConstraintViolationException>[]) Array.newInstance(ArrayDeque.class, 5);
      ResettableIterator<ArrayDeque<SQLIntegrityConstraintViolationException>> resettableIterator0 = IteratorUtils.arrayIterator(arrayDequeArray0);
      List<ArrayDeque<SQLIntegrityConstraintViolationException>> list0 = IteratorUtils.toList((Iterator<? extends ArrayDeque<SQLIntegrityConstraintViolationException>>) resettableIterator0);
      ResettableListIterator<ArrayDeque<SQLIntegrityConstraintViolationException>> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLIntegrityConstraintViolationException>>) resettableListIterator0, (Predicate<? super ArrayDeque<SQLIntegrityConstraintViolationException>>) predicate0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("");
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("", (Class<?>[]) null, (Object[]) null);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<String>) singletonListIterator0, (Predicate<? super String>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<ArrayDeque<SQLIntegrityConstraintViolationException>> linkedList0 = new LinkedList<ArrayDeque<SQLIntegrityConstraintViolationException>>();
      ResettableListIterator<ArrayDeque<SQLIntegrityConstraintViolationException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<ArrayDeque<SQLIntegrityConstraintViolationException>>) linkedList0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLIntegrityConstraintViolationException>>) resettableListIterator0, (Predicate<? super ArrayDeque<SQLIntegrityConstraintViolationException>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(nullIsTruePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(nullIsFalsePredicate0, nullIsTruePredicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLIntegrityConstraintViolationException>>) null, (Predicate<? super ArrayDeque<SQLIntegrityConstraintViolationException>>) andPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[", "[", intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, false);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(singletonIterator0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Predicate<? super SQLException>[]) predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) singletonIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[", "[", intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, false);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-4398)).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(singletonIterator0, comparator0, comparatorPredicate_Criterion0);
      predicateArray0[0] = (Predicate<Object>) comparatorPredicate0;
      Predicate<SQLException> predicate0 = NonePredicate.nonePredicate((Predicate<? super SQLException>[]) predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<BatchUpdateException>) singletonIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OrderedMapIterator<Iterator<SQLTransactionRollbackException>, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Stack<SQLException> stack0 = new Stack<SQLException>();
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLException>) stack0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLException>) resettableListIterator0, (Object) orderedMapIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[] intArray0 = new int[9];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Y_?v3s1?Un$N^", "d!oFyF5;i<+c]8xn{F", intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<BatchUpdateException>) singletonIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Integer integer1 = IteratorUtils.find((Iterator<Integer>) singletonListIterator0, (Predicate<? super Integer>) predicate0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Integer[] integerArray0 = new Integer[1];
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.arrayIterator(integerArray0);
      Integer integer0 = IteratorUtils.find((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) predicate0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OrPredicate<Integer> orPredicate0 = new OrPredicate<Integer>((Predicate<? super Integer>) null, (Predicate<? super Integer>) null);
      Integer integer0 = IteratorUtils.find((Iterator<Integer>) null, (Predicate<? super Integer>) orPredicate0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<ClientInfoStatus>) null, (Predicate<? super ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OrderedIterator<StringTokenizer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) "", comparator0);
      StringTokenizer stringTokenizer0 = IteratorUtils.find((Iterator<StringTokenizer>) orderedIterator0, (Predicate<? super StringTokenizer>) predicate0);
      assertNull(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.range(locale_FilteringMode0, locale_FilteringMode0);
      SingletonListIterator<EnumSet<Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.FilteringMode>>(enumSet0);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>((Closure<? super Object>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<EnumSet<Locale.FilteringMode>>) singletonListIterator0, (Closure<? super EnumSet<Locale.FilteringMode>>) chainedClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply((Iterator<Integer>) null, (Closure<? super Integer>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Closure<BatchUpdateException> closure0 = NOPClosure.nopClosure();
      Iterator<?> iterator0 = IteratorUtils.getIterator(closure0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("suffix may not be null", "]", false);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Predicate must not be null");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[8];
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) objectArrayListIterator0, (-632));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Boolean>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) objectArrayListIterator0, class0);
      assertEquals(3, sQLTransientConnectionExceptionArray1.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[4];
      ObjectArrayIterator<Locale.FilteringMode> objectArrayIterator0 = new ObjectArrayIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) objectArrayIterator0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterable<SQLSyntaxErrorException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterable<Object> iterable0 = IteratorUtils.asIterable((Iterator<?>) mapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) null, (Collection<? super IIOMetadataNode>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Predicate<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) orderedMapIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.asIterator((Enumeration<? extends DataTruncation>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("%({eJs");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.commons.collections4.functors.MapTransformer");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector<ArrayDeque<SQLIntegrityConstraintViolationException>> vector0 = new Vector<ArrayDeque<SQLIntegrityConstraintViolationException>>();
      ResettableListIterator<ArrayDeque<SQLIntegrityConstraintViolationException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<ArrayDeque<SQLIntegrityConstraintViolationException>>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ArrayDeque<SQLIntegrityConstraintViolationException>>) resettableListIterator0, (Predicate<? super ArrayDeque<SQLIntegrityConstraintViolationException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) reverseListIterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) null, (Predicate<? super DataTruncation>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(stack0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>("#Dv_wN42ARh");
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) reverseListIterator0, (Predicate<? super DataTruncation>) identityPredicate0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("iterator", "03", 100, sQLNonTransientException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("03", "03", (-1), sQLSyntaxErrorException0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTransientConnectionException0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIteratorWrapper<SQLIntegrityConstraintViolationException> listIteratorWrapper0 = new ListIteratorWrapper<SQLIntegrityConstraintViolationException>(resettableIterator0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIteratorWrapper0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Predicate<SQLIntegrityConstraintViolationException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ListIteratorWrapper<SQLIntegrityConstraintViolationException> listIteratorWrapper0 = new ListIteratorWrapper<SQLIntegrityConstraintViolationException>(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIteratorWrapper0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Node must not be null");
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLNonTransientConnectionException0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("{V");
      Transformer<Properties, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Properties>) predicate0, (Transformer<? super Properties, ? extends String>) transformer0, (Transformer<? super Properties, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends Properties>) null, (Transformer<? super Properties, ?>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Collection must not be null");
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<Object> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Properties>) resettableIterator0, (Transformer<? super Properties, ?>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.LanguageRange>) comparator0, (Iterator<? extends Locale.LanguageRange>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OrderedMapIterator<Iterator<SQLTransactionRollbackException>, Boolean> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<Iterator<SQLTransactionRollbackException>> list0 = IteratorUtils.toList((Iterator<? extends Iterator<SQLTransactionRollbackException>>) orderedMapIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<String>) null, 220L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OrderedIterator<SQLNonTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Transformer<SQLException, String> transformer0 = InvokerTransformer.invokerTransformer("");
      String string0 = IteratorUtils.toString((Iterator<SQLNonTransientConnectionException>) orderedIterator0, (Transformer<? super SQLNonTransientConnectionException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[]");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLRecoverableException0, (-595), 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(booleanArray0, (-851));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator((SQLRecoverableException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLRecoverableException>) resettableIterator0, (Transformer<? super SQLRecoverableException, ? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OrderedMapIterator<Integer, ClientInfoStatus> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Integer, ClientInfoStatus> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, ClientInfoStatus>(orderedMapIterator0);
      MapIterator<Integer, ClientInfoStatus> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, ClientInfoStatus>) abstractMapIteratorDecorator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTransactionRollbackException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MapIterator<SQLDataException, IIOMetadataNode> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>) mapIterator0, (Iterator<? extends SQLDataException>) mapIterator0);
      Iterator<SQLDataException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) mapIterator0, (Iterator<? extends SQLDataException>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 2, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<Iterator<SQLTransactionRollbackException>>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[8];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) listIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) boundedIterator0, (Transformer<? super BatchUpdateException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[4];
      ObjectArrayIterator<Locale.FilteringMode> objectArrayIterator0 = new ObjectArrayIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Locale.FilteringMode>) objectArrayIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 7, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null, 1106);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLTransientException>) null, (Object) resettableListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTimeoutException0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      Vector<SQLFeatureNotSupportedException> vector0 = new Vector<SQLFeatureNotSupportedException>();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) vector0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Predicate<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, String> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) orderedMapIterator0, 1855);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-885));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[17];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      Properties properties0 = IteratorUtils.get((Iterator<Properties>) resettableListIterator0, 5);
      assertNull(properties0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }
}
