/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 02:04:30 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, Integer> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends Integer>) orderedMapIterator0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<IIOMetadataNode, Integer> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends IIOMetadataNode, ? extends Integer>) orderedMapIterator0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) mapIterator0, (Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (Iterator<? extends IIOMetadataNode>) mapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, Closure<IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLTransientConnectionException, Closure<IIOMetadataNode>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, Closure<IIOMetadataNode>>(orderedMapIterator0);
      ListIterator<SQLTransientException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientException>) abstractMapIteratorDecorator0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) listIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("xnq", (String) null, 1);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLDataException>) listIterator0, (long) 1);
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>) listIterator0, (Iterator<? extends SQLDataException>) skippingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 1);
      MapIterator<SQLRecoverableException, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLRecoverableException>) mapIterator0;
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OrderedMapIterator<SQLTransientConnectionException, Closure<IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<SQLTransientConnectionException, Closure<IIOMetadataNode>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTransientConnectionException, Closure<IIOMetadataNode>>(orderedMapIterator0);
      MapIterator<SQLTransientConnectionException, Closure<IIOMetadataNode>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientConnectionException, Closure<IIOMetadataNode>>) abstractMapIteratorDecorator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("wvbqk,KeWTS", "S?[t@3A7xDL9q?", hashtable0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      ListIterator<SQLClientInfoException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) singletonListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("zYhzuhU0wx})xR");
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonListIterator0, class0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>((DataTruncation) null, true);
      Iterator<DataTruncation> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EnumSet<ClientInfoStatus>[] enumSetArray0 = (EnumSet<ClientInfoStatus>[]) Array.newInstance(EnumSet.class, 2);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0);
      enumSetArray0[0] = enumSet0;
      ObjectArrayListIterator<EnumSet<ClientInfoStatus>> objectArrayListIterator0 = new ObjectArrayListIterator<EnumSet<ClientInfoStatus>>(enumSetArray0);
      IteratorUtils.get((Iterator<EnumSet<ClientInfoStatus>>) objectArrayListIterator0, 0);
      assertEquals(0, objectArrayListIterator0.previousIndex());
      assertEquals(1, objectArrayListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Z");
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) null);
      iteratorArray0[0] = iterator0;
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      BoundedIterator<SQLException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLException>) orderedMapIterator0, 2482L, 1L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 10);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, (long) 10);
      assertTrue(singletonListIterator0.hasNext());
      assertEquals((-1), singletonListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 1, 1);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator(objectArray0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 19);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends ClientInfoStatus>) null, (Iterator<? extends ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLClientInfoException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<ClientInfoStatus>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>((SQLTimeoutException) null);
      FactoryTransformer<SQLTimeoutException, String> factoryTransformer0 = new FactoryTransformer<SQLTimeoutException, String>((Factory<? extends String>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) singletonIterator0, (Transformer<? super SQLTimeoutException, String>) factoryTransformer0, "'2<;s08pl", "Estimated size must be greater than 0", "Estimated size must be greater than 0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("xnq", sQLClientInfoException0);
      SQLDataException sQLDataException0 = new SQLDataException("", "xnq", 10, sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, true);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) singletonIterator0);
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(list0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("Z");
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      ListIterator<String> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) singletonListIterator0, (Predicate<? super String>) nullIsFalsePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) listIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsFalsePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ServiceLoader<Properties>[] serviceLoaderArray0 = (ServiceLoader<Properties>[]) Array.newInstance(ServiceLoader.class, 3);
      ResettableListIterator<ServiceLoader<Properties>> resettableListIterator0 = IteratorUtils.arrayListIterator(serviceLoaderArray0);
      Integer integer0 = new Integer(3073);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(integer0, comparator0, comparatorPredicate_Criterion0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(comparatorPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<ServiceLoader<Properties>>) resettableListIterator0, (Predicate<? super ServiceLoader<Properties>>) nullIsExceptionPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Stack<SQLClientInfoException>[] stackArray0 = (Stack<SQLClientInfoException>[]) Array.newInstance(Stack.class, 7);
      ResettableIterator<Stack<SQLClientInfoException>> resettableIterator0 = IteratorUtils.arrayIterator(stackArray0);
      Class<SQLTransientException>[] classArray0 = (Class<SQLTransientException>[]) Array.newInstance(Class.class, 7);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("?SnEooDe?M],6kp/ ai", classArray0, stackArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Stack<SQLClientInfoException>>) resettableIterator0, (Predicate<? super Stack<SQLClientInfoException>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) comparator0, (Iterator<? extends SQLRecoverableException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Iterator<ClientInfoStatus>[] iteratorArray0 = (Iterator<ClientInfoStatus>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends ClientInfoStatus>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Locale.FilteringMode>[] classArray0 = (Class<Locale.FilteringMode>[]) Array.newInstance(Class.class, 9);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(classArray0, 0, (-3486));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, (-3361), 3990);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) null, 1761);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 970, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      PredicateTransformer<Stack<Properties>> predicateTransformer0 = new PredicateTransformer<Stack<Properties>>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform((Stack<Properties>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) boolean0, (-4195));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientException[]) null, 1956, 1956);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, (-5051), (-842));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((PriorityQueue<SQLClientInfoException>[]) null, 3195);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[3];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 1198);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1761, 77);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "", 434);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Transformer<SQLTimeoutException, String> transformer0 = InvokerTransformer.invokerTransformer("oW&VuI[M.");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("'2<;s08pl", "'2<;s08pl", 37);
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>(sQLTimeoutException0, false);
      ZippingIterator<SQLTimeoutException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTimeoutException>) singletonIterator0, (Iterator<? extends SQLTimeoutException>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) zippingIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0, "Z", "'2<;s08pl", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'oW&VuI[M.' on 'class java.sql.SQLTimeoutException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Transformer<SQLTimeoutException, String> transformer0 = InvokerTransformer.invokerTransformer("");
      String string0 = IteratorUtils.toString((Iterator<SQLTimeoutException>) null, (Transformer<? super SQLTimeoutException, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      boolean boolean0 = IteratorUtils.matchesAny(iterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Predicate<SQLNonTransientException> predicate1 = NotPredicate.notPredicate((Predicate<? super SQLNonTransientException>) predicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) predicate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("YhzuhU0wx})xR");
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) singletonListIterator0, 3089);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OrderedMapIterator<Predicate<Object>, Boolean> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<Predicate<Object>> list0 = IteratorUtils.toList((Iterator<? extends Predicate<Object>>) orderedMapIterator0, 2958);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Integer>) null, (-1146));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTimeoutException) null);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) resettableIterator0, (-3987L), (-3722L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLTransientConnectionException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ConstantTransformer<SQLTimeoutException, String> constantTransformer0 = new ConstantTransformer<SQLTimeoutException, String>("*\u0002c9{MX");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) orderedMapIterator0, (Transformer<? super SQLTimeoutException, String>) constantTransformer0, "*\u0002c9{MX", "Ga|J+B wGNK[\".g>", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Transformer<SQLTimeoutException, String> transformer0 = InvokerTransformer.invokerTransformer("9[J{!m1$");
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iteratorArray0[0], (Transformer<? super SQLTimeoutException, String>) transformer0, ".e}ef@x#V", (String) null, "Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      OrderedMapIterator<SQLClientInfoException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<SQLException, String> ifTransformer0 = new IfTransformer<SQLException, String>(predicate0, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) orderedMapIterator0, (Transformer<? super SQLClientInfoException, String>) ifTransformer0, (String) null, "", "Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<DataTruncation, String> hashMap0 = new HashMap<DataTruncation, String>();
      DataTruncation dataTruncation0 = new DataTruncation(308, false, true, 1, 5078);
      hashMap0.put(dataTruncation0, "(Z,_.f*)");
      EntrySetMapIterator<DataTruncation, String> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, String>(hashMap0);
      int int0 = IteratorUtils.size(entrySetMapIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("wvbqk,KeWTS");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      int int0 = IteratorUtils.size(nodeListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      IteratorUtils.get((Iterator<Object>) objectArrayListIterator0, 0);
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertEquals(0, objectArrayListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[4];
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) resettableIterator0, 72);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 68
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("xnq", (Transformer<? super String, ? extends String>) null);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashtable0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("xnq", sQLClientInfoException0);
      SQLDataException sQLDataException0 = new SQLDataException("", "xnq", 10, sQLIntegrityConstraintViolationException0);
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0, true);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<SQLNonTransientException> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLNonTransientException>>) arrayList0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLDataException>) singletonIterator0, (Predicate<? super SQLDataException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(arrayList0);
      Predicate<SQLDataException> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLDataException>) loopingListIterator0, (Predicate<? super SQLDataException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ListIterator<Boolean> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Boolean>) listIterator0, (Predicate<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>((SQLNonTransientConnectionException) null);
      Predicate<SQLException> predicate0 = IdentityPredicate.identityPredicate((SQLException) null);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = IteratorUtils.contains((Iterator<Integer>) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      IteratorUtils.find((Iterator<Object>) objectArrayListIterator0, (Predicate<? super Object>) nullIsTruePredicate0);
      assertTrue(objectArrayListIterator0.hasPrevious());
      assertEquals(1, objectArrayListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      Object object0 = IteratorUtils.find((Iterator<Object>) null, (Predicate<? super Object>) nullIsFalsePredicate0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MapIterator<Object, SQLClientInfoException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<Object, SQLClientInfoException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, SQLClientInfoException>(mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) abstractMapIteratorDecorator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(andPredicate0);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator((Object[]) sQLTransientConnectionExceptionArray0, 0);
      IteratorUtils.find((Iterator<Object>) resettableListIterator0, (Predicate<? super Object>) nullIsFalsePredicate0);
      IteratorUtils.toListIterator((Iterator<?>) resettableListIterator0);
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Hashtable<Object, Properties> hashtable0 = new Hashtable<Object, Properties>();
      Transformer<Object, Properties> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Properties>) hashtable0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IteratorUtils.apply((Iterator<ServiceLoader<Stack>>) null, (Closure<? super ServiceLoader<Stack>>) closure0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Iterator<SQLNonTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<Properties>) singletonIterator0, (Closure<? super Properties>) closure0);
      assertFalse(singletonIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("iterator");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLClientInfoException0);
      SQLWarning sQLWarning0 = new SQLWarning("l}0CsuB", "l}0CsuB", sQLTransientConnectionException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLWarning0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, PriorityQueue<Predicate>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ObjectArrayListIterator<Object> objectArrayListIterator0 = new ObjectArrayListIterator<Object>(objectArray0);
      Object[] objectArray1 = IteratorUtils.toArray((Iterator<?>) objectArrayListIterator0);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ListIterator<Locale.FilteringMode> listIterator0 = IteratorUtils.singletonListIterator(locale_FilteringMode0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) listIterator0, (-1112));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 10);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Iterable<SQLNonTransientException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) singletonListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Stack<EnumSet<ClientInfoStatus>> stack0 = new Stack<EnumSet<ClientInfoStatus>>();
      LoopingListIterator<EnumSet<ClientInfoStatus>> loopingListIterator0 = new LoopingListIterator<EnumSet<ClientInfoStatus>>(stack0);
      Iterable<EnumSet<ClientInfoStatus>> iterable0 = IteratorUtils.asIterable((Iterator<? extends EnumSet<ClientInfoStatus>>) loopingListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Properties properties0 = new Properties();
      Set<Object> set0 = properties0.keySet();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Locale.FilteringMode>) null, (Collection<? super Locale.FilteringMode>) set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(arrayList0);
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) loopingListIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends EnumSet<Locale.FilteringMode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Transformer must not be null");
      SQLWarning sQLWarning0 = new SQLWarning("Transformer must not be null", "Transformer must not be null", sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(" is less than zero", hashMap0, sQLWarning0);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0, true);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) singletonIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(".e}ef@x#V");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<SQLTimeoutException> linkedList0 = new LinkedList<SQLTimeoutException>();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) resettableListIterator0, (Transformer<? super SQLTimeoutException, String>) null, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashSet<BatchUpdateException> hashSet0 = new HashSet<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) hashSet0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(class0);
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      Predicate<SQLTransientConnectionException> predicate0 = OnePredicate.onePredicate((Predicate<? super SQLTransientConnectionException>[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(arrayList0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) reverseListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ResettableIterator<DataTruncation> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) resettableIterator0, (Predicate<? super DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<SQLSyntaxErrorException>[] classArray0 = (Class<SQLSyntaxErrorException>[]) Array.newInstance(Class.class, 3);
      InvokerTransformer<SQLException, SQLTimeoutException> invokerTransformer0 = new InvokerTransformer<SQLException, SQLTimeoutException>("wvbqk,KeWTS", classArray0, classArray0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Transformer<? super SQLNonTransientException, ? extends SQLTimeoutException>) invokerTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Transformer<SQLException, SQLDataException> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, ? extends SQLDataException>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Boolean>) null, (Iterator<? extends Boolean>) null, (Iterator<? extends Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTimeoutException>) comparator0, (Iterator<? extends SQLTimeoutException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("L^\".lY.$Hl[&,s");
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<String>) singletonListIterator0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("Z@");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      String string0 = IteratorUtils.toString((Iterator<TreeSet<StringTokenizer>>) null, (Transformer<? super TreeSet<StringTokenizer>, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, 86, 86);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, PriorityQueue<Predicate>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLTransientConnectionException>) mapIterator0, class0);
      assertEquals(0, sQLTransientConnectionExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (Transformer<? super SQLNonTransientException, ? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Predicate<Boolean>, Predicate<SQLNonTransientException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>((DataTruncation) null, true);
      Iterator<DataTruncation> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLNonTransientConnectionException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLNonTransientException>(orderedMapIterator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((EnumSet<ClientInfoStatus>[]) null, 100, 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[4];
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.arrayIterator(sQLSyntaxErrorExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.apache.commons.collections4.map.Flat3Map$EntryIterator", "org.apache.commons.collections4.map.Flat3Map$EntryIterator");
      SingletonListIterator<Object> singletonListIterator0 = new SingletonListIterator<Object>(sQLTimeoutException0);
      String string0 = IteratorUtils.toString((Iterator<Object>) singletonListIterator0);
      assertFalse(singletonListIterator0.hasNext());
      assertEquals("[java.sql.SQLTimeoutException: org.apache.commons.collections4.map.Flat3Map$EntryIterator]", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, (-4206), (-4206));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[4];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 0);
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<SQLNonTransientConnectionException> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLNonTransientConnectionException>>) arrayList0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (int)  (-100));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("l}0CsuB", "Collection must not be null", 0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      Predicate<SQLNonTransientException> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) predicate0);
      assertFalse(listIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      OrderedMapIterator<DataTruncation, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, String>(orderedMapIterator0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends DataTruncation>) abstractOrderedMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Transformer<SQLTimeoutException, String> transformer0 = InvokerTransformer.invokerTransformer(".e}ef@x#V");
      String string0 = IteratorUtils.toString((Iterator<SQLTimeoutException>) orderedMapIterator0, (Transformer<? super SQLTimeoutException, String>) transformer0, ".e}ef@x#V", ".e}ef@x#V", ".e}ef@x#V");
      assertEquals(".e}ef@x#V.e}ef@x#V", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      OrderedIterator<PriorityQueue<ArrayDeque>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) orderedIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      ReverseListIterator<SQLInvalidAuthorizationSpecException> reverseListIterator0 = new ReverseListIterator<SQLInvalidAuthorizationSpecException>(arrayList0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) reverseListIterator0);
      assertFalse(listIterator0.hasNext());
  }
}
