/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 02:05:07 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("}8ZnoMh");
      Class<String> class0 = String.class;
      SingletonIterator<Class<String>> singletonIterator0 = new SingletonIterator<Class<String>>(class0, false);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Class<String>>) singletonIterator0, (Predicate<? super Class<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      anyPredicate0.getPredicates();
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) anyPredicate0);
      MapIterator<PriorityQueue<SQLSyntaxErrorException>, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      IteratorUtils.matchesAll((Iterator<PriorityQueue<SQLSyntaxErrorException>>) mapIterator0, (Predicate<? super PriorityQueue<SQLSyntaxErrorException>>) anyPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>(100, 100);
      SingletonListIterator<LinkedHashSet<DataTruncation>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<DataTruncation>>(linkedHashSet0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) singletonListIterator0, (Transformer<? super LinkedHashSet<DataTruncation>, String>) transformer0, "", "", "");
      Object object0 = new Object();
      SQLTransientException sQLTransientException0 = new SQLTransientException("null", "null");
      TransformerClosure<SQLNonTransientException> transformerClosure0 = new TransformerClosure<SQLNonTransientException>(transformer0);
      IteratorUtils.apply((Iterator<SQLNonTransientException>) null, (Closure<? super SQLNonTransientException>) transformerClosure0);
      Integer integer0 = new Integer(100);
      ArrayIterator<SQLWarning> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLWarning>(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>(100, 100);
      SingletonListIterator<LinkedHashSet<DataTruncation>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<DataTruncation>>(linkedHashSet0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      hashtable0.put(linkedHashSet0, "Fiq");
      MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      String string0 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) singletonListIterator0, (Transformer<? super LinkedHashSet<DataTruncation>, String>) null, "Closure must not be null", "", "Closure must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) singletonListIterator0);
      OrderedMapIterator<IIOMetadataNode, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLException>(orderedMapIterator0);
      int int0 = IteratorUtils.size(singletonListIterator0);
      assertEquals(1, int0);
      
      boolean boolean0 = IteratorUtils.isEmpty(abstractMapIteratorDecorator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      Object object0 = new Object();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      DataTruncation dataTruncation0 = new DataTruncation(28, true, true, (-293), 1, sQLFeatureNotSupportedException0);
      IteratorUtils.getIterator("");
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SingletonIterator<TreeSet<Object>> singletonIterator0 = new SingletonIterator<TreeSet<Object>>(treeSet0);
      boolean boolean0 = IteratorUtils.contains((Iterator<TreeSet<Object>>) singletonIterator0, (Object) treeSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>(100, 100);
      SingletonListIterator<LinkedHashSet<DataTruncation>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<DataTruncation>>(linkedHashSet0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) singletonListIterator0, (Transformer<? super LinkedHashSet<DataTruncation>, String>) transformer0, "", "", "");
      Object object0 = new Object();
      SQLTransientException sQLTransientException0 = new SQLTransientException("null", "null");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<BatchUpdateException> comparatorPredicate0 = new ComparatorPredicate<BatchUpdateException>(batchUpdateException0, comparator0, comparatorPredicate_Criterion0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) comparatorPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("}8ZnoMh");
      OrderedMapIterator<SQLNonTransientConnectionException, ArrayList<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) orderedMapIterator0);
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) list0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("iTHer#4Bu|v<~'", (String) null, 30);
      StringTokenizer stringTokenizer0 = new StringTokenizer("Predicate must not be null");
      stringTokenizer0.hasMoreTokens();
      IteratorUtils.getIterator(stringTokenizer0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) null, (Collection<? super SQLTransactionRollbackException>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      Hashtable<IIOMetadataNode, SQLException> hashtable0 = new Hashtable<IIOMetadataNode, SQLException>();
      EntrySetMapIterator<IIOMetadataNode, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLException>(hashtable0);
      entrySetMapIterator0.toString();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLException>(entrySetMapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("MapIterator[]", "ListIterator must not be null", 15);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("MapIterator[]", "J@%rf3A\"kou", (-3262));
      StringTokenizer stringTokenizer0 = new StringTokenizer("org.apache.commons.collections4.functors.IfClosure");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>(100, 100);
      SingletonListIterator<LinkedHashSet<DataTruncation>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<DataTruncation>>(linkedHashSet0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) singletonListIterator0, (Transformer<? super LinkedHashSet<DataTruncation>, String>) transformer0, "", "", "");
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      Hashtable<SQLDataException, String> hashtable1 = new Hashtable<SQLDataException, String>();
      IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) singletonListIterator0, (Transformer<? super LinkedHashSet<DataTruncation>, String>) transformer0, "Node must not be null", "", "=f;");
      Object object0 = new Object();
      SQLTransientException sQLTransientException0 = new SQLTransientException("=f;", "=f;");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("=f;", "", sQLTransientException0);
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "}8ZnoMh";
      SingletonListIterator<LinkedHashSet<DataTruncation>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<DataTruncation>>((LinkedHashSet<DataTruncation>) null);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) singletonListIterator0, (Transformer<? super LinkedHashSet<DataTruncation>, String>) transformer0, "}8ZnoMh", ">H)IH-y\"-", "'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<IIOMetadataNode, SQLException> hashMap0 = new HashMap<IIOMetadataNode, SQLException>();
      EntrySetMapIterator<IIOMetadataNode, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLException>(hashMap0);
      entrySetMapIterator0.toString();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLException>(entrySetMapIterator0);
      OrderedMapIterator<LinkedHashSet<DataTruncation>, ArrayDeque<Properties>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<LinkedHashSet<DataTruncation>, ArrayDeque<Properties>> abstractMapIteratorDecorator1 = new AbstractMapIteratorDecorator<LinkedHashSet<DataTruncation>, ArrayDeque<Properties>>(orderedMapIterator0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("MapIterator[]");
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap1);
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) instanceofPredicate0, (Transformer<? super Object, ? extends String>) constantTransformer0, (Transformer<? super Object, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) abstractMapIteratorDecorator1, (Transformer<? super LinkedHashSet<DataTruncation>, String>) transformer1, "XE WEVM|<I2M:/jJ^", "jD=)", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedHashSet<SQLSyntaxErrorException> linkedHashSet0 = new LinkedHashSet<SQLSyntaxErrorException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) linkedHashSet0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("(BeDd#%]tmvg&<Cqd", (String) null, 30);
      Iterator<?> iterator0 = IteratorUtils.getIterator("(BeDd#%]tmvg&<Cqd");
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>(100, 100);
      SingletonListIterator<LinkedHashSet<DataTruncation>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<DataTruncation>>(linkedHashSet0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) singletonListIterator0, (Transformer<? super LinkedHashSet<DataTruncation>, String>) transformer0, "", "", "");
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      Hashtable<SQLDataException, String> hashtable1 = new Hashtable<SQLDataException, String>();
      EntrySetMapIterator<SQLDataException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, String>(hashtable1);
      AbstractMapIteratorDecorator<SQLDataException, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, String>(entrySetMapIterator0);
      Object object0 = new Object();
      SQLTransientException sQLTransientException0 = new SQLTransientException("null", "null");
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashtable0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OrderedIterator<SQLClientInfoException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) orderedIterator0, 0L, 0L);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 5);
      EntrySetMapIterator<IIOMetadataNode, SQLSyntaxErrorException> entrySetMapIterator0 = null;
      try {
        entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLSyntaxErrorException>((Map<IIOMetadataNode, SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("}8ZnoMh");
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      SingletonListIterator<PriorityQueue<SQLSyntaxErrorException>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<SQLSyntaxErrorException>>(priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      anyPredicate0.getPredicates();
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransientConnectionException>) singletonIterator0, (Predicate<? super SQLTransientConnectionException>) anyPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringTokenizerArray0, 27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      SingletonListIterator<PriorityQueue<SQLSyntaxErrorException>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<SQLSyntaxErrorException>>(priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      anyPredicate0.getPredicates();
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException();
      Properties properties0 = new Properties();
      boolean boolean0 = IteratorUtils.isEmpty(singletonIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("}8ZnoMh");
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      SingletonListIterator<PriorityQueue<SQLSyntaxErrorException>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<SQLSyntaxErrorException>>(priorityQueue0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) null, (Transformer<? super SQLClientInfoException, ? extends Properties>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(instanceofPredicate0, instanceofPredicate0);
      predicateArray0[1] = (Predicate<Object>) orPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      anyPredicate0.getPredicates();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("8+~[T%$T`dLVF|", "org.apache.commons.collections4.functors.OrPredicate");
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Class<String> class1 = String.class;
      Class<SQLInvalidAuthorizationSpecException>[] classArray0 = (Class<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class1, classArray0, predicateArray0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(instantiateFactory0);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) factoryTransformer0, (Predicate<? super Object>) anyPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransientConnectionException>) singletonIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "");
      SQLDataException sQLDataException0 = new SQLDataException("X}:_hC1N", "", 93, sQLNonTransientException0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) singletonListIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("crvE\"*|4YvmSxz5*", "%.", 22);
      Iterator<?> iterator0 = IteratorUtils.getIterator(singletonListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("}8ZnoMh");
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      SingletonListIterator<PriorityQueue<SQLSyntaxErrorException>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<SQLSyntaxErrorException>>(priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTransientConnectionException0);
      predicateArray0[1] = predicate0;
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      predicateArray0[2] = predicate1;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      AnyPredicate<Object> anyPredicate1 = new AnyPredicate<Object>(predicateArray0);
      anyPredicate1.getPredicates();
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      // Undeclared exception!
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) singletonIterator0, (Predicate<? super SQLTransientConnectionException>) anyPredicate1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Iterator<Integer> iterator0 = null;
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)56;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      ResettableListIterator<LinkedHashSet<DataTruncation>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<LinkedHashSet<DataTruncation>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<LinkedHashSet<DataTruncation>>) resettableListIterator0);
      String string0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) listIterator0, (Transformer<? super LinkedHashSet<DataTruncation>, String>) transformer0, (String) null, "Array class must not be null", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<IIOMetadataNode, SQLException> hashMap0 = new HashMap<IIOMetadataNode, SQLException>();
      EntrySetMapIterator<IIOMetadataNode, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLException>(hashMap0);
      entrySetMapIterator0.toString();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLException>(entrySetMapIterator0);
      IteratorUtils.size(entrySetMapIterator0);
      Iterator<SQLClientInfoException> iterator0 = null;
      Predicate<SQLClientInfoException> predicate0 = TruePredicate.truePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) linkedList0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      linkedList0.add(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) resettableIterator0, 1172);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedHashSet<SQLSyntaxErrorException> linkedHashSet0 = new LinkedHashSet<SQLSyntaxErrorException>();
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) linkedHashSet0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("PrototypeCloneFactory: Clone method must be public", "PrototypeCloneFactory: Clone method must be public", (Throwable) null);
      linkedHashSet0.add(sQLSyntaxErrorException0);
      IteratorUtils.get((Iterator<SQLNonTransientException>) resettableIterator0, 1172);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Class<SQLException> class0 = SQLException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate1);
      predicateArray0[0] = (Predicate<Object>) nullIsTruePredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray1[0] = (Predicate<Object>) nullIsTruePredicate0;
      predicateArray1[1] = (Predicate<Object>) nullIsTruePredicate0;
      AnyPredicate<Object> anyPredicate1 = new AnyPredicate<Object>(predicateArray1);
      anyPredicate1.getPredicates();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("PrototypeCloneFactory: Clone method must be public", "");
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) singletonIterator0, (Predicate<? super SQLTransientConnectionException>) predicate1);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "crvE\"*|4YvmSxz5*");
      SQLDataException sQLDataException0 = new SQLDataException("", "", 3766, sQLNonTransientException0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) singletonListIterator0);
      List<SQLDataException> list0 = IteratorUtils.toList((Iterator<? extends SQLDataException>) singletonListIterator0);
      IteratorUtils.loopingListIterator(list0);
      Hashtable<SQLDataException, String> hashtable0 = new Hashtable<SQLDataException, String>();
      EntrySetMapIterator<SQLDataException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, String>(hashtable0);
      AbstractMapIteratorDecorator<SQLDataException, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, String>(entrySetMapIterator0);
      Object object0 = new Object();
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("crvE\"*|4YvmSxz5*", ",ztglC^IvDczon6ph", sQLDataException0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties1);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<SQLDataException, SQLFeatureNotSupportedException> hashMap0 = new HashMap<SQLDataException, SQLFeatureNotSupportedException>();
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 3);
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      LoopingListIterator<SQLTransientConnectionException> loopingListIterator0 = new LoopingListIterator<SQLTransientConnectionException>(arrayList0);
      iteratorArray0[0] = (Iterator<SQLTransientConnectionException>) loopingListIterator0;
      ListIteratorWrapper<SQLTransientConnectionException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransientConnectionException>(loopingListIterator0);
      iteratorArray0[1] = (Iterator<SQLTransientConnectionException>) listIteratorWrapper0;
      MapIterator<SQLTransientConnectionException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[2] = (Iterator<SQLTransientConnectionException>) mapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      Iterator<Locale.Category>[] iteratorArray1 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 1);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[4];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      ObjectArrayListIterator<Locale.Category> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.Category>(locale_CategoryArray0);
      iteratorArray1[0] = (Iterator<Locale.Category>) objectArrayListIterator0;
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray1);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) objectArrayListIterator0, (Iterator<? extends Locale.Category>) zippingIterator0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      SQLTransientException sQLTransientException0 = new SQLTransientException("(-Uh~B&>:;iy:");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", sQLTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLNonTransientException0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLTransientException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", (int[]) null, batchUpdateException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException(batchUpdateException0);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("(-Uh~B&>:;iy:", ", ", 640, (int[]) null, batchUpdateException3);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException((int[]) null, batchUpdateException2);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<BatchUpdateException> comparatorPredicate0 = new ComparatorPredicate<BatchUpdateException>(batchUpdateException5, (Comparator<BatchUpdateException>) null, comparatorPredicate_Criterion0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) resettableListIterator0, (Predicate<? super BatchUpdateException>) comparatorPredicate0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      Transformer<Object, Integer> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends Integer>) transformer0, (Transformer<? super Object, ? extends Integer>) transformer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<BatchUpdateException>) listIterator0, (Closure<? super BatchUpdateException>) transformerClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      int int0 = 1172;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[7];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("transformer may not be null", "", 1172);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLSyntaxErrorException0;
      String string0 = "";
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", "", 1172, sQLNonTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", sQLNonTransientConnectionException1);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLDataException sQLDataException0 = new SQLDataException("", sQLNonTransientConnectionException1);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLDataException0;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("");
      sQLNonTransientExceptionArray0[5] = sQLNonTransientException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "transformer may not be null", sQLSyntaxErrorException0);
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLInvalidAuthorizationSpecException0;
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) objectArrayIterator0, 1172);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1165
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getAttributeNS((String) null, "org.apache.commons.collections4.functors.AllPredicate");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) orderedMapIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) priorityQueue0);
      Properties properties0 = new Properties();
      IteratorUtils.isEmpty(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Boolean[]) null, 1432);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("}8ZnoMh");
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      SingletonListIterator<PriorityQueue<SQLSyntaxErrorException>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<SQLSyntaxErrorException>>(priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      anyPredicate0.getPredicates();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) resettableIterator0, (Predicate<? super SQLTransientConnectionException>) anyPredicate0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      enumSet0.clone();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, false);
      singletonIterator0.next();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) singletonIterator0, (Predicate<? super SQLTransientConnectionException>) identityPredicate0);
      int int0 = (-3072);
      MapIterator<Integer, EnumSet<Locale.Category>> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Integer>) mapIterator0, (long) (-3072));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) orderedMapIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) priorityQueue0);
      IteratorUtils.asEnumeration((Iterator<?>) iterator1);
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      LoopingIterator<SQLNonTransientException> loopingIterator0 = new LoopingIterator<SQLNonTransientException>(linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLNonTransientException>) loopingIterator0, (Closure<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      LinkedHashSet<SQLSyntaxErrorException> linkedHashSet0 = new LinkedHashSet<SQLSyntaxErrorException>();
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) linkedHashSet0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("PrototypeCloneFactory: Clone method must be public", "PrototypeCloneFactory: Clone method must be public", (Throwable) null);
      linkedHashSet0.add(sQLSyntaxErrorException0);
      IteratorUtils.get((Iterator<SQLNonTransientException>) resettableIterator0, 1172);
      // Undeclared exception!
      try { 
        ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Closure collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)0;
      Iterator<IIOMetadataNode> iterator0 = null;
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G7R3{jbdm&ZU^/");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 4, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) listIterator0);
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Properties properties4 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 0, 0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      IteratorUtils.singletonListIterator(properties3);
      ListIterator<SQLException> listIterator1 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator1);
      PriorityQueue<SQLRecoverableException>[] priorityQueueArray0 = (PriorityQueue<SQLRecoverableException>[]) Array.newInstance(PriorityQueue.class, 9);
      PriorityQueue<SQLRecoverableException> priorityQueue0 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLRecoverableException> priorityQueue1 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLRecoverableException> priorityQueue2 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLRecoverableException> priorityQueue3 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[3] = priorityQueue3;
      PriorityQueue<SQLRecoverableException> priorityQueue4 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[4] = priorityQueue4;
      PriorityQueue<SQLRecoverableException> priorityQueue5 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[5] = priorityQueue5;
      PriorityQueue<SQLRecoverableException> priorityQueue6 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[6] = priorityQueue6;
      PriorityQueue<SQLRecoverableException> priorityQueue7 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[7] = priorityQueue7;
      PriorityQueue<SQLRecoverableException> priorityQueue8 = new PriorityQueue<SQLRecoverableException>();
      priorityQueueArray0[8] = priorityQueue8;
      ResettableIterator<PriorityQueue<SQLRecoverableException>> resettableIterator1 = IteratorUtils.arrayIterator(priorityQueueArray0);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      Hashtable<IIOMetadataNode, SQLException> hashtable0 = new Hashtable<IIOMetadataNode, SQLException>();
      EntrySetMapIterator<IIOMetadataNode, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLException>(hashtable0);
      entrySetMapIterator0.toString();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLException>(entrySetMapIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("ListIterator must not be null", "ListIterator must not be null", 1951);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.normalize();
      hashtable0.put(iIOMetadataNode0, sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "MapIterator[]", (-1979));
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>((SQLException) null, defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OrderedIterator<Properties> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) orderedIterator0);
      ArrayDeque<SQLWarning> arrayDeque0 = new ArrayDeque<SQLWarning>();
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("im5", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("", (String) null, 16, (Map<String, ClientInfoStatus>) null);
      vector0.add(sQLClientInfoException2);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) vector0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) listIterator0);
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      propertiesArray0[2] = properties1;
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 0, 0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      IteratorUtils.singletonListIterator(properties3);
      ListIterator<BatchUpdateException> listIterator1 = EmptyListIterator.emptyListIterator();
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) listIterator1, (long) 0);
      IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) boundedIterator0, (Iterator<? extends BatchUpdateException>) listIterator1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "&4tu1LPuQSha0veb2K";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, 1508, 780);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) orderedMapIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) priorityQueue0);
      EmptyOrderedIterator.emptyOrderedIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("K", "K", 1951);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLRecoverableException0, defaultEquator0);
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) objectArrayListIterator0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) listIterator0, (Iterator<? extends Properties>) objectArrayListIterator0, (Iterator<? extends Properties>) listIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends Properties>) zippingIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(locale_Category0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(equalPredicate1);
      // Undeclared exception!
      try { 
        OrPredicate.orPredicate((Predicate<? super Object>) notPredicate0, (Predicate<? super Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.OrPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) listIterator0);
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 0, 0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      ListIterator<Properties> listIterator1 = IteratorUtils.singletonListIterator(properties4);
      assertFalse(listIterator1.hasPrevious());
      
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Transformer must not be null");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Transformer must not be null", sQLFeatureNotSupportedException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLFeatureNotSupportedException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("Transformer must not be null");
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Transformer<SQLException, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super SQLException>) predicate0, (Transformer<? super SQLException, ? extends String>) transformer0, (Transformer<? super SQLException, ? extends String>) transformer0);
      objectArrayIterator0.reset();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) objectArrayIterator0, (Transformer<? super SQLTimeoutException, String>) transformer1, "h>b4@{;TLMN1!Ga^", "Transformer must not be null", "The collections must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      Iterator<Locale.Category>[] iteratorArray1 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray1);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) zippingIterator0, (Iterator<? extends Locale.Category>) zippingIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IIOMetadataNode[] iIOMetadataNodeArray0 = IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableIterator0, class0);
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends DataTruncation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("}8ZnoMh");
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      SingletonListIterator<PriorityQueue<SQLSyntaxErrorException>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<SQLSyntaxErrorException>>(priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      anyPredicate0.getPredicates();
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) anyPredicate0);
      IteratorUtils.matchesAll((Iterator<PriorityQueue<SQLSyntaxErrorException>>) singletonListIterator0, (Predicate<? super PriorityQueue<SQLSyntaxErrorException>>) predicate0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      singletonIterator0.next();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) singletonIterator0, (Predicate<? super SQLTransientConnectionException>) identityPredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("}8ZnoMh", "}8ZnoMh", (Throwable) null);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      IteratorUtils.singletonListIterator(properties1);
      SQLDataException sQLDataException0 = new SQLDataException("", sQLTransientConnectionException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) listIterator0, (-1882L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      instantiateFactory0.create();
      Class<String> class1 = String.class;
      InstantiateFactory<String> instantiateFactory1 = new InstantiateFactory<String>(class1);
      instantiateFactory1.create();
      FactoryTransformer<Integer, String> factoryTransformer0 = new FactoryTransformer<Integer, String>(instantiateFactory1);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      Iterator<Locale.Category>[] iteratorArray1 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray1);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) zippingIterator0, (Iterator<? extends Locale.Category>) zippingIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IIOMetadataNode[] iIOMetadataNodeArray0 = IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableIterator0, class0);
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.emptyIterator();
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) resettableIterator1, 598);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("pIGv6>\u0004,");
      iIOMetadataNode0.getAttributeNodeNS("f}xj)[JHDf+BcUk", "org.apache.commons.collections4.IteratorUtils");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLException sQLException0 = new SQLException("u;geylNLQPUG>w#'!gh");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("q^Y3cCl Jv}", "", sQLException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("u;geylNLQPUG>w#'!gh", "");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("u;geylNLQPUG>w#'!gh", "");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("q^Y3cCl Jv}", "", 0, sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("$.3", "$.3", sQLNonTransientConnectionException5);
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException("q^Y3cCl Jv}", "");
      sQLNonTransientConnectionExceptionArray0[8] = sQLNonTransientConnectionException8;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      Iterator<Locale.Category>[] iteratorArray1 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray1);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) zippingIterator0, (Iterator<? extends Locale.Category>) zippingIterator0);
      HashMap<SQLDataException, Integer> hashMap0 = new HashMap<SQLDataException, Integer>();
      EntrySetMapIterator<SQLDataException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, Integer>(hashMap0);
      MapIterator<SQLDataException, Integer> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends Integer>) entrySetMapIterator0);
      MapIterator<SQLDataException, Integer> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) mapIterator1);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) iterator0);
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("U@Vl|%3)<, ");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.Flat3Map$FlatMapEntry", "m!M^1CVIT");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, 1);
      IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      instantiateFactory0.create();
      instantiateFactory0.create();
      FactoryTransformer<Integer, String> factoryTransformer0 = new FactoryTransformer<Integer, String>(instantiateFactory0);
      IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) factoryTransformer0, "}d~zg09YA", "}d~zg09YA", "}d~zg09YA");
      OrderedMapIterator<SQLClientInfoException, Transformer<SQLInvalidAuthorizationSpecException, SQLWarning>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>((SQLException) null, comparator0, comparatorPredicate_Criterion0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0, (Predicate<? super SQLClientInfoException>) comparatorPredicate0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Properties> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) iterator0, (Transformer<? super SQLClientInfoException, ? extends Properties>) transformer0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      Iterator<Properties> iterator2 = IteratorUtils.filteredIterator((Iterator<? extends Properties>) iterator1, (Predicate<? super Properties>) equalPredicate0);
      assertFalse(iterator2.equals((Object)iterator1));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MapIterator<SQLClientInfoException, Properties> mapIterator0 = IteratorUtils.emptyMapIterator();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (Transformer<? super SQLClientInfoException, ? extends Properties>) transformer0);
      DefaultEquator.defaultEquator();
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      Iterator<Locale.Category>[] iteratorArray1 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray1);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) zippingIterator0, (Iterator<? extends Locale.Category>) zippingIterator0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableIterator0, (Class<IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      enumSet0.clone();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      Iterator<Locale.Category>[] iteratorArray1 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      Iterator<Locale.Category>[] iteratorArray1 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray1);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) zippingIterator0, (Iterator<? extends Locale.Category>) zippingIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IIOMetadataNode[] iIOMetadataNodeArray0 = IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableIterator0, class0);
      IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.emptyIterator();
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) resettableIterator1, 548);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(">T<6'xe");
      iIOMetadataNode0.getAttributeNodeNS("Array class must not be null", "");
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) listIterator0);
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Hashtable<IIOMetadataNode, SQLException> hashtable0 = new Hashtable<IIOMetadataNode, SQLException>();
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("prefix may not be null", mockThrowable0);
      hashtable0.put(iIOMetadataNode0, sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException("The list must not be null", "The list must not be null", sQLIntegrityConstraintViolationException0);
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLNonTransientException) sQLIntegrityConstraintViolationException0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      PredicateTransformer<SQLException> predicateTransformer0 = new PredicateTransformer<SQLException>(predicate0);
      Predicate<SQLNonTransientException> predicate1 = TransformerPredicate.transformerPredicate((Transformer<? super SQLNonTransientException, Boolean>) predicateTransformer0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) predicate1);
      boolean boolean1 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<IIOMetadataNode, SQLException> hashMap0 = new HashMap<IIOMetadataNode, SQLException>();
      EntrySetMapIterator<IIOMetadataNode, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLException>(hashMap0);
      entrySetMapIterator0.toString();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLException>(entrySetMapIterator0);
      IteratorUtils.size(entrySetMapIterator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("MapIterator[]", "MapIterator[]", (-1));
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The predicate to call must not be null";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.getIterator((Object) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.collections4.multimap.AbstractMultiValuedMap$MultiValuedMapIterator";
      stringArray0[1] = "Z5Z8<mjB7(Nb]c";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IfTransformer.ifTransformer((Predicate<? super Object>) uniquePredicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      SQLException sQLException0 = new SQLException("", "Enumeration must not be null", 10);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "8XV%", sQLException0);
      SQLDataException sQLDataException0 = new SQLDataException("]", (String) null, sQLNonTransientException0);
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) listIterator0);
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("ListIterator must not be null", "ListIterator must not be null", (-3474));
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLRecoverableException0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLNonTransientConnectionException0, defaultEquator0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLNonTransientConnectionException0);
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLNonTransientException) sQLNonTransientConnectionException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) linkedList0);
      Hashtable<IIOMetadataNode, SQLException> hashtable0 = new Hashtable<IIOMetadataNode, SQLException>();
      EntrySetMapIterator<IIOMetadataNode, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLException>(hashtable0);
      EntrySetMapIterator<IIOMetadataNode, SQLException> entrySetMapIterator1 = new EntrySetMapIterator<IIOMetadataNode, SQLException>(hashtable0);
      entrySetMapIterator1.toString();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLException>(entrySetMapIterator1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("ListIterator must not be null", "ListIterator must not be null", 1951);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLRecoverableException0, defaultEquator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      hashtable0.put(iIOMetadataNode0, sQLRecoverableException0);
      SQLDataException sQLDataException0 = new SQLDataException("MapIterator[]", "", sQLRecoverableException0);
      IteratorUtils.singletonIterator((SQLNonTransientException) sQLDataException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      boolean boolean1 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Object>) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<IIOMetadataNode, SQLException> hashMap0 = new HashMap<IIOMetadataNode, SQLException>();
      EntrySetMapIterator<IIOMetadataNode, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLException>(hashMap0);
      entrySetMapIterator0.toString();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLException>(entrySetMapIterator0);
      int int0 = 0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("~t`'z96:yJ#", "~t`'z96:yJ#", 0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLIntegrityConstraintViolationException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("MapIterator[]", "MapIterator[]", 4, sQLWarning0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLWarning0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLIntegrityConstraintViolationException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("~t`'z96:yJ#", "MapIterator[]", sQLNonTransientConnectionException1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLNonTransientConnectionException[]) null, 4, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.singletonIterator(properties0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      ArrayList<Predicate<SQLException>> arrayList0 = new ArrayList<Predicate<SQLException>>();
      OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLTransientConnectionException>>) arrayList0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList1.forEach(consumer0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) list0, locale_FilteringMode0);
      EmptyOrderedIterator.emptyOrderedIterator();
      ArrayList<SQLClientInfoException> arrayList2 = new ArrayList<SQLClientInfoException>();
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(arrayList2);
      int int0 = 1073741824;
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) loopingListIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[9];
      SQLException sQLException0 = new SQLException("u;geylNLQPUG>w#'!gh");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", sQLException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("q^Y3cCl Jv}", "", sQLException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("u;geylNLQPUG>w#'!gh", "");
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("u;geylNLQPUG>w#'!gh", "");
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("q^Y3cCl Jv}", "", 0, sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      SQLNonTransientConnectionException sQLNonTransientConnectionException7 = new SQLNonTransientConnectionException("$.3", "$.3", sQLNonTransientConnectionException5);
      sQLNonTransientConnectionExceptionArray0[7] = sQLNonTransientConnectionException7;
      SQLNonTransientConnectionException sQLNonTransientConnectionException8 = new SQLNonTransientConnectionException("", "u;geylNLQPUG>w#'!gh", sQLNonTransientConnectionException1);
      sQLNonTransientConnectionExceptionArray0[8] = sQLNonTransientConnectionException8;
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0, 0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[7];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException((String) null, "prefix may not be null");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException((String) null, "!x>jH3ZDE?k{M");
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException((String) null, sQLRecoverableException2);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException("\tdwFL");
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLRecoverableException2);
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException(sQLNonTransientException0);
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException((String) null, "\tdwFL");
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 1, 1);
      IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) resettableListIterator0, (long) 1);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      Iterator<Locale.Category>[] iteratorArray1 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      Iterator<Locale.Category>[] iteratorArray1 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray1);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) zippingIterator0, (Iterator<? extends Locale.Category>) zippingIterator0);
      HashMap<SQLDataException, Integer> hashMap0 = new HashMap<SQLDataException, Integer>();
      EntrySetMapIterator<SQLDataException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, Integer>(hashMap0);
      MapIterator<SQLDataException, Integer> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends Integer>) entrySetMapIterator0);
      MapIterator<SQLDataException, Integer> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) mapIterator1);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) iterator0);
      Iterable<SQLWarning> iterable0 = new ArrayDeque<SQLWarning>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.AbstractHashedMap$EntrySet");
      ConstantTransformer<Object, SQLIntegrityConstraintViolationException> constantTransformer0 = new ConstantTransformer<Object, SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.objectGraphIterator((Object) iterable0, (Transformer<? super Object, ?>) constantTransformer0);
      OrderedMapIterator<SQLSyntaxErrorException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0, (Transformer<? super SQLSyntaxErrorException, ? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      ArrayList<Predicate<SQLException>> arrayList0 = new ArrayList<Predicate<SQLException>>();
      NonePredicate<SQLException> nonePredicate0 = new NonePredicate<SQLException>(predicateArray0);
      arrayList0.add((Predicate<SQLException>) nonePredicate0);
      OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLTransientConnectionException>>) arrayList0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      IteratorUtils.matchesAll((Iterator<Properties>) resettableIterator0, (Predicate<? super Properties>) predicate0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("k");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      Integer integer0 = new Integer(1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("k", "k_%_33>H=yi!g", 128);
      ConstantTransformer<Object, SQLIntegrityConstraintViolationException> constantTransformer0 = new ConstantTransformer<Object, SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.objectGraphIterator((Object) integer0, (Transformer<? super Object, ?>) constantTransformer0);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 5);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      enumSetArray0[0] = enumSet0;
      EnumSet<Locale.Category> enumSet1 = EnumSet.copyOf((Collection<Locale.Category>) enumSet0);
      enumSetArray0[1] = enumSet1;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      EnumSet<Locale.Category> enumSet2 = EnumSet.of(locale_Category1, locale_CategoryArray0);
      enumSetArray0[2] = enumSet2;
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet3 = EnumSet.noneOf(class0);
      enumSetArray0[3] = enumSet3;
      EnumSet<Locale.Category> enumSet4 = EnumSet.of(locale_Category1);
      enumSetArray0[4] = enumSet4;
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.arrayIterator(enumSetArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableIterator0, (Predicate<? super EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("cY4pVk'", "The predicate and transformer arrays must be the same size", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("cY4pVk'", (String) null, (-2945), sQLNonTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException("cY4pVk'", sQLNonTransientConnectionException1);
      DataTruncation dataTruncation0 = new DataTruncation((-2945), true, true, 3516, 1, sQLDataException0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(754, true, true, 1, 0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(754, true, true, 1, 10);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, true, true, (-1410), 1632, sQLNonTransientConnectionException1);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(1, false, true, 512, (-1), sQLNonTransientConnectionException1);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(3516, true, true, (-375), 1632);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(1, false, false, 5031, (-3331));
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(0, false, true, 1, 1570);
      dataTruncationArray0[7] = dataTruncation7;
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0);
      Class<DataTruncation> class0 = DataTruncation.class;
      DataTruncation[] dataTruncationArray1 = IteratorUtils.toArray((Iterator<? extends DataTruncation>) objectArrayIterator0, class0);
      assertNotSame(dataTruncationArray0, dataTruncationArray1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>(100, 1027.2087F);
      SingletonListIterator<LinkedHashSet<DataTruncation>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<DataTruncation>>(linkedHashSet0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) singletonListIterator0, (Transformer<? super LinkedHashSet<DataTruncation>, String>) transformer0, "", "", "");
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 6);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) vector0);
      iteratorArray0[0] = (Iterator<SQLDataException>) resettableListIterator0;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("null");
      ResettableIterator<Locale.LanguageRange> resettableIterator0 = IteratorUtils.singletonIterator(locale_LanguageRange0);
      List<Locale.LanguageRange> list0 = IteratorUtils.toList((Iterator<? extends Locale.LanguageRange>) resettableIterator0, 128);
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) arrayList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags(list0, (Collection<String>) list1, locale_FilteringMode0);
      IteratorUtils.loopingListIterator(list2);
      OrderedMapIterator<Object, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Object, SQLInvalidAuthorizationSpecException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      Iterator<Object> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Object>) orderedMapIterator0);
      IteratorUtils.unmodifiableIterator(iterator0);
      OrderedIterator<SQLNonTransientException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Closure<SQLException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLNonTransientException>) orderedIterator0, (Closure<? super SQLNonTransientException>) closure0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.singletonIterator(properties0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLFeatureNotSupportedException[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) uniquePredicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer1, (Predicate<? super Object>) uniquePredicate0);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) vector0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) resettableListIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) linkedList0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xv]R}H>~M");
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      int int0 = 0;
      IteratorUtils.toList((Iterator<? extends SQLDataException>) resettableListIterator0, 1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("v$Xtc@^Dw0e6");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLFeatureNotSupportedException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("#Uky$Ik+", "xv]R}H>~M");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) stringTokenizer0, 738);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet.allOf(class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      Integer integer0 = new Integer(794);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "Estimated size must be greater than 0", (-1218));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException((String) null, "!P\"bdwfzw", 100, sQLIntegrityConstraintViolationException0);
      ConstantTransformer<Object, SQLIntegrityConstraintViolationException> constantTransformer0 = new ConstantTransformer<Object, SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException1);
      ConstantTransformer.constantTransformer(iIOMetadataNode0);
      IteratorUtils.objectGraphIterator((Object) integer0, (Transformer<? super Object, ?>) constantTransformer0);
      List<SQLClientInfoException> list0 = new Stack<SQLClientInfoException>();
      IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      Hashtable<IIOMetadataNode, SQLException> hashtable0 = new Hashtable<IIOMetadataNode, SQLException>();
      EntrySetMapIterator<IIOMetadataNode, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLException>(hashtable0);
      entrySetMapIterator0.toString();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLException>(entrySetMapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("ListIterator must not be null", "ListIterator must not be null", 1951);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      hashtable0.put(iIOMetadataNode0, sQLRecoverableException0);
      SQLDataException sQLDataException0 = new SQLDataException("MapIterator[]", "", sQLRecoverableException0);
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLNonTransientException) sQLDataException0);
      EmptyOrderedIterator.emptyOrderedIterator();
      Closure<SQLException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLNonTransientException>) resettableIterator0, (Closure<? super SQLNonTransientException>) closure0);
      ArrayIterator<SQLWarning> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLWarning>(closure0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.singletonIterator(properties0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      ArrayList<Predicate<SQLException>> arrayList0 = new ArrayList<Predicate<SQLException>>();
      NonePredicate<SQLException> nonePredicate0 = new NonePredicate<SQLException>(predicateArray0);
      arrayList0.add((Predicate<SQLException>) nonePredicate0);
      OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLTransientConnectionException>>) arrayList0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-72);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList1.forEach(consumer0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) list0, locale_FilteringMode0);
      IteratorUtils.loopingListIterator(list1);
      OrderedMapIterator<Object, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Object, SQLInvalidAuthorizationSpecException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      Iterator<Object> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Object>) abstractMapIteratorDecorator0);
      IteratorUtils.unmodifiableIterator(iterator0);
      OrderedIterator<SQLNonTransientException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Closure<SQLException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLNonTransientException>) orderedIterator0, (Closure<? super SQLNonTransientException>) closure0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("k");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      Integer integer0 = new Integer(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("k", "k_%_33>H=yi!g", 128);
      ConstantTransformer<Object, SQLIntegrityConstraintViolationException> constantTransformer0 = new ConstantTransformer<Object, SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.objectGraphIterator((Object) integer0, (Transformer<? super Object, ?>) constantTransformer0);
      Closure<SQLException> closure0 = NOPClosure.nopClosure();
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.apply((Iterator<SQLNonTransientException>) resettableListIterator0, (Closure<? super SQLNonTransientException>) closure0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("#fL3<Y!T#A`w)y0(T");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) linkedList0);
      IteratorUtils.emptyIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("}8ZnoMh");
      sQLTransientConnectionException0.printStackTrace();
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      singletonIterator0.next();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) singletonIterator0, (Predicate<? super SQLTransientConnectionException>) identityPredicate0);
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 6);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("}8ZnoMh", "}8ZnoMh", sQLTransientConnectionException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "suffix may not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) iteratorArray0[0], 1254);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(", ", ", ");
      IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(", ", (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLFeatureNotSupportedException1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IteratorUtils.size((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) uniquePredicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer1, (Predicate<? super Object>) uniquePredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Predicate<? super EnumSet<Locale.Category>>) predicate0);
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(stack0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLDataException>) loopingListIterator0);
      ResettableListIterator<Transformer<Object, String>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringValueTransformer.stringValueTransformer();
      OrderedMapIterator<BatchUpdateException, IIOMetadataNode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) orderedMapIterator0, 788, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) listIterator0);
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/`7a[U:vV6?J96S|LD";
      stringArray0[1] = "|vkm";
      stringArray0[2] = "/`7a[U:vV6?J96S|LD";
      IteratorUtils.arrayListIterator(stringArray0);
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      OrderedMapIterator<SQLSyntaxErrorException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      EntrySetMapIterator<DataTruncation, TreeSet<BatchUpdateException>> entrySetMapIterator0 = null;
      try {
        entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, TreeSet<BatchUpdateException>>((Map<DataTruncation, TreeSet<BatchUpdateException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>(100, 1027.2087F);
      SingletonListIterator<LinkedHashSet<DataTruncation>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<DataTruncation>>(linkedHashSet0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "");
      hashtable0.put(sQLSyntaxErrorException0, "");
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) singletonListIterator0, (Transformer<? super LinkedHashSet<DataTruncation>, String>) transformer0, "", "", "");
      Comparator<Object> comparator0 = null;
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 6);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter", "vh<Cg<>hbd_hR", sQLSyntaxErrorException0);
      vector0.add(sQLDataException0);
      IteratorUtils.loopingListIterator((List<SQLDataException>) vector0);
      Hashtable<SQLDataException, String> hashtable1 = new Hashtable<SQLDataException, String>();
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[2] = iterator0;
      MapIterator<SQLDataException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[3] = (Iterator<SQLDataException>) mapIterator0;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("delimiter may not be null", "", (Throwable) null);
      ArrayListIterator<SQLDataException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLDataException>(sQLSyntaxErrorException1, (-4964));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      Integer[] integerArray0 = new Integer[0];
      IteratorUtils.arrayListIterator(integerArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) listIterator0);
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("0 pA!l@f");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) iterator0);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      IteratorUtils.unmodifiableIterator(iterator1);
      IteratorUtils.emptyOrderedIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "", 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) enumeration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) linkedList0);
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("}8ZnoMh");
      sQLTransientConnectionException0.printStackTrace();
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      singletonIterator0.next();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) singletonIterator0, (Predicate<? super SQLTransientConnectionException>) identityPredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("}8ZnoMh", "}8ZnoMh", sQLTransientConnectionException0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties[] propertiesArray0 = new Properties[6];
      propertiesArray0[0] = properties0;
      propertiesArray0[1] = properties0;
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 0, (-305));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) iterator0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties[] propertiesArray0 = new Properties[9];
      propertiesArray0[0] = properties0;
      propertiesArray0[1] = properties2;
      propertiesArray0[2] = properties2;
      propertiesArray0[3] = properties1;
      propertiesArray0[4] = properties1;
      propertiesArray0[5] = properties2;
      propertiesArray0[6] = properties3;
      propertiesArray0[7] = properties0;
      propertiesArray0[8] = properties2;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 0, 0);
      Enumeration<Properties> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Properties>) resettableIterator0);
      Vector<Properties> vector0 = new Vector<Properties>();
      Iterator<Properties> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Properties>) enumeration0, (Collection<? super Properties>) vector0);
      IteratorUtils.zippingIterator((Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) iterator1);
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties2);
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) null, (Iterator<? extends Properties>) listIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[6];
      StringTokenizer stringTokenizer0 = new StringTokenizer("b[<n#fvZ:Cpc");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("b[<n#fvZ:Cpc", "", false);
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("", "b[<n#fvZ:Cpc");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("|+?V.z0%w9R4L=U", "b[<n#fvZ:Cpc");
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("");
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("", "", false);
      stringTokenizerArray0[5] = stringTokenizer5;
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.arrayListIterator(stringTokenizerArray0, 1);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<StringTokenizer>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 1631;
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      DataTruncation dataTruncation0 = new DataTruncation(10, false, false, 100, (-825));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.emptyIterator();
      IteratorUtils.emptyListIterator();
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(vector0);
      IteratorUtils.loopingListIterator((List<SQLDataException>) vector0);
      Comparator<SQLDataException> comparator1 = (Comparator<SQLDataException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator1, (Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("k");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      IteratorUtils.nodeListIterator(nodeList0);
      Integer integer0 = new Integer(1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("k", "k_%_33>H=yi!g", 128);
      ConstantTransformer<Object, SQLIntegrityConstraintViolationException> constantTransformer0 = new ConstantTransformer<Object, SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      IteratorUtils.objectGraphIterator((Object) integer0, (Transformer<? super Object, ?>) constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) null, (-1009));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("@V]%CIs`q", "", 1481);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) orderedMapIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) priorityQueue0);
      OrderedIterator<SQLNonTransientException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("K", "K", 1951);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLRecoverableException0, defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) orderedIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<IIOMetadataNode, SQLException> hashMap0 = new HashMap<IIOMetadataNode, SQLException>();
      EntrySetMapIterator<IIOMetadataNode, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLException>(hashMap0);
      entrySetMapIterator0.toString();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLException>(entrySetMapIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IIOMetadataNode[] iIOMetadataNodeArray0 = IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) abstractMapIteratorDecorator0, class0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) resettableListIterator0);
      IteratorUtils.emptyOrderedIterator();
      MapIterator<SQLNonTransientException, Predicate<ArrayDeque>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) iterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) mapIterator0, (Predicate<? super SQLNonTransientException>) predicate0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("MapIterator[]");
      IteratorUtils.toString((Iterator<ArrayDeque<SQLWarning>>) null, (Transformer<? super ArrayDeque<SQLWarning>, String>) transformer0, "MapIterator[]", "MapIterator[]", "MapIterator[]");
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) listIterator0);
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      propertiesArray0[2] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[3] = properties2;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("", classArray0, sQLFeatureNotSupportedExceptionArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) invokerTransformer0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(nullIsTruePredicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsFalsePredicate0;
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = UniquePredicate.uniquePredicate();
      predicateArray0[2] = predicate2;
      NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLTransientException0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) nullIsFalsePredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLInvalidAuthorizationSpecException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) null, (Predicate<? super SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("}8ZnoMh");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Predicate<? super Object>[] predicateArray1 = anyPredicate0.getPredicates();
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) singletonIterator0, (Predicate<? super SQLTransientConnectionException>) anyPredicate0);
      assertFalse(singletonIterator0.hasNext());
      
      Properties properties0 = new Properties();
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLSyntaxErrorException>[] classArray0 = (Class<SQLSyntaxErrorException>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<SQLFeatureNotSupportedException, String> invokerTransformer0 = new InvokerTransformer<SQLFeatureNotSupportedException, String>("", classArray0, predicateArray1);
      String string0 = IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) invokerTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<PriorityQueue<DataTruncation>>) null, (Transformer<? super PriorityQueue<DataTruncation>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<IIOMetadataNode, SQLException> hashMap0 = new HashMap<IIOMetadataNode, SQLException>();
      EntrySetMapIterator<IIOMetadataNode, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLException>(hashMap0);
      entrySetMapIterator0.toString();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLException>(entrySetMapIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IIOMetadataNode[] iIOMetadataNodeArray0 = IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) abstractMapIteratorDecorator0, class0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) resettableListIterator0);
      IteratorUtils.emptyOrderedIterator();
      EmptyMapIterator.emptyMapIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("MapIterator[]");
      IteratorUtils.toString((Iterator<ArrayDeque<SQLWarning>>) null, (Transformer<? super ArrayDeque<SQLWarning>, String>) transformer0, "MapIterator[]", "MapIterator[]", "MapIterator[]");
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      HashMap<Integer, SQLTimeoutException> hashMap1 = new HashMap<Integer, SQLTimeoutException>();
      EntrySetMapIterator<Integer, SQLTimeoutException> entrySetMapIterator1 = new EntrySetMapIterator<Integer, SQLTimeoutException>(hashMap1);
      entrySetMapIterator1.hasNext();
      MapIterator<Integer, SQLTimeoutException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Integer, SQLTimeoutException>) entrySetMapIterator1);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>(100, 1027.2087F);
      SingletonListIterator<LinkedHashSet<DataTruncation>> singletonListIterator0 = new SingletonListIterator<LinkedHashSet<DataTruncation>>(linkedHashSet0);
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      IteratorUtils.toString((Iterator<LinkedHashSet<DataTruncation>>) singletonListIterator0, (Transformer<? super LinkedHashSet<DataTruncation>, String>) transformer0, "", "", "");
      Comparator<Object> comparator0 = null;
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 6);
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) vector0);
      iteratorArray0[0] = (Iterator<SQLDataException>) resettableListIterator0;
      Hashtable<SQLDataException, String> hashtable1 = new Hashtable<SQLDataException, String>();
      EntrySetMapIterator<SQLDataException, String> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, String>(hashtable1);
      AbstractMapIteratorDecorator<SQLDataException, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLDataException, String>(entrySetMapIterator0);
      iteratorArray0[1] = (Iterator<SQLDataException>) abstractMapIteratorDecorator0;
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[2] = iterator0;
      MapIterator<SQLDataException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[3] = (Iterator<SQLDataException>) mapIterator0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("delimiter may not be null", "", (Throwable) null);
      ArrayListIterator<SQLDataException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLDataException>(sQLSyntaxErrorException0, (-4964));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) comparator0, (Iterator<? extends SQLException>[]) iteratorArray0);
      HashMap<Predicate<Object>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap0);
      IteratorUtils.toString(iterator0, (Transformer<? super SQLException, String>) transformer0);
      int int0 = 4;
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      String string0 = " 8VqC\"M# Fv";
      String string1 = "Cannot instantiate class: ";
      int int1 = 91;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      String string2 = "+U-";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" 8VqC\"M# Fv", "+U-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // +U-
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) linkedList0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IfTransformer.ifTransformer((Predicate<? super Object>) uniquePredicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      Transformer<Object, SQLIntegrityConstraintViolationException> transformer1 = ExceptionTransformer.exceptionTransformer();
      singletonListIterator0.next();
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer1, (Predicate<? super Object>) uniquePredicate0);
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Predicate<? super EnumSet<Locale.Category>>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLNonTransientException>) listIterator0);
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 0, 0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0, (Iterator<? extends Properties>) resettableIterator0);
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) zippingIterator0, (Iterator<? extends Properties>) zippingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      SingletonListIterator<EnumSet<Locale.Category>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.Category>>(enumSet1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) uniquePredicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer1, (Predicate<? super Object>) uniquePredicate0);
      Iterator<EnumSet<Locale.Category>> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonListIterator0, (Predicate<? super EnumSet<Locale.Category>>) predicate0);
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) resettableListIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<IIOMetadataNode, SQLException> hashMap0 = new HashMap<IIOMetadataNode, SQLException>();
      EntrySetMapIterator<IIOMetadataNode, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLException>(hashMap0);
      entrySetMapIterator0.toString();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLException>(entrySetMapIterator0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("MapIterator[]", "ListIterator must not be null", 1951);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLRecoverableException0, defaultEquator0);
      SQLDataException sQLDataException0 = new SQLDataException("", "", sQLRecoverableException0);
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLNonTransientException) sQLDataException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLNonTransientException>) resettableIterator0, (Predicate<? super SQLNonTransientException>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Iterator<BatchUpdateException> iterator0 = null;
      IteratorUtils.contains((Iterator<BatchUpdateException>) null, (Object) null);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      DataTruncation dataTruncation0 = new DataTruncation((-323), true, false, 1151, 1151);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation((-323), false, true, 0, (-375), dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, false, true, 0, (-1551), dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, false, true, 123, 0, dataTruncation2);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(0, false, false, 0, 467);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(0, true, false, 0, 0, dataTruncation4);
      dataTruncationArray0[5] = dataTruncation5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, (-1551));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratorUtils.emptyIterator();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/?qsh";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "K^s<s]p>XQ;yQQ";
      stringArray0[4] = "";
      stringArray0[5] = "|vkm";
      stringArray0[6] = "/`7a[U:vV6?J96S|LD";
      IteratorUtils.arrayListIterator(stringArray0);
      Iterator<SQLSyntaxErrorException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) iterator0, (Iterator<? extends SQLSyntaxErrorException>) iterator0);
      EntrySetMapIterator<DataTruncation, TreeSet<BatchUpdateException>> entrySetMapIterator0 = null;
      try {
        entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, TreeSet<BatchUpdateException>>((Map<DataTruncation, TreeSet<BatchUpdateException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0, (-133L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientException>) linkedList0);
      int int0 = 1172;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) resettableIterator0, 1172);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1172
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "(<:pYfi!orN";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("(<:pYfi!orN", "(<:pYfi!orN");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IteratorUtils.contains((Iterator<SQLTransactionRollbackException>) null, (Object) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 9;
      intArray0[2] = (-3049);
      intArray0[3] = (-1830);
      intArray0[4] = (-3049);
      intArray0[5] = (-3049);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("9gwon{\fCVTi", "", (-3049), intArray0, sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MapIterator<Integer, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Integer>) mapIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "OxJX,+Ua";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("OxJX,+Ua", "", (-705), sQLTimeoutException0);
      String string1 = "9(mOudJn";
      MockFile mockFile0 = new MockFile("OxJX,+Ua", "9(mOudJn");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.println('v');
      sQLTimeoutException0.printStackTrace((PrintStream) mockPrintStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "OxJX,+Ua";
      PrintStream printStream0 = mockPrintStream0.format("5,`iu02S", objectArray0);
      sQLInvalidAuthorizationSpecException0.printStackTrace(printStream0);
      sQLTimeoutException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, (-1370), 35);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      OrderedIterator<PriorityQueue<SQLTimeoutException>> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      IteratorUtils.singletonListIterator(sQLClientInfoException0);
      int int0 = 0;
      ArrayListIterator<SQLIntegrityConstraintViolationException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLIntegrityConstraintViolationException>(orderedIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      OrderedMapIterator<Object, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLClientInfoException>) orderedMapIterator0);
      DataTruncation dataTruncation0 = new DataTruncation(2, false, false, 2, 2);
      Closure<SQLException> closure0 = NOPClosure.nopClosure();
      ClosureTransformer<DataTruncation> closureTransformer0 = new ClosureTransformer<DataTruncation>(closure0);
      IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) closureTransformer0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[9];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("The transformer to call must not be null", "The transformer to call must not be null", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("The transformer to call must not be null", "<X0", (-715));
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("<X0", sQLIntegrityConstraintViolationException2);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("", sQLIntegrityConstraintViolationException3);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("<X0", "", 2, sQLIntegrityConstraintViolationException3);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("", "8e[9gfQVqjmtC?mV>f", (-1), sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException("", "", (-1545));
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException8 = new SQLIntegrityConstraintViolationException("", "fDd+m}6By n7:1LE3\"", 933);
      sQLIntegrityConstraintViolationExceptionArray0[8] = sQLIntegrityConstraintViolationException8;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, (-1), 2020);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) linkedList0);
      ZippingIterator<SQLFeatureNotSupportedException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      ListIteratorWrapper<SQLFeatureNotSupportedException> listIteratorWrapper0 = new ListIteratorWrapper<SQLFeatureNotSupportedException>(zippingIterator0);
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      try { 
        listIteratorWrapper0.set(sQLFeatureNotSupportedException0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ListIteratorWrapper does not support optional operations of ListIterator.
         //
         verifyException("org.apache.commons.collections4.iterators.ListIteratorWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<IIOMetadataNode, SQLException> hashMap0 = new HashMap<IIOMetadataNode, SQLException>();
      EntrySetMapIterator<IIOMetadataNode, SQLException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLException>(hashMap0);
      entrySetMapIterator0.toString();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLException>(entrySetMapIterator0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IIOMetadataNode[] iIOMetadataNodeArray0 = IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) abstractMapIteratorDecorator0, class0);
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) resettableListIterator0);
      IteratorUtils.emptyOrderedIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      int int0 = 962;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(locale_CategoryArray0, 962, 962);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 2);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1);
      enumSetArray0[0] = enumSet0;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category2, locale_Category2);
      enumSetArray0[1] = enumSet1;
      IteratorUtils.arrayIterator(enumSetArray0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[8];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException((String) null);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("", (String) null, 3115, sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("LESS", "");
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException("NkM~GE;", "LESS", sQLIntegrityConstraintViolationException5);
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, (-997));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
      Iterator<Locale.Category>[] iteratorArray1 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Locale.Category> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) iteratorArray1);
      IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) zippingIterator0, (Iterator<? extends Locale.Category>) zippingIterator0);
      HashMap<SQLDataException, Integer> hashMap0 = new HashMap<SQLDataException, Integer>();
      EntrySetMapIterator<SQLDataException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, Integer>(hashMap0);
      MapIterator<SQLDataException, Integer> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLDataException, ? extends Integer>) entrySetMapIterator0);
      MapIterator<SQLDataException, Integer> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) mapIterator1);
      IteratorUtils.asIterable((Iterator<? extends SQLDataException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("yxYv#:5b/EZ|");
      stringTokenizer0.nextToken("iterator");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) stringTokenizer0, 4103);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableIterator0, (Iterator<? extends EnumSet<Locale.Category>>) resettableIterator0, (Iterator<? extends EnumSet<Locale.Category>>) resettableIterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[8];
      DataTruncation dataTruncation0 = new DataTruncation((-1120), true, true, (-1), 0);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, true, true, 0, 0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, true, true, (-1120), 0, dataTruncation0);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(0, true, true, (-212), 0);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-212), false, false, (-212), (-1));
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-627), true, true, (-3518), (-627), dataTruncation0);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation(0, true, false, (-5940), 0);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(0, true, true, 100, 982);
      dataTruncationArray0[7] = dataTruncation7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("}8ZnoMh");
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      SingletonListIterator<PriorityQueue<SQLSyntaxErrorException>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<SQLSyntaxErrorException>>(priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[0] = predicate1;
      Predicate<Object> predicate2 = NotNullPredicate.notNullPredicate();
      predicateArray0[1] = predicate2;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      anyPredicate0.getPredicates();
      Predicate<Object> predicate3 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) anyPredicate0);
      IteratorUtils.matchesAll((Iterator<PriorityQueue<SQLSyntaxErrorException>>) singletonListIterator0, (Predicate<? super PriorityQueue<SQLSyntaxErrorException>>) predicate3);
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLDataException0, 1703);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("}8ZnoMh");
      PriorityQueue<SQLSyntaxErrorException> priorityQueue0 = new PriorityQueue<SQLSyntaxErrorException>();
      SingletonListIterator<PriorityQueue<SQLSyntaxErrorException>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<SQLSyntaxErrorException>>(priorityQueue0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) anyPredicate0);
      IteratorUtils.matchesAll((Iterator<PriorityQueue<SQLSyntaxErrorException>>) singletonListIterator0, (Predicate<? super PriorityQueue<SQLSyntaxErrorException>>) predicate0);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0, true);
      singletonIterator0.next();
      IdentityPredicate<SQLException> identityPredicate0 = new IdentityPredicate<SQLException>(sQLTransientConnectionException0);
      IteratorUtils.find((Iterator<SQLTransientConnectionException>) singletonIterator0, (Predicate<? super SQLTransientConnectionException>) identityPredicate0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("}8ZnoMh", "}8ZnoMh", (Throwable) null);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ListIterator<Properties> listIterator0 = IteratorUtils.singletonListIterator(properties1);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      HashMap<SQLDataException, SQLFeatureNotSupportedException> hashMap0 = new HashMap<SQLDataException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<SQLDataException, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, SQLFeatureNotSupportedException>(hashMap0);
      SkippingIterator<SQLDataException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLDataException>) entrySetMapIterator0, 0L);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLDataException>) skippingIterator0, (Predicate<? super SQLDataException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Properties properties0 = new Properties();
      IteratorUtils.singletonIterator(properties0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      ArrayList<Predicate<SQLException>> arrayList0 = new ArrayList<Predicate<SQLException>>();
      NonePredicate<SQLException> nonePredicate0 = new NonePredicate<SQLException>(predicateArray0);
      arrayList0.add((Predicate<SQLException>) nonePredicate0);
      OnePredicate.onePredicate((Collection<? extends Predicate<? super SQLTransientConnectionException>>) arrayList0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|vkm";
      stringArray0[1] = "";
      IteratorUtils.arrayListIterator(stringArray0);
      EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException(",?e#v9");
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLTransientException0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category2;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      locale_CategoryArray0[6] = locale_Category0;
      locale_CategoryArray0[7] = locale_Category0;
      locale_CategoryArray0[8] = locale_Category0;
      SQLWarning sQLWarning0 = new SQLWarning("a?ZbBv", ",?e#v9");
      DefaultEquator<SQLWarning> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(sQLWarning0, (Equator<SQLWarning>) defaultEquator0);
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      EqualPredicate.equalPredicate(enumSet0);
      IteratorUtils.matchesAll((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) equalPredicate0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = (-1558);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, (-1558), (-1558));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[2];
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", (String) null, (int[]) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", 0, batchUpdateException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("]", (int[]) null, sQLNonTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(batchUpdateException1);
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator", "", 0, longArray0, sQLInvalidAuthorizationSpecException0);
      batchUpdateExceptionArray0[0] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", (int[]) null);
      batchUpdateExceptionArray0[1] = batchUpdateException3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, (-2503));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) orderedMapIterator0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) iterator0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      Iterator<SQLTimeoutException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0, (Collection<? super SQLTimeoutException>) priorityQueue0);
      IteratorUtils.asEnumeration((Iterator<?>) iterator1);
      priorityQueue0.add(enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator1, 1703);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
