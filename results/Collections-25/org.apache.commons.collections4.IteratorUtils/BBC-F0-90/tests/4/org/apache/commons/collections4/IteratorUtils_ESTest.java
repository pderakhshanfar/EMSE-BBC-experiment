/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:58:07 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[4];
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.arrayIterator(stringTokenizerArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) resettableIterator0, 14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 10
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Iterator<Locale.FilteringMode> iterator0 = EmptyIterator.emptyIterator();
      ListIteratorWrapper<Locale.FilteringMode> listIteratorWrapper0 = new ListIteratorWrapper<Locale.FilteringMode>(iterator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) enumSet0);
      ZippingIterator<Locale.FilteringMode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Locale.FilteringMode>) listIteratorWrapper0, (Iterator<? extends Locale.FilteringMode>) resettableIterator0, (Iterator<? extends Locale.FilteringMode>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) arrayDeque0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<Locale.FilteringMode, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Locale.FilteringMode, StringTokenizer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.FilteringMode, StringTokenizer>(orderedMapIterator0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.FilteringMode>) comparator0, (Iterator<? extends Locale.FilteringMode>) orderedMapIterator0, (Iterator<? extends Locale.FilteringMode>) abstractMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(locale_FilteringModeArray0, 929, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OrderedMapIterator<Vector<SQLTransientException>, SQLClientInfoException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable0);
      String string0 = IteratorUtils.toString((Iterator<Vector<SQLTransientException>>) orderedMapIterator0, (Transformer<? super Vector<SQLTransientException>, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = EmptyIterator.emptyIterator();
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, 1391);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(onePredicate0, onePredicate0);
      SingletonListIterator<Predicate<Object>> singletonListIterator0 = new SingletonListIterator<Predicate<Object>>(orPredicate0);
      List<Predicate<Object>> list0 = IteratorUtils.toList((Iterator<? extends Predicate<Object>>) singletonListIterator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<Properties> class0 = Properties.class;
      Properties[] propertiesArray0 = IteratorUtils.toArray((Iterator<? extends Properties>) resettableListIterator0, class0);
      assertEquals(0, propertiesArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      ListIterator<LinkedHashSet<SQLException>> listIterator0 = IteratorUtils.singletonListIterator(linkedHashSet0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Iterator<SQLException> iterator0 = EmptyIterator.emptyIterator();
      SkippingIterator<SQLException> skippingIterator0 = IteratorUtils.skippingIterator(iterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("UFg0{iY2x44");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("UFg0{iY2x44");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      int int0 = IteratorUtils.size(nodeListIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedHashSet<SQLException> linkedHashSet0 = new LinkedHashSet<SQLException>();
      ListIterator<LinkedHashSet<SQLException>> listIterator0 = IteratorUtils.singletonListIterator(linkedHashSet0);
      Iterator<Object> iterator0 = IteratorUtils.peekingIterator((Iterator<?>) listIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      arrayList0.add(stringTokenizer0);
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(arrayList0);
      StringTokenizer stringTokenizer1 = IteratorUtils.get((Iterator<StringTokenizer>) loopingListIterator0, 1391);
      assertEquals(0, stringTokenizer1.countTokens());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ArrayDeque<Closure<Object>>[] arrayDequeArray0 = (ArrayDeque<Closure<Object>>[]) Array.newInstance(ArrayDeque.class, 3);
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      arrayDequeArray0[0] = arrayDeque0;
      ResettableIterator<ArrayDeque<Closure<Object>>> resettableIterator0 = IteratorUtils.arrayIterator(arrayDequeArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      ArrayDeque<Closure<Object>> arrayDeque1 = IteratorUtils.find((Iterator<ArrayDeque<Closure<Object>>>) resettableIterator0, (Predicate<? super ArrayDeque<Closure<Object>>>) nonePredicate0);
      assertEquals(0, arrayDeque1.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("BT1h+H+hR=!Z%U@*P", "BT1h+H+hR=!Z%U@*P", 512);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      DataTruncation dataTruncation0 = new DataTruncation(512, true, true, 512, (-628), sQLInvalidAuthorizationSpecException0);
      dataTruncationArray0[0] = dataTruncation0;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<DataTruncation>) objectArrayListIterator0, (Object) dataTruncation0);
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      BoundedIterator<SQLException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLException>) resettableListIterator0, (long) 512, 315L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLWarning>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Boolean>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TreeSet<SQLDataException> treeSet0 = new TreeSet<SQLDataException>();
      SingletonIterator<TreeSet<SQLDataException>> singletonIterator0 = new SingletonIterator<TreeSet<SQLDataException>>(treeSet0);
      Class<SQLRecoverableException>[] classArray0 = (Class<SQLRecoverableException>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("Array class must not be null", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<TreeSet<SQLDataException>>) singletonIterator0, (Transformer<? super TreeSet<SQLDataException>, String>) invokerTransformer0, "Array class must not be null", "Array class must not be null", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Array class must not be null' on 'class java.util.TreeSet' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ServiceLoader<Integer>[] serviceLoaderArray0 = (ServiceLoader<Integer>[]) Array.newInstance(ServiceLoader.class, 5);
      ObjectArrayListIterator<ServiceLoader<Integer>> objectArrayListIterator0 = new ObjectArrayListIterator<ServiceLoader<Integer>>(serviceLoaderArray0, 2);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<Integer>>) objectArrayListIterator0, (Transformer<? super ServiceLoader<Integer>, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      ResettableIterator<String> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends String>) priorityQueue0);
      priorityQueue0.add("");
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) resettableIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.FilteringMode>) enumSet0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ArrayDeque<Closure<Object>> arrayDeque0 = new ArrayDeque<Closure<Object>>();
      SingletonListIterator<ArrayDeque<Closure<Object>>> singletonListIterator0 = new SingletonListIterator<ArrayDeque<Closure<Object>>>(arrayDeque0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<ArrayDeque<Closure<Object>>>) singletonListIterator0, (Predicate<? super ArrayDeque<Closure<Object>>>) nonePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(vector0);
      vector0.add((SQLIntegrityConstraintViolationException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) loopingListIterator0, (Object) vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Comparator<SQLDataException> comparator0 = (Comparator<SQLDataException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTimeoutException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>) resettableIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, (-129L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null, 1313, 1313);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) null, 40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[7];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, (-429));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Properties[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1391, 3525);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) vector0, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 866, 866);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[6];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Closure<SQLInvalidAuthorizationSpecException> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) onePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) closure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OnePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      TreeSet<SQLDataException> treeSet0 = new TreeSet<SQLDataException>();
      SingletonListIterator<TreeSet<SQLDataException>> singletonListIterator0 = new SingletonListIterator<TreeSet<SQLDataException>>(treeSet0);
      String string0 = IteratorUtils.toString((Iterator<TreeSet<SQLDataException>>) singletonListIterator0, (Transformer<? super TreeSet<SQLDataException>, String>) transformer0, "", "I+Fb_Cz]", "");
      assertEquals("I+Fb_Cz][]", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) null, "ioXj*fQ+!F1ZTT(", "zG]Q@p^L", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "c`1I(u[%xm)|x");
      PredicateTransformer<SQLTransientException> predicateTransformer0 = new PredicateTransformer<SQLTransientException>(instanceofPredicate0);
      Boolean boolean0 = predicateTransformer0.transform(sQLTransientConnectionException0);
      Hashtable<Object, Boolean> hashtable0 = new Hashtable<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashtable0);
      Transformer<Boolean, Boolean> transformer1 = IfTransformer.ifTransformer((Predicate<? super Boolean>) instanceofPredicate0, (Transformer<? super Boolean, ? extends Boolean>) transformer0, (Transformer<? super Boolean, ? extends Boolean>) transformer0);
      Iterator<Boolean> iterator0 = IteratorUtils.objectGraphIterator(boolean0, (Transformer<? super Boolean, ? extends Boolean>) transformer1);
      boolean boolean1 = IteratorUtils.matchesAny(iterator0, (Predicate<? super Boolean>) instanceofPredicate0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "ListIterator must not be null", (-1));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null, sQLFeatureNotSupportedException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 36, sQLTransientConnectionException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, 10);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[8];
      ObjectArrayIterator<Locale.FilteringMode> objectArrayIterator0 = new ObjectArrayIterator<Locale.FilteringMode>(locale_FilteringModeArray0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Locale.FilteringMode>) objectArrayIterator0, 1L, (-842L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ListIterator<TreeSet<SQLDataException>> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<TreeSet<SQLDataException>>) listIterator0, (Transformer<? super TreeSet<SQLDataException>, String>) transformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<TreeSet<SQLDataException>>) null, (Transformer<? super TreeSet<SQLDataException>, String>) transformer0, "", "Estimated size must be greater than 0", "");
      assertEquals("Estimated size must be greater than 0", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ListIterator<TreeSet<SQLDataException>> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<TreeSet<SQLDataException>>) listIterator0, (Transformer<? super TreeSet<SQLDataException>, String>) transformer0, "", "z:Cj:", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      arrayList0.add(stringTokenizer0);
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(arrayList0);
      // Undeclared exception!
      IteratorUtils.size(loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      int int0 = IteratorUtils.size(mapIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ArrayList<StringTokenizer> arrayList0 = new ArrayList<StringTokenizer>();
      arrayList0.add((StringTokenizer) null);
      LoopingListIterator<StringTokenizer> loopingListIterator0 = new LoopingListIterator<StringTokenizer>(arrayList0);
      StringTokenizer stringTokenizer0 = IteratorUtils.get((Iterator<StringTokenizer>) loopingListIterator0, 1391);
      assertNull(stringTokenizer0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      boolean boolean0 = IteratorUtils.isEmpty(orderedIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) resettableIterator0, (Predicate<? super SQLTransientConnectionException>) onePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) sQLTransientConnectionExceptionArray0[1]);
      predicateArray0[1] = predicate1;
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) resettableIterator0, (Predicate<? super SQLTransientConnectionException>) onePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Object>) null, (Predicate<? super Object>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Object>) null, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "7By[36hFy", intArray0);
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) null);
      Predicate<SQLException>[] predicateArray0 = (Predicate<SQLException>[]) Array.newInstance(Predicate.class, 3);
      DefaultEquator<SQLException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLException> predicate0 = EqualPredicate.equalPredicate((SQLException) batchUpdateException0, (Equator<SQLException>) defaultEquator0);
      AndPredicate<SQLException> andPredicate0 = new AndPredicate<SQLException>(predicate0, predicate0);
      predicateArray0[1] = (Predicate<SQLException>) andPredicate0;
      PredicateTransformer<SQLTransientException> predicateTransformer0 = new PredicateTransformer<SQLTransientException>(predicateArray0[1]);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apach5.commons.collection(4.map.AbstructHashedMap$HashMapIterator", "org.apach5.commons.collection(4.map.AbstructHashedMap$HashMapIterator");
      Boolean boolean0 = predicateTransformer0.transform(sQLTransientConnectionException0);
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      Transformer<Boolean, Boolean> transformer1 = IfTransformer.ifTransformer((Predicate<? super Boolean>) predicate1, (Transformer<? super Boolean, ? extends Boolean>) transformer0, (Transformer<? super Boolean, ? extends Boolean>) transformer0);
      Iterator<Boolean> iterator0 = IteratorUtils.objectGraphIterator(boolean0, (Transformer<? super Boolean, ? extends Boolean>) transformer1);
      boolean boolean1 = IteratorUtils.matchesAny(iterator0, (Predicate<? super Boolean>) predicate1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      vector0.add(sQLIntegrityConstraintViolationException0);
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(vector0);
      // Undeclared exception!
      IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) loopingListIterator0, (Object) vector0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) onePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Locale.FilteringMode, StringTokenizer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.FilteringMode, StringTokenizer>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Locale.FilteringMode>) abstractMapIteratorDecorator0, (Predicate<? super Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayDeque<Closure<Object>>[] arrayDequeArray0 = (ArrayDeque<Closure<Object>>[]) Array.newInstance(ArrayDeque.class, 3);
      ResettableIterator<ArrayDeque<Closure<Object>>> resettableIterator0 = IteratorUtils.arrayIterator(arrayDequeArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      ArrayDeque<Closure<Object>> arrayDeque0 = IteratorUtils.find((Iterator<ArrayDeque<Closure<Object>>>) resettableIterator0, (Predicate<? super ArrayDeque<Closure<Object>>>) nonePredicate0);
      assertNull(arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OrderedMapIterator<Predicate<Object>, Locale.FilteringMode> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Predicate<Object>, Locale.FilteringMode> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Predicate<Object>, Locale.FilteringMode>(orderedMapIterator0);
      List<Predicate<Object>> list0 = IteratorUtils.toList((Iterator<? extends Predicate<Object>>) abstractOrderedMapIteratorDecorator0);
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) list0);
      SQLWarning sQLWarning0 = IteratorUtils.find((Iterator<SQLWarning>) null, (Predicate<? super SQLWarning>) predicate0);
      assertNull(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) closure0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) null, (Closure<? super SQLInvalidAuthorizationSpecException>) closure0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLInvalidAuthorizationSpecException>) loopingIterator0, (Closure<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("7BMy[36hFy");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "7BMy[36hFy", intArray0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(batchUpdateException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MapIterator<SQLTransactionRollbackException, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MapIterator<DataTruncation, SQLFeatureNotSupportedException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends DataTruncation>) mapIterator0, (-1029));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Properties>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[9];
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 3);
      Class<Properties> class0 = Properties.class;
      Properties[] propertiesArray1 = IteratorUtils.toArray((Iterator<? extends Properties>) objectArrayListIterator0, class0);
      assertNotSame(propertiesArray0, propertiesArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Iterator<Locale.FilteringMode> iterator0 = EmptyIterator.emptyIterator();
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Transformer<SQLException, SQLTimeoutException> transformer0 = ConstantTransformer.nullTransformer();
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTimeoutException>) transformer0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTimeoutException>) iterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null, 61);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.singletonIterator(sQLInvalidAuthorizationSpecException0);
      Iterable<SQLInvalidAuthorizationSpecException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, 0L);
      Iterable<SQLFeatureNotSupportedException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) boundedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLRecoverableException>) null, (Collection<? super SQLRecoverableException>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Iterator<DataTruncation> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<DataTruncation> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends DataTruncation>) iterator0);
      Iterator<SQLException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) vector0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[6];
      ObjectArrayIterator<SQLNonTransientConnectionException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionExceptionArray0, 0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) objectArrayIterator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Iterator<SQLClientInfoException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vector<Iterator<SQLClientInfoException>> vector0 = new Vector<Iterator<SQLClientInfoException>>();
      ResettableListIterator<Iterator<SQLClientInfoException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Iterator<SQLClientInfoException>>) vector0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) onePredicate0;
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends DataTruncation>) resettableListIterator0, (Predicate<? super DataTruncation>) predicateArray0[1]);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Integer integer0 = new Integer(2607);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) singletonListIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) singletonListIterator0, (Predicate<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) null, (Predicate<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("delimiter may not be null");
      ConstantFactory<IIOMetadataNode> constantFactory0 = new ConstantFactory<IIOMetadataNode>(iIOMetadataNode0);
      FactoryTransformer<Object, IIOMetadataNode> factoryTransformer0 = new FactoryTransformer<Object, IIOMetadataNode>(constantFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) null, (Transformer<? super Object, ? extends IIOMetadataNode>) factoryTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) null, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Iterator<SQLRecoverableException>[] iteratorArray0 = (Iterator<SQLRecoverableException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLRecoverableException>) null, (Iterator<? extends SQLRecoverableException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<StringTokenizer>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Integer integer0 = new Integer(1344);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) integer0, 12, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, 386);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[9];
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0, 3);
      Iterator<Properties> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Properties>) objectArrayListIterator0, (Iterator<? extends Properties>) objectArrayListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(onePredicate0, onePredicate0);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      Iterator<?> iterator0 = IteratorUtils.getIterator(predicateArray0[0]);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedMapIterator<Locale.FilteringMode, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<Locale.FilteringMode, StringTokenizer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Locale.FilteringMode, StringTokenizer>(orderedMapIterator0);
      MapIterator<Locale.FilteringMode, StringTokenizer> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Locale.FilteringMode, StringTokenizer>) abstractMapIteratorDecorator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<StringTokenizer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<StringTokenizer>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ArrayDeque<Closure<Object>>[] arrayDequeArray0 = (ArrayDeque<Closure<Object>>[]) Array.newInstance(ArrayDeque.class, 9);
      ResettableIterator<ArrayDeque<Closure<Object>>> resettableIterator0 = IteratorUtils.arrayIterator(arrayDequeArray0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) locale_FilteringMode0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      ArrayDeque<Closure<Object>> arrayDeque0 = IteratorUtils.find((Iterator<ArrayDeque<Closure<Object>>>) resettableIterator0, (Predicate<? super ArrayDeque<Closure<Object>>>) nullIsFalsePredicate0);
      assertNull(arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, (-4004), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.functors.NOPClosure", "ICVB", sQLNonTransientException0);
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0);
      assertFalse(singletonIterator0.hasNext());
      assertEquals("[java.sql.SQLInvalidAuthorizationSpecException: org.apache.commons.collections4.functors.NOPClosure]", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MapIterator<String, Stack<Object>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<String> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends String>) mapIterator0, (Iterator<? extends String>) mapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Cannot remove element at index {0}.", "Cannot remove element at index {0}.", 3);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<Boolean> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Boolean>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("6J 1.Zn).rv_}(", "6J 1.Zn).rv_}(", (-373));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, (-373), 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Vector<SQLIntegrityConstraintViolationException> vector0 = new Vector<SQLIntegrityConstraintViolationException>();
      LoopingListIterator<SQLIntegrityConstraintViolationException> loopingListIterator0 = new LoopingListIterator<SQLIntegrityConstraintViolationException>(vector0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLIntegrityConstraintViolationException>) loopingListIterator0, (Object) vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("");
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      OrderedMapIterator<String, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends String>) orderedMapIterator0, (Transformer<? super String, ? extends Transformer<Object, IIOMetadataNode>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      ReverseListIterator<Locale.FilteringMode> reverseListIterator0 = new ReverseListIterator<Locale.FilteringMode>(vector0);
      Enumeration<Locale.FilteringMode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) reverseListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) enumeration0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }
}
