/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 02:06:47 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MapIterator<Properties, Properties> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) comparator0, (Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) mapIterator0);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) mapIterator0, (Iterator<? extends Properties>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLInvalidAuthorizationSpecException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(listIterator0);
      ListIterator<SQLTransactionRollbackException> listIterator1 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) listIteratorWrapper0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MapIterator<BatchUpdateException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<BatchUpdateException>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MapIterator<BatchUpdateException, HashMap<Iterator, Predicate>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("NodeList must not be null");
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) mapIterator0, (Transformer<? super BatchUpdateException, String>) constantTransformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLException sQLException0 = new SQLException("", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLException0);
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.singletonIterator(sQLRecoverableException0);
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) resettableIterator0, 1L);
      List<SQLRecoverableException> list0 = IteratorUtils.toList((Iterator<? extends SQLRecoverableException>) skippingIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      assertEquals(1, sQLNonTransientExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(">#B");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      int[] intArray0 = new int[6];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("9;O;$TMO*Z5CK", "", 79, intArray0, sQLIntegrityConstraintViolationException0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) singletonListIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("uHz)|YVf]Y]O43P Eg");
      stack0.add(sQLIntegrityConstraintViolationException0);
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) stack0);
      assertTrue(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("%Hu7VgKkoL.>7=4y", "%Hu7VgKkoL.>7=4y", 3);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 3);
      SQLRecoverableException sQLRecoverableException1 = IteratorUtils.find((Iterator<SQLRecoverableException>) objectArrayListIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      assertEquals("java.sql.SQLRecoverableException: %Hu7VgKkoL.>7=4y", sQLRecoverableException1.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLTransactionRollbackException>) comparator0, (Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientException>) comparator0, (Iterator<? extends SQLNonTransientException>) resettableListIterator0, (Iterator<? extends SQLNonTransientException>) resettableListIterator1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 5);
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(resettableListIterator0);
      iteratorArray0[0] = (Iterator<SQLDataException>) listIteratorWrapper0;
      iteratorArray0[1] = (Iterator<SQLDataException>) resettableListIterator0;
      iteratorArray0[2] = (Iterator<SQLDataException>) resettableListIterator0;
      Vector<SQLDataException> vector0 = new Vector<SQLDataException>();
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(vector0);
      iteratorArray0[3] = (Iterator<SQLDataException>) loopingIterator0;
      iteratorArray0[4] = (Iterator<SQLDataException>) resettableListIterator0;
      Iterator<SQLDataException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OrderedMapIterator<SQLDataException, ArrayList<IIOMetadataNode>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      BoundedIterator<SQLNonTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) orderedMapIterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[2];
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<IIOMetadataNode, SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.iterators.ArrayListIterator");
      IfTransformer<BatchUpdateException, String> ifTransformer0 = new IfTransformer<BatchUpdateException, String>((Predicate<? super BatchUpdateException>) null, constantTransformer0, constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) objectArrayListIterator0, (Transformer<? super BatchUpdateException, String>) ifTransformer0, "List must nt be null", "", "org.apache.commons.collections4.iterators.ArrayListIterator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OrderedMapIterator<Integer, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Integer>) orderedMapIterator0, (Transformer<? super Integer, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      PriorityQueue<SQLIntegrityConstraintViolationException> priorityQueue0 = new PriorityQueue<SQLIntegrityConstraintViolationException>();
      priorityQueue0.add(sQLIntegrityConstraintViolationException0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) priorityQueue0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<?>) resettableIterator0, 952);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Set and List must be empty");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      PriorityQueue<SQLIntegrityConstraintViolationException> priorityQueue0 = new PriorityQueue<SQLIntegrityConstraintViolationException>();
      priorityQueue0.add(sQLIntegrityConstraintViolationException0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) priorityQueue0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      PriorityQueue<SQLIntegrityConstraintViolationException> priorityQueue0 = new PriorityQueue<SQLIntegrityConstraintViolationException>();
      priorityQueue0.add(sQLIntegrityConstraintViolationException0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) priorityQueue0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Properties>) null, (long) 256);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>((Transformer<? super Object, Boolean>) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator(uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<TreeSet<HashSet>>) iterator0, (Predicate<? super TreeSet<HashSet>>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<PriorityQueue<Iterator<Vector>>>) null, 36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) comparator0, (Iterator<? extends SQLFeatureNotSupportedException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Iterator<Properties>[]) null, 38, 1064);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 946, 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((BatchUpdateException[]) null, 3106);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Class<SQLSyntaxErrorException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("`_dX`u'", "`_dX`u'");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("QhE!&8x!}&s-y", (String) null, sQLTransientException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLSyntaxErrorException0, (-434), 676);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TreeSet<SQLTimeoutException>[] treeSetArray0 = (TreeSet<SQLTimeoutException>[]) Array.newInstance(TreeSet.class, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(treeSetArray0, 233, 233);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(batchUpdateExceptionArray0, (-3153));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLException sQLException0 = new SQLException("W>", "W>", 1240);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("W>", sQLException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, hashMap0, sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLClientInfoException0, 1240, (-2786));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-1234));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 0);
      MapIterator<BatchUpdateException, SQLNonTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) mapIterator0, (Iterator<? extends BatchUpdateException>) mapIterator0, (Iterator<? extends BatchUpdateException>) mapIterator0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("[", (Class<?>[]) classArray0, (Object[]) classArray0);
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) zippingIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "delimiter may not be null", "Rv'P");
      assertEquals("delimiter may not be nullRv'P", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Transformer<BatchUpdateException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) null, (Transformer<? super BatchUpdateException, String>) transformer0, "", "", "W@CpUFutoiV+8 v");
      assertEquals("W@CpUFutoiV+8 v", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<SQLSyntaxErrorException> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Iterator<SQLSyntaxErrorException> iterator0 = serviceLoader0.iterator();
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) iterator0, 265);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[2];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "org.apache.commons.collections4.functors.NullPredicate", (-2838));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLTransactionRollbackException0);
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      Transformer<Object, Locale.FilteringMode> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, ? extends Locale.FilteringMode>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) iterator0, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) null, 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[4];
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.iterators.ArrayListIterator");
      String string0 = IteratorUtils.toString((Iterator<BatchUpdateException>) objectArrayListIterator0, (Transformer<? super BatchUpdateException, String>) constantTransformer0, "List must nt be null", "p88BO~]ea\"NVKGLRG}", "");
      assertEquals("p88BO~]ea\"NVKGLRG}org.apache.commons.collections4.iterators.ArrayListIteratorList must nt be nullorg.apache.commons.collections4.iterators.ArrayListIteratorList must nt be nullorg.apache.commons.collections4.iterators.ArrayListIteratorList must nt be nullorg.apache.commons.collections4.iterators.ArrayListIterator", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<Integer>) null, (Transformer<? super Integer, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MapIterator<BatchUpdateException, HashMap<Iterator, Predicate>> mapIterator0 = IteratorUtils.emptyMapIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) mapIterator0, (Transformer<? super BatchUpdateException, String>) constantTransformer0, ")", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator((BatchUpdateException) null);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("tT3 8tWP6^gI^XT%", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, String>) invokerTransformer0, (String) null, "ListIterator must not be null", " must be Comparable");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator((BatchUpdateException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, String>) null, "[", "org.apache.commons.collections4.bidimap.TreeBidiMap$InverseViewMapEntryIterator", "%/*'RdWYcJ-m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MapIterator<BatchUpdateException, HashMap<Iterator, Predicate>> mapIterator0 = IteratorUtils.emptyMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("8N9H2=[|U", "8N9H2=[|U");
      ListIterator<SQLNonTransientException> listIterator0 = IteratorUtils.singletonListIterator((SQLNonTransientException) sQLIntegrityConstraintViolationException0);
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<TreeSet<HashSet>>) null, (Predicate<? super TreeSet<HashSet>>) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 3);
      SQLRecoverableException sQLRecoverableException0 = IteratorUtils.find((Iterator<SQLRecoverableException>) objectArrayListIterator0, (Predicate<? super SQLRecoverableException>) predicate0);
      assertNull(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0, 1);
      SQLRecoverableException sQLRecoverableException0 = IteratorUtils.find((Iterator<SQLRecoverableException>) objectArrayListIterator0, (Predicate<? super SQLRecoverableException>) onePredicate0);
      assertNull(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector<Predicate<Object>> vector0 = new Vector<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) vector0);
      DataTruncation dataTruncation0 = new DataTruncation(1, true, false, 1, 1705);
      ConstantFactory<DataTruncation> constantFactory0 = new ConstantFactory<DataTruncation>(dataTruncation0);
      Transformer<Object, DataTruncation> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends DataTruncation>) constantFactory0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, nullIsFalsePredicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) transformedPredicate0);
      assertNull(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OrderedMapIterator<SQLRecoverableException, SQLFeatureNotSupportedException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLFeatureNotSupportedException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLRecoverableException, SQLFeatureNotSupportedException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLRecoverableException>) abstractOrderedMapIteratorDecorator0, (Predicate<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) null, comparator0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) orderedMapIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      assertNull(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      BoundedIterator<IIOMetadataNode> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0, 767L);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<IIOMetadataNode>) boundedIterator0, (Closure<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLNonTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Closure<IIOMetadataNode> closure0 = ExceptionClosure.exceptionClosure();
      IteratorUtils.apply((Iterator<IIOMetadataNode>) mapIterator0, (Closure<? super IIOMetadataNode>) closure0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(uniquePredicate0);
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("next() must have been called for remove() to function", "next() must have been called for remove() to function");
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTransientException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, IIOMetadataNode> hashMap0 = new HashMap<SQLFeatureNotSupportedException, IIOMetadataNode>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, IIOMetadataNode>(hashMap0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(entrySetMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("Closure must not be null", "Closure must not be null");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[1];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) resettableListIterator0, (-1210));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator((BatchUpdateException) null);
      Transformer<Object, Locale.FilteringMode> transformer0 = ExceptionTransformer.exceptionTransformer();
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) listIterator0);
      LoopingListIterator<BatchUpdateException> loopingListIterator0 = new LoopingListIterator<BatchUpdateException>(list0);
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) loopingListIterator0, (Transformer<? super BatchUpdateException, ? extends Locale.FilteringMode>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIteratorWrapper<SQLTransactionRollbackException> listIteratorWrapper0 = new ListIteratorWrapper<SQLTransactionRollbackException>(listIterator0);
      ListIterator<SQLTransactionRollbackException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) listIteratorWrapper0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      Iterable<SQLNonTransientException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Hashtable<SQLDataException, Integer> hashtable0 = new Hashtable<SQLDataException, Integer>();
      EntrySetMapIterator<SQLDataException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLDataException, Integer>(hashtable0);
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) entrySetMapIterator0, (Iterator<? extends SQLDataException>) entrySetMapIterator0, (Iterator<? extends SQLDataException>) entrySetMapIterator0);
      Iterable<SQLDataException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLDataException>) zippingIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null, (Collection<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, IIOMetadataNode> hashMap0 = new HashMap<SQLFeatureNotSupportedException, IIOMetadataNode>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, IIOMetadataNode>(hashMap0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) arrayList0);
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Enumeration<SQLSyntaxErrorException> enumeration0 = (Enumeration<SQLSyntaxErrorException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      ResettableListIterator<SQLIntegrityConstraintViolationException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLIntegrityConstraintViolationException>) stack0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<Object> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<?>) resettableListIterator0, (Predicate<? super Object>) predicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      DataTruncation dataTruncation0 = new DataTruncation(3342, true, true, 10, 1000, sQLClientInfoException0);
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<?>) singletonListIterator0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 5);
      Vector<SQLInvalidAuthorizationSpecException> vector0 = new Vector<SQLInvalidAuthorizationSpecException>(100);
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(vector0);
      iteratorArray0[0] = (Iterator<SQLInvalidAuthorizationSpecException>) loopingIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iteratorArray0[0], (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) iteratorArray0[0], (Predicate<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      MapIterator<BatchUpdateException, HashMap<Iterator, Predicate>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends BatchUpdateException>) mapIterator0, (Predicate<? super BatchUpdateException>) uniquePredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Transformer<Object, Locale.FilteringMode> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) null, (Transformer<? super BatchUpdateException, ? extends Locale.FilteringMode>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator((BatchUpdateException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, ? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MapIterator<BatchUpdateException, SQLRecoverableException> mapIterator0 = IteratorUtils.emptyMapIterator();
      OrderedMapIterator<BatchUpdateException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLTimeoutException>(orderedMapIterator0);
      MapIterator<BatchUpdateException, SQLTransientException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLTransientException>) abstractOrderedMapIteratorDecorator0);
      AbstractMapIteratorDecorator<BatchUpdateException, SQLTransientException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<BatchUpdateException, SQLTransientException>(mapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>) mapIterator0, (Iterator<? extends BatchUpdateException>) null, (Iterator<? extends BatchUpdateException>) abstractMapIteratorDecorator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 100, (-2615));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ServiceLoader<DataTruncation>[] serviceLoaderArray0 = (ServiceLoader<DataTruncation>[]) Array.newInstance(ServiceLoader.class, 5);
      Iterator<?> iterator0 = IteratorUtils.getIterator(serviceLoaderArray0[0]);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLTimeoutException>(orderedMapIterator0);
      MapIterator<BatchUpdateException, SQLTransientException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLTransientException>) abstractOrderedMapIteratorDecorator0);
      MapIterator<BatchUpdateException, SQLTransientException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertSame(mapIterator1, mapIterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("DlA:a|3M^w9M_g$Z00", "The transformer array must not be null");
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[3];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 1, 1);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLInvalidAuthorizationSpecException[]) null, 15, 944);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) orderedIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      SQLWarning sQLWarning0 = new SQLWarning("`_dX`u'", (String) null, sQLDataException0);
      Transformer<SQLWarning, DataTruncation> transformer0 = InvokerTransformer.invokerTransformer(", ");
      Iterator<SQLWarning> iterator0 = IteratorUtils.objectGraphIterator(sQLWarning0, (Transformer<? super SQLWarning, ? extends SQLWarning>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MapIterator<EnumSet<Locale.FilteringMode>, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) mapIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) notPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0, true);
      ListIteratorWrapper<SQLSyntaxErrorException> listIteratorWrapper0 = new ListIteratorWrapper<SQLSyntaxErrorException>(singletonIterator0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) listIteratorWrapper0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 931, (-294));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Vector<SQLException>[] vectorArray0 = (Vector<SQLException>[]) Array.newInstance(Vector.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(vectorArray0, (-2764));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MapIterator<SQLWarning, EnumSet<Locale.FilteringMode>> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLWarning, EnumSet<Locale.FilteringMode>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLWarning, EnumSet<Locale.FilteringMode>>(mapIterator0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLWarning>) abstractMapIteratorDecorator0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 783);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MapIterator<Transformer<Object, SQLDataException>, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<Transformer<Object, SQLDataException>> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Transformer<Object, SQLDataException>>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("P/A{X-F*B''/sX$*", "P/A{X-F*B''/sX$*", 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLNonTransientException>) resettableListIterator0, class0);
      Class<SQLIntegrityConstraintViolationException>[] classArray0 = (Class<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Class.class, 8);
      InvokerTransformer<Properties, Boolean> invokerTransformer0 = new InvokerTransformer<Properties, Boolean>("", classArray0, sQLNonTransientExceptionArray0);
      Predicate<Properties> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Properties, Boolean>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) null, (Predicate<? super Properties>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      DataTruncation dataTruncation0 = new DataTruncation(3342, true, true, 10, 1000, sQLClientInfoException0);
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(dataTruncation0);
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLWarning>) singletonListIterator0);
      assertTrue(listIterator0.hasNext());
  }
}
