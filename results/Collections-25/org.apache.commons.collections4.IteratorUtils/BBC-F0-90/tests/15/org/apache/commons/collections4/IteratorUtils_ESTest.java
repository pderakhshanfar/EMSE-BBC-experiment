/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 02:04:30 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[7];
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(propertiesArray0[0]);
      ZippingIterator<Properties> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Properties>) objectArrayListIterator0, (Iterator<? extends Properties>) singletonListIterator0, (Iterator<? extends Properties>) singletonListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) iterator0, (Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, LinkedHashSet<IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, LinkedHashSet<IIOMetadataNode>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, LinkedHashSet<IIOMetadataNode>>(orderedMapIterator0);
      MapIterator<SQLInvalidAuthorizationSpecException, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, IIOMetadataNode> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLInvalidAuthorizationSpecException, IIOMetadataNode>(mapIterator0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) abstractMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Iterator<SQLWarning>[] iteratorArray0 = (Iterator<SQLWarning>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Estimated size must be greater than 0", "Estimated size must be greater than 0", 100);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) singletonListIterator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0, (Iterator<? extends SQLTransientConnectionException>) singletonListIterator0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) singletonListIterator0, (Iterator<? extends SQLTransientConnectionException>) zippingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[7];
      ResettableListIterator<ClientInfoStatus> resettableListIterator0 = IteratorUtils.arrayListIterator(clientInfoStatusArray0);
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<ClientInfoStatus>) resettableListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      List<SQLInvalidAuthorizationSpecException> list0 = IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, 1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[9];
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) objectArrayListIterator0);
      assertEquals(9, list0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OrderedMapIterator<PriorityQueue<SQLException>, Hashtable<SQLDataException, SQLInvalidAuthorizationSpecException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<PriorityQueue<SQLException>, Hashtable<SQLDataException, SQLInvalidAuthorizationSpecException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<PriorityQueue<SQLException>, Hashtable<SQLDataException, SQLInvalidAuthorizationSpecException>>(orderedMapIterator0);
      SkippingIterator<PriorityQueue<SQLException>> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<PriorityQueue<SQLException>>) abstractOrderedMapIteratorDecorator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<DataTruncation> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends DataTruncation>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) orderedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 1);
      MapIterator<DataTruncation, ServiceLoader<SQLDataException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[0] = (Iterator<DataTruncation>) mapIterator0;
      Iterator<DataTruncation> iterator0 = IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLWarning> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MapIterator<SQLDataException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) mapIterator0, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[3];
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      ResettableIterator<Predicate<Object>> resettableIterator0 = IteratorUtils.arrayIterator(predicateArray0, 1, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLIntegrityConstraintViolationException, SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<EnumSet<ComparatorPredicate.Criterion>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[7];
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      NullIsExceptionPredicate<Properties> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Properties>(predicate0);
      ListIterator<Properties> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) objectArrayListIterator0, (Predicate<? super Properties>) nullIsExceptionPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) listIterator0, 793);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) null, 1324);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Comparator<SQLInvalidAuthorizationSpecException> comparator0 = (Comparator<SQLInvalidAuthorizationSpecException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) null, 2358L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0, 807, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLRecoverableException[]) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[7];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, (-370));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 125, 949);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-251));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "XS&*f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null, 10, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null, (-821));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((EnumSet<ComparatorPredicate.Criterion>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1451, (-7));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<InstanceofPredicate, Transformer<Object, String>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, String>>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) hashMap0, (-2280));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      LoopingListIterator<SQLWarning> loopingListIterator0 = new LoopingListIterator<SQLWarning>(vector0);
      DataTruncation dataTruncation0 = new DataTruncation(125, true, true, 125, 125);
      vector0.add((SQLWarning) dataTruncation0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLWarning>) loopingListIterator0, (Closure<? super SQLWarning>) closure0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = IteratorUtils.toString((Iterator<HashSet<Stack>>) null, (Transformer<? super HashSet<Stack>, String>) transformer0, "delimiter may not be null", "delimiter may not be null", "4'[A*M.");
      assertEquals("delimiter may not be null4'[A*M.", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      DataTruncation dataTruncation0 = new DataTruncation(1324, false, false, (-1), 5);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", ":PVbv,I+w8_TOp`>v", 5, dataTruncation0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableIterator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, hashtable0);
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      List<SQLClientInfoException> list0 = IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) singletonListIterator0, 189);
      assertTrue(list0.contains(sQLClientInfoException0));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) loopingListIterator0, (-1404L), (-1404L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableIterator0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(equalPredicate0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(nullIsFalsePredicate0);
      HashMap<InstanceofPredicate, Transformer<Object, String>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashMap0);
      String string0 = IteratorUtils.toString((Iterator<Vector<EnumSet>>) iterator0, (Transformer<? super Vector<EnumSet>, String>) transformer0, "O*Z`hacg<}", "kMer5\"?zCqt4", "");
      assertEquals("kMer5\"?zCqt4null", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", "");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      int int0 = IteratorUtils.size(nodeListIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[7];
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) objectArrayListIterator0, 793);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 786
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, true);
      boolean boolean0 = IteratorUtils.isEmpty(singletonIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OrderedIterator<SQLException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      boolean boolean0 = IteratorUtils.isEmpty(orderedIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Properties properties0 = new Properties();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, true);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Properties>) singletonIterator0, (Predicate<? super Properties>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, true);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Properties>) singletonIterator0, (Predicate<? super Properties>) predicateArray0[1]);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Properties>) null, (Predicate<? super Properties>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OrderedMapIterator<Properties, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Properties>) orderedMapIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1323).when(comparator0).compare(any() , any());
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) predicate0, comparator0);
      DataTruncation dataTruncation0 = new DataTruncation(1324, false, false, (-1), 5);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", ":PVbv,I+w8_TOp`>v", 5, dataTruncation0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      boolean boolean0 = IteratorUtils.contains((Iterator<PriorityQueue<SQLException>>) null, (Object) orderedMapIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientConnectionException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2630, 0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) singletonIterator0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      IteratorUtils.find((Iterator<SQLTransientException>) singletonIterator0, (Predicate<? super SQLTransientException>) orPredicate0);
      Properties properties0 = new Properties();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("prefix may not be null", "prefix may not be null");
      OrderedIterator<SQLDataException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<SQLDataException> class0 = SQLDataException.class;
      IteratorUtils.toArray((Iterator<? extends SQLDataException>) orderedIterator0, class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("S}");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransactionRollbackException0.forEach(consumer0);
      assertEquals("S}", sQLTransactionRollbackException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("Cannot store a duplicate value (\"", "Cannot store a duplicate value (\"", (-382));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) sQLDataException0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      SQLTransientException sQLTransientException0 = IteratorUtils.find((Iterator<SQLTransientException>) null, (Predicate<? super SQLTransientException>) predicate0);
      assertNull(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLTransientException>) singletonIterator0, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      LoopingListIterator<SQLWarning> loopingListIterator0 = new LoopingListIterator<SQLWarning>(vector0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLWarning>) loopingListIterator0, (Closure<? super SQLWarning>) closure0);
      assertFalse(loopingListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vector<SQLWarning> vector0 = new Vector<SQLWarning>();
      LoopingListIterator<SQLWarning> loopingListIterator0 = new LoopingListIterator<SQLWarning>(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLWarning>) loopingListIterator0, (Closure<? super SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      SingletonIterator<SQLWarning> singletonIterator0 = new SingletonIterator<SQLWarning>((SQLWarning) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      SwitchClosure<SQLException> switchClosure0 = new SwitchClosure<SQLException>(predicateArray0, closureArray0, closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLWarning>) singletonIterator0, (Closure<? super SQLWarning>) switchClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("prefix may not be null", "l,&", false);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("4>", "", 61, (Throwable) null);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTransientException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResettableIterator<Properties> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[2];
      ObjectArrayIterator<SQLClientInfoException> objectArrayIterator0 = new ObjectArrayIterator<SQLClientInfoException>(sQLClientInfoExceptionArray0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      SQLClientInfoException[] sQLClientInfoExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLClientInfoException>) objectArrayIterator0, class0);
      assertNotSame(sQLClientInfoExceptionArray1, sQLClientInfoExceptionArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("K", "", 1);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) singletonListIterator0, (-382));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (-646));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLDataException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(arrayList0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      ListIterator<SQLDataException> listIterator0 = stack0.listIterator();
      ListIterator<SQLException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLException>) listIterator0);
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends Closure<SQLException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OrderedMapIterator<DataTruncation, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterable<SQLWarning> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLWarning>) orderedMapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterable<SQLTransactionRollbackException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, BatchUpdateException>(orderedMapIterator0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) orderedMapIterator0);
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>(list0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) arrayList0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ArrayList<SQLException> arrayList1 = new ArrayList<SQLException>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null, (Collection<? super SQLSyntaxErrorException>) arrayList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, BatchUpdateException>(orderedMapIterator0);
      Enumeration<SQLSyntaxErrorException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0, (Collection<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 8);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) resettableIterator0;
      List<InstanceofPredicate> list0 = IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) iteratorArray0[0]);
      ResettableIterator<InstanceofPredicate> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) list0);
      assertFalse(resettableIterator1.equals((Object)resettableIterator0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Properties>) resettableListIterator0, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) null, (Predicate<? super SQLDataException>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("/)4`9", "Wc", 0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLIntegrityConstraintViolationException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransientException0);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransientConnectionException0);
      Predicate<SQLTransientConnectionException> predicate0 = NullPredicate.nullPredicate();
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) null, (Predicate<? super SQLWarning>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      InvokerTransformer<Object, Properties> invokerTransformer0 = new InvokerTransformer<Object, Properties>("", (Class<?>[]) null, (Object[]) null);
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLException>) orderedMapIterator0, (Transformer<? super SQLException, ? extends Properties>) invokerTransformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InvokerTransformer<Object, Properties> invokerTransformer0 = new InvokerTransformer<Object, Properties>("", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) null, (Transformer<? super SQLException, ? extends Properties>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MapIterator<SQLDataException, ArrayList<SQLDataException>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLException>) mapIterator0, (Transformer<? super SQLException, ? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLDataException>) resettableIterator0, (-1877L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Transformer<SQLInvalidAuthorizationSpecException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1324, false, false, (-1), 5);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[]", "", 2750, dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, 0, 1324);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OrderedMapIterator<Properties, SQLIntegrityConstraintViolationException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<Properties> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Properties>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[8];
      ResettableIterator<SQLTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientConnectionException[]) null, 0, (-1818));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0, (-2429), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "IkNf<;'<`B", 123);
      ConstantTransformer<SQLException, SQLTransientConnectionException> constantTransformer0 = new ConstantTransformer<SQLException, SQLTransientConnectionException>(sQLTransientConnectionException0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransientConnectionException0, (Transformer<? super SQLTransientConnectionException, ? extends SQLTransientConnectionException>) constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) iterator0, (Predicate<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) resettableListIterator0, 1984L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[9];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<InstanceofPredicate, Transformer<Object, String>> hashMap0 = new HashMap<InstanceofPredicate, Transformer<Object, String>>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) hashMap0, 24, 2069);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedHashSet<Integer>[] linkedHashSetArray0 = (LinkedHashSet<Integer>[]) Array.newInstance(LinkedHashSet.class, 3);
      ResettableListIterator<LinkedHashSet<Integer>> resettableListIterator0 = IteratorUtils.arrayListIterator(linkedHashSetArray0, 3);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableListIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      SingletonListIterator<PriorityQueue<SQLException>> singletonListIterator0 = new SingletonListIterator<PriorityQueue<SQLException>>(priorityQueue0);
      boolean boolean0 = IteratorUtils.contains((Iterator<PriorityQueue<SQLException>>) singletonListIterator0, (Object) priorityQueue0);
      assertFalse(singletonListIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "z|To=nlOg')j?c", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OrderedMapIterator<LinkedList<SQLDataException>, InstanceofPredicate> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<LinkedList<SQLDataException>, InstanceofPredicate> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<LinkedList<SQLDataException>, InstanceofPredicate>(orderedMapIterator0);
      AbstractMapIteratorDecorator<LinkedList<SQLDataException>, InstanceofPredicate> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<LinkedList<SQLDataException>, InstanceofPredicate>(abstractOrderedMapIteratorDecorator0);
      MapIterator<LinkedList<SQLDataException>, InstanceofPredicate> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<LinkedList<SQLDataException>, InstanceofPredicate>) abstractMapIteratorDecorator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, (-2280));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLIntegrityConstraintViolationException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }
}
