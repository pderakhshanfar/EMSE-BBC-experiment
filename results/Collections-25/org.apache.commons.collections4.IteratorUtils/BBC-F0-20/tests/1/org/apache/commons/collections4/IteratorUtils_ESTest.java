/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:55:20 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      HashSet<SQLTransactionRollbackException>[] hashSetArray0 = (HashSet<SQLTransactionRollbackException>[]) Array.newInstance(HashSet.class, 6);
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      hashSetArray0[0] = (HashSet<SQLTransactionRollbackException>) linkedHashSet0;
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet1 = new LinkedHashSet<SQLTransactionRollbackException>();
      hashSetArray0[1] = (HashSet<SQLTransactionRollbackException>) linkedHashSet1;
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet2 = new LinkedHashSet<SQLTransactionRollbackException>();
      hashSetArray0[2] = (HashSet<SQLTransactionRollbackException>) linkedHashSet2;
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet3 = new LinkedHashSet<SQLTransactionRollbackException>();
      hashSetArray0[3] = (HashSet<SQLTransactionRollbackException>) linkedHashSet3;
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      hashSetArray0[4] = hashSet0;
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet4 = new LinkedHashSet<SQLTransactionRollbackException>();
      hashSetArray0[5] = (HashSet<SQLTransactionRollbackException>) linkedHashSet4;
      ResettableIterator<HashSet<SQLTransactionRollbackException>> resettableIterator0 = IteratorUtils.arrayIterator(hashSetArray0);
      IteratorUtils.get((Iterator<HashSet<SQLTransactionRollbackException>>) resettableIterator0, 0);
      TreeSet<SQLIntegrityConstraintViolationException>[] treeSetArray0 = (TreeSet<SQLIntegrityConstraintViolationException>[]) Array.newInstance(TreeSet.class, 2);
      TreeSet<SQLIntegrityConstraintViolationException> treeSet0 = new TreeSet<SQLIntegrityConstraintViolationException>();
      treeSetArray0[0] = treeSet0;
      TreeSet<SQLIntegrityConstraintViolationException> treeSet1 = new TreeSet<SQLIntegrityConstraintViolationException>();
      treeSetArray0[1] = treeSet1;
      ResettableIterator<TreeSet<SQLIntegrityConstraintViolationException>> resettableIterator1 = IteratorUtils.arrayIterator(treeSetArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<TreeSet<SQLIntegrityConstraintViolationException>>) resettableIterator1, (Predicate<? super TreeSet<SQLIntegrityConstraintViolationException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>(comparator0);
      LoopingIterator<Locale.Category> loopingIterator0 = new LoopingIterator<Locale.Category>(priorityQueue0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>) null, (Iterator<? extends Locale.Category>) loopingIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      HashSet<SQLTransactionRollbackException> hashSet1 = new HashSet<SQLTransactionRollbackException>();
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      HashSet<SQLTransactionRollbackException> hashSet2 = new HashSet<SQLTransactionRollbackException>();
      HashSet<SQLTransactionRollbackException> hashSet3 = new HashSet<SQLTransactionRollbackException>(linkedHashSet0);
      HashSet<SQLTransactionRollbackException>[] hashSetArray0 = (HashSet<SQLTransactionRollbackException>[]) Array.newInstance(HashSet.class, 2);
      hashSetArray0[0] = hashSet2;
      hashSetArray0[1] = hashSet1;
      ResettableIterator<HashSet<SQLTransactionRollbackException>> resettableIterator0 = IteratorUtils.arrayIterator(hashSetArray0);
      HashSet<SQLTransactionRollbackException> hashSet4 = IteratorUtils.get((Iterator<HashSet<SQLTransactionRollbackException>>) resettableIterator0, 0);
      assertSame(hashSet4, hashSet2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      UniquePredicate.uniquePredicate();
      IteratorUtils.getIterator(uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.singletonListIterator((StringTokenizer) null);
      Iterator<StringTokenizer> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>) listIterator0, (Iterator<? extends StringTokenizer>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 9
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("Ed5V$W|=)tw~)c/kRZ(");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("Ed5V$W|=)tw~)c/kRZ(", "Ed5V$W|=)tw~)c/kRZ(");
      sQLDataExceptionArray0[3] = sQLDataException3;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1593);
      longArray0[1] = (long) (-1593);
      longArray0[2] = (long) (-1593);
      longArray0[3] = (long) (-1593);
      longArray0[4] = (long) (-1593);
      longArray0[5] = (long) (-1593);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("7", "", (-1593), longArray0, sQLDataException1);
      SQLDataException sQLDataException4 = new SQLDataException("", batchUpdateException0);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException();
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException();
      sQLDataExceptionArray0[6] = sQLDataException6;
      SQLDataException sQLDataException7 = new SQLDataException("", "", (-1593), sQLDataException3);
      sQLDataExceptionArray0[7] = sQLDataException7;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      Integer integer0 = new Integer((-1593));
      IteratorUtils.contains((Iterator<SQLDataException>) objectArrayIterator0, (Object) integer0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[8];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("7");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("$6]V", "The collections must not be null", 3295, sQLTimeoutException2);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("org.apache.commons.collections4.map.AbstractHashedMap$KeySetIterator", "0S[`eQ<nXV9n~v", 1073741824, sQLDataException4);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      SQLTimeoutException sQLTimeoutException7 = new SQLTimeoutException("Transformers must not be null", "", 5, sQLTimeoutException3);
      sQLTimeoutExceptionArray0[7] = sQLTimeoutException7;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLException>) resettableIterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xB eq.&8z)!Z");
      String string0 = "e}Yp$CaY;%qx\\7_";
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("e}Yp$CaY;%qx\u0007_");
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) singletonIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      MapIterator<String, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends String>) mapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Class<SQLFeatureNotSupportedException>[] classArray0 = (Class<SQLFeatureNotSupportedException>[]) Array.newInstance(Class.class, 6);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      classArray0[0] = class0;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      classArray0[1] = class1;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      classArray0[2] = class2;
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      classArray0[3] = class3;
      Class<SQLFeatureNotSupportedException> class4 = SQLFeatureNotSupportedException.class;
      classArray0[4] = class4;
      Class<SQLFeatureNotSupportedException> class5 = SQLFeatureNotSupportedException.class;
      classArray0[5] = class5;
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("x", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, uniquePredicate0);
      ConstantTransformer.constantTransformer((Boolean) null);
      Transformer<Object, Boolean> transformer1 = new ConstantTransformer<Object, Boolean>((Boolean) null);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer1);
      IteratorUtils.filteredIterator((Iterator<? extends String>) mapIterator0, (Predicate<? super String>) transformerPredicate0);
      UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<String>) mapIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<SQLIntegrityConstraintViolationException>>) null, (Transformer<? super ServiceLoader<SQLIntegrityConstraintViolationException>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<Locale.Category>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<String>) null, (Closure<? super String>) closure0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLWarning sQLWarning0 = new SQLWarning();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      MapIterator<String, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.toListIterator((Iterator<? extends String>) mapIterator0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(309, false, false, 769, 309);
      Transformer<DataTruncation, DataTruncation> transformer0 = CloneTransformer.cloneTransformer();
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) iterator0, 769);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      ReverseListIterator<SQLException> reverseListIterator0 = new ReverseListIterator<SQLException>(arrayList0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLException>) reverseListIterator0, (Closure<? super SQLException>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) null, 81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLException>) null, (Closure<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      IteratorUtils.loopingListIterator((List<Object>) arrayList0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      String string0 = " tL_q`Ma?3|nA=#";
      sQLIntegrityConstraintViolationException0.initCause((Throwable) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) listIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) null, " tL_q`Ma?3|nA=#", "org.apache.commons.collections4.iterators.BoundedIterator", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MapIterator<Integer, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      EmptyListIterator.resettableEmptyListIterator();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "", (Throwable) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException0;
      sQLDataExceptionArray0[2] = sQLDataException0;
      sQLDataExceptionArray0[3] = sQLDataException0;
      sQLDataExceptionArray0[4] = sQLDataException0;
      sQLDataExceptionArray0[5] = sQLDataException0;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      SQLWarning sQLWarning0 = new SQLWarning("NEUKZ[pJ3>", "", sQLDataException0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLWarning0);
      IteratorUtils.matchesAny((Iterator<SQLDataException>) objectArrayIterator0, (Predicate<? super SQLDataException>) equalPredicate0);
      Properties properties0 = new Properties();
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(properties0, (Equator<Object>) null);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(equalPredicate1, uniquePredicate0);
      MapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> mapIterator1 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLTimeoutException, SQLFeatureNotSupportedException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLTimeoutException, SQLFeatureNotSupportedException>(mapIterator1);
      IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) mapIterator1, 1);
      SkippingIterator<Integer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Integer>) mapIterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      NOPClosure.nopClosure();
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) null, (Predicate<? super String>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      ReverseListIterator<SQLException> reverseListIterator0 = new ReverseListIterator<SQLException>(arrayList0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLException>) reverseListIterator0, (Closure<? super SQLException>) closure0);
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      EmptyListIterator.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) uniquePredicate0);
      NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
      IteratorUtils.emptyMapIterator();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ArrayListIterator<SQLTimeoutException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTimeoutException>(iIOMetadataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      int int0 = 10;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("iV", "iV", 10);
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      IteratorUtils.toArray(iterator0);
      String string0 = "suffix may not be null";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("suffix may not be null", "iV", 0);
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "suffix may not be null";
      stringArray0[1] = "suffix may not be null";
      stringArray0[2] = "iV";
      stringArray0[3] = "suffix may not be null";
      stringArray0[4] = "iV";
      stringArray0[5] = "suffix may not be null";
      stringArray0[6] = "suffix may not be null";
      ObjectArrayIterator<String> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0, 0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NOPClosure.nopClosure();
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("HL[B%:}e-H{B~:");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[4];
      SQLDataException sQLDataException0 = new SQLDataException("HL[B%:}e-H{B~:");
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("GIdAUI,c1k*", "GIdAUI,c1k*", (-1));
      sQLDataExceptionArray0[2] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("HL[B%:}e-H{B~:", "HL[B%:}e-H{B~:", (-1));
      sQLDataExceptionArray0[3] = sQLDataException2;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLDataException>) objectArrayIterator0, (Predicate<? super SQLDataException>) nonePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MapIterator<SQLDataException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<Locale.Category> class0 = Locale.Category.class;
      IteratorUtils.toArray((Iterator<? extends Locale.Category>) resettableIterator0, class0);
      UniquePredicate<IIOMetadataNode> uniquePredicate0 = new UniquePredicate<IIOMetadataNode>();
      EmptyListIterator.emptyListIterator();
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) mapIterator0);
      assertEquals("[]", string0);
      
      Integer[] integerArray0 = new Integer[7];
      int int0 = 14;
      Integer integer0 = new Integer(14);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-570));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(7);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      Predicate<Integer> predicate0 = EqualPredicate.equalPredicate((Integer) int0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Integer>) objectArrayIterator0, (Predicate<? super Integer>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NOPClosure.nopClosure();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      SQLWarning sQLWarning0 = new SQLWarning("Iterator must not be null", "Iterator must not be null");
      SQLDataException sQLDataException0 = new SQLDataException("Iterator must not be null", sQLWarning0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("Iterator must not be null", (String) null, sQLWarning0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("]=Q'Aph~");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("w6 &f3]|gD?/K=@", sQLDataException0);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("w6 &f3]|gD?/K=@", sQLDataException1);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException();
      sQLDataExceptionArray0[5] = sQLDataException5;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 1, 1);
      BoundedIterator<SQLDataException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLDataException>) resettableListIterator0, (long) 1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLDataException>) boundedIterator0, (Object) sQLNonTransientConnectionException0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NOPClosure.nopClosure();
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[7];
      SQLWarning sQLWarning0 = new SQLWarning("Iterator must not be null", "Iterator must not be null");
      SQLDataException sQLDataException0 = new SQLDataException("Iterator must not be null", sQLWarning0);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("Iterator must not be null", (String) null, sQLWarning0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("]=Q'Aph~");
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("w6 &f3]|gD?/K=@", sQLDataException0);
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException("w6 &f3]|gD?/K=@", sQLDataException1);
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException();
      sQLDataExceptionArray0[5] = sQLDataException5;
      SQLDataException sQLDataException6 = new SQLDataException("", (String) null, sQLDataException0);
      sQLDataExceptionArray0[6] = sQLDataException6;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      IteratorUtils.matchesAny((Iterator<SQLDataException>) objectArrayIterator0, (Predicate<? super SQLDataException>) instanceofPredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyIterator();
      int int0 = 61;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 2286, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MapIterator<SQLDataException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.matchesAny((Iterator<SQLDataException>) mapIterator0, (Predicate<? super SQLDataException>) instanceofPredicate0);
      DataTruncation dataTruncation0 = new DataTruncation(1, false, false, 93, 12);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[2] = "org.apache.commons.collections4.iterators.PushbackIterator";
      stringArray0[3] = stringArray0[0];
      Factory<String> factory0 = ConstantFactory.constantFactory("org.apache.commons.collections4.iterators.PushbackIterator");
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(factory0);
      ResettableIterator<SQLWarning> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) resettableIterator0, (Transformer<? super SQLWarning, String>) factoryTransformer0, "org.apache.commons.collections4.iterators.PushbackIterator", "org.apache.commons.collections4.iterators.PushbackIterator", stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyIterator();
      Factory<String> factory0 = ConstantFactory.constantFactory("[");
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(factory0);
      EmptyIterator.resettableEmptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLWarning sQLWarning0 = new SQLWarning("", "ww6Y4=DM ZUn(/6sn:", sQLDataException0);
      SingletonListIterator<SQLWarning> singletonListIterator0 = new SingletonListIterator<SQLWarning>(sQLWarning0);
      String string0 = IteratorUtils.toString((Iterator<SQLWarning>) singletonListIterator0, (Transformer<? super SQLWarning, String>) factoryTransformer0, "[", "!%gSrux4TIn,2", "yWRwJLk(u;(WvP-");
      assertEquals("!%gSrux4TIn,2[yWRwJLk(u;(WvP-", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L>li(n<v";
      stringArray0[2] = "org.apache.commons.collections4.iterators.PushbackIterator";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("94ygg?4");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.apache.commons.collections4.IteratorUtils", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("94ygg?4");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("94ygg?4", sQLFeatureNotSupportedException0);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.emptyIterator();
      String string0 = "MQ+)%Ql;LedMfk'?,3";
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 7);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableIterator0;
      iteratorArray0[2] = (Iterator<DataTruncation>) resettableIterator0;
      iteratorArray0[3] = (Iterator<DataTruncation>) resettableIterator0;
      iteratorArray0[4] = (Iterator<DataTruncation>) resettableIterator0;
      iteratorArray0[5] = (Iterator<DataTruncation>) resettableIterator0;
      iteratorArray0[6] = (Iterator<DataTruncation>) resettableIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      String string0 = "94ygg?4";
      InvokerTransformer.invokerTransformer("94ygg?4");
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) mapIterator0, (Transformer<? super Object, ? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(stack0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingListIterator0);
      IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingListIterator0);
      IteratorUtils.toList((Iterator<? extends SQLException>) listIterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>(hashMap0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("`kxSL];gfQl$&");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Collection must not be null", sQLFeatureNotSupportedException0);
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      NOPClosure.nopClosure();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.matchesAny((Iterator<SQLDataException>) resettableIterator0, (Predicate<? super SQLDataException>) instanceofPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("HL[B%:}e-H{B~:");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[3];
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      DataTruncation dataTruncation0 = new DataTruncation(31, true, true, 31, 31, sQLTransientException0);
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      SQLWarning sQLWarning0 = new SQLWarning(sQLTransientException0);
      sQLWarningArray0[1] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning(sQLWarningArray0[0]);
      sQLWarningArray0[2] = sQLWarning1;
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0);
      Class<SQLNonTransientConnectionException>[] classArray0 = (Class<SQLNonTransientConnectionException>[]) Array.newInstance(Class.class, 3);
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      classArray0[0] = class1;
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      classArray0[1] = class2;
      Class<SQLNonTransientConnectionException> class3 = SQLNonTransientConnectionException.class;
      classArray0[2] = class3;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("HL[B%:}e-H{B~:", (Class<?>[]) classArray0, (Object[]) classArray0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("HL[B%:}e-H{B~:");
      Transformer<Object, String> transformer1 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicateArray0[1], transformer0, transformer1);
      Transformer<SQLException, String> transformer2 = IfTransformer.ifTransformer((Predicate<? super SQLException>) instanceofPredicate0, (Transformer<? super SQLException, ? extends String>) ifTransformer0, (Transformer<? super SQLException, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) resettableListIterator0, (Transformer<? super SQLWarning, String>) transformer2, "MQ+)%Ql;LedMfk'?,3", "org.apache.commons.collections4.map.AbstractHashedMap$EntrySetIterator", "}fP-;?X*7FG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'HL[B%:}e-H{B~:' on 'class java.sql.DataTruncation' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      ReverseListIterator<SQLException> reverseListIterator0 = new ReverseListIterator<SQLException>(arrayList0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLException>) reverseListIterator0, (Closure<? super SQLException>) closure0);
      IteratorUtils.toList((Iterator<? extends SQLException>) reverseListIterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) arrayList0);
      SQLException sQLException0 = new SQLException((Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Array class must not be null", "0&=j>(w?g", sQLException0);
      int int0 = 1245;
      ArrayListIterator<DataTruncation> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<DataTruncation>(sQLTransactionRollbackException0, 1245);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>(hashMap0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(",`VlMk", "0m\r54x", (-169), hashtable0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("0m\r54x", "0m\r54x", (-169), sQLClientInfoException0);
      BiFunction<Object, Object, ClientInfoStatus> biFunction0 = (BiFunction<Object, Object, ClientInfoStatus>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable0.computeIfPresent("", biFunction0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", (-169), sQLClientInfoException0);
      hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLFeatureNotSupportedException0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("fromIndex = ", "n:&5{j;", true);
      IteratorUtils.getIterator(stringTokenizer0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      sQLFeatureNotSupportedException0.spliterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLFeatureNotSupportedException0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("r9nPV5wR~6Wu\u0004a", "", true);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MapIterator<SQLDataException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.matchesAny((Iterator<SQLDataException>) mapIterator0, (Predicate<? super SQLDataException>) instanceofPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, instanceofPredicate0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) singletonIterator0, (Predicate<? super IIOMetadataNode>) allPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      SQLException sQLException0 = new SQLException("The closure array must not contain a null closure, index ", "s beyond the end of the array. ");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("s beyond the end of the array. ", "94ygg?4", 12, sQLException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("The closure array must not contain a null closure, index ", "", (-39));
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) listIterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) list0);
      ReverseListIterator<DataTruncation> reverseListIterator0 = null;
      try {
        reverseListIterator0 = new ReverseListIterator<DataTruncation>((List<DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ReverseListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("94ygg?4");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("94ygg?4", sQLFeatureNotSupportedException0);
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) mapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.emptyOrderedIterator();
      int int0 = 100;
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      ReverseListIterator<SQLException> reverseListIterator0 = new ReverseListIterator<SQLException>(arrayList0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLException>) reverseListIterator0, (Closure<? super SQLException>) closure0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.matchesAny((Iterator<SQLDataException>) resettableIterator0, (Predicate<? super SQLDataException>) instanceofPredicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("HL[B%:}e-H{B~:");
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(instanceofPredicate0, predicateArray0[1]);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) singletonIterator0, (Predicate<? super IIOMetadataNode>) predicateArray0[1]);
      assertFalse(singletonIterator0.hasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      EmptyListIterator.resettableEmptyListIterator();
      HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>(hashMap0);
      IteratorUtils.emptyOrderedIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>) null, (Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>(hashMap0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      IteratorUtils.toList((Iterator<? extends SQLException>) listIterator0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ResettableIterator<SQLWarning> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("List must not be null");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLWarning>) resettableIterator0, (Transformer<? super SQLWarning, String>) transformer0, "List must not be null", (String) null, "List must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      DefaultEquator.defaultEquator();
      TreeSet<DataTruncation> treeSet0 = new TreeSet<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) treeSet0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "8IT", 1573);
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      HashSet<SQLTransientConnectionException> hashSet1 = new HashSet<SQLTransientConnectionException>(hashSet0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLWarning> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>) resettableIterator0, (Iterator<? extends SQLWarning>) resettableIterator0);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(instantiateFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLWarning, String>) factoryTransformer0, (String) null, "^,8:IZ`LGZ", "^,8:IZ`LGZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("94ygg?4");
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      ListIterator<StringTokenizer> listIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) null, (Predicate<? super StringTokenizer>) anyPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      DefaultEquator.defaultEquator();
      TreeSet<DataTruncation> treeSet0 = new TreeSet<DataTruncation>();
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) treeSet0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("8IT", "8IT", (-1));
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      HashSet<SQLTransientConnectionException> hashSet1 = new HashSet<SQLTransientConnectionException>(hashSet0);
      ArrayList<DataTruncation> arrayList1 = new ArrayList<DataTruncation>();
      TreeSet<DataTruncation> treeSet1 = new TreeSet<DataTruncation>((Comparator<? super DataTruncation>) null);
      treeSet1.addAll(treeSet0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      SQLDataException sQLDataException0 = new SQLDataException(sQLRecoverableException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("RR;\"", "", sQLRecoverableException1);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException0;
      sQLDataExceptionArray0[2] = sQLDataException0;
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLDataException>) resettableListIterator0, (Object) sQLDataException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      String string0 = "94ygg?4";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("94ygg?4");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("94ygg?4", sQLFeatureNotSupportedException0);
      IteratorUtils.getIterator("94ygg?4");
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[2];
      SQLDataException sQLDataException0 = new SQLDataException("94ygg?4");
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      ObjectArrayIterator<SQLDataException> objectArrayIterator0 = new ObjectArrayIterator<SQLDataException>(sQLDataExceptionArray0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) objectArrayIterator0);
      Iterator<SQLDataException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLDataException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator0, (-621L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[1];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ResettableIterator<ClientInfoStatus> resettableIterator0 = IteratorUtils.arrayIterator(clientInfoStatusArray0, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<Locale.Category> class0 = Locale.Category.class;
      IteratorUtils.toArray((Iterator<? extends Locale.Category>) resettableIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[9];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("~, ");
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode();
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("Q^\"LM3c(!)Ap");
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0, 8);
      IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      ListIterator<SQLWarning> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) null, (Iterator<? extends SQLWarning>) listIterator0, (Iterator<? extends SQLWarning>) listIterator0);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      FactoryTransformer<SQLException, String> factoryTransformer0 = new FactoryTransformer<SQLException, String>(instantiateFactory0);
      String string0 = IteratorUtils.toString((Iterator<SQLWarning>) listIterator0, (Transformer<? super SQLWarning, String>) factoryTransformer0, "8!aQ6#*Q,%WEN2", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L>li(n<v";
      stringArray0[2] = "org.apache.common.collections4.iterators.PushbackIterator";
      stringArray0[3] = "6})ZU";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 0);
      MapIterator<String, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<String, String> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>) resettableListIterator0, (Iterator<? extends String>) mapIterator1);
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) iterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLWarning0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Iterator<String> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends String>) listIterator0, (Predicate<? super String>) predicate1);
      IteratorUtils.find(iterator1, (Predicate<? super String>) predicate0);
      assertTrue(listIterator0.hasPrevious());
      
      Transformer<SQLException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<SQLWarning>) null, (Transformer<? super SQLWarning, String>) transformer0, "8's&R@r.w6Wn\"mb", "8's&R@r.w6Wn\"mb", "");
      assertEquals("8's&R@r.w6Wn\"mb", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      IteratorUtils.toString((Iterator<Integer>) listIterator0);
      IteratorUtils.toListIterator((Iterator<? extends Integer>) listIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, ArrayList<SQLNonTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, ArrayList<SQLNonTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, ArrayList<SQLNonTransientException>>(orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.getIterator("[0]");
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.matchesAny((Iterator<SQLDataException>) resettableIterator0, (Predicate<? super SQLDataException>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Iterator<SQLSyntaxErrorException>>) null, 0L, 177L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException>(mapIterator0);
      IteratorUtils.size(abstractMapIteratorDecorator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) mapIterator0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "node must not be null!";
      stringArray0[2] = "transformer may not be null";
      stringArray0[3] = ">[l";
      stringArray0[4] = "InstantiateTransformer: InstantiationException";
      stringArray0[5] = "g|)M\"5D";
      String string0 = "#QvBdi(m";
      stringArray0[6] = "#QvBdi(m";
      stringArray0[7] = "";
      stringArray0[8] = "";
      int int0 = 9;
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 0, 9);
      IteratorUtils.filteredIterator((Iterator<? extends String>) objectArrayListIterator0, (Predicate<? super String>) predicate1);
      IteratorUtils.find((Iterator<String>) objectArrayListIterator0, (Predicate<? super String>) predicate1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "#QvBdi(m", 1573, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>(hashMap0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      IteratorUtils.emptyOrderedIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      IteratorUtils.toList((Iterator<? extends SQLException>) listIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("i:4{izNDigX");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("i:4{izNDigX");
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("&8jHtp_fGe9y1#");
      iIOMetadataNodeArray0[0] = iIOMetadataNode3;
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode("WFl1CBQ ");
      iIOMetadataNodeArray0[2] = iIOMetadataNode4;
      iIOMetadataNodeArray0[3] = iIOMetadataNode1;
      iIOMetadataNodeArray0[4] = iIOMetadataNode1;
      iIOMetadataNodeArray0[5] = iIOMetadataNode1;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0, 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(linkedList0);
      IteratorUtils.toArray((Iterator<?>) loopingIterator0);
      IteratorUtils.emptyIterator();
      Locale.Category.values();
      FalsePredicate.falsePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LoopingIterator<Boolean> loopingIterator0 = new LoopingIterator<Boolean>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Boolean>) loopingIterator0, (Predicate<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(", ");
      iIOMetadataNode0.hasAttributeNS(", ", "org.apache.commons.collections4.functors.NullIsExceptionPredicate");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode(", ");
      Properties properties0 = new Properties();
      Iterator<Properties> iterator0 = IteratorUtils.objectGraphIterator(properties0, (Transformer<? super Properties, ? extends Properties>) null);
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L>li(n<v";
      DefaultEquator.defaultEquator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("", "L>li(n<v", (-1));
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      HashSet<SQLTransientConnectionException> hashSet1 = new HashSet<SQLTransientConnectionException>(hashSet0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(3096, false, true, 3096, (-1870));
      DefaultEquator<DataTruncation> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(dataTruncation0, (Equator<DataTruncation>) defaultEquator0);
      TreeSet<DataTruncation> treeSet0 = new TreeSet<DataTruncation>();
      IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) treeSet0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.addSuppressed(dataTruncation0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("transformer may not be null", dataTruncation0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Closure<Object> closure0 = NOPClosure.nopClosure();
      EmptyListIterator.emptyListIterator();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[3];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "b3\"$I$", sQLClientInfoException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      HashSet<SQLException> hashSet0 = new HashSet<SQLException>();
      Iterator<SQLException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) hashSet0);
      IteratorUtils.apply(iterator0, (Closure<? super SQLException>) closure0);
      EmptyListIterator.emptyListIterator();
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      ReverseListIterator<SQLException> reverseListIterator0 = new ReverseListIterator<SQLException>(arrayList0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLException>) reverseListIterator0, (Closure<? super SQLException>) closure0);
      Iterator<BatchUpdateException> iterator0 = EmptyIterator.emptyIterator();
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) iterator0, 580L);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 1692;
      intArray0[2] = 1017;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("A:vEx", intArray0);
      Comparator<BatchUpdateException> comparator0 = (Comparator<BatchUpdateException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<BatchUpdateException> comparatorPredicate0 = new ComparatorPredicate<BatchUpdateException>(batchUpdateException0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.matchesAll((Iterator<BatchUpdateException>) boundedIterator0, (Predicate<? super BatchUpdateException>) comparatorPredicate0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[6];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[", batchUpdateException0);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("!C%iw3kf($x+<=5", "U[4ZQ!\"_`4Osd?", (-1));
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("!C%iw3kf($x+<=5", "A:vEx", (-1159));
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("A:vEx", "!C%iw3kf($x+<=5", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "!C%iw3kf($x+<=5");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("A:vEx", "A:vEx", (-2686), sQLTransientConnectionException0);
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.arrayIterator(sQLIntegrityConstraintViolationExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayList<SQLException> arrayList0 = new ArrayList<SQLException>();
      ReverseListIterator<SQLException> reverseListIterator0 = new ReverseListIterator<SQLException>(arrayList0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLException>) reverseListIterator0, (Closure<? super SQLException>) closure0);
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>();
      SingletonIterator<HashSet<SQLTimeoutException>> singletonIterator0 = new SingletonIterator<HashSet<SQLTimeoutException>>(linkedHashSet0);
      IteratorUtils.toString((Iterator<HashSet<SQLTimeoutException>>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) arrayList0, 10, 3599);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L>li(n<v";
      stringArray0[1] = "f#qo]_\"LK";
      stringArray0[2] = "org.apache.commons.collections4.iterators.PushbackIterator";
      stringArray0[3] = "6})ZU";
      int int0 = 0;
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 0);
      MapIterator<String, String> mapIterator0 = IteratorUtils.emptyMapIterator();
      MapIterator<String, String> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>) resettableListIterator0, (Iterator<? extends String>) mapIterator1);
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) iterator0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLWarning0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      Iterator<String> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends String>) listIterator0, (Predicate<? super String>) predicate1);
      IteratorUtils.find(iterator1, (Predicate<? super String>) predicate0);
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      int int1 = (-2711);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2711), (-2711));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      IteratorUtils.arrayIterator(sQLWarningArray0);
      String string0 = ">\\Y+^&;";
      SQLException sQLException0 = new SQLException(">Y+^&;", ">Y+^&;");
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      ObjectArrayListIterator<Integer> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<Integer>((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("&8jHtp_fGe9y1#");
      iIOMetadataNodeArray0[3] = iIOMetadataNode1;
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) iIOMetadataNodeArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NOPClosure.nopClosure();
      IteratorUtils.emptyIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) instanceofPredicate0);
      OrderedMapIterator<IIOMetadataNode, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) orderedMapIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null, 3230, 3230);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[4];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(", ");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode(", ");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode("&8jHtp_fGe9y1#");
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0, 0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      IteratorUtils.arrayIterator(sQLWarningArray0);
      SQLException sQLException0 = new SQLException(">Y+^&;", ">Y+^&;");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(">Y+^&;", sQLException0);
      ConstantTransformer<Object, SQLInvalidAuthorizationSpecException> constantTransformer0 = new ConstantTransformer<Object, SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>();
      ConstantTransformer.constantTransformer(linkedList0);
      int[] intArray0 = new int[0];
      SQLWarning sQLWarning0 = new SQLWarning(">Y+^&;", ">]M:)hF(a07o zO{H<u", (-372));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "tz,Ey71:", intArray0, sQLWarning0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      IteratorUtils.singletonListIterator(batchUpdateException0);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) anyPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) resettableListIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException>(mapIterator0);
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.toString((Iterator<Integer>) resettableListIterator0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) resettableListIterator0);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, ArrayList<SQLNonTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, ArrayList<SQLNonTransientException>> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLFeatureNotSupportedException, ? extends ArrayList<SQLNonTransientException>>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, ArrayList<SQLNonTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, ArrayList<SQLNonTransientException>>(orderedMapIterator1);
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.getIterator(orderedMapIterator0);
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.matchesAny((Iterator<SQLDataException>) resettableIterator0, (Predicate<? super SQLDataException>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Iterator<SQLSyntaxErrorException>>) null, 2048L, (-210L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getTagName();
      Node node0 = iIOMetadataNode0.cloneNode(false);
      IteratorUtils.nodeListIterator(node0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[7];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.map.AbstractLinkedMap$EntrySetIterator", "", 100, hashtable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLClientInfoException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("", "", sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException("", "", 0);
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("9", (String) null);
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException("");
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("", "");
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0, (-4312));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<Locale.Category> class0 = Locale.Category.class;
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 2);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[4] = locale_Category2;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0);
      iteratorArray0[0] = (Iterator<Locale.Category>) resettableIterator0;
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      int int0 = 3096;
      boolean boolean0 = false;
      boolean boolean1 = true;
      int int1 = (-1870);
      DataTruncation dataTruncation0 = new DataTruncation(3096, false, true, 3096, (-1870));
      DefaultEquator<DataTruncation> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(dataTruncation0, (Equator<DataTruncation>) defaultEquator0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Iterator<SQLDataException> iterator0 = null;
      IteratorUtils.matchesAny((Iterator<SQLDataException>) null, (Predicate<? super SQLDataException>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Iterator<SQLSyntaxErrorException>>) null, 50L, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(linkedList0);
      IteratorUtils.toArray((Iterator<?>) loopingIterator0);
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      LinkedList<DataTruncation> linkedList1 = new LinkedList<DataTruncation>();
      IteratorUtils.loopingListIterator((List<DataTruncation>) linkedList1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OrderedIterator<ClientInfoStatus> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends ClientInfoStatus>) orderedIterator0);
      IteratorUtils.isEmpty(listIterator0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>(hashMap0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) entrySetMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) list0);
      Consumer<SQLInvalidAuthorizationSpecException> consumer0 = (Consumer<SQLInvalidAuthorizationSpecException>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      entrySetMapIterator0.forEachRemaining(consumer0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      int int0 = (-15);
      ArrayListIterator<Properties> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Properties>(listIterator1, (-15));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      Predicate<IIOMetadataNode> predicate0 = FalsePredicate.falsePredicate();
      OrPredicate<IIOMetadataNode> orPredicate0 = new OrPredicate<IIOMetadataNode>(predicate0, predicate0);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.toString((Iterator<Integer>) resettableIterator0);
      ListIterator<Integer> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Integer>) resettableIterator0);
      IteratorUtils.unmodifiableListIterator(listIterator0);
      IteratorUtils.emptyIterator();
      OrderedMapIterator<SQLFeatureNotSupportedException, ArrayList<SQLNonTransientException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, ArrayList<SQLNonTransientException>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLFeatureNotSupportedException, ArrayList<SQLNonTransientException>>(orderedMapIterator0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.getIterator((Object) null);
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.emptyIterator();
      Class<DataTruncation> class0 = DataTruncation.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.matchesAny((Iterator<SQLDataException>) resettableIterator1, (Predicate<? super SQLDataException>) instanceofPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Iterator<SQLSyntaxErrorException>>) null, 5757L, (-725L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<IIOMetadataNode, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException>(orderedMapIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("94ygg?4");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("mWVk`?8vR", sQLFeatureNotSupportedException0);
      IteratorUtils.getIterator((Object) null);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      MapIterator<SQLDataException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      ResettableIterator<SQLDataException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) mapIterator0, (Iterator<? extends SQLDataException>) resettableIterator0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLDataException>) zippingIterator0, (Object) locale_Category0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      SkippingIterator<IIOMetadataNode> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) resettableIterator0, 5757L);
      Predicate<IIOMetadataNode> predicate0 = FalsePredicate.falsePredicate();
      OrPredicate<IIOMetadataNode> orPredicate0 = new OrPredicate<IIOMetadataNode>(predicate0, predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) skippingIterator0, (Predicate<? super IIOMetadataNode>) orPredicate0);
      assertTrue(boolean0);
      
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) stack0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(", Size: ", ", Size: ", (-2737));
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-2737);
      intArray0[2] = (-2737);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, ", Size: ", intArray0, sQLTimeoutException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLTimeoutException0);
      IteratorUtils.singletonListIterator(batchUpdateException1);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 1);
      ResettableListIterator<StringTokenizer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends StringTokenizer>) resettableListIterator0, (Predicate<? super StringTokenizer>) anyPredicate0);
      BoundedIterator<StringTokenizer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) listIterator0, 5757L);
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) boundedIterator0);
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(list0);
      iteratorArray0[0] = (Iterator<StringTokenizer>) reverseListIterator0;
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<StringTokenizer>) zippingIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 100
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException>(mapIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("mWVk`?8vR");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("94ygg?4", sQLFeatureNotSupportedException0);
      IteratorUtils.getIterator("mWVk`?8vR");
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      SkippingIterator<IIOMetadataNode> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) resettableIterator0, 5757L);
      Predicate<IIOMetadataNode> predicate0 = FalsePredicate.falsePredicate();
      OrPredicate<IIOMetadataNode> orPredicate0 = new OrPredicate<IIOMetadataNode>(predicate0, predicate0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) skippingIterator0, (Predicate<? super IIOMetadataNode>) orPredicate0);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "InstantiateTransformer: Input object was not an instanceof Class, it was a null object");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLWarning0);
      Stack<SQLFeatureNotSupportedException> stack1 = new Stack<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) stack1);
      IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      stack0.addElement(sQLSyntaxErrorException0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) stack0);
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator1, (Iterator<? extends SQLSyntaxErrorException>) resettableListIterator1);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-5004);
      longArray0[1] = 81L;
      longArray0[2] = 5757L;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("EeO5&@4v*JTWk%", (String) null, (-5004), longArray0, sQLSyntaxErrorException0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      ZippingIterator<SQLException> zippingIterator1 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableListIterator1, (Iterator<? extends SQLException>) zippingIterator0, (Iterator<? extends SQLException>) singletonListIterator0);
      assertNotNull(zippingIterator1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getParentNode();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) resettableIterator0, 5757L);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLException[]) null, (-4292));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      IteratorUtils.arrayIterator(sQLWarningArray0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.arrayIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Ua");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLWarning[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.arrayIterator(sQLWarningArray0);
      IteratorUtils.getIterator(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      IteratorUtils.arrayIterator(sQLWarningArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) null, (Transformer<? super Object, ? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.arrayIterator(sQLWarningArray0);
      SQLException sQLException0 = new SQLException(">Y+^&;", ">Y+^&;");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(">Y+^&;", sQLException0);
      ConstantTransformer<Object, SQLInvalidAuthorizationSpecException> constantTransformer0 = new ConstantTransformer<Object, SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>();
      ConstantTransformer.constantTransformer(linkedList0);
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = ConstantTransformer.constantTransformer(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.transformedIterator((Iterator<?>) resettableIterator0, (Transformer<? super Object, ? extends SQLInvalidAuthorizationSpecException>) transformer0);
      SQLWarning sQLWarning0 = new SQLWarning("", sQLInvalidAuthorizationSpecException0);
      linkedList0.add(sQLWarning0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Stack<SQLTransientException> stack0 = new Stack<SQLTransientException>();
      OrderedMapIterator<DataTruncation, SQLNonTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      SkippingIterator<IIOMetadataNode> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) resettableIterator0, 5757L);
      Predicate<IIOMetadataNode> predicate0 = FalsePredicate.falsePredicate();
      OrPredicate<IIOMetadataNode> orPredicate0 = new OrPredicate<IIOMetadataNode>(predicate0, predicate0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) skippingIterator0, (Predicate<? super IIOMetadataNode>) orPredicate0);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "InstantiateTransformer: Input object was not an instanceof Class, it was a null object");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLWarning0);
      Stack<SQLFeatureNotSupportedException> stack1 = new Stack<SQLFeatureNotSupportedException>();
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLFeatureNotSupportedException>) stack1);
      IteratorUtils.asIterable((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      stack0.addElement(sQLSyntaxErrorException0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) stack0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator1, (Iterator<? extends SQLSyntaxErrorException>) resettableListIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 16;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<ArrayList<EnumSet>, SQLTransactionRollbackException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException>(mapIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("mWVk`?8vR");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("94ygg?4", sQLFeatureNotSupportedException0);
      IteratorUtils.getIterator("mWVk`?8vR");
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      SkippingIterator<IIOMetadataNode> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) resettableIterator0, 5757L);
      Predicate<IIOMetadataNode> predicate0 = FalsePredicate.falsePredicate();
      OrPredicate<IIOMetadataNode> orPredicate0 = new OrPredicate<IIOMetadataNode>(predicate0, predicate0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) skippingIterator0, (Predicate<? super IIOMetadataNode>) orPredicate0);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      String string0 = null;
      String string1 = "InstantiateTransformer: Input object was not an instanceof Class, it was a null object";
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "InstantiateTransformer: Input object was not an instanceof Class, it was a null object");
      OrderedMapIterator<Locale.Category, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, BatchUpdateException>(orderedMapIterator0);
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 0);
      Class<Locale.Category> class0 = Locale.Category.class;
      IteratorUtils.toArray((Iterator<? extends Locale.Category>) abstractOrderedMapIteratorDecorator0, class0);
      SQLWarning sQLWarning1 = new SQLWarning();
      String string2 = "rs ]HMp<L7I";
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      String string3 = "c*4]z^}c";
      int int0 = 1;
      StackTraceElement stackTraceElement0 = new StackTraceElement("c*4]z^}c", "XP8B", (String) null, 1);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string4 = null;
      StackTraceElement stackTraceElement1 = null;
      try {
        stackTraceElement1 = new StackTraceElement((String) null, "rs ]HMp<L7I", "S", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<Properties> linkedList0 = new LinkedList<Properties>();
      Properties properties0 = new Properties();
      linkedList0.add(properties0);
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(linkedList0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<?>) loopingIterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<Locale.Category> class0 = Locale.Category.class;
      Comparator<Locale.Category> comparator0 = (Comparator<Locale.Category>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Locale.Category>[] iteratorArray0 = (Iterator<Locale.Category>[]) Array.newInstance(Iterator.class, 2);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      locale_CategoryArray0[4] = locale_Category4;
      ResettableIterator<Locale.Category> resettableIterator0 = IteratorUtils.arrayIterator(locale_CategoryArray0);
      iteratorArray0[0] = (Iterator<Locale.Category>) resettableIterator0;
      OrderedMapIterator<Locale.Category, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Locale.Category, BatchUpdateException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Locale.Category, BatchUpdateException>(orderedMapIterator0);
      iteratorArray0[1] = (Iterator<Locale.Category>) abstractOrderedMapIteratorDecorator0;
      Iterator<Locale.Category> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Locale.Category>) comparator0, (Iterator<? extends Locale.Category>[]) iteratorArray0);
      IteratorUtils.toArray((Iterator<? extends Locale.Category>) iterator0, class0);
      String string0 = "S'#6iA'%QoB#yL- b";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("S'#6iA'%QoB#yL- b");
      SQLDataException sQLDataException0 = new SQLDataException();
      ArrayListIterator<SQLWarning> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLWarning>(sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      SkippingIterator<IIOMetadataNode> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) resettableIterator0, 5757L);
      Predicate<IIOMetadataNode> predicate0 = FalsePredicate.falsePredicate();
      OrPredicate<IIOMetadataNode> orPredicate0 = new OrPredicate<IIOMetadataNode>(predicate0, predicate0);
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) skippingIterator0, (Predicate<? super IIOMetadataNode>) orPredicate0);
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLSyntaxErrorException>) stack0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null, 849);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OrderedIterator<ClientInfoStatus> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends ClientInfoStatus>) orderedIterator0);
      boolean boolean0 = IteratorUtils.isEmpty(listIterator0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>(hashMap0);
      IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("M IW");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("M IW", "M IW", sQLTransientException0);
      MapIterator<SQLDataException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) mapIterator0, (Iterator<? extends SQLDataException>) mapIterator0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("''ykmCp,u96>gm");
      SQLDataException sQLDataException0 = new SQLDataException("3-jI)", "M IW", sQLTimeoutException0);
      sQLDataException0.fillInStackTrace();
      boolean boolean1 = IteratorUtils.contains((Iterator<SQLDataException>) mapIterator0, (Object) sQLDataException0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 93;
      intArray0[1] = 1073741824;
      intArray0[2] = (-1);
      intArray0[3] = 4071;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("M IW", intArray0, sQLTransactionRollbackException0);
      Transformer<Object, BatchUpdateException> transformer0 = ConstantTransformer.constantTransformer(batchUpdateException0);
      IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      OrderedMapIterator<EnumSet<ComparatorPredicate.Criterion>, LinkedList<Properties>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<EnumSet<ComparatorPredicate.Criterion>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<EnumSet<ComparatorPredicate.Criterion>>) orderedMapIterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      boolean boolean2 = IteratorUtils.matchesAll(iterator0, (Predicate<? super EnumSet<ComparatorPredicate.Criterion>>) predicate0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("06LV)G%d't@2yCq7U");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("''ykmCp,u96>gm", "", sQLTimeoutException0);
      MapIterator<SQLDataException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) mapIterator0, (Iterator<? extends SQLDataException>) mapIterator0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>(3096);
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLDataException>) arrayList0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "N|]0GVidf.>#t0$R/", sQLTransactionRollbackException0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLDataException>) resettableListIterator0, (Object) sQLInvalidAuthorizationSpecException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ResettableListIterator<HashSet<SQLTimeoutException>> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.toString((Iterator<HashSet<SQLTimeoutException>>) resettableListIterator0);
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "[]", 10, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) stack0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("iterator", "iterator", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLSyntaxErrorException0);
      stack0.add(sQLInvalidAuthorizationSpecException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 12);
      DefaultEquator<DataTruncation> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(dataTruncation0, (Equator<DataTruncation>) defaultEquator0);
      OrderedMapIterator<DataTruncation, SQLRecoverableException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLRecoverableException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLRecoverableException>) orderedMapIterator0);
      MapIterator<DataTruncation, SQLRecoverableException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, SQLRecoverableException>) orderedMapIterator1);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsFalsePredicate<SQLWarning> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLWarning>(predicate0);
      IteratorUtils.find((Iterator<DataTruncation>) mapIterator0, (Predicate<? super DataTruncation>) nullIsFalsePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) mapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IteratorUtils.emptyIterator();
      OrderedMapIterator<Integer, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends Properties>) orderedMapIterator0);
      SkippingIterator<Integer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Integer>) orderedMapIterator1, 1L);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      String string0 = IteratorUtils.toString((Iterator<Integer>) skippingIterator0, (Transformer<? super Integer, String>) transformer0);
      assertEquals("[]", string0);
      
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 8);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(linkedList0);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) reverseListIterator0;
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[1] = iterator0;
      OrderedMapIterator<SQLClientInfoException, ArrayDeque<ArrayList>> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<SQLClientInfoException>) orderedMapIterator2;
      MapIterator<SQLClientInfoException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[3] = (Iterator<SQLClientInfoException>) mapIterator0;
      Iterator<SQLClientInfoException>[] iteratorArray1 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray1[0] = iterator0;
      iteratorArray1[1] = (Iterator<SQLClientInfoException>) reverseListIterator0;
      iteratorArray1[2] = (Iterator<SQLClientInfoException>) mapIterator0;
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray1);
      iteratorArray0[4] = (Iterator<SQLClientInfoException>) zippingIterator0;
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(linkedList0);
      iteratorArray0[5] = (Iterator<SQLClientInfoException>) loopingListIterator0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("[]");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("8{`p^x6`A", "[]", 1474);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLDataException>) null, (Object) orderedMapIterator2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("mWVk`?8vR");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("69Jygg?4", sQLFeatureNotSupportedException0);
      IteratorUtils.getIterator(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      IteratorUtils.emptyIterator();
      OrderedMapIterator<Integer, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends Properties>) orderedMapIterator0);
      SkippingIterator<Integer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Integer>) orderedMapIterator1, 1L);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      IteratorUtils.toString((Iterator<Integer>) skippingIterator0, (Transformer<? super Integer, String>) transformer0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 8);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(linkedList0);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) reverseListIterator0;
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[1] = iterator0;
      MapIterator<SQLClientInfoException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[3] = (Iterator<SQLClientInfoException>) mapIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      IteratorUtils.arrayIterator(sQLWarningArray0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 3099, 1100);
      DefaultEquator.defaultEquator();
      DefaultEquator<DataTruncation> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(dataTruncation0, (Equator<DataTruncation>) defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      IteratorUtils.arrayIterator(sQLWarningArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("''ykmCp,u96>gm");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("''ykmCp,u96>gm", "M IW", sQLTransientException0);
      MapIterator<SQLDataException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) mapIterator0, (Iterator<? extends SQLDataException>) mapIterator0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLDataException>) zippingIterator0, (Object) zippingIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      MapIterator<SQLDataException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) mapIterator0, (Iterator<? extends SQLDataException>) mapIterator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "k[yS jO9fkG", (-397));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      String string0 = "Iterator getKey() can only be called after next() and before remove()";
      DataTruncation dataTruncation0 = new DataTruncation((-2013), false, false, 100, (-2013));
      DefaultEquator<DataTruncation> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate.equalPredicate(dataTruncation0, (Equator<DataTruncation>) defaultEquator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 10);
      SQLWarning sQLWarning0 = new SQLWarning("Iterator getKey() can only be called after next() and before remove()", "Iterator getKey() can only be called after next() and before remove()", dataTruncation0);
      int int0 = (-939);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLWarning0, (-939));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      DataTruncation dataTruncation0 = new DataTruncation(3096, false, true, 3096, (-1870));
      DefaultEquator<DataTruncation> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<DataTruncation> predicate0 = EqualPredicate.equalPredicate(dataTruncation0, (Equator<DataTruncation>) defaultEquator0);
      TreeSet<DataTruncation> treeSet0 = new TreeSet<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) treeSet0);
      IteratorUtils.find((Iterator<DataTruncation>) resettableIterator0, (Predicate<? super DataTruncation>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) treeSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) stack0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("iterator", "iterator", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLSyntaxErrorException0);
      stack0.add(sQLInvalidAuthorizationSpecException0);
      SQLException sQLException0 = new SQLException("@6{", "C=9BRd8Maz`");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("iterator", sQLException0);
      ConstantTransformer<Object, SQLInvalidAuthorizationSpecException> constantTransformer0 = new ConstantTransformer<Object, SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException1);
      LinkedList<SQLWarning> linkedList0 = new LinkedList<SQLWarning>();
      ConstantTransformer.constantTransformer(linkedList0);
      IteratorUtils.transformedIterator((Iterator<?>) resettableIterator0, (Transformer<? super Object, ? extends SQLInvalidAuthorizationSpecException>) constantTransformer0);
      SQLWarning sQLWarning0 = new SQLWarning("EK@8&ab9/$EKXhj?Ox", sQLInvalidAuthorizationSpecException0);
      linkedList0.add(sQLWarning0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) null, (Collection<? super SQLTransientException>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IteratorUtils.emptyIterator();
      OrderedMapIterator<Integer, Properties> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<Integer, Properties> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Integer, ? extends Properties>) orderedMapIterator0);
      SkippingIterator<Integer> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Integer>) orderedMapIterator1, 1L);
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      IteratorUtils.toString((Iterator<Integer>) skippingIterator0, (Transformer<? super Integer, String>) transformer0);
      Iterator<SQLClientInfoException>[] iteratorArray0 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 8);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      ReverseListIterator<SQLClientInfoException> reverseListIterator0 = new ReverseListIterator<SQLClientInfoException>(linkedList0);
      iteratorArray0[0] = (Iterator<SQLClientInfoException>) reverseListIterator0;
      Iterator<SQLClientInfoException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[1] = iterator0;
      OrderedMapIterator<SQLClientInfoException, ArrayDeque<ArrayList>> orderedMapIterator2 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<SQLClientInfoException>) orderedMapIterator2;
      MapIterator<SQLClientInfoException, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[3] = (Iterator<SQLClientInfoException>) mapIterator0;
      Iterator<SQLClientInfoException>[] iteratorArray1 = (Iterator<SQLClientInfoException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray1[0] = iterator0;
      iteratorArray1[1] = (Iterator<SQLClientInfoException>) reverseListIterator0;
      iteratorArray1[2] = (Iterator<SQLClientInfoException>) mapIterator0;
      ZippingIterator<SQLClientInfoException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLClientInfoException>[]) iteratorArray1);
      iteratorArray0[4] = (Iterator<SQLClientInfoException>) zippingIterator0;
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(linkedList0);
      iteratorArray0[5] = (Iterator<SQLClientInfoException>) loopingListIterator0;
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>(hashMap0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[]", "9|_`yeqCPKGvR|8s[", 0, hashMap1);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("1:8<w@IG0q%", "sXr+7uQHogKlf]-", 0, map0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("1:8<w@IG0q%", "", map0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException("", map0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException(map0, sQLClientInfoException4);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0, 0, (-1300));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OrderedIterator<ClientInfoStatus> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends ClientInfoStatus>) orderedIterator0);
      IteratorUtils.isEmpty(listIterator0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, SQLFeatureNotSupportedException>(hashMap0);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator1 = IteratorUtils.toListIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      IteratorUtils.emptyOrderedIterator();
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      List<SQLException> list0 = IteratorUtils.toList((Iterator<? extends SQLException>) entrySetMapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) list0);
      int int0 = 0;
      ArrayListIterator<Properties> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Properties>(listIterator1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TreeSet<IIOMetadataNode> treeSet0 = new TreeSet<IIOMetadataNode>();
      IteratorUtils.singletonIterator(treeSet0);
      String string0 = "z'M";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("z'M");
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0);
      // Undeclared exception!
      try { 
        AllPredicate.allPredicate((Collection<? extends Predicate<? super SQLException>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      DataTruncation dataTruncation0 = new DataTruncation(100, false, false, 22, (-2478));
      EmptyMapIterator.emptyMapIterator();
      HashMap<Object, ClientInfoStatus> hashMap0 = new HashMap<Object, ClientInfoStatus>();
      EntrySetMapIterator<Object, ClientInfoStatus> entrySetMapIterator0 = new EntrySetMapIterator<Object, ClientInfoStatus>(hashMap0);
      Iterator<Object> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Object>) entrySetMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      DataTruncation dataTruncation0 = new DataTruncation(10, true, false, (-1), 1065);
      SQLTransientException sQLTransientException0 = new SQLTransientException(dataTruncation0);
      ResettableListIterator<ServiceLoader<SQLSyntaxErrorException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SingletonListIterator<SQLClientInfoException> singletonListIterator0 = new SingletonListIterator<SQLClientInfoException>(sQLClientInfoException0);
      sQLClientInfoException0.fillInStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonListIterator0.forEachRemaining(consumer0);
      IteratorUtils.pushbackIterator((Iterator<? extends SQLClientInfoException>) singletonListIterator0);
      Comparator<Properties> comparator0 = (Comparator<Properties>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 6);
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator1 = new SingletonListIterator<Properties>(properties0);
      Iterator<Properties> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) singletonListIterator1);
      iteratorArray0[0] = iterator0;
      Iterator<Properties> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      iteratorArray0[1] = iterator1;
      Vector<Properties> vector0 = new Vector<Properties>();
      LoopingListIterator<Properties> loopingListIterator0 = new LoopingListIterator<Properties>(vector0);
      iteratorArray0[2] = (Iterator<Properties>) loopingListIterator0;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[3] = (Iterator<Properties>) resettableListIterator0;
      String string0 = "Q=Zb92+@hR7M+";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Q=Zb92+@hR7M+", "uT#M6", 1687);
      ArrayListIterator<Properties> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<Properties>(sQLTimeoutException0, 10, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ResettableListIterator<SQLRecoverableException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) resettableListIterator0, (-2281L), (-2281L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OrderedMapIterator<SQLDataException, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("M IW");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Iterator getKey() can only be called after next() and before remove()", "JeCWeK)E@D", sQLTransientException0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLDataException>) orderedMapIterator0, (Object) sQLTransactionRollbackException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<String>) orderedIterator0, (-1064L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OrderedIterator<SQLSyntaxErrorException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) orderedIterator0);
      OrderedIterator<IIOMetadataNode> orderedIterator1 = IteratorUtils.emptyOrderedIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) orderedIterator1);
      ArrayListIterator<SQLNonTransientConnectionException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLNonTransientConnectionException>(enumeration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ResettableIterator<BatchUpdateException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("transformer may not be null", "[@?43n_E>p2lGlq9dh");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[@?43n_E>p2lGlq9dh", "_4b9Df|0;JOb{dJb", 0);
      sQLFeatureNotSupportedException0.initCause(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 61, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultEquator.defaultEquator();
      TreeSet<DataTruncation> treeSet0 = new TreeSet<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) treeSet0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("8IT", "WJ&J", 1573);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException1;
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException0;
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException0;
      HashSet<SQLTransientConnectionException> hashSet0 = new HashSet<SQLTransientConnectionException>();
      HashSet<SQLTransientConnectionException> hashSet1 = new HashSet<SQLTransientConnectionException>(hashSet0);
      ArrayList<DataTruncation> arrayList0 = new ArrayList<DataTruncation>();
      treeSet0.addAll(arrayList0);
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>();
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) resettableIterator0, 1);
      ReverseListIterator<DataTruncation> reverseListIterator0 = new ReverseListIterator<DataTruncation>(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Ua");
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("prefix may not be null", "", 93, sQLRecoverableException0);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException("<aj}.roS`F", sQLRecoverableException1);
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException("prefix may not be null", sQLRecoverableException1);
      sQLRecoverableExceptionArray0[3] = sQLRecoverableException3;
      SQLRecoverableException sQLRecoverableException4 = new SQLRecoverableException((String) null, "WWzhE2FDCc+", 93, sQLRecoverableException2);
      sQLRecoverableExceptionArray0[4] = sQLRecoverableException4;
      sQLRecoverableException3.getSuppressed();
      SQLRecoverableException sQLRecoverableException5 = new SQLRecoverableException("prefix may not be null", "!rw9DFKQ1bpQ");
      sQLRecoverableExceptionArray0[5] = sQLRecoverableException5;
      SQLRecoverableException sQLRecoverableException6 = new SQLRecoverableException(sQLRecoverableException5);
      sQLRecoverableExceptionArray0[6] = sQLRecoverableException6;
      SQLRecoverableException sQLRecoverableException7 = new SQLRecoverableException("", "");
      sQLRecoverableExceptionArray0[7] = sQLRecoverableException7;
      sQLRecoverableException7.setNextException(sQLRecoverableException3);
      sQLRecoverableException6.addSuppressed(sQLRecoverableException3);
      SQLRecoverableException sQLRecoverableException8 = new SQLRecoverableException("WWzhE2FDCc+", "8IT", 1573);
      sQLRecoverableExceptionArray0[8] = sQLRecoverableException8;
      IteratorUtils.arrayListIterator(sQLRecoverableExceptionArray0);
      OrderedMapIterator<SQLTransientConnectionException, EnumSet<ComparatorPredicate.Criterion>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransientConnectionException>) orderedMapIterator0);
      List<SQLTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) listIterator0, 93);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) listIterator0, 32L, 0L);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 6);
      Class<Properties> class0 = Properties.class;
      classArray0[0] = class0;
      Class<Properties> class1 = Properties.class;
      classArray0[1] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[2] = class2;
      Class<Properties> class3 = Properties.class;
      classArray0[3] = class3;
      Class<Properties> class4 = Properties.class;
      classArray0[4] = class4;
      Class<Properties> class5 = Properties.class;
      classArray0[5] = class5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(classArray0, (-4647));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[0];
      IteratorUtils.arrayIterator(sQLWarningArray0);
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, 0, 3099);
      DefaultEquator<DataTruncation> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<DataTruncation> predicate0 = EqualPredicate.equalPredicate(dataTruncation0, (Equator<DataTruncation>) defaultEquator0);
      IteratorUtils.find((Iterator<DataTruncation>) null, (Predicate<? super DataTruncation>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("mY~tHqy\"Aasx8 ", "emMy-!U>KgU|u", 3, (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("emMy-!U>KgU|u", sQLWarning0);
      sQLWarning0.getStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Iterator<StringTokenizer> iterator0 = null;
      IteratorUtils.size((Iterator<?>) null);
      IteratorUtils.emptyOrderedIterator();
      int int0 = (-1139);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Cf$l;I(DM>7_t=+ |", "Cf$l;I(DM>7_t=+ |", (-1139), (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        sQLClientInfoException1.initCause(sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLSyntaxErrorException: 
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("{70<&?Yaj!eQZii");
      sQLIntegrityConstraintViolationException0.getStackTrace();
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      int int0 = IteratorUtils.size(listIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLSyntaxErrorException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<IIOMetadataNode, SQLSyntaxErrorException>(mapIterator0);
      abstractMapIteratorDecorator0.hasNext();
      IteratorUtils.size(abstractMapIteratorDecorator0);
      ResettableIterator<ComparatorPredicate.Criterion> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      int int0 = 1189;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1189);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[2];
      int int0 = 1217;
      SQLDataException sQLDataException0 = new SQLDataException(", ", "");
      SQLWarning sQLWarning0 = new SQLWarning("SHhL;kL!-xgUI*", "", 1217, sQLDataException0);
      sQLWarningArray0[0] = sQLWarning0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLWarning0);
      SQLException sQLException0 = new SQLException("", "L+F)RAf6;/", sQLNonTransientException0);
      SQLWarning sQLWarning1 = new SQLWarning(sQLException0);
      sQLWarningArray0[1] = sQLWarning1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLWarningArray0, 32, 1217);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) iteratorArray0);
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[4];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(clientInfoStatusArray0, 237, 1806);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TreeSet<Integer>[] treeSetArray0 = (TreeSet<Integer>[]) Array.newInstance(TreeSet.class, 2);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      treeSetArray0[0] = treeSet0;
      TreeSet<Integer> treeSet1 = new TreeSet<Integer>();
      Integer integer0 = new Integer(1363);
      java.util.function.Predicate<Integer> predicate0 = java.util.function.Predicate.isEqual((Object) treeSet0);
      java.util.function.Predicate<Integer> predicate1 = predicate0.negate();
      treeSet1.removeIf(predicate1);
      treeSet0.add(integer0);
      treeSetArray0[1] = treeSet1;
      IteratorUtils.arrayListIterator(treeSetArray0);
      Stack<SQLInvalidAuthorizationSpecException> stack0 = new Stack<SQLInvalidAuthorizationSpecException>();
      LoopingListIterator<SQLInvalidAuthorizationSpecException> loopingListIterator0 = new LoopingListIterator<SQLInvalidAuthorizationSpecException>(stack0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "2", (Throwable) null);
      stack0.add(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLInvalidAuthorizationSpecException>) loopingListIterator0);
      PriorityQueue<DataTruncation>[] priorityQueueArray0 = (PriorityQueue<DataTruncation>[]) Array.newInstance(PriorityQueue.class, 3);
      PriorityQueue<DataTruncation> priorityQueue0 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<DataTruncation> priorityQueue1 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<DataTruncation> priorityQueue2 = new PriorityQueue<DataTruncation>();
      priorityQueueArray0[2] = priorityQueue2;
      // Undeclared exception!
      try { 
        stack0.toArray(priorityQueueArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[6];
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, sQLNonTransientException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0, sQLDataException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException0;
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, (String) null, hashtable0);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("87EvlKkU%V", (String) null, hashtable0, sQLClientInfoException0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException((String) null, (String) null, hashtable0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException4;
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException5;
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 16;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ListIterator<SQLClientInfoException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) listIterator0, 0L, 0L);
      EnumSet<Locale.Category>[] enumSetArray0 = (EnumSet<Locale.Category>[]) Array.newInstance(EnumSet.class, 4);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category1);
      enumSetArray0[0] = enumSet0;
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      enumSetArray0[1] = enumSet1;
      EnumSet<Locale.Category> enumSet2 = EnumSet.copyOf((Collection<Locale.Category>) enumSet0);
      enumSetArray0[2] = enumSet2;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet3 = EnumSet.of(locale_Category2, locale_Category3, locale_Category1);
      enumSetArray0[3] = enumSet3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(enumSetArray0, 703);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedException0.spliterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException>(orderedMapIterator0);
      AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLNonTransientConnectionException, SQLIntegrityConstraintViolationException>(abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) abstractMapIteratorDecorator0, (-2511));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Locale.Category>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Iterator<Locale.Category> iterator0 = null;
      Class<Locale.Category> class0 = Locale.Category.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Locale.Category>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate.instanceOfPredicate(class0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Class<Integer> class1 = Integer.class;
      classArray0[0] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[1] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[2] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[3] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[4] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[5] = class6;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer("|2L1q1X", (Class<?>[]) classArray0, (Object[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      String string0 = "i,qJQ?T4#B\\\\C!\\A";
      String string1 = "'J``|#r`\"l;g5";
      SQLDataException sQLDataException0 = new SQLDataException("i,qJQ?T4#B\\C!A", "'J``|#r`\"l;g5");
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLDataException0;
      int int0 = (-975);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, (-3909), (-975));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "v;<#";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("v;<#");
      int int0 = 0;
      int int1 = (-1453);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iIOMetadataNode0, 0, (-1453));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "jqv-f]oIroOL.", (-657));
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) singletonListIterator0);
      assertNotNull(enumeration0);
  }
}
