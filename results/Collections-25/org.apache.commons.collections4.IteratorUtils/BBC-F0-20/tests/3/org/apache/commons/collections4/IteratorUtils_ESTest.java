/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 12:31:43 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>(comparator0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      ListIterator<InstanceofPredicate> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends InstanceofPredicate>) resettableListIterator0, (Predicate<? super InstanceofPredicate>) predicate0);
      ZippingIterator<InstanceofPredicate> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends InstanceofPredicate>) listIterator0, (Iterator<? extends InstanceofPredicate>) resettableListIterator0, (Iterator<? extends InstanceofPredicate>) listIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.list.TreeList", "org.apache.commons.collections4.list.TreeList");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.list.TreeList", sQLTransientConnectionException0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) listIterator0, (Iterator<? extends SQLRecoverableException>) singletonListIterator0, (Iterator<? extends SQLRecoverableException>) singletonListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Iterator<? extends IIOMetadataNode>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 3);
      MapIterator<SQLDataException, SQLWarning> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLDataException>) mapIterator0;
      HashSet<SQLDataException> hashSet0 = new HashSet<SQLDataException>(99);
      LoopingIterator<SQLDataException> loopingIterator0 = new LoopingIterator<SQLDataException>(hashSet0);
      iteratorArray0[1] = (Iterator<SQLDataException>) loopingIterator0;
      OrderedMapIterator<SQLDataException, HashSet<IIOMetadataNode>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      iteratorArray0[2] = (Iterator<SQLDataException>) orderedMapIterator0;
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(arrayList0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) reverseListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      OrderedMapIterator<DataTruncation, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      String string0 = IteratorUtils.toString((Iterator<DataTruncation>) orderedMapIterator0, (Transformer<? super DataTruncation, String>) invokerTransformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>((String) null);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      MapIterator<ServiceLoader<Boolean>, SQLTransientException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      String string0 = IteratorUtils.toString((Iterator<ServiceLoader<Boolean>>) mapIterator0, (Transformer<? super ServiceLoader<Boolean>, String>) factoryTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[6];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      objectArrayListIterator0.next();
      ListIterator<String> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends String>) objectArrayListIterator0);
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ListIterator<SQLNonTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      Class<Integer> class0 = Integer.class;
      Integer[] integerArray0 = IteratorUtils.toArray((Iterator<? extends Integer>) singletonListIterator0, class0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("delimiter may not be null", sQLClientInfoException0);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTransactionRollbackException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 12, 12);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      List<DataTruncation> list0 = IteratorUtils.toList((Iterator<? extends DataTruncation>) listIterator0, 12);
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      SQLDataException sQLDataException0 = IteratorUtils.get((Iterator<SQLDataException>) resettableIterator0, 0);
      assertNull(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[0] = (Iterator<BatchUpdateException>) orderedIterator0;
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 0);
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) treeSet0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "i^i-kX!@po0", 0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, false);
      BoundedIterator<SQLRecoverableException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLRecoverableException>) singletonIterator0, 0L, (long) 0);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[9];
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.arrayIterator(batchUpdateExceptionArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[5];
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLClientInfoExceptionArray0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLClientInfoException>) resettableListIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0, "#HJ<plFjUFWmJA", "Entry does not exist: ", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Boolean> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      ResettableIterator<ServiceLoader<Boolean>> resettableIterator0 = IteratorUtils.singletonIterator(serviceLoader0);
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<Boolean>>) resettableIterator0, (Transformer<? super ServiceLoader<Boolean>, String>) factoryTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector<SQLFeatureNotSupportedException> vector0 = new Vector<SQLFeatureNotSupportedException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransactionRollbackException0);
      vector0.add(sQLFeatureNotSupportedException0);
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(vector0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) loopingListIterator0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) stack0);
      Integer integer0 = new Integer((-3709));
      stack0.add(integer0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Integer>) resettableListIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Stack<BatchUpdateException> stack0 = new Stack<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) stack0);
      int[] intArray0 = new int[9];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("W61/7MN<N- f;.dd[", "W61/7MN<N- f;.dd[");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0, sQLNonTransientException0);
      stack0.add(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OrderedMapIterator<String, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<String>) orderedMapIterator0, (-1038L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[7];
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Class<Locale.FilteringMode>[] classArray0 = (Class<Locale.FilteringMode>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("57$CF>zz-1", classArray0, predicateArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) invokerTransformer0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) objectArrayListIterator0, (Predicate<? super SQLTransientConnectionException>) orPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[2];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) anyPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Transformer<Object, SQLIntegrityConstraintViolationException>>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      OrPredicate<SQLFeatureNotSupportedException> orPredicate0 = new OrPredicate<SQLFeatureNotSupportedException>((Predicate<? super SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLFeatureNotSupportedException>) singletonListIterator0, (Predicate<? super SQLFeatureNotSupportedException>) orPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OrPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 8);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) comparator0, (Iterator<? extends String>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Comparator<Iterator<ArrayDeque<SQLFeatureNotSupportedException>>> comparator0 = (Comparator<Iterator<ArrayDeque<SQLFeatureNotSupportedException>>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Iterator<ArrayDeque<SQLFeatureNotSupportedException>>>) comparator0, (Iterator<? extends Iterator<ArrayDeque<SQLFeatureNotSupportedException>>>) null, (Iterator<? extends Iterator<ArrayDeque<SQLFeatureNotSupportedException>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends String>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, Object>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) abstractOrderedMapIteratorDecorator0, (-1474L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLDataException[]) null, 4, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[8];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 2695, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((HashSet<SQLSyntaxErrorException>[]) null, (-508));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[4];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, (-2204));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 942, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null, 99, (-1571));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLWarningArray0, 93, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[9];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLDataExceptionArray0, 771);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((IIOMetadataNode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 12, (-967));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 5);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(linkedHashSet0);
      iteratorArray0[0] = (Iterator<Properties>) loopingIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iteratorArray0[0], (-1396));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) instanceofPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("J{A*A8eGyO");
      MapIterator<DataTruncation, DataTruncation> mapIterator0 = IteratorUtils.emptyMapIterator();
      String string0 = IteratorUtils.toString((Iterator<DataTruncation>) mapIterator0, (Transformer<? super DataTruncation, String>) transformer0, "#G(qy1^Lj,;Ip8Hd1d-", "J{A*A8eGyO", "#G(qy1^Lj,;Ip8Hd1d-");
      assertEquals("J{A*A8eGyO#G(qy1^Lj,;Ip8Hd1d-", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) orderedMapIterator0, (Transformer<? super DataTruncation, String>) null, "", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[6];
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.arrayIterator(instanceofPredicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) resettableIterator0, (Predicate<? super InstanceofPredicate>) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OrderedMapIterator<BatchUpdateException, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) orderedMapIterator0, 100);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) null, (-1401L), (-1401L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 44, 2737);
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.singletonIterator(dataTruncation0);
      Transformer<SQLException, String> transformer0 = StringValueTransformer.stringValueTransformer();
      String string0 = IteratorUtils.toString((Iterator<DataTruncation>) resettableIterator0, (Transformer<? super DataTruncation, String>) transformer0, "Entry does not exist: ", "Enumeration must not be null", "");
      assertEquals("Enumeration must not be nulljava.sql.DataTruncation: Data truncation", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", (Class<?>[]) null, (Object[]) null);
      String string0 = IteratorUtils.toString((Iterator<DataTruncation>) null, (Transformer<? super DataTruncation, String>) invokerTransformer0, "", "EJ", "delimiter may not be null");
      assertEquals("EJdelimiter may not be null", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, classArray0, classArray0);
      OrderedMapIterator<DataTruncation, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      String string0 = "f0Aw2z\\uM~INu7>&]HQ";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) orderedMapIterator0, (Transformer<? super DataTruncation, String>) invokerTransformer0, "_N[DhH4q)", string0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Hashtable<SQLException, String> hashtable0 = new Hashtable<SQLException, String>();
      Transformer<SQLException, String> transformer0 = MapTransformer.mapTransformer((Map<? super SQLException, ? extends String>) hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) orderedMapIterator0, (Transformer<? super DataTruncation, String>) transformer0, "", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", (Class<?>[]) null, (Object[]) null);
      OrderedMapIterator<DataTruncation, SQLTransientException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<DataTruncation>) orderedMapIterator0, (Transformer<? super DataTruncation, String>) invokerTransformer0, (String) null, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.iterators.PeekingIterator", "J{A*A8eGyO");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.iterators.PeekingIterator", sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.iterators.PeekingIterator", sQLFeatureNotSupportedException0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      int int0 = IteratorUtils.size(singletonListIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("^\"b.S;T]m'\"!wh)", "^\"b.S;T]m'\"!wh)");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      SQLDataException sQLDataException1 = IteratorUtils.get((Iterator<SQLDataException>) singletonListIterator0, 0);
      assertSame(sQLDataException0, sQLDataException1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      SQLDataException sQLDataException0 = new SQLDataException("EJdelimiter may not be null", sQLClientInfoException0);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLDataException>) singletonListIterator0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 99
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      boolean boolean0 = IteratorUtils.isEmpty(singletonListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(linkedList0);
      boolean boolean0 = IteratorUtils.isEmpty(loopingIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ktCXN#xH:w", "", sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Oop[2~4P=#hKS7Ic]", "ktCXN#xH:w", 12, sQLNonTransientConnectionException0);
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLSyntaxErrorException>) resettableListIterator0, (Predicate<? super SQLSyntaxErrorException>) instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(treeSet0, defaultEquator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Object>) null, (Predicate<? super Object>) nullIsExceptionPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OrderedMapIterator<Object, Properties> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Object, Properties> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, Properties>(orderedMapIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Object>) abstractOrderedMapIteratorDecorator0, (Predicate<? super Object>) predicateArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      MapIterator<Object, ServiceLoader<SQLFeatureNotSupportedException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Object>) mapIterator0, (Predicate<? super Object>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) singletonListIterator0, (Object) class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "eD=");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLNonTransientConnectionException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) singletonListIterator0, (Object) sQLFeatureNotSupportedException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<Properties>) null, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) class0, comparator0);
      Stack<Iterator> stack0 = IteratorUtils.find((Iterator<Stack<Iterator>>) null, (Predicate<? super Stack<Iterator>>) predicate0);
      assertNull(stack0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<StringTokenizer> class0 = StringTokenizer.class;
      ListIterator<Class<StringTokenizer>> listIterator0 = IteratorUtils.singletonListIterator(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Class<StringTokenizer>>) listIterator0, (Predicate<? super Class<StringTokenizer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("mekYyxQ9SfbxC", "mekYyxQ9SfbxC");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("&9V", sQLTransientConnectionException0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      Transformer<Object, DataTruncation> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      IteratorUtils.apply((Iterator<SQLRecoverableException>) singletonListIterator0, (Closure<? super SQLRecoverableException>) transformerClosure0);
      assertEquals(1, singletonListIterator0.nextIndex());
      assertEquals(0, singletonListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("+:Ky9QyS||H", "org.apache.commons.collections4.list.TreeList");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("+:Ky9QyS||H", sQLTransientConnectionException0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("v^cKEv%8Rv");
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLRecoverableException>) singletonListIterator0, (Closure<? super SQLRecoverableException>) transformerClosure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'v^cKEv%8Rv' on 'class java.sql.SQLRecoverableException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("+:Ky9QyS||H", "org.apache.commons.collections4.list.TreeList");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("+:Ky9QyS||H", sQLTransientConnectionException0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      ZippingIterator<SQLRecoverableException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLRecoverableException>) singletonListIterator0, (Iterator<? extends SQLRecoverableException>) singletonListIterator0, (Iterator<? extends SQLRecoverableException>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLRecoverableException>) zippingIterator0, (Closure<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = new Integer((-477));
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(constantTransformer0);
      IteratorUtils.apply((Iterator<SQLRecoverableException>) null, (Closure<? super SQLRecoverableException>) transformerClosure0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Hashtable<SQLInvalidAuthorizationSpecException, DataTruncation> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, DataTruncation>();
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = hashtable0.keys();
      Iterator<?> iterator0 = IteratorUtils.getIterator(enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(2171, true, true, (-1483), (-1744));
      Iterator<?> iterator0 = IteratorUtils.getIterator(dataTruncation0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "eD=");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLNonTransientConnectionException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(singletonListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OrderedMapIterator<Properties, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) orderedMapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null, 176);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(linkedList0);
      Class<Integer> class0 = Integer.class;
      Integer[] integerArray0 = IteratorUtils.toArray((Iterator<? extends Integer>) loopingIterator0, class0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Integer>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends Integer>) loopingIterator0, (Class<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 5);
      LinkedHashSet<Properties> linkedHashSet0 = new LinkedHashSet<Properties>();
      LoopingIterator<Properties> loopingIterator0 = new LoopingIterator<Properties>(linkedHashSet0);
      iteratorArray0[0] = (Iterator<Properties>) loopingIterator0;
      ListIterator<Properties> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Properties>) iteratorArray0[0]);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0);
      Iterable<SQLSyntaxErrorException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Iterable<SQLDataException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLDataException>) singletonListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLException>) null, (Collection<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException> iterator0 = EmptyIterator.emptyIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) iterator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Iterator<SQLException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLException>) enumeration0, (Collection<? super SQLException>) hashSet0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonIterator<IIOMetadataNode> singletonIterator0 = new SingletonIterator<IIOMetadataNode>(iIOMetadataNode0, true);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) singletonIterator0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("(>bJE");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Hashtable<SQLNonTransientException, SQLFeatureNotSupportedException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OrderedMapIterator<String, Stack<LinkedHashSet>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) null, (Predicate<? super Integer>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) singletonListIterator0, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.list.TreeList", "org.apache.commons.collections4.list.TreeList");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.list.TreeList", sQLTransientConnectionException0);
      SingletonListIterator<SQLRecoverableException> singletonListIterator0 = new SingletonListIterator<SQLRecoverableException>(sQLRecoverableException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLRecoverableException>) singletonListIterator0, (Predicate<? super SQLRecoverableException>) uniquePredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientException>) null, (Predicate<? super SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Integer>) stack0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Integer>) resettableListIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, Object> transformer0 = InvokerTransformer.invokerTransformer("/7fe=U};Xo5?", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) null, (Transformer<? super SQLSyntaxErrorException, ?>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends IIOMetadataNode>) resettableListIterator0, (Transformer<? super IIOMetadataNode, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>();
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(vector0);
      SkippingIterator<SQLRecoverableException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) reverseListIterator0, 0L);
      assertNotNull(skippingIterator0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ArrayList<SQLRecoverableException> arrayList0 = new ArrayList<SQLRecoverableException>();
      ReverseListIterator<SQLRecoverableException> reverseListIterator0 = new ReverseListIterator<SQLRecoverableException>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) reverseListIterator0, (Transformer<? super SQLRecoverableException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 0, 1614);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null, (-853));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Vector<BatchUpdateException> vector0 = new Vector<BatchUpdateException>();
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>) resettableIterator0, (Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("A*-T2}kFW/a");
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<PriorityQueue<Transformer>>) iterator0, (Predicate<? super PriorityQueue<Transformer>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      OrderedMapIterator<ArrayDeque<Properties>, SQLWarning> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<ArrayDeque<Properties>, SQLWarning> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<ArrayDeque<Properties>, SQLWarning>) orderedMapIterator0);
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterator<String> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<String>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MapIterator<SQLFeatureNotSupportedException, IIOMetadataNode> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 1, 1);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(iIOMetadataNodeArray0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.arrayIterator(booleanArray0);
      String string0 = IteratorUtils.toString((Iterator<Boolean>) resettableIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Integer integer0 = new Integer(32);
      Factory<Integer> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(factory0);
      Iterator<Integer> iterator0 = IteratorUtils.objectGraphIterator(integer0, (Transformer<? super Integer, ? extends Integer>) factoryTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.size(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      BoundedIterator<SQLSyntaxErrorException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0, 0L);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) boundedIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[6];
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, (-3505), 283, sQLSyntaxErrorExceptionArray0[0]);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) dataTruncation0, (-33), 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Transformer<Object, Object> transformer0 = InvokerTransformer.invokerTransformer("iterator", (Class<?>[]) null, (Object[]) null);
      Iterator<Object> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Transformer<? super SQLSyntaxErrorException, ?>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "eD=");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLNonTransientConnectionException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) singletonListIterator0, (Object) sQLFeatureNotSupportedException0);
      assertEquals(1, singletonListIterator0.nextIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("!HH(;>~?w[M1V)D#`D");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, 91);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "C+6>2Tcm");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Object> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Object>) comparator0, (Iterator<?>) orderedMapIterator0, (Iterator<?>) singletonListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 5);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iteratorArray0[0], (-1396));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ServiceLoader<SQLSyntaxErrorException>[] serviceLoaderArray0 = (ServiceLoader<SQLSyntaxErrorException>[]) Array.newInstance(ServiceLoader.class, 0);
      ResettableListIterator<ServiceLoader<SQLSyntaxErrorException>> resettableListIterator0 = IteratorUtils.arrayListIterator(serviceLoaderArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "eD=");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLNonTransientConnectionException0);
      SingletonListIterator<SQLFeatureNotSupportedException> singletonListIterator0 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) singletonListIterator0);
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(list0);
      IteratorUtils.unmodifiableListIterator((ListIterator<SQLFeatureNotSupportedException>) loopingListIterator0);
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(singletonListIterator0.hasNext());
  }
}
