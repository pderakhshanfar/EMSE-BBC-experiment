/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 04:10:33 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IteratorUtils.emptyIterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JZo@");
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Transformer<Object, SQLNonTransientConnectionException> transformer0 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.objectGraphIterator(sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientConnectionException, ? extends SQLNonTransientConnectionException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLNonTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.getIterator("Can'v do that after next or hasNext haJ een called.");
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("2OQ2%9{;S4<9t$o");
      linkedList0.add(iIOMetadataNode0);
      LoopingListIterator<IIOMetadataNode> loopingListIterator0 = new LoopingListIterator<IIOMetadataNode>(linkedList0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) loopingListIterator0, 93);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, (Class<SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "%aa'cl\"Vq;HG3B";
      stringArray0[1] = "%aa'cl\"Vq;HG3B";
      stringArray0[2] = "%aa'cl\"Vq;HG3B";
      stringArray0[3] = "%aa'cl\"Vq;HG3B";
      stringArray0[4] = "%aa'cl\"Vq;HG3B";
      stringArray0[5] = "%aa'cl\"Vq;HG3B";
      stringArray0[6] = "%aa'cl\"Vq;HG3B";
      stringArray0[7] = "%aa'cl\"Vq;HG3B";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(nonePredicate0, nonePredicate0);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) nonePredicate0);
      predicateArray0[1] = predicate0;
      NonePredicate<Object> nonePredicate1 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) nonePredicate1;
      AndPredicate.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) nonePredicate0);
      predicateArray0[3] = predicate0;
      Class<SQLTransientException> class0 = SQLTransientException.class;
      Predicate<Object> predicate1 = InstanceofPredicate.instanceOfPredicate(class0);
      predicateArray0[4] = predicate1;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Predicate<Object> predicate2 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) allPredicate0);
      ListIterator<String> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends String>) objectArrayListIterator0, (Predicate<? super String>) predicate2);
      // Undeclared exception!
      IteratorUtils.get((Iterator<String>) listIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2198;
      intArray0[1] = 2198;
      intArray0[2] = 2198;
      intArray0[3] = 2198;
      intArray0[4] = 2198;
      intArray0[5] = 2198;
      intArray0[6] = 2198;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("j", "6yP", 2198, intArray0);
      SingletonListIterator<BatchUpdateException> singletonListIterator0 = new SingletonListIterator<BatchUpdateException>(batchUpdateException0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) singletonListIterator0);
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) list0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends BatchUpdateException>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("9%a'cl\"sVq,;HG3B");
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Transformer<DataTruncation, Vector>>) iterator0, (Transformer<? super Transformer<DataTruncation, Vector>, String>) transformer0, "b,hHV7oV)oPOm", "ED[!", "ED[!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "w)Jn?sO_";
      String string1 = "OoS070RbTuM$";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("OoS070RbTuM$", "w)Jn?sO_");
      Transformer<SQLTransientException, SQLTransactionRollbackException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) transformer0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<DataTruncation>[] classArray0 = (Class<DataTruncation>[]) Array.newInstance(Class.class, 8);
      Class<DataTruncation> class0 = DataTruncation.class;
      classArray0[0] = class0;
      Class<DataTruncation> class1 = DataTruncation.class;
      classArray0[1] = class1;
      Class<DataTruncation> class2 = DataTruncation.class;
      classArray0[2] = class2;
      Class<DataTruncation> class3 = DataTruncation.class;
      classArray0[3] = class3;
      Class<DataTruncation> class4 = DataTruncation.class;
      classArray0[4] = class4;
      Class<DataTruncation> class5 = DataTruncation.class;
      classArray0[5] = class5;
      Class<DataTruncation> class6 = DataTruncation.class;
      classArray0[6] = class6;
      Class<DataTruncation> class7 = DataTruncation.class;
      classArray0[7] = class7;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class6;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) class2;
      objectArray0[6] = (Object) "LESOR_IQUAL";
      objectArray0[7] = (Object) class0;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("LESOR_IQUAL", (Class<?>[]) classArray0, objectArray0);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("n.4-])P8f:oM&0+<6", (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'LESOR_IQUAL' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, InstanceofPredicate> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      DataTruncation dataTruncation0 = new DataTruncation((-1692), false, false, 1, 1);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(orderedMapIterator0, defaultEquator0);
      IfTransformer<SQLException, DataTruncation> ifTransformer0 = new IfTransformer<SQLException, DataTruncation>(equalPredicate0, (Transformer<? super SQLException, ? extends DataTruncation>) null, (Transformer<? super SQLException, ? extends DataTruncation>) null);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) ifTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny(iterator0, (Predicate<? super DataTruncation>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>(", size=");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ", size=";
      stringArray0[1] = "";
      stringArray0[2] = ", size=";
      stringArray0[3] = ", size=";
      stringArray0[4] = ", size=";
      stringArray0[5] = ", size=";
      stringArray0[6] = ", size=";
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.arrayListIterator(stringArray0, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) resettableListIterator0, 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 7
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.getIterator("_me");
      LinkedList<StringTokenizer>[] linkedListArray0 = (LinkedList<StringTokenizer>[]) Array.newInstance(LinkedList.class, 8);
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      linkedListArray0[0] = linkedList0;
      LinkedList<StringTokenizer> linkedList1 = new LinkedList<StringTokenizer>();
      linkedListArray0[1] = linkedList1;
      LinkedList<StringTokenizer> linkedList2 = new LinkedList<StringTokenizer>();
      linkedListArray0[2] = linkedList2;
      LinkedList<StringTokenizer> linkedList3 = new LinkedList<StringTokenizer>();
      linkedListArray0[3] = linkedList3;
      LinkedList<StringTokenizer> linkedList4 = new LinkedList<StringTokenizer>();
      linkedListArray0[4] = linkedList4;
      StringTokenizer stringTokenizer0 = new StringTokenizer("k#)!ICUVb[S)l#-x");
      linkedList1.add(stringTokenizer0);
      LinkedList<StringTokenizer> linkedList5 = new LinkedList<StringTokenizer>();
      linkedListArray0[5] = linkedList5;
      LinkedList<StringTokenizer> linkedList6 = new LinkedList<StringTokenizer>();
      linkedListArray0[6] = linkedList6;
      LinkedList<StringTokenizer> linkedList7 = new LinkedList<StringTokenizer>();
      linkedListArray0[7] = linkedList7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(linkedListArray0, 2, (-2209));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.collections4.bidimap.AbstractDualBidiMap$BidiMapIterator");
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Transformer must not be null", sQLWarning0);
      SingletonListIterator<SQLTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("p2-%s`vjj#|aOde-f");
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLTransientConnectionException>) singletonListIterator0, (Predicate<? super SQLTransientConnectionException>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'p2-%s`vjj#|aOde-f' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLInvalidAuthorizationSpecException>) linkedHashSet0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("The transformer array must not be null");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("0Xv^4", "|pe~&>@O+@", sQLTransactionRollbackException0);
      Transformer<Object, SQLSyntaxErrorException> transformer0 = InvokerTransformer.invokerTransformer("|pe~&>@O+@");
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) iterator0, 765);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '|pe~&>@O+@' on 'class java.sql.SQLSyntaxErrorException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MapIterator<SQLTransientConnectionException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) mapIterator0);
      ResettableIterator<Boolean> resettableIterator0 = IteratorUtils.emptyIterator();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.functors.PrototypeFactory$PrototypeCloneFactory");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Boolean>) resettableIterator0, (Transformer<? super Boolean, String>) constantTransformer0, "yY1a`&g/S}ilGl9hS+", (String) null, " :");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>((String) null);
      SingletonIterator<String> singletonIterator1 = new SingletonIterator<String>((String) null);
      String string0 = IteratorUtils.get((Iterator<String>) singletonIterator1, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, class0);
      Properties properties0 = new Properties();
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.singletonIterator(properties0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Properties>) resettableIterator0, (Transformer<? super Properties, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OrderedIterator<SQLTransactionRollbackException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) orderedIterator0, class0);
      OrderedMapIterator<SQLDataException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLDataException, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLDataException, Object>(orderedMapIterator0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("`");
      String string0 = IteratorUtils.toString((Iterator<SQLDataException>) abstractOrderedMapIteratorDecorator0, (Transformer<? super SQLDataException, String>) constantTransformer0, ",d", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableIterator0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 5);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "[]", (Map<String, ClientInfoStatus>) null);
      SQLDataException sQLDataException0 = new SQLDataException(sQLClientInfoException0);
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.singletonIterator(sQLDataException0);
      iteratorArray0[0] = (Iterator<SQLDataException>) resettableIterator1;
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) iteratorArray0[0]);
      Iterator<SQLDataException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0);
      iteratorArray0[1] = iterator0;
      ListIteratorWrapper<SQLDataException> listIteratorWrapper0 = new ListIteratorWrapper<SQLDataException>(iterator0);
      iteratorArray0[2] = (Iterator<SQLDataException>) listIteratorWrapper0;
      MapIterator<SQLDataException, Closure<Object>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      iteratorArray0[3] = (Iterator<SQLDataException>) mapIterator0;
      MapIterator<SQLDataException, Integer> mapIterator1 = IteratorUtils.emptyMapIterator();
      iteratorArray0[4] = (Iterator<SQLDataException>) mapIterator1;
      IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      ServiceLoader<IIOMetadataNode>[] serviceLoaderArray0 = (ServiceLoader<IIOMetadataNode>[]) Array.newInstance(ServiceLoader.class, 6);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      ServiceLoader<IIOMetadataNode> serviceLoader0 = ServiceLoader.load(class0);
      serviceLoaderArray0[0] = serviceLoader0;
      ServiceLoader<IIOMetadataNode> serviceLoader1 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[1] = serviceLoader1;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      ServiceLoader<IIOMetadataNode> serviceLoader2 = ServiceLoader.loadInstalled(class1);
      serviceLoaderArray0[2] = serviceLoader2;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      ServiceLoader<IIOMetadataNode> serviceLoader3 = ServiceLoader.loadInstalled(class2);
      serviceLoaderArray0[3] = serviceLoader3;
      ServiceLoader<IIOMetadataNode> serviceLoader4 = ServiceLoader.loadInstalled(class0);
      serviceLoaderArray0[4] = serviceLoader4;
      ServiceLoader<IIOMetadataNode> serviceLoader5 = ServiceLoader.load(class0);
      serviceLoaderArray0[5] = serviceLoader5;
      ResettableListIterator<ServiceLoader<IIOMetadataNode>> resettableListIterator0 = IteratorUtils.arrayListIterator(serviceLoaderArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iterator0, comparator0, comparatorPredicate_Criterion0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Transformer<Object, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) comparatorPredicate0, (Transformer<? super Object, ? extends String>) transformer0, (Transformer<? super Object, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<ServiceLoader<IIOMetadataNode>>) resettableListIterator0, (Transformer<? super ServiceLoader<IIOMetadataNode>, String>) transformer1, (String) null, "Entry does not exist: ", "Entry does not exist: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Hashtable<InstanceofPredicate, Transformer<Object, String>> hashtable0 = new Hashtable<InstanceofPredicate, Transformer<Object, String>>();
      Transformer<Object, String> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ? extends String>>) hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) singletonListIterator0, (Transformer<? super SQLDataException, String>) transformer0, (String) null, "", "\"Z:M0'FR6j0D;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      SingletonListIterator<EnumSet<Locale.FilteringMode>> singletonListIterator0 = new SingletonListIterator<EnumSet<Locale.FilteringMode>>((EnumSet<Locale.FilteringMode>) null);
      Iterator<EnumSet<Locale.FilteringMode>> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonListIterator0, (Iterator<? extends EnumSet<Locale.FilteringMode>>) singletonListIterator0);
      ArrayList<Closure<Object>> arrayList0 = new ArrayList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) arrayList0);
      IteratorUtils.apply(iterator0, (Closure<? super EnumSet<Locale.FilteringMode>>) closure0);
      assertTrue(singletonListIterator0.hasPrevious());
      assertEquals(1, singletonListIterator0.nextIndex());
      
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 6);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1073741824);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      ObjectArrayIterator<Integer> objectArrayIterator0 = new ObjectArrayIterator<Integer>(integerArray0);
      iteratorArray0[0] = (Iterator<Integer>) objectArrayIterator0;
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer1);
      iteratorArray0[1] = (Iterator<Integer>) listIterator0;
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[2] = (Iterator<Integer>) resettableIterator0;
      ResettableIterator<Integer> resettableIterator1 = IteratorUtils.arrayIterator(integerArray0);
      iteratorArray0[3] = (Iterator<Integer>) resettableIterator1;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0);
      iteratorArray0[4] = (Iterator<Integer>) resettableListIterator0;
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Integer>) resettableIterator1, 1073741824);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 7);
      MapIterator<SQLNonTransientConnectionException, Integer> mapIterator0 = IteratorUtils.emptyMapIterator();
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) mapIterator0;
      OrderedMapIterator<SQLNonTransientConnectionException, Iterator<SQLRecoverableException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[1] = (Iterator<SQLNonTransientConnectionException>) orderedMapIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.getIterator(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) null, (Transformer<? super String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLRecoverableException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLIntegrityConstraintViolationException, ? extends SQLRecoverableException>) orderedMapIterator0);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator1, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) uniquePredicate0);
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>((SQLInvalidAuthorizationSpecException) null);
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) uniquePredicate0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer0, "aWC!rv[#W88rI", "aWC!rv[#W88rI", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) hashSet0);
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, class0);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      LoopingListIterator<SQLFeatureNotSupportedException> loopingListIterator0 = new LoopingListIterator<SQLFeatureNotSupportedException>(stack0);
      IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) loopingListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) hashSet0);
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) resettableIterator0, class0);
      Vector<SQLTimeoutException> vector0 = new Vector<SQLTimeoutException>();
      ReverseListIterator<SQLTimeoutException> reverseListIterator0 = new ReverseListIterator<SQLTimeoutException>(vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTimeoutException>) reverseListIterator0, (Transformer<? super SQLTimeoutException, String>) null, "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      MapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<Stack>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      IteratorUtils.find(iterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      Comparator<Object> comparator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Boolean[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Stack<SQLTransientConnectionException> stack0 = new Stack<SQLTransientConnectionException>();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) stack0);
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableListIterator0);
      ArrayDeque<SQLClientInfoException> arrayDeque0 = new ArrayDeque<SQLClientInfoException>();
      Iterator<SQLClientInfoException> iterator0 = arrayDeque0.iterator();
      IteratorUtils.toList((Iterator<? extends SQLClientInfoException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OrderedMapIterator<SQLTransactionRollbackException, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, class0);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null, (Iterator<? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 1);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef", sQLTimeoutException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", sQLTransientConnectionException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0, 1, 1);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) resettableIterator0;
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray1 = IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) iterator0, class0);
      assertEquals(0, sQLTransactionRollbackExceptionArray1.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      Hashtable<SQLInvalidAuthorizationSpecException, Closure<SQLInvalidAuthorizationSpecException>> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, Closure<SQLInvalidAuthorizationSpecException>>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Closure<SQLInvalidAuthorizationSpecException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Closure<SQLInvalidAuthorizationSpecException>>(hashtable0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      Vector<SQLTransactionRollbackException> vector0 = new Vector<SQLTransactionRollbackException>();
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) vector0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, 1);
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(list0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) loopingIterator0, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("HRg1PJ.x{", "");
      MapIterator<String, EnumSet<ClientInfoStatus>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<String> enumeration1 = IteratorUtils.asEnumeration((Iterator<? extends String>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends String>) enumeration1);
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0, class0);
      IteratorUtils.singletonListIterator((Object) enumeration0);
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("nw\"fl-.Hb/H;+Oy@_", "pN% ~MJA2<Bv(+d>L");
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0);
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) listIterator0, 3004);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Iterator<Transformer<Object, String>>, LinkedHashSet<InstanceofPredicate>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MapIterator<Properties, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<Properties, StringTokenizer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, StringTokenizer>(mapIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<SQLTransactionRollbackException> linkedList1 = new LinkedList<SQLTransactionRollbackException>();
      LoopingListIterator<SQLTransactionRollbackException> loopingListIterator0 = new LoopingListIterator<SQLTransactionRollbackException>(linkedList1);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransactionRollbackException>) loopingListIterator0, (Predicate<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      Hashtable<SQLInvalidAuthorizationSpecException, Closure<SQLInvalidAuthorizationSpecException>> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, Closure<SQLInvalidAuthorizationSpecException>>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Closure<SQLInvalidAuthorizationSpecException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Closure<SQLInvalidAuthorizationSpecException>>(hashtable0);
      Properties properties0 = new Properties();
      DataTruncation dataTruncation0 = new DataTruncation(1181, true, true, 4, 4);
      Iterator<?> iterator0 = IteratorUtils.getIterator(dataTruncation0);
      List<Object> list0 = IteratorUtils.toList(iterator0);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      IteratorUtils.unmodifiableListIterator((ListIterator<Object>) resettableListIterator0);
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 2);
      StringTokenizer[] stringTokenizerArray0 = new StringTokenizer[6];
      StringTokenizer stringTokenizer0 = new StringTokenizer("+u|'B6L");
      stringTokenizerArray0[0] = stringTokenizer0;
      StringTokenizer stringTokenizer1 = new StringTokenizer("V");
      stringTokenizerArray0[1] = stringTokenizer1;
      StringTokenizer stringTokenizer2 = new StringTokenizer("cDu", "");
      stringTokenizerArray0[2] = stringTokenizer2;
      StringTokenizer stringTokenizer3 = new StringTokenizer("V");
      stringTokenizerArray0[3] = stringTokenizer3;
      StringTokenizer stringTokenizer4 = new StringTokenizer("SViP+-&@oO%(%QD(", "+u|'B6L");
      stringTokenizerArray0[4] = stringTokenizer4;
      StringTokenizer stringTokenizer5 = new StringTokenizer("");
      stringTokenizerArray0[5] = stringTokenizer5;
      ResettableListIterator<StringTokenizer> resettableListIterator1 = IteratorUtils.arrayListIterator(stringTokenizerArray0, 4, 4);
      iteratorArray0[0] = (Iterator<StringTokenizer>) resettableListIterator1;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("SViP+-&@oO%(%QD(", dataTruncation0);
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0, true);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) singletonIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      TreeSet<SQLNonTransientException> treeSet0 = new TreeSet<SQLNonTransientException>();
      SingletonIterator<TreeSet<SQLNonTransientException>> singletonIterator0 = new SingletonIterator<TreeSet<SQLNonTransientException>>(treeSet0, true);
      IteratorUtils.filteredIterator((Iterator<? extends TreeSet<SQLNonTransientException>>) singletonIterator0, (Predicate<? super TreeSet<SQLNonTransientException>>) uniquePredicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<TreeSet<SQLNonTransientException>>) singletonIterator0, (Predicate<? super TreeSet<SQLNonTransientException>>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) uniquePredicate0);
      TreeSet<SQLNonTransientException> treeSet0 = new TreeSet<SQLNonTransientException>();
      SingletonIterator<TreeSet<SQLNonTransientException>> singletonIterator0 = new SingletonIterator<TreeSet<SQLNonTransientException>>(treeSet0, false);
      Iterator<TreeSet<SQLNonTransientException>> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends TreeSet<SQLNonTransientException>>) singletonIterator0, (Predicate<? super TreeSet<SQLNonTransientException>>) uniquePredicate0);
      boolean boolean0 = IteratorUtils.matchesAny(iterator0, (Predicate<? super TreeSet<SQLNonTransientException>>) uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      LinkedList<SQLInvalidAuthorizationSpecException> linkedList0 = new LinkedList<SQLInvalidAuthorizationSpecException>();
      LoopingIterator<SQLInvalidAuthorizationSpecException> loopingIterator0 = new LoopingIterator<SQLInvalidAuthorizationSpecException>(linkedList0);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) loopingIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0);
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, 10);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.emptyListIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      Vector<ArrayDeque<Iterator<SQLRecoverableException>>> vector0 = new Vector<ArrayDeque<Iterator<SQLRecoverableException>>>();
      ResettableListIterator<ArrayDeque<Iterator<SQLRecoverableException>>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<ArrayDeque<Iterator<SQLRecoverableException>>>) vector0);
      IteratorUtils.apply((Iterator<ArrayDeque<Iterator<SQLRecoverableException>>>) resettableListIterator0, (Closure<? super ArrayDeque<Iterator<SQLRecoverableException>>>) closure0);
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>((SQLTransactionRollbackException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator((SQLIntegrityConstraintViolationException) null);
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      linkedList0.add(sQLTransactionRollbackException0);
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(linkedList0);
      loopingIterator0.hasNext();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) loopingIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      Hashtable<SQLInvalidAuthorizationSpecException, Closure<SQLInvalidAuthorizationSpecException>> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, Closure<SQLInvalidAuthorizationSpecException>>();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      IteratorUtils.isEmpty((Iterator<?>) null);
      OrderedMapIterator<IIOMetadataNode, SQLSyntaxErrorException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      Hashtable<SQLInvalidAuthorizationSpecException, Closure<SQLInvalidAuthorizationSpecException>> hashtable0 = new Hashtable<SQLInvalidAuthorizationSpecException, Closure<SQLInvalidAuthorizationSpecException>>();
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Closure<SQLInvalidAuthorizationSpecException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Closure<SQLInvalidAuthorizationSpecException>>(hashtable0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0, 840);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.emptyListIterator();
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      IteratorUtils.apply((Iterator<ArrayDeque<Iterator<SQLRecoverableException>>>) null, (Closure<? super ArrayDeque<Iterator<SQLRecoverableException>>>) closure0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TruePredicate.truePredicate();
      MapIterator<TreeSet<SQLNonTransientException>, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<TreeSet<SQLNonTransientException>>) mapIterator0, (Predicate<? super TreeSet<SQLNonTransientException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLClientInfoException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) listIterator0);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(linkedList0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      DataTruncation dataTruncation0 = new DataTruncation(866, true, true, (-764), 10);
      AndPredicate<Object> andPredicate1 = new AndPredicate<Object>(andPredicate0, andPredicate0);
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(andPredicate0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, dataTruncation0);
      Boolean boolean0 = predicateTransformer0.transform(sQLNonTransientException0);
      ListIterator<Boolean> listIterator0 = IteratorUtils.singletonListIterator(boolean0);
      boolean boolean1 = IteratorUtils.matchesAll((Iterator<Boolean>) listIterator0, (Predicate<? super Boolean>) uniquePredicate0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      SQLException sQLException0 = new SQLException("?ZQ&hUQ#f4Cz");
      DataTruncation dataTruncation0 = new DataTruncation(1, false, false, (-1), (-1851), sQLException0);
      ResettableIterator<DataTruncation> resettableIterator0 = new SingletonIterator<DataTruncation>(dataTruncation0, false);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) resettableIterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.singletonListIterator(sQLFeatureNotSupportedException0);
      ListIterator<SQLFeatureNotSupportedException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      ListIterator<SQLFeatureNotSupportedException> listIterator2 = new SingletonListIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      MapIterator<TreeSet<SQLNonTransientException>, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<TreeSet<SQLNonTransientException>>) mapIterator0, (Predicate<? super TreeSet<SQLNonTransientException>>) predicate0);
      boolean boolean1 = IteratorUtils.isEmpty(listIterator1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<SQLFeatureNotSupportedException, Object> hashMap0 = new HashMap<SQLFeatureNotSupportedException, Object>(5215);
      EntrySetMapIterator<SQLFeatureNotSupportedException, Object> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, Object>(hashMap0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, Object>) entrySetMapIterator0);
      IteratorUtils.emptyListIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(uniquePredicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsTruePredicate0;
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      predicateArray0[1] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) allPredicate0;
      Predicate<Object> predicate1 = IdentityPredicate.identityPredicate((Object) entrySetMapIterator0);
      predicateArray0[3] = predicate1;
      Predicate<Object> predicate2 = FalsePredicate.falsePredicate();
      predicateArray0[4] = predicate2;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      AndPredicate<SQLTransientException> andPredicate0 = new AndPredicate<SQLTransientException>(onePredicate0, onePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) andPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Stack<SQLException> stack0 = new Stack<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) null, (Collection<? super SQLFeatureNotSupportedException>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      FalsePredicate.falsePredicate();
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[4];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 32);
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("Ky^iEUD", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.InstanceofPredicate", "org.apache.commons.collections4.functors.InstanceofPredicate", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.functors.InstanceofPredicate", "");
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      ObjectArrayListIterator<SQLIntegrityConstraintViolationException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationExceptionArray0);
      Predicate<SQLIntegrityConstraintViolationException> predicate0 = UniquePredicate.uniquePredicate();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) objectArrayListIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      assertNotNull(sQLIntegrityConstraintViolationException4);
      assertEquals(0, objectArrayListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      DataTruncation dataTruncation0 = new DataTruncation((-160), true, true, (-160), 10);
      AndPredicate<Object> andPredicate1 = new AndPredicate<Object>(uniquePredicate0, andPredicate0);
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(uniquePredicate0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, dataTruncation0);
      Boolean boolean0 = predicateTransformer0.transform(sQLNonTransientException0);
      ListIterator<Boolean> listIterator1 = IteratorUtils.singletonListIterator(boolean0);
      boolean boolean1 = IteratorUtils.matchesAll((Iterator<Boolean>) listIterator1, (Predicate<? super Boolean>) andPredicate1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      OrderedMapIterator<SQLIntegrityConstraintViolationException, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2796), (-2796));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InstanceofPredicate[] instanceofPredicateArray0 = new InstanceofPredicate[6];
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[0] = instanceofPredicate0;
      Class<Object> class1 = Object.class;
      InstanceofPredicate instanceofPredicate1 = new InstanceofPredicate(class1);
      instanceofPredicateArray0[1] = instanceofPredicate1;
      InstanceofPredicate instanceofPredicate2 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[2] = instanceofPredicate2;
      InstanceofPredicate instanceofPredicate3 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[3] = instanceofPredicate3;
      InstanceofPredicate instanceofPredicate4 = new InstanceofPredicate(class0);
      instanceofPredicateArray0[4] = instanceofPredicate4;
      Class<String> class2 = String.class;
      InstanceofPredicate instanceofPredicate5 = new InstanceofPredicate(class2);
      instanceofPredicateArray0[5] = instanceofPredicate5;
      IteratorUtils.arrayListIterator(instanceofPredicateArray0, 0, 0);
      MapIterator<SQLIntegrityConstraintViolationException, HashSet<ArrayList>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) mapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) instanceofPredicate5);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) null, 806);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(", size=");
      vector0.add(sQLTransientConnectionException0);
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) vector0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      int int0 = 1933;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLRecoverableException[]) null, 1933, (-1547));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<StringTokenizer, IIOMetadataNode> hashMap0 = new HashMap<StringTokenizer, IIOMetadataNode>();
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>(hashtable0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) entrySetMapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) hashMap0, comparator0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("org.apache.commons.collections4.IteratorUtils");
      Transformer<Locale.FilteringMode, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      ObjectArrayListIterator<Locale.FilteringMode> objectArrayListIterator0 = new ObjectArrayListIterator<Locale.FilteringMode>(locale_FilteringModeArray0);
      IteratorUtils.toString((Iterator<Locale.FilteringMode>) objectArrayListIterator0, (Transformer<? super Locale.FilteringMode, String>) transformer0, "fD7V95Sg", "org.apache.commons.collections4.IteratorUtils", "fD7V95Sg");
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      DataTruncation dataTruncation0 = new DataTruncation((-160), true, true, (-160), 10);
      IteratorUtils.singletonListIterator(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) listIterator0);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(linkedList0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLRecoverableException0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) comparatorPredicate0);
      IteratorUtils.emptyIterator();
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 1);
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      iteratorArray0[0] = (Iterator<BatchUpdateException>) resettableListIterator0;
      ZippingIterator<BatchUpdateException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends BatchUpdateException>[]) iteratorArray0);
      List<BatchUpdateException> list0 = IteratorUtils.toList((Iterator<? extends BatchUpdateException>) zippingIterator0, 934);
      IteratorUtils.loopingIterator((Collection<? extends BatchUpdateException>) list0);
      Iterator<StringTokenizer> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) listIterator0);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(linkedList0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("?dFz4", "", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("", "P%3y.+ D&Iu[", 6794);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", "P%3y.+ D&Iu[", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException(sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("Node must not be null", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      ObjectArrayListIterator<SQLTransactionRollbackException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) objectArrayListIterator0, class0);
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Iterable<SQLInvalidAuthorizationSpecException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableListIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) resettableListIterator0);
      EmptyIterator.resettableEmptyIterator();
      OrderedMapIterator<Boolean, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, uniquePredicate0);
      IteratorUtils.matchesAll((Iterator<Boolean>) orderedMapIterator0, (Predicate<? super Boolean>) andPredicate0);
      ResettableListIterator<BatchUpdateException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) resettableListIterator1, 0L, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<StringTokenizer, IIOMetadataNode> hashMap0 = new HashMap<StringTokenizer, IIOMetadataNode>();
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>(hashtable0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("tg");
      Integer integer0 = new Integer(3508);
      OrderedIterator<SQLFeatureNotSupportedException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, (Object) locale_FilteringMode0);
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("tg", (String) null);
      predicateTransformer0.transform(sQLNonTransientException0);
      IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) orderedIterator0, 4578L);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) orderedIterator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedMapIterator<Locale.FilteringMode, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Locale.FilteringMode>) orderedMapIterator0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("/%");
      Transformer<Locale.FilteringMode, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      String string0 = IteratorUtils.toString((Iterator<Locale.FilteringMode>) orderedMapIterator0, (Transformer<? super Locale.FilteringMode, String>) transformer0, "T", "", "RS):j@");
      assertEquals("RS):j@", string0);
      
      boolean boolean1 = IteratorUtils.isEmpty(iterator0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) listIterator0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      ResettableListIterator<Boolean> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Boolean>) linkedList0);
      SQLWarning sQLWarning0 = new SQLWarning("yX5Q>55dS/q`G");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLWarning0);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLNonTransientException.class) , any(java.sql.SQLNonTransientException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<SQLNonTransientException> comparatorPredicate0 = new ComparatorPredicate<SQLNonTransientException>(sQLNonTransientException0, comparator0, comparatorPredicate_Criterion0);
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(comparatorPredicate0);
      Boolean boolean0 = predicateTransformer0.transform(sQLNonTransientException0);
      linkedList0.offerFirst(boolean0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Boolean>) resettableListIterator0, 807);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) listIterator0);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(linkedList0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Q%q:V`", "", (-428));
      linkedList0.add(sQLTransactionRollbackException0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) loopingIterator0, class0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      HashMap<SQLInvalidAuthorizationSpecException, Closure<SQLInvalidAuthorizationSpecException>> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, Closure<SQLInvalidAuthorizationSpecException>>(1, 1);
      EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Closure<SQLInvalidAuthorizationSpecException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLInvalidAuthorizationSpecException, Closure<SQLInvalidAuthorizationSpecException>>(hashMap0);
      Enumeration<SQLInvalidAuthorizationSpecException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLInvalidAuthorizationSpecException>) entrySetMapIterator0);
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) entrySetMapIterator0, 1);
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) enumeration0, (Collection<? super SQLInvalidAuthorizationSpecException>) list0);
      IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) iterator0, 1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      FalsePredicate.falsePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) listIterator0, (Predicate<? super SQLException>) notPredicate0);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) listIterator0);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(linkedList0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) loopingIterator0, class0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 3);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      iteratorArray0[1] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      iteratorArray0[2] = (Iterator<SQLFeatureNotSupportedException>) listIterator0;
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<StringTokenizer, IIOMetadataNode> hashMap0 = new HashMap<StringTokenizer, IIOMetadataNode>();
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>(hashtable0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) entrySetMapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) hashMap0, comparator0);
      Hashtable<SQLSyntaxErrorException, Integer> hashtable1 = new Hashtable<SQLSyntaxErrorException, Integer>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ja[@.5#y=TeyEY$`&@*", "");
      Integer integer0 = new Integer((-290));
      hashtable1.put(sQLSyntaxErrorException0, integer0);
      EntrySetMapIterator<SQLSyntaxErrorException, Integer> entrySetMapIterator1 = new EntrySetMapIterator<SQLSyntaxErrorException, Integer>(hashtable1);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toString((Iterator<SQLTransientConnectionException>) orderedIterator0);
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 8);
      ListIterator<Properties> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[0] = (Iterator<Properties>) listIterator0;
      Properties[] propertiesArray0 = new Properties[1];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      iteratorArray0[1] = (Iterator<Properties>) objectArrayListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MapIterator<SQLIntegrityConstraintViolationException, SQLTransientConnectionException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<StringTokenizer, IIOMetadataNode> hashMap0 = new HashMap<StringTokenizer, IIOMetadataNode>();
      FalsePredicate.falsePredicate();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", ", size=");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Boolean, IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<StringTokenizer, IIOMetadataNode> hashMap0 = new HashMap<StringTokenizer, IIOMetadataNode>();
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[9];
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", ", size=");
      Integer integer0 = new Integer(100);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Object) null);
      assertTrue(boolean0);
      
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      predicateTransformer0.transform(sQLFeatureNotSupportedExceptionArray0[5]);
      IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (long) 125);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      OrderedMapIterator<Locale.FilteringMode, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Locale.FilteringMode>) orderedMapIterator0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("wRE'}\"-2F");
      Transformer<Locale.FilteringMode, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super Locale.FilteringMode, String>) transformer0, ", size=", "", "org.apache.commons.collections4.IteratorUtils");
      assertEquals("org.apache.commons.collections4.IteratorUtils", string0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) resettableListIterator0);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      Predicate<SQLSyntaxErrorException> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) resettableListIterator1, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("delimiter may not be null");
      Transformer<Locale.FilteringMode, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      String string0 = IteratorUtils.toString((Iterator<Locale.FilteringMode>) null, (Transformer<? super Locale.FilteringMode, String>) transformer0, "", "X>#T@YoC7&IYo+vr&", "X>#T@YoC7&IYo+vr&");
      assertEquals("X>#T@YoC7&IYo+vr&X>#T@YoC7&IYo+vr&", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLTransactionRollbackException0, defaultEquator0);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicateArray0[0]);
      int int0 = 10;
      DataTruncation dataTruncation0 = new DataTruncation(10, true, false, (-1), (-573));
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.singletonListIterator(dataTruncation0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) listIterator1, (Predicate<? super SQLWarning>) equalPredicate0);
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) listIterator1);
      IteratorUtils.asIterator((Enumeration<? extends SQLWarning>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) stack0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) listIterator0);
      LinkedList<SQLTransactionRollbackException> linkedList0 = new LinkedList<SQLTransactionRollbackException>();
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>(linkedList0);
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(linkedList0);
      Integer integer0 = new Integer(163);
      Integer integer1 = new Integer(163);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"Vw;gjTntmCF9yhA");
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      IteratorUtils.find((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) predicate0);
      LinkedList<Iterator<SQLRecoverableException>> linkedList1 = new LinkedList<Iterator<SQLRecoverableException>>();
      ResettableListIterator<Iterator<SQLRecoverableException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Iterator<SQLRecoverableException>>) linkedList1);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      ListIteratorWrapper<SQLFeatureNotSupportedException> listIteratorWrapper0 = new ListIteratorWrapper<SQLFeatureNotSupportedException>(iterator0);
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends SQLFeatureNotSupportedException>) listIteratorWrapper0);
      IteratorUtils.toArray(iterator1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.iterators.CollatingIterator", "jO>=Q=~O?#x8D|$U", (-522));
      SingletonIterator<SQLRecoverableException> singletonIterator0 = new SingletonIterator<SQLRecoverableException>(sQLRecoverableException0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("org.apache.commons.collections4.iterators.CollatingIterator");
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) singletonIterator0, (Transformer<? super SQLRecoverableException, String>) transformer0);
      assertFalse(singletonIterator0.hasNext());
      assertEquals("[org.apache.commons.collections4.iterators.CollatingIterator]", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("hx~d&g_j");
      Hashtable<SQLSyntaxErrorException, Integer> hashtable0 = new Hashtable<SQLSyntaxErrorException, Integer>();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.getLastChild();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      SQLWarning sQLWarning0 = new SQLWarning(batchUpdateException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Hashtable<SQLSyntaxErrorException, Integer> hashtable0 = new Hashtable<SQLSyntaxErrorException, Integer>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      UniquePredicate<SQLTransientConnectionException> uniquePredicate1 = new UniquePredicate<SQLTransientConnectionException>();
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) vector0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(uniquePredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) notPredicate0);
      IteratorUtils.emptyIterator();
      Integer integer0 = new Integer(4);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      Integer integer1 = IteratorUtils.find((Iterator<Integer>) resettableIterator0, (Predicate<? super Integer>) notPredicate0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) stack0);
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>(hashtable0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) entrySetMapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) sQLWarning0, comparator0);
      Hashtable<SQLSyntaxErrorException, Integer> hashtable1 = new Hashtable<SQLSyntaxErrorException, Integer>();
      EntrySetMapIterator<SQLSyntaxErrorException, Integer> entrySetMapIterator1 = new EntrySetMapIterator<SQLSyntaxErrorException, Integer>(hashtable1);
      EmptyIterator.resettableEmptyIterator();
      Hashtable<BatchUpdateException, SQLFeatureNotSupportedException> hashtable2 = new Hashtable<BatchUpdateException, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<BatchUpdateException, SQLFeatureNotSupportedException> entrySetMapIterator2 = new EntrySetMapIterator<BatchUpdateException, SQLFeatureNotSupportedException>(hashtable2);
      MapIterator<BatchUpdateException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, SQLFeatureNotSupportedException>) entrySetMapIterator2);
      MapIterator<BatchUpdateException, SQLFeatureNotSupportedException> mapIterator1 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends BatchUpdateException, ? extends SQLFeatureNotSupportedException>) mapIterator0);
      Transformer<BatchUpdateException, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.EnumerationIterator");
      Iterator<String> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) mapIterator1, (Transformer<? super BatchUpdateException, ? extends String>) transformer0);
      Iterator<String> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends String>) iterator0);
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator1, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 10
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      ListIterator<Locale.FilteringMode> listIterator0 = EmptyListIterator.emptyListIterator();
      HashMap<Object, Iterator<SQLRecoverableException>> hashMap0 = new HashMap<Object, Iterator<SQLRecoverableException>>();
      Transformer<Locale.FilteringMode, Iterator<SQLRecoverableException>> transformer0 = MapTransformer.mapTransformer((Map<? super Locale.FilteringMode, ? extends Iterator<SQLRecoverableException>>) hashMap0);
      Iterator<Iterator<SQLRecoverableException>> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends Locale.FilteringMode>) listIterator0, (Transformer<? super Locale.FilteringMode, ? extends Iterator<SQLRecoverableException>>) transformer0);
      Iterator<Iterator<SQLRecoverableException>> iterator1 = IteratorUtils.pushbackIterator((Iterator<? extends Iterator<SQLRecoverableException>>) iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) resettableListIterator0);
      EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) null, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) resettableListIterator0);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) stack0);
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>(hashtable0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) entrySetMapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) sQLWarning0, comparator0);
      Hashtable<SQLSyntaxErrorException, Integer> hashtable1 = new Hashtable<SQLSyntaxErrorException, Integer>();
      EntrySetMapIterator<SQLSyntaxErrorException, Integer> entrySetMapIterator1 = new EntrySetMapIterator<SQLSyntaxErrorException, Integer>(hashtable1);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) resettableIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, ? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      MapIterator<SQLFeatureNotSupportedException, Closure<SQLNonTransientException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Closure<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLFeatureNotSupportedException, Closure<SQLNonTransientException>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, Closure<SQLNonTransientException>>) orderedMapIterator0);
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Iterator<SQLInvalidAuthorizationSpecException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[3];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.apache.commons.collections4.iterators.EmptyOrderedMapIterator", "", (-2996));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 1, sQLInvalidAuthorizationSpecException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("9F=1<^>{.+*~%ClJbm", "", (-660));
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException(sQLInvalidAuthorizationSpecException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      sQLFeatureNotSupportedException2.printStackTrace();
      IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.map.Flat3Map$EntryIterator", "`-SXY)rf0Y^E", sQLFeatureNotSupportedException1);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(10);
      IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) mapIterator0, (Object) integer1);
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(uniquePredicate0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      predicateTransformer0.transform(sQLFeatureNotSupportedException1);
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) orderedMapIterator0, (long) 1);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) skippingIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) mapIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.collections4.iterators.EmptyOrderedMapIterator";
      stringArray0[1] = "org.apache.commons.collections4.map.Flat3Map$EntryIterator";
      stringArray0[2] = "`-SXY)rf0Y^E";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0, 1);
      ListIterator<String> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<String>) objectArrayListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Integer integer0 = new Integer((-1312));
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      AndPredicate.andPredicate((Predicate<? super SQLTransientConnectionException>) uniquePredicate0, (Predicate<? super SQLTransientConnectionException>) uniquePredicate0);
      Hashtable<SQLSyntaxErrorException, Integer> hashtable0 = new Hashtable<SQLSyntaxErrorException, Integer>();
      EntrySetMapIterator<SQLSyntaxErrorException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, Integer>(hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) stack0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>(hashtable0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-2676), sQLRecoverableException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Hashtable<Object, String> hashtable1 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable1);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("elementsToSkip parameter must not be negative.", (Transformer<? super String, ? extends String>) transformer0);
      IteratorUtils.peekingIterator((Iterator<? extends String>) iterator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<InstanceofPredicate>[] iteratorArray0 = (Iterator<InstanceofPredicate>[]) Array.newInstance(Iterator.class, 1);
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.emptyIterator();
      iteratorArray0[0] = (Iterator<InstanceofPredicate>) resettableIterator0;
      Iterator<InstanceofPredicate> iterator1 = IteratorUtils.collatedIterator((Comparator<? super InstanceofPredicate>) comparator1, (Iterator<? extends InstanceofPredicate>[]) iteratorArray0);
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) iterator1);
      Iterator<Predicate<Object>> iterator2 = IteratorUtils.asIterator((Enumeration<? extends Predicate<Object>>) enumeration0);
      assertNotNull(iterator2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>(predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("", "");
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException3;
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException1;
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException2;
      sQLFeatureNotSupportedException1.getLocalizedMessage();
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException3;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "");
      Integer integer0 = new Integer(100);
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Object) integer0);
      assertFalse(boolean0);
      
      PredicateTransformer<SQLNonTransientException> predicateTransformer0 = new PredicateTransformer<SQLNonTransientException>(predicate0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      predicateTransformer0.transform(sQLFeatureNotSupportedException1);
      SkippingIterator<SQLFeatureNotSupportedException> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (long) 100);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) skippingIterator0);
      OrderedMapIterator<Locale.FilteringMode, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<Locale.FilteringMode> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Locale.FilteringMode>) orderedMapIterator0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("");
      Transformer<Locale.FilteringMode, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      String string0 = IteratorUtils.toString(iterator0, (Transformer<? super Locale.FilteringMode, String>) transformer0, "", "", "L=sc");
      assertEquals("L=sc", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      Properties properties0 = new Properties();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("T");
      IteratorUtils.getIterator(iIOMetadataNode0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) locale_FilteringMode0, (-2977));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("ZP>Bkt1 N");
      IteratorUtils.get((Iterator<String>) singletonIterator0, 0);
      SQLIntegrityConstraintViolationException[] sQLIntegrityConstraintViolationExceptionArray0 = new SQLIntegrityConstraintViolationException[8];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ZP>Bkt1 N", "BvYip^mF@O.7k2CR)");
      sQLIntegrityConstraintViolationExceptionArray0[0] = sQLIntegrityConstraintViolationException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("N,Hh<v^cg]fh!cXQJ");
      sQLIntegrityConstraintViolationExceptionArray0[1] = sQLIntegrityConstraintViolationException1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = new SQLIntegrityConstraintViolationException("ZP>Bkt1 N", "add() is not supported", sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationExceptionArray0[2] = sQLIntegrityConstraintViolationException2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException3 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationExceptionArray0[3] = sQLIntegrityConstraintViolationException3;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException4 = new SQLIntegrityConstraintViolationException("");
      sQLIntegrityConstraintViolationExceptionArray0[4] = sQLIntegrityConstraintViolationException4;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException5 = new SQLIntegrityConstraintViolationException("", "", 14, sQLIntegrityConstraintViolationException3);
      sQLIntegrityConstraintViolationExceptionArray0[5] = sQLIntegrityConstraintViolationException5;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException6 = new SQLIntegrityConstraintViolationException("", "m>9Zi+0L[@tbp");
      sQLIntegrityConstraintViolationExceptionArray0[6] = sQLIntegrityConstraintViolationException6;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException7 = new SQLIntegrityConstraintViolationException("", "N,Hh<v^cg]fh!cXQJ", (-1));
      sQLIntegrityConstraintViolationExceptionArray0[7] = sQLIntegrityConstraintViolationException7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLIntegrityConstraintViolationExceptionArray0, 0, (-530));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      uniquePredicate0.evaluate(instanceofPredicate0);
      uniquePredicate0.evaluate(listIterator0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) listIterator0);
      Properties properties0 = new Properties();
      Object object0 = new Object();
      Iterator<?> iterator0 = IteratorUtils.getIterator(object0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Comparator<SQLNonTransientConnectionException> comparator0 = (Comparator<SQLNonTransientConnectionException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      Iterator<DataTruncation> iterator1 = EmptyIterator.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) iterator1, (Iterator<? extends SQLException>) iterator0);
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      Predicate<SQLTransientConnectionException> predicate0 = NotPredicate.notPredicate((Predicate<? super SQLTransientConnectionException>) uniquePredicate0);
      Predicate<SQLTransientConnectionException> predicate1 = AndPredicate.andPredicate((Predicate<? super SQLTransientConnectionException>) predicate0, (Predicate<? super SQLTransientConnectionException>) andPredicate0);
      assertFalse(predicate1.equals((Object)predicate0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) stack0);
      Hashtable<StringTokenizer, IIOMetadataNode> hashtable0 = new Hashtable<StringTokenizer, IIOMetadataNode>();
      EntrySetMapIterator<StringTokenizer, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<StringTokenizer, IIOMetadataNode>(hashtable0);
      IteratorUtils.size((Iterator<?>) null);
      ArrayListIterator<SQLFeatureNotSupportedException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLFeatureNotSupportedException>((Object) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MapIterator<Properties, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Predicate<Object>>) enumeration0);
      LinkedHashSet<SQLDataException> linkedHashSet0 = new LinkedHashSet<SQLDataException>();
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLDataException>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLDataException>) resettableIterator0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MapIterator<Properties, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) resettableListIterator0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-2322);
      intArray0[1] = 163;
      intArray0[2] = (-2322);
      intArray0[3] = (-2322);
      intArray0[4] = (-2322);
      intArray0[5] = (-2322);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("<^Km@", "Iterator must not be null", (-2322), intArray0);
      SingletonIterator<BatchUpdateException> singletonIterator0 = new SingletonIterator<BatchUpdateException>(batchUpdateException0, true);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) singletonIterator0);
      IteratorUtils.toArray((Iterator<?>) singletonIterator0);
      ListIterator<Predicate<Object>> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Predicate<Object>>) resettableListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>(predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      Hashtable<SQLSyntaxErrorException, Integer> hashtable0 = new Hashtable<SQLSyntaxErrorException, Integer>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      AndPredicate.andPredicate((Predicate<? super SQLTransientConnectionException>) andPredicate0, (Predicate<? super SQLTransientConnectionException>) predicate0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Boolean>) null, (Predicate<? super Boolean>) andPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      Integer integer0 = new Integer((-1312));
      Iterable<SQLException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) listIterator0);
      assertNotNull(iterable0);
      
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("M(fSop?i9qY{rT");
      ListIteratorWrapper<String> listIteratorWrapper0 = new ListIteratorWrapper<String>(singletonIterator0);
      IteratorUtils.get((Iterator<String>) listIteratorWrapper0, 0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(singletonIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) stack0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>(hashtable0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-2676), sQLRecoverableException0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLInvalidAuthorizationSpecException0, comparator0, comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) entrySetMapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) comparatorPredicate0);
      int int0 = 1784;
      String string0 = null;
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Hashtable<Object, String> hashtable1 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashtable1);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("elementsToSkip parameter must not be negative.", (Transformer<? super String, ? extends String>) transformer0);
      Iterator<String> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends String>) iterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends String>) iterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator1, 164);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 163
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<StringTokenizer, IIOMetadataNode> hashMap0 = new HashMap<StringTokenizer, IIOMetadataNode>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>(hashtable0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      int int0 = (-900);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Hashtable<Object, String> hashtable1 = new Hashtable<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap1);
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("AHNy%A~", (Transformer<? super String, ? extends String>) transformer0);
      Iterator<String> iterator1 = IteratorUtils.peekingIterator((Iterator<? extends String>) iterator0);
      IteratorUtils.pushbackIterator((Iterator<? extends String>) iterator1);
      int int1 = 164;
      int int2 = 902;
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 902);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 901
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OrderedMapIterator<Vector<String>, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) iterator0);
      int[] intArray0 = new int[2];
      intArray0[0] = 512;
      intArray0[1] = 1735;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("ys_Ikq{s48:d~'M'|_X", "ys_Ikq{s48:d~'M'|_X", 2332, intArray0, (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(2332, true, true, 1735, 1735, batchUpdateException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      batchUpdateException0.getLargeUpdateCounts();
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray0);
      Iterator<DataTruncation> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) onePredicate0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) arrayList0);
      IteratorUtils.toListIterator((Iterator<? extends InstanceofPredicate>) resettableIterator1);
      AndPredicate.andPredicate((Predicate<? super SQLTransientConnectionException>) onePredicate0, (Predicate<? super SQLTransientConnectionException>) onePredicate0);
      ArrayList<InstanceofPredicate> arrayList1 = new ArrayList<InstanceofPredicate>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) vector0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) onePredicate0);
      IteratorUtils.emptyIterator();
      IteratorUtils.zippingIterator((Iterator<?>) orderedMapIterator0, (Iterator<?>) iterator1, (Iterator<?>) orderedMapIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) zippingIterator0);
      ArrayList<SQLFeatureNotSupportedException>[] arrayListArray0 = (ArrayList<SQLFeatureNotSupportedException>[]) Array.newInstance(ArrayList.class, 3);
      ArrayList<SQLFeatureNotSupportedException> arrayList2 = new ArrayList<SQLFeatureNotSupportedException>();
      arrayListArray0[0] = arrayList2;
      ArrayList<SQLFeatureNotSupportedException> arrayList3 = new ArrayList<SQLFeatureNotSupportedException>();
      arrayListArray0[1] = arrayList3;
      ArrayList<SQLFeatureNotSupportedException> arrayList4 = new ArrayList<SQLFeatureNotSupportedException>();
      arrayListArray0[2] = arrayList4;
      ResettableListIterator<ArrayList<SQLFeatureNotSupportedException>> resettableListIterator1 = IteratorUtils.arrayListIterator(arrayListArray0);
      assertTrue(resettableListIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MapIterator<Properties, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      EmptyListIterator.resettableEmptyListIterator();
      Integer integer0 = new Integer(1);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>(predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) mapIterator0, comparator0);
      Hashtable<SQLSyntaxErrorException, Integer> hashtable0 = new Hashtable<SQLSyntaxErrorException, Integer>();
      SQLDataException sQLDataException0 = new SQLDataException("4~");
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      priorityQueue0.add(instanceofPredicate0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) listIterator0);
      Closure<Integer>[] closureArray0 = (Closure<Integer>[]) Array.newInstance(Closure.class, 2);
      ChainedClosure<Integer> chainedClosure0 = new ChainedClosure<Integer>(closureArray0);
      closureArray0[0] = (Closure<Integer>) chainedClosure0;
      HashMap<Object, IIOMetadataNode> hashMap0 = new HashMap<Object, IIOMetadataNode>();
      Transformer<Object, IIOMetadataNode> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends IIOMetadataNode>) hashMap0);
      IfTransformer<Integer, IIOMetadataNode> ifTransformer0 = new IfTransformer<Integer, IIOMetadataNode>(predicate0, transformer0, transformer0);
      Closure<Integer> closure0 = TransformerClosure.transformerClosure((Transformer<? super Integer, ?>) ifTransformer0);
      closureArray0[1] = closure0;
      ResettableListIterator<Closure<Integer>> resettableListIterator0 = IteratorUtils.arrayListIterator(closureArray0, 1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = null;
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<SQLException> predicate1 = AndPredicate.andPredicate((Predicate<? super SQLException>) predicate0, (Predicate<? super SQLException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLFeatureNotSupportedException>) null, (Predicate<? super SQLFeatureNotSupportedException>) predicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      Stack<SQLException> stack0 = new Stack<SQLException>();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) stack0);
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) listIterator0);
      IteratorUtils.emptyListIterator();
      List<SQLNonTransientException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientException>) iterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 2);
      EmptyMapIterator.emptyMapIterator();
      iteratorArray0[1] = iteratorArray0[0];
      IteratorUtils.emptyOrderedMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      AndPredicate.andPredicate((Predicate<? super SQLTransientConnectionException>) andPredicate0, (Predicate<? super SQLTransientConnectionException>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      List<SQLFeatureNotSupportedException> list0 = IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      assertTrue(list0.isEmpty());
      
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) properties0, 231);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<SQLTransactionRollbackException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      iteratorArray0[0] = iterator0;
      Iterator<SQLTransactionRollbackException> iterator1 = EmptyIterator.emptyIterator();
      iteratorArray0[1] = iterator1;
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      Integer integer0 = new Integer((-1312));
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[6];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLWarning0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("x", "x", sQLDataException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("Predicate must not be null", "y\"jn4MC6'at|f", 0, sQLWarning0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException("Predicate must not be null", "x", 1557);
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("x", "y\"jn4MC6'at|f");
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "prefix may not be null", sQLDataException0);
      IteratorUtils.contains((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Object) sQLTransientConnectionException0);
      Iterable<SQLException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLException>) iterator1);
      assertNotNull(iterable0);
      
      MapIterator<SQLIntegrityConstraintViolationException, SQLSyntaxErrorException> mapIterator1 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator1, (-2149L), 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<SQLTransactionRollbackException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) mapIterator0;
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[1] = iterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      IteratorUtils.getIterator(mapIterator0);
      OrderedMapIterator<Boolean, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<Boolean, SQLWarning> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<Boolean, SQLWarning>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) uniquePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, predicate0);
      AndPredicate.andPredicate((Predicate<? super SQLTransientConnectionException>) andPredicate0, (Predicate<? super SQLTransientConnectionException>) andPredicate0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate1 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) vector0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) predicate1);
      ResettableIterator<SQLInvalidAuthorizationSpecException> resettableIterator0 = IteratorUtils.emptyIterator();
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) listIterator0, (Iterator<?>) iterator0, (Iterator<?>) resettableIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 2);
      EmptyMapIterator.emptyMapIterator();
      EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<StringTokenizer, IIOMetadataNode> hashMap0 = new HashMap<StringTokenizer, IIOMetadataNode>();
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>(hashtable0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) entrySetMapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      OrderedMapIterator<InstanceofPredicate, SQLSyntaxErrorException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<InstanceofPredicate, SQLSyntaxErrorException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<InstanceofPredicate, ? extends SQLSyntaxErrorException>) orderedMapIterator0);
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      IteratorUtils.toArray((Iterator<? extends InstanceofPredicate>) orderedMapIterator1, class0);
      IteratorUtils.emptyIterator();
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>(arrayList0);
      HashSet<SQLTransactionRollbackException> hashSet0 = new HashSet<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(hashSet0);
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) loopingIterator0, class1);
      assertEquals(0, sQLTransactionRollbackExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OrderedMapIterator<Vector<String>, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) iterator0);
      int[] intArray0 = new int[2];
      intArray0[0] = 512;
      intArray0[1] = 1735;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("ys_Ikq{s48:d~'M'|_X", "ys_Ikq{s48:d~'M'|_X", 2332, intArray0, (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      OrderedMapIterator<Boolean, SQLWarning> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<Boolean, SQLWarning> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<Boolean, SQLWarning>) orderedMapIterator1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      AndPredicate.andPredicate((Predicate<? super SQLTransientConnectionException>) uniquePredicate0, (Predicate<? super SQLTransientConnectionException>) uniquePredicate0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) vector0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) uniquePredicate0);
      IteratorUtils.emptyIterator();
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) listIterator0, (Iterator<?>) orderedMapIterator0, (Iterator<?>) mapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<SQLTransactionRollbackException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) mapIterator0;
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[1] = iterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      SQLDataException sQLDataException0 = new SQLDataException();
      IteratorUtils.getIterator(sQLDataException0);
      OrderedMapIterator<Boolean, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Boolean, SQLWarning>) orderedMapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      AndPredicate.andPredicate((Predicate<? super SQLTransientConnectionException>) uniquePredicate0, (Predicate<? super SQLTransientConnectionException>) andPredicate0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) linkedList0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) predicate0);
      IteratorUtils.emptyIterator();
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) iterator0, (Iterator<?>) resettableListIterator0, (Iterator<?>) resettableListIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<SQLTransactionRollbackException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) mapIterator0;
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[1] = iterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      IteratorUtils.getIterator(enumeration0);
      OrderedMapIterator<Boolean, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Boolean, SQLWarning>) orderedMapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      andPredicate0.evaluate(mapIterator0);
      AndPredicate.andPredicate((Predicate<? super SQLTransientConnectionException>) andPredicate0, (Predicate<? super SQLTransientConnectionException>) uniquePredicate0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      vector0.add(sQLClientInfoException0);
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) vector0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) predicate0);
      IteratorUtils.emptyIterator();
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) listIterator0, (Iterator<?>) listIterator0, (Iterator<?>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("hx~d&g_j");
      Hashtable<SQLSyntaxErrorException, Integer> hashtable0 = new Hashtable<SQLSyntaxErrorException, Integer>();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNode1.getLastChild();
      IteratorUtils.nodeListIterator((Node) iIOMetadataNode1);
      SQLWarning sQLWarning0 = new SQLWarning(batchUpdateException0);
      IteratorUtils.getIterator(sQLWarning0);
      MapIterator<Locale.FilteringMode, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>(predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.comparatorPredicate((Object) sQLFeatureNotSupportedException0, comparator0);
      Hashtable<SQLSyntaxErrorException, Integer> hashtable0 = new Hashtable<SQLSyntaxErrorException, Integer>();
      EntrySetMapIterator<SQLSyntaxErrorException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, Integer>(hashtable0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) entrySetMapIterator0, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getNextSibling();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>(predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      Hashtable<SQLSyntaxErrorException, Integer> hashtable0 = new Hashtable<SQLSyntaxErrorException, Integer>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getLastChild();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>(predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      Hashtable<SQLSyntaxErrorException, Integer> hashtable0 = new Hashtable<SQLSyntaxErrorException, Integer>();
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      TreeSet<SQLTransactionRollbackException> treeSet1 = new TreeSet<SQLTransactionRollbackException>((Collection<? extends SQLTransactionRollbackException>) treeSet0);
      HashSet<SQLTransactionRollbackException> hashSet1 = new HashSet<SQLTransactionRollbackException>();
      LoopingIterator<SQLTransactionRollbackException> loopingIterator0 = new LoopingIterator<SQLTransactionRollbackException>(treeSet0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "_I3E2;", (-409));
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) sQLFeatureNotSupportedException1, (Equator<Object>) defaultEquator0);
      Predicate<SQLException> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) predicate1);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) loopingIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate2);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) iterator0, class0);
      IteratorUtils.singletonIterator((SQLNonTransientException) sQLFeatureNotSupportedException1);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Iterator<SQLRecoverableException>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OrderedIterator<SQLException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLException>) orderedIterator0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(objectArray0, 1182, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<StringTokenizer, IIOMetadataNode> hashMap0 = new HashMap<StringTokenizer, IIOMetadataNode>();
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> hashtable0 = new Hashtable<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>();
      EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLIntegrityConstraintViolationException, LinkedHashSet<SQLTransientConnectionException>>(hashtable0);
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) entrySetMapIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      Integer integer0 = new Integer(0);
      ArrayListIterator<SQLTimeoutException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTimeoutException>(integer0, 1784);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      Integer integer0 = new Integer((-1312));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((BatchUpdateException[]) null, 16, (-1312));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<SQLTransactionRollbackException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) mapIterator0;
      Iterator<SQLTransactionRollbackException> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[1] = iterator0;
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      IteratorUtils.getIterator(enumeration0);
      OrderedMapIterator<Boolean, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Boolean, SQLWarning>) orderedMapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      AndPredicate.andPredicate((Predicate<? super SQLTransientConnectionException>) andPredicate0, (Predicate<? super SQLTransientConnectionException>) uniquePredicate0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      ResettableListIterator<SQLClientInfoException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLClientInfoException>) vector0);
      ListIterator<SQLException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLException>) resettableListIterator0, (Predicate<? super SQLException>) predicate0);
      IteratorUtils.emptyIterator();
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) listIterator0, (Iterator<?>) listIterator0, (Iterator<?>) iterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ckaK)g,=x&B&:M6k", sQLSyntaxErrorException0);
      batchUpdateException0.initCause(sQLTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("ckaK)g,=x&B&:M6k", sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransientException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      Hashtable<SQLFeatureNotSupportedException, Closure<SQLNonTransientException>> hashtable0 = new Hashtable<SQLFeatureNotSupportedException, Closure<SQLNonTransientException>>();
      EntrySetMapIterator<SQLFeatureNotSupportedException, Closure<SQLNonTransientException>> entrySetMapIterator0 = new EntrySetMapIterator<SQLFeatureNotSupportedException, Closure<SQLNonTransientException>>(hashtable0);
      MapIterator<SQLFeatureNotSupportedException, Closure<SQLNonTransientException>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, Closure<SQLNonTransientException>>) entrySetMapIterator0);
      AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, Closure<SQLNonTransientException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLFeatureNotSupportedException, Closure<SQLNonTransientException>>(mapIterator0);
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, Closure<SQLNonTransientException>>) abstractMapIteratorDecorator0);
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) entrySetMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<StringTokenizer, IIOMetadataNode> hashMap0 = new HashMap<StringTokenizer, IIOMetadataNode>();
      String string0 = "1!@WdqQ";
      String string1 = "t}C#)Y+;H|Q5";
      StringTokenizer stringTokenizer0 = new StringTokenizer("1!@WdqQ", "t}C#)Y+;H|Q5");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("7'39k'-3>HcSULHy=");
      EntrySetMapIterator<StringTokenizer, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<StringTokenizer, IIOMetadataNode>(hashMap0);
      entrySetMapIterator0.toString();
      IteratorUtils.size(entrySetMapIterator0);
      ArrayListIterator<SQLFeatureNotSupportedException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLFeatureNotSupportedException>(hashMap0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ckaK)g,=x&B&:M6k", batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JJM@^n;z4IZ3^3BH", sQLTransactionRollbackException0);
      batchUpdateException0.initCause(sQLTransactionRollbackException0);
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("JJM@^n;z4IZ3^3BH", batchUpdateException0);
      sQLTransactionRollbackException0.fillInStackTrace();
      IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) vector0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) resettableListIterator0);
      BoundedIterator<SQLException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLException>) listIterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[7];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("=", "=", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("Y", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("Y", "y+wI:.)V]Lo::I]4", 0);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException4 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[4] = sQLFeatureNotSupportedException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException5 = new SQLFeatureNotSupportedException("Y", "List must not be null", 1, sQLFeatureNotSupportedException2);
      sQLFeatureNotSupportedException4.printStackTrace();
      sQLFeatureNotSupportedExceptionArray0[5] = sQLFeatureNotSupportedException5;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException6 = new SQLFeatureNotSupportedException("=", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedExceptionArray0[6] = sQLFeatureNotSupportedException6;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0, 0);
      IteratorUtils.emptyMapIterator();
      Iterator<Object> iterator0 = IteratorUtils.chainedIterator((Iterator<?>) listIterator0, (Iterator<?>) objectArrayIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      OrderedMapIterator<Iterator<SQLRecoverableException>, Integer> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableIterator((Iterator<Iterator<SQLRecoverableException>>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(objectArray0, (-2503), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Hashtable<SQLSyntaxErrorException, Integer> hashtable0 = new Hashtable<SQLSyntaxErrorException, Integer>();
      EntrySetMapIterator<SQLSyntaxErrorException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, Integer>(hashtable0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      String string0 = ">2Dh_n:P_[sJ%";
      int[] intArray0 = new int[9];
      intArray0[0] = (-53);
      intArray0[1] = (-53);
      intArray0[2] = (-53);
      intArray0[3] = (-53);
      intArray0[4] = (-53);
      intArray0[5] = (-53);
      intArray0[6] = (-53);
      intArray0[7] = (-53);
      intArray0[8] = (-53);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(">2Dh_n:P_[sJ%", (String) null, (-53), intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      Integer integer0 = new Integer((-53));
      hashtable0.put(sQLSyntaxErrorException0, integer0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>(predicate0);
      IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) entrySetMapIterator0, (Predicate<? super SQLSyntaxErrorException>) nullIsExceptionPredicate0);
      IteratorUtils.emptyListIterator();
      ArrayListIterator<LinkedList<SQLNonTransientException>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<LinkedList<SQLNonTransientException>>(">2Dh_n:P_[sJ%", 226);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      int[] intArray0 = new int[1];
      intArray0[0] = (-869);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("=jOWQ", "=jOWQ", (-869), intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      Integer integer0 = new Integer(10);
      Hashtable<SQLSyntaxErrorException, Integer> hashtable0 = new Hashtable<SQLSyntaxErrorException, Integer>();
      hashtable0.put(sQLSyntaxErrorException0, integer0);
      LinkedHashSet<InstanceofPredicate> linkedHashSet0 = new LinkedHashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>(predicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<SQLTransactionRollbackException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      iteratorArray0[0] = iterator0;
      Iterator<SQLTransactionRollbackException> iterator1 = EmptyIterator.emptyIterator();
      iteratorArray0[1] = iterator1;
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      IteratorUtils.getIterator(enumeration0);
      OrderedMapIterator<Boolean, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapIterator<Boolean, SQLWarning> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<Boolean, SQLWarning>) orderedMapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      AndPredicate.andPredicate((Predicate<? super SQLTransientConnectionException>) andPredicate0, (Predicate<? super SQLTransientConnectionException>) uniquePredicate0);
      IteratorUtils.matchesAll((Iterator<Boolean>) mapIterator1, (Predicate<? super Boolean>) andPredicate0);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object[]) null, (-4009));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Hashtable<SQLSyntaxErrorException, Integer> hashtable0 = new Hashtable<SQLSyntaxErrorException, Integer>();
      EntrySetMapIterator<SQLSyntaxErrorException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, Integer>(hashtable0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      int[] intArray0 = new int[9];
      intArray0[0] = (-53);
      intArray0[1] = (-53);
      intArray0[2] = (-53);
      intArray0[3] = (-53);
      intArray0[4] = (-53);
      intArray0[5] = (-53);
      intArray0[7] = (-53);
      intArray0[8] = (-53);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(">2Dh_n:P_[sJ%", (String) null, (-53), intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(">2Dh_n:P_[sJ%", batchUpdateException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("org.apache.commons.collections4.iterators.ArrayListIterator", "$Q{");
      IteratorUtils.objectGraphIterator(sQLRecoverableException1, (Transformer<? super SQLRecoverableException, ? extends SQLRecoverableException>) null);
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLException>) orderedIterator0, (-1664L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      IteratorUtils.toList((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableListIterator0, 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      Hashtable<ArrayDeque<Iterator<SQLRecoverableException>>, SQLTransactionRollbackException> hashtable0 = new Hashtable<ArrayDeque<Iterator<SQLRecoverableException>>, SQLTransactionRollbackException>();
      EntrySetMapIterator<ArrayDeque<Iterator<SQLRecoverableException>>, SQLTransactionRollbackException> entrySetMapIterator0 = new EntrySetMapIterator<ArrayDeque<Iterator<SQLRecoverableException>>, SQLTransactionRollbackException>(hashtable0);
      ExceptionClosure.exceptionClosure();
      Iterator<SQLTransientConnectionException>[] iteratorArray0 = (Iterator<SQLTransientConnectionException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLTransientConnectionException>) null, (Iterator<? extends SQLTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLInvalidAuthorizationSpecException>) comparator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = null;
      String string1 = "MapIterator[";
      int int0 = 1341;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "MapIterator[", 1341);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, sQLRecoverableException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0, 1341);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ckaK)g,=x&B&:M6k", batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JJM@^n;z4IZ3^3BH", sQLTransactionRollbackException0);
      batchUpdateException0.initCause(sQLTransactionRollbackException0);
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("", batchUpdateException0);
      sQLTransactionRollbackException0.fillInStackTrace();
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException1;
      IteratorUtils.arrayIterator(sQLTransientExceptionArray0);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransientConnectionException>) vector0);
      ListIterator<SQLTransientConnectionException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransientConnectionException>) resettableListIterator0);
      String string0 = IteratorUtils.toString((Iterator<SQLTransientConnectionException>) listIterator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("1Pt]8+a'E7k~k}", "1Pt]8+a'E7k~k}", 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLIntegrityConstraintViolationException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("1Pt]8+a'E7k~k}");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) sQLFeatureNotSupportedException0;
      PrintStream printStream0 = mockPrintStream0.format("1Pt]8+a'E7k~k}", objectArray0);
      sQLIntegrityConstraintViolationException0.printStackTrace(printStream0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "0S9C!e>YYo\"JRP,HUT");
      sQLFeatureNotSupportedException0.getSuppressed();
      sQLFeatureNotSupportedException0.setNextException(sQLIntegrityConstraintViolationException1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("1Pt]8+a'E7k~k}", "1Pt]8+a'E7k~k}", sQLFeatureNotSupportedException0);
      sQLTransientConnectionException0.spliterator();
      IteratorUtils.singletonIterator((SQLTransientException) sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.unmodifiableListIterator(listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 2);
      MapIterator<SQLTransactionRollbackException, SQLClientInfoException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) mapIterator0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0);
      iteratorArray0[0] = iterator0;
      Iterator<SQLTransactionRollbackException> iterator1 = EmptyIterator.emptyIterator();
      iteratorArray0[1] = iterator1;
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>[]) iteratorArray0);
      IteratorUtils.getIterator(enumeration0);
      OrderedMapIterator<Boolean, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<Boolean, SQLWarning> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<Boolean, SQLWarning>) orderedMapIterator0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      AndPredicate.andPredicate((Predicate<? super SQLTransientConnectionException>) andPredicate0, (Predicate<? super SQLTransientConnectionException>) uniquePredicate0);
      IteratorUtils.matchesAll((Iterator<Boolean>) mapIterator1, (Predicate<? super Boolean>) andPredicate0);
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<SQLFeatureNotSupportedException>((SQLFeatureNotSupportedException[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[6];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("prefix may not be null", "PaJ2oq");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLRecoverableException0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("prefix may not be null");
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("prefix may not be null", sQLTransactionRollbackException2);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, (-3034));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      ReverseListIterator<Integer> reverseListIterator0 = new ReverseListIterator<Integer>(arrayList0);
      reverseListIterator0.reset();
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) reverseListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      IteratorUtils.emptyOrderedMapIterator();
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      int int0 = 0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(";)23b?l[", "", 0);
      properties3.put(sQLNonTransientConnectionException0, properties4);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(propertiesArray0, 1413, 1413);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<StringTokenizer, IIOMetadataNode> hashMap0 = new HashMap<StringTokenizer, IIOMetadataNode>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("1!@WdqQ", "t}C#)Y+;H|Q5");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("7'39k'-3>HcSULHy=");
      hashMap0.put(stringTokenizer0, iIOMetadataNode0);
      EntrySetMapIterator<StringTokenizer, IIOMetadataNode> entrySetMapIterator0 = new EntrySetMapIterator<StringTokenizer, IIOMetadataNode>(hashMap0);
      entrySetMapIterator0.toString();
      IteratorUtils.size(entrySetMapIterator0);
      int int0 = 0;
      ArrayListIterator<SQLFeatureNotSupportedException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLFeatureNotSupportedException>(hashMap0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Predicate<SQLException> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.find((Iterator<SQLIntegrityConstraintViolationException>) null, (Predicate<? super SQLIntegrityConstraintViolationException>) predicate0);
      ArrayListIterator<SQLTimeoutException> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<SQLTimeoutException>((Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) null, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[7];
      int int0 = 0;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(".6qxJGYvK", ".6qxJGYvK", 0);
      MockFile mockFile0 = new MockFile("org.apache.commons.collections4.map.AbstractHashedMap$Values", "org.apache.commons.collections4.map.AbstractHashedMap$Values");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      sQLTransactionRollbackException0.printStackTrace((PrintStream) mockPrintStream0);
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(".6qxJGYvK", ".6qxJGYvK", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(".6qxJGYvK", ".6qxJGYvK", (-3417), sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("", sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException("", "", sQLTimeoutException0);
      sQLTransactionRollbackExceptionArray0[4] = sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("RebVr", ".6qxJGYvK", (-3417), sQLTransactionRollbackException1);
      sQLTransactionRollbackExceptionArray0[5] = sQLTransactionRollbackException5;
      SQLTransactionRollbackException sQLTransactionRollbackException6 = new SQLTransactionRollbackException(".6qxJGYvK", "RebVr", 0, sQLTransactionRollbackException3);
      sQLTransactionRollbackExceptionArray0[6] = sQLTransactionRollbackException6;
      IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0, 0, 0);
      ObjectArrayListIterator<SQLTransientException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientException>(sQLTransactionRollbackExceptionArray0, 1216);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTimeoutException>) stack0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("4n8S+*U");
      IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("Estimated size must be greater than 0", "4n8S+*U", sQLNonTransientConnectionException0);
      DataTruncation dataTruncation0 = new DataTruncation((-1), true, true, 100, 100, sQLNonTransientConnectionException1);
      ArrayIterator<SQLDataException> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<SQLDataException>(dataTruncation0, 0, 989);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Iterator<DataTruncation> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[0];
      ResettableListIterator<SQLFeatureNotSupportedException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0, (Collection<? super SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = EmptyListIterator.emptyListIterator();
      IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) listIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      int int0 = 10;
      DataTruncation dataTruncation0 = new DataTruncation(10, true, true, 10, 10);
      ListIterator<DataTruncation> listIterator1 = IteratorUtils.singletonListIterator(dataTruncation0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLWarning>) listIterator1, (Predicate<? super SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MapIterator<Properties, StringTokenizer> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      ResettableListIterator<InstanceofPredicate> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<InstanceofPredicate> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends InstanceofPredicate>) resettableListIterator0);
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Predicate<Object>>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Closure<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLFeatureNotSupportedException, Closure<SQLNonTransientException>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLFeatureNotSupportedException, Closure<SQLNonTransientException>>) orderedMapIterator0);
      OrderedIterator<SQLInvalidAuthorizationSpecException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.chainedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0, (Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "ys_Ikq{s48:d~'M'|_X";
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("ys_Ikq{s48:d~'M'|_X", "ys_Ikq{s48:d~'M'|_X", 10, (int[]) null, (Throwable) null);
      int int0 = 1777;
      DataTruncation dataTruncation0 = new DataTruncation(1777, true, false, 1777, 2332, batchUpdateException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      batchUpdateException0.getLargeUpdateCounts();
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>((Predicate<? super SQLException>[]) null);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) onePredicate0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) arrayList0);
      IteratorUtils.toListIterator((Iterator<? extends InstanceofPredicate>) resettableIterator0);
      Class<String> class0 = String.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class1 = String.class;
      Class<String> class2 = String.class;
      Class<String> class3 = String.class;
      Class<String> class4 = String.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 9);
      classArray0[0] = class0;
      classArray0[1] = class2;
      classArray0[2] = class3;
      classArray0[3] = class1;
      classArray0[4] = class4;
      classArray0[5] = class1;
      Class<String> class5 = String.class;
      classArray0[6] = class5;
      classArray0[7] = class2;
      classArray0[8] = class4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(classArray0, 2332, 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      String string0 = "JJM@^n;z4IZ3^3BH";
      String string1 = "ckaK)g,=x&B&:M6k";
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ckaK)g,=x&B&:M6k", batchUpdateException0);
      HashMap<StringTokenizer, IIOMetadataNode> hashMap0 = new HashMap<StringTokenizer, IIOMetadataNode>();
      hashMap0.keySet();
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      BoundedIterator<SQLFeatureNotSupportedException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0, 1L);
      IteratorUtils.skippingIterator((Iterator<SQLFeatureNotSupportedException>) boundedIterator0, 0L);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) comparator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) iterator0, (Iterator<? extends SQLException>) iterator0);
      int[] intArray0 = new int[2];
      intArray0[0] = 512;
      intArray0[1] = 1735;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("ys_Ikq{s48:d~'M'|_X", "ys_Ikq{s48:d~'M'|_X", 2332, intArray0, (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(2332, true, true, 1735, 1735, batchUpdateException0);
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.singletonListIterator(dataTruncation0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      batchUpdateException0.getLargeUpdateCounts();
      OnePredicate<SQLException> onePredicate0 = new OnePredicate<SQLException>(predicateArray0);
      IteratorUtils.filteredIterator((Iterator<? extends DataTruncation>) listIterator0, (Predicate<? super DataTruncation>) onePredicate0);
      ArrayList<InstanceofPredicate> arrayList0 = new ArrayList<InstanceofPredicate>();
      ResettableIterator<InstanceofPredicate> resettableIterator1 = IteratorUtils.loopingIterator((Collection<? extends InstanceofPredicate>) arrayList0);
      IteratorUtils.toListIterator((Iterator<? extends InstanceofPredicate>) resettableIterator1);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 8);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      Class<String> class6 = String.class;
      classArray0[6] = class6;
      Class<String> class7 = String.class;
      classArray0[7] = class7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(classArray0, (-1), 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties(properties0);
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      int int0 = 0;
      IteratorUtils.arrayIterator(propertiesArray0, 0);
      Predicate<Properties>[] predicateArray0 = (Predicate<Properties>[]) Array.newInstance(Predicate.class, 6);
      String string0 = null;
      // Undeclared exception!
      try { 
        InvokerTransformer.invokerTransformer((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The method to invoke must not be null
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "Invalid map index: ";
      int int0 = 0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Invalid map index: ", "Invalid map index: ", 0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0, 0, 3422);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(", ", "", 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", 0, sQLNonTransientConnectionException0);
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator(sQLTransactionRollbackException0);
      List<SQLTransactionRollbackException> list0 = IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) listIterator0);
      IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) list0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 0, (-1433));
      IteratorUtils.singletonListIterator((SQLWarning) dataTruncation0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[8];
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1433);
      intArray0[4] = (-1433);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, dataTruncation0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", intArray1, batchUpdateException0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("DOC", ", ", (-1129), (int[]) null);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("", ", ", 0, intArray2, batchUpdateException1);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("}+![c24j+ju", (int[]) null);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      BatchUpdateException batchUpdateException5 = new BatchUpdateException("DOC", "", (int[]) null, batchUpdateException0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      BatchUpdateException batchUpdateException6 = new BatchUpdateException("DOC", "DOC", 3550, intArray0);
      batchUpdateExceptionArray0[6] = batchUpdateException6;
      BatchUpdateException batchUpdateException7 = new BatchUpdateException();
      batchUpdateExceptionArray0[7] = batchUpdateException7;
      ObjectArrayListIterator<BatchUpdateException> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<BatchUpdateException>(batchUpdateExceptionArray0, (-1433));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Hashtable<SQLSyntaxErrorException, Integer> hashtable0 = new Hashtable<SQLSyntaxErrorException, Integer>();
      EntrySetMapIterator<SQLSyntaxErrorException, Integer> entrySetMapIterator0 = new EntrySetMapIterator<SQLSyntaxErrorException, Integer>(hashtable0);
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      int[] intArray0 = new int[9];
      intArray0[0] = (-53);
      intArray0[1] = (-53);
      intArray0[2] = (-53);
      intArray0[3] = (-53);
      intArray0[4] = (-53);
      intArray0[5] = (-53);
      intArray0[6] = (-53);
      intArray0[7] = (-53);
      intArray0[8] = (-53);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(">2Dh_n:P_[sJ%", (String) null, (-53), intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      Integer integer0 = new Integer((-53));
      hashtable0.put(sQLSyntaxErrorException0, integer0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>(predicate0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLSyntaxErrorException>) entrySetMapIterator0, (Predicate<? super SQLSyntaxErrorException>) nullIsExceptionPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LinkedHashSet<StringTokenizer>[] linkedHashSetArray0 = (LinkedHashSet<StringTokenizer>[]) Array.newInstance(LinkedHashSet.class, 7);
      LinkedHashSet<StringTokenizer> linkedHashSet0 = new LinkedHashSet<StringTokenizer>();
      linkedHashSetArray0[0] = linkedHashSet0;
      LinkedHashSet<StringTokenizer> linkedHashSet1 = new LinkedHashSet<StringTokenizer>();
      linkedHashSetArray0[1] = linkedHashSet1;
      LinkedHashSet<StringTokenizer> linkedHashSet2 = new LinkedHashSet<StringTokenizer>();
      linkedHashSetArray0[2] = linkedHashSet2;
      LinkedHashSet<StringTokenizer> linkedHashSet3 = new LinkedHashSet<StringTokenizer>();
      linkedHashSetArray0[3] = linkedHashSet3;
      LinkedHashSet<StringTokenizer> linkedHashSet4 = new LinkedHashSet<StringTokenizer>();
      linkedHashSetArray0[4] = linkedHashSet4;
      LinkedHashSet<StringTokenizer> linkedHashSet5 = new LinkedHashSet<StringTokenizer>();
      linkedHashSetArray0[5] = linkedHashSet5;
      LinkedHashSet<StringTokenizer> linkedHashSet6 = new LinkedHashSet<StringTokenizer>();
      linkedHashSetArray0[6] = linkedHashSet6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(linkedHashSetArray0, (-1897));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      TreeSet<SQLNonTransientConnectionException>[] treeSetArray0 = (TreeSet<SQLNonTransientConnectionException>[]) Array.newInstance(TreeSet.class, 2);
      TreeSet<SQLNonTransientConnectionException> treeSet0 = new TreeSet<SQLNonTransientConnectionException>();
      treeSetArray0[0] = treeSet0;
      TreeSet<SQLNonTransientConnectionException> treeSet1 = new TreeSet<SQLNonTransientConnectionException>();
      treeSetArray0[1] = treeSet1;
      int int0 = 1562;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(treeSetArray0, 1562, 1562);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      NullIsExceptionPredicate<SQLNonTransientException> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<SQLNonTransientException>(predicate0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      Hashtable<SQLSyntaxErrorException, Integer> hashtable0 = new Hashtable<SQLSyntaxErrorException, Integer>();
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      TreeSet<SQLTransactionRollbackException> treeSet1 = new TreeSet<SQLTransactionRollbackException>((Collection<? extends SQLTransactionRollbackException>) treeSet0);
      HashSet<SQLTransactionRollbackException> hashSet1 = new HashSet<SQLTransactionRollbackException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", "_I3E2;", (-409));
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate1 = EqualPredicate.equalPredicate((Object) sQLFeatureNotSupportedException1, (Equator<Object>) defaultEquator0);
      NullIsTruePredicate.nullIsTruePredicate((Predicate<? super SQLException>) predicate1);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      IteratorUtils.toString((Iterator<Hashtable<SQLNonTransientConnectionException, String>>) null, (Transformer<? super Hashtable<SQLNonTransientConnectionException, String>, String>) constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>();
      linkedList0.pollFirst();
      ReverseListIterator<SQLDataException> reverseListIterator0 = new ReverseListIterator<SQLDataException>(linkedList0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) reverseListIterator0, (Iterator<? extends SQLDataException>) reverseListIterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedMapIterator<BatchUpdateException, SQLException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<BatchUpdateException, SQLException>(orderedMapIterator0);
      MapIterator<BatchUpdateException, SQLException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, SQLException>) abstractOrderedMapIteratorDecorator0);
      ListIteratorWrapper<BatchUpdateException> listIteratorWrapper0 = new ListIteratorWrapper<BatchUpdateException>(mapIterator0);
      IteratorUtils.collatedIterator((Comparator<? super BatchUpdateException>) comparator0, (Iterator<? extends BatchUpdateException>) listIteratorWrapper0, (Iterator<? extends BatchUpdateException>) mapIterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[6];
      DataTruncation dataTruncation0 = new DataTruncation((-2395), false, true, 0, 0, (Throwable) null);
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(0, false, true, 0, 10);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(0, false, true, 0, 1073741824);
      dataTruncationArray0[2] = dataTruncation2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("List must not be null", "List must not be null", dataTruncation1);
      DataTruncation dataTruncation3 = new DataTruncation(10, false, true, 0, 10, sQLNonTransientConnectionException0);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation((-1), false, true, 0, (-3735));
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation(10, true, false, 1073741824, 0);
      dataTruncationArray0[5] = dataTruncation5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, 1, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      OrderedMapIterator<Boolean, SQLWarning> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLTransactionRollbackException, LinkedList<HashMap>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) mapIterator0, class0);
      IteratorUtils.peekingIterator((Iterator<?>) orderedMapIterator0);
      Iterator<SQLException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLException>) null, (Iterator<? extends SQLException>) mapIterator0, (Iterator<? extends SQLException>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      OrderedMapIterator<SQLTimeoutException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTimeoutException, SQLFeatureNotSupportedException>) orderedMapIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fa9hd59d'ZxtW*fl8G", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", 0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 2913, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Iterator<DataTruncation>[] iteratorArray0 = (Iterator<DataTruncation>[]) Array.newInstance(Iterator.class, 8);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      DataTruncation dataTruncation0 = new DataTruncation(4099, true, true, 512, (-2222));
      dataTruncationArray0[0] = dataTruncation0;
      DataTruncation dataTruncation1 = new DataTruncation(4099, true, true, 1140, 1140, dataTruncation0);
      dataTruncationArray0[1] = dataTruncation1;
      DataTruncation dataTruncation2 = new DataTruncation(2894, true, true, (-2228), 61, dataTruncation1);
      dataTruncationArray0[2] = dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation((-2228), true, true, 61, 9, dataTruncation2);
      dataTruncationArray0[3] = dataTruncation3;
      DataTruncation dataTruncation4 = new DataTruncation(128, false, true, 2894, 4099);
      dataTruncationArray0[4] = dataTruncation4;
      DataTruncation dataTruncation5 = new DataTruncation((-1431), true, true, 512, 0);
      dataTruncationArray0[5] = dataTruncation5;
      DataTruncation dataTruncation6 = new DataTruncation((-2645), true, true, 2894, 512);
      dataTruncationArray0[6] = dataTruncation6;
      DataTruncation dataTruncation7 = new DataTruncation(0, false, true, 512, 0, dataTruncation0);
      dataTruncationArray0[7] = dataTruncation7;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(",O");
      DataTruncation dataTruncation8 = new DataTruncation(128, true, false, 1988, 0, sQLRecoverableException0);
      dataTruncationArray0[8] = dataTruncation8;
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.arrayIterator(dataTruncationArray0);
      iteratorArray0[0] = (Iterator<DataTruncation>) resettableIterator0;
      SingletonIterator<DataTruncation> singletonIterator0 = new SingletonIterator<DataTruncation>(dataTruncation6);
      iteratorArray0[1] = (Iterator<DataTruncation>) singletonIterator0;
      OrderedMapIterator<DataTruncation, SQLTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLTransientException>(orderedMapIterator0);
      iteratorArray0[2] = (Iterator<DataTruncation>) abstractOrderedMapIteratorDecorator0;
      Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException> hashtable0 = new Hashtable<DataTruncation, SQLInvalidAuthorizationSpecException>();
      EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> entrySetMapIterator0 = new EntrySetMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException>(hashtable0);
      iteratorArray0[3] = (Iterator<DataTruncation>) entrySetMapIterator0;
      ObjectArrayListIterator<DataTruncation> objectArrayListIterator0 = null;
      try {
        objectArrayListIterator0 = new ObjectArrayListIterator<DataTruncation>(dataTruncationArray0, 128, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "[e]T8btd4OYG";
      Throwable throwable0 = null;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[e]T8btd4OYG", (Throwable) null);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
