/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 09:55:38 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashtable0);
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("anT+,IH2GqwJ:", "cbMGN2Kt", intArray0, sQLClientInfoException0);
      InvokerTransformer<Object, BatchUpdateException> invokerTransformer0 = new InvokerTransformer<Object, BatchUpdateException>("_rI8Bu>6wod4", (Class<?>[]) null, (Object[]) null);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) invokerTransformer0);
      Transformer<BatchUpdateException, SQLNonTransientConnectionException> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLNonTransientConnectionException> iterator1 = IteratorUtils.transformedIterator((Iterator<? extends BatchUpdateException>) iterator0, (Transformer<? super BatchUpdateException, ? extends SQLNonTransientConnectionException>) transformer0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>) iterator0, (Iterator<?>) resettableListIterator0, (Iterator<?>) iterator1);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "Array class must not be null", 100);
      SingletonIterator<SQLTransientConnectionException> singletonIterator0 = new SingletonIterator<SQLTransientConnectionException>(sQLTransientConnectionException0);
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) singletonIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator((Object[]) predicateArray0);
      IteratorUtils.apply((Iterator<Object>) resettableListIterator0, (Closure<? super Object>) ifClosure0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ZBLrgkFoS^c", "]V\"r?~m)+?7E,8\"_lvI*");
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ConstantTransformer.constantTransformer(sQLTransactionRollbackException0);
      SingletonListIterator<Transformer<Object, SQLTransactionRollbackException>> singletonListIterator0 = new SingletonListIterator<Transformer<Object, SQLTransactionRollbackException>>(transformer0);
      singletonListIterator0.next();
      ListIterator<Transformer<Object, SQLTransactionRollbackException>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Transformer<Object, SQLTransactionRollbackException>>) singletonListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator((Object[]) predicateArray0);
      Iterator<Object> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Object>) resettableListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", (Class<?>[]) null, (Object[]) null);
      String string0 = IteratorUtils.toString((Iterator<SQLRecoverableException>) null, (Transformer<? super SQLRecoverableException, String>) invokerTransformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(stack0);
      List<SQLNonTransientConnectionException> list0 = IteratorUtils.toList((Iterator<? extends SQLNonTransientConnectionException>) reverseListIterator0, 3461);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, SQLTimeoutException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      List<StringTokenizer> list0 = IteratorUtils.toList((Iterator<? extends StringTokenizer>) orderedMapIterator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("xE<^+h", (String) null, 27);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, sQLSyntaxErrorException0);
      DataTruncation dataTruncation0 = new DataTruncation(27, false, false, 27, 4173, sQLNonTransientConnectionException0);
      Transformer<SQLException, DataTruncation> transformer0 = ConstantTransformer.constantTransformer(dataTruncation0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) iterator0, class0);
      assertEquals(1, sQLExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) listIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OrderedMapIterator<SQLIntegrityConstraintViolationException, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) orderedMapIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[4];
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator0 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      int int0 = IteratorUtils.size(objectArrayIterator0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, (-1100));
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator(sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = IteratorUtils.get((Iterator<SQLTimeoutException>) resettableIterator0, 0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException1.toString());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OrderedMapIterator<InstanceofPredicate, PriorityQueue<SQLNonTransientException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Iterator<Predicate<Object>> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Predicate<Object>>) null, (Iterator<? extends Predicate<Object>>) orderedMapIterator0, (Iterator<? extends Predicate<Object>>) orderedMapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) resettableListIterator0;
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      OrderedMapIterator<SQLIntegrityConstraintViolationException, InstanceofPredicate> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) orderedMapIterator0;
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iteratorArray0[1], 1L, 1L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, Hashtable<Properties, SQLFeatureNotSupportedException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLSyntaxErrorException, Hashtable<Properties, SQLFeatureNotSupportedException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLSyntaxErrorException, Hashtable<Properties, SQLFeatureNotSupportedException>>(mapIterator0);
      BoundedIterator<SQLSyntaxErrorException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) abstractMapIteratorDecorator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Transformer<SQLTransientConnectionException, IIOMetadataNode>[] transformerArray0 = (Transformer<SQLTransientConnectionException, IIOMetadataNode>[]) Array.newInstance(Transformer.class, 3);
      ResettableListIterator<Transformer<SQLTransientConnectionException, IIOMetadataNode>> resettableListIterator0 = IteratorUtils.arrayListIterator(transformerArray0, 0, 1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 1);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[0];
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vector<SQLInvalidAuthorizationSpecException>[] vectorArray0 = (Vector<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Vector.class, 1);
      ResettableIterator<Vector<SQLInvalidAuthorizationSpecException>> resettableIterator0 = IteratorUtils.arrayIterator(vectorArray0, 1, 1);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<BatchUpdateException, SQLTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<DataTruncation>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Properties properties0 = new Properties();
      SingletonIterator<Properties> singletonIterator0 = new SingletonIterator<Properties>(properties0, false);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Properties>) singletonIterator0, (Transformer<? super Properties, String>) transformer0, "", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.Properties' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "DMM", (-1469), sQLNonTransientConnectionException0);
      ListIterator<SQLRecoverableException> listIterator0 = IteratorUtils.singletonListIterator(sQLRecoverableException0);
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 9);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("DMM", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLRecoverableException>) listIterator0, (Transformer<? super SQLRecoverableException, String>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'DMM' on 'class java.sql.SQLRecoverableException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[5];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Wp271VY##q4Hk'");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLNonTransientException0);
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 4);
      Transformer<Object, BatchUpdateException> transformer0 = InvokerTransformer.invokerTransformer("Wp271VY##q4Hk'", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) transformer0);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) iterator0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Wp271VY##q4Hk'' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      SQLDataException sQLDataException0 = new SQLDataException("3qL]!xv'-i|1_%e:Nh=", "3qL]!xv'-i|1_%e:Nh=", 1073741824);
      stack0.add(sQLDataException0);
      LoopingListIterator<SQLDataException> loopingListIterator0 = new LoopingListIterator<SQLDataException>(stack0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLException>) loopingListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Iterator remove() cannot be called at this time");
      Predicate<SQLTransientException>[] predicateArray0 = (Predicate<SQLTransientException>[]) Array.newInstance(Predicate.class, 3);
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      InstantiateFactory<SQLTransactionRollbackException> instantiateFactory0 = new InstantiateFactory<SQLTransactionRollbackException>(class1);
      Transformer<SQLTransactionRollbackException, SQLTransactionRollbackException> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends SQLTransactionRollbackException>) instantiateFactory0);
      SwitchTransformer<SQLTransactionRollbackException, SQLTransactionRollbackException> switchTransformer0 = new SwitchTransformer<SQLTransactionRollbackException, SQLTransactionRollbackException>(predicateArray0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>[]) null, transformer0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) switchTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) iterator0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Array class must not be null", "rth.T)XYS", hashtable0);
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", ":W9&ox2", intArray0, sQLClientInfoException0);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 9);
      InvokerTransformer<Object, BatchUpdateException> invokerTransformer0 = new InvokerTransformer<Object, BatchUpdateException>("uQb|SofFb/|(8SQp<", classArray0, classArray0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iterator0, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'uQb|SofFb/|(8SQp<' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Object>) null, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("PrototypeCloneFactory: The clone method must exist and be public ", "PrototypeCloneFactory: The clone method must exist and be public ", (-2889));
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) sQLTimeoutException0);
      Hashtable<Object, Boolean> hashtable0 = new Hashtable<Object, Boolean>();
      Transformer<Object, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashtable0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Array class must not be null", "rth.T)XYS", hashtable0);
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", ":W9&ox2", intArray0, sQLClientInfoException0);
      Class<SQLDataException>[] classArray0 = (Class<SQLDataException>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, BatchUpdateException> invokerTransformer0 = new InvokerTransformer<Object, BatchUpdateException>("uQb|SofFb/|(8SQp<", classArray0, classArray0);
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.objectGraphIterator(batchUpdateException0, (Transformer<? super BatchUpdateException, ? extends BatchUpdateException>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.isEmpty(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'uQb|SofFb/|(8SQp<' on 'class java.sql.BatchUpdateException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("S&b", "S&b", 39);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("6", "6", 39, sQLTransientException0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 16);
      Transformer<SQLTransientException, SQLTimeoutException> transformer0 = InvokerTransformer.invokerTransformer("O", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.objectGraphIterator(sQLTimeoutException0, (Transformer<? super SQLTimeoutException, ? extends SQLTimeoutException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 707);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'O' on 'class java.sql.SQLTimeoutException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<Properties>) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 2);
      Properties[] propertiesArray0 = new Properties[2];
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      iteratorArray0[0] = (Iterator<Properties>) objectArrayListIterator0;
      iteratorArray0[1] = (Iterator<Properties>) objectArrayListIterator0;
      Iterator<Properties> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // You must invoke setComparator() to set a comparator first.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Stack<SQLIntegrityConstraintViolationException> stack0 = new Stack<SQLIntegrityConstraintViolationException>();
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(stack0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      stack0.add(sQLIntegrityConstraintViolationException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(stack0, comparator0, comparatorPredicate_Criterion0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Object>) loopingIterator0, (Predicate<? super Object>) comparatorPredicate0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Boolean>) null, (Iterator<? extends Boolean>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 14);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<?>) null, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", "org.apache.commons.collections4.iterators.AbstractEmptyIterator", (Throwable) null);
      Transformer<SQLIntegrityConstraintViolationException, SQLIntegrityConstraintViolationException> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.AbstractEmptyIterator");
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.objectGraphIterator(sQLIntegrityConstraintViolationException0, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) iterator0, 1578L, 1578L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.iterators.AbstractEmptyIterator' on 'class java.sql.SQLIntegrityConstraintViolationException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((HashSet<StringTokenizer>[]) null, 125, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[2];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 91, 1511);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null, 329);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, (-277));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTimeoutException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-583), (-1442));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-2235));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTransactionRollbackException[]) null, 10, 955);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLExceptionArray0, (-1), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLTimeoutException[]) null, 2939);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[6];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLTimeoutExceptionArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((StringTokenizer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) predicate0, (-1437), (-1512));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("U&*/L~g'izA6J5N\"A", "org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator");
      SQLWarning sQLWarning0 = new SQLWarning("*u(\"~qqd+__i*.", "org.apache.commons.collections4.map.SingletonMap$SingletonMapIterator", (-134), sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLWarning0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ResettableListIterator<Object> resettableListIterator0 = IteratorUtils.arrayListIterator((Object[]) predicateArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Object>) resettableListIterator0, (Closure<? super Object>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MapIterator<SQLTransientException, Integer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Factory<String> factory0 = ConstantFactory.constantFactory("4f!/C9U5*Y+Ex|s");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      String string0 = IteratorUtils.toString((Iterator<SQLTransientException>) mapIterator0, (Transformer<? super SQLTransientException, String>) transformer0, "n+!3V^", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Factory<String> factory0 = ConstantFactory.constantFactory("");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      String string0 = IteratorUtils.toString((Iterator<ServiceLoader<LinkedHashSet>>) null, (Transformer<? super ServiceLoader<LinkedHashSet>, String>) factoryTransformer0, "tHF-@]6w7CHAWOpZ", "List must not be null", "f|j2/");
      assertEquals("List must not be nullf|j2/", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Object[] objectArray0 = new Object[7];
      ObjectArrayIterator<Object> objectArrayIterator0 = new ObjectArrayIterator<Object>(objectArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Object>) objectArrayIterator0, (Predicate<? super Object>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ArrayList<String>>) null, (Predicate<? super ArrayList<String>>) comparatorPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      SingletonListIterator<Locale.FilteringMode> singletonListIterator0 = new SingletonListIterator<Locale.FilteringMode>(locale_FilteringMode0);
      List<Locale.FilteringMode> list0 = IteratorUtils.toList((Iterator<? extends Locale.FilteringMode>) singletonListIterator0, 12);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ObjectArrayIterator<String> objectArrayIterator0 = new ObjectArrayIterator<String>(stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) objectArrayIterator0, (long) 2, (-359L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      SingletonIterator<Class<SQLSyntaxErrorException>> singletonIterator0 = new SingletonIterator<Class<SQLSyntaxErrorException>>(class0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("$29|V");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Class<SQLSyntaxErrorException>>) singletonIterator0, (Transformer<? super Class<SQLSyntaxErrorException>, String>) transformer0, "$29|V", ", Size: ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ListIterator<BatchUpdateException> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<SQLException, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<BatchUpdateException>) listIterator0, (Transformer<? super BatchUpdateException, String>) transformer0, "M ", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vector<Hashtable<ClientInfoStatus, SQLTransientException>> vector0 = new Vector<Hashtable<ClientInfoStatus, SQLTransientException>>();
      Hashtable<ClientInfoStatus, SQLTransientException> hashtable0 = new Hashtable<ClientInfoStatus, SQLTransientException>();
      vector0.add(hashtable0);
      ResettableListIterator<Hashtable<ClientInfoStatus, SQLTransientException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Hashtable<ClientInfoStatus, SQLTransientException>>) vector0);
      // Undeclared exception!
      IteratorUtils.size(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResettableIterator<SQLTimeoutException> resettableIterator0 = IteratorUtils.singletonIterator((SQLTimeoutException) null);
      List<SQLTimeoutException> list0 = IteratorUtils.toList((Iterator<? extends SQLTimeoutException>) resettableIterator0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator(list0);
      SQLTimeoutException sQLTimeoutException0 = IteratorUtils.get((Iterator<SQLTimeoutException>) resettableListIterator0, 0);
      assertNull(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 2);
      Properties[] propertiesArray0 = new Properties[2];
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      iteratorArray0[1] = (Iterator<Properties>) objectArrayListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.get(iteratorArray0[1], 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 8
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTimeoutException>) resettableListIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      SingletonListIterator<ArrayList<String>> singletonListIterator0 = new SingletonListIterator<ArrayList<String>>(arrayList0);
      boolean boolean0 = IteratorUtils.isEmpty(singletonListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MapIterator<String, Object> mapIterator0 = IteratorUtils.emptyMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) null);
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      ResettableIterator<SQLException> resettableIterator0 = IteratorUtils.singletonIterator((SQLException) null);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLException>) resettableIterator0, (Predicate<? super SQLException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<SQLException>) null, (Predicate<? super SQLException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<SQLTransientConnectionException>) null, (Predicate<? super SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.singletonListIterator((IIOMetadataNode) null);
      boolean boolean0 = IteratorUtils.contains((Iterator<IIOMetadataNode>) listIterator0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      ArrayList<String>[] arrayListArray0 = (ArrayList<String>[]) Array.newInstance(ArrayList.class, 4);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayListArray0[0] = arrayList0;
      SingletonListIterator<ArrayList<String>> singletonListIterator0 = new SingletonListIterator<ArrayList<String>>(arrayListArray0[0]);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<ArrayList<String>>) singletonListIterator0, (Predicate<? super ArrayList<String>>) nullIsExceptionPredicate0);
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      ArrayList<String>[] arrayListArray0 = (ArrayList<String>[]) Array.newInstance(ArrayList.class, 4);
      SingletonListIterator<ArrayList<String>> singletonListIterator0 = new SingletonListIterator<ArrayList<String>>(arrayListArray0[0]);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<ArrayList<String>>) singletonListIterator0, (Predicate<? super ArrayList<String>>) nullIsExceptionPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ListIterator<ArrayList<String>> listIterator0 = EmptyListIterator.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<ArrayList<String>>) listIterator0, (Predicate<? super ArrayList<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<BatchUpdateException, SQLNonTransientConnectionException> hashMap0 = new HashMap<BatchUpdateException, SQLNonTransientConnectionException>();
      int[] intArray0 = new int[7];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, sQLNonTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", ",{", 1);
      hashMap0.put(batchUpdateException0, sQLNonTransientConnectionException0);
      EntrySetMapIterator<BatchUpdateException, SQLNonTransientConnectionException> entrySetMapIterator0 = new EntrySetMapIterator<BatchUpdateException, SQLNonTransientConnectionException>(hashMap0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      BatchUpdateException batchUpdateException1 = IteratorUtils.find((Iterator<BatchUpdateException>) entrySetMapIterator0, (Predicate<? super BatchUpdateException>) predicate0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      ListIterator<BatchUpdateException> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) uniquePredicate0);
      BatchUpdateException batchUpdateException1 = IteratorUtils.find((Iterator<BatchUpdateException>) listIterator1, (Predicate<? super BatchUpdateException>) uniquePredicate0);
      assertNull(batchUpdateException1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashSet<InstanceofPredicate> hashSet0 = new HashSet<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) hashSet0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      Predicate<Object> predicate1 = IteratorUtils.find((Iterator<Predicate<Object>>) null, (Predicate<? super Predicate<Object>>) nullIsExceptionPredicate0);
      assertNull(predicate1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" must bTKe mparable");
      Iterator<SQLTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLTransientException) sQLTimeoutException0, (Transformer<? super SQLTransientException, ? extends SQLTransientException>) null);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super SQLTransientException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(onePredicate0, (Closure<? super Object>) null);
      IteratorUtils.apply((Iterator<Object>) zippingIterator0, (Closure<? super Object>) ifClosure0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Closure<SQLException> closure0 = NOPClosure.nopClosure();
      IteratorUtils.apply((Iterator<SQLSyntaxErrorException>) null, (Closure<? super SQLSyntaxErrorException>) closure0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("Node must not be null");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("L+", "L+", sQLTransientException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLSyntaxErrorException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MapIterator<SQLRecoverableException, SQLDataException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<?> iterator0 = IteratorUtils.getIterator(mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OrderedMapIterator<SQLFeatureNotSupportedException, Stack<SQLNonTransientConnectionException>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) orderedMapIterator0, (-2144));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SingletonIterator<SQLTimeoutException> singletonIterator0 = new SingletonIterator<SQLTimeoutException>((SQLTimeoutException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) singletonIterator0, (Class<SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MapIterator<SQLTimeoutException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Class<SQLException> class0 = SQLException.class;
      SQLException[] sQLExceptionArray0 = IteratorUtils.toArray((Iterator<? extends SQLException>) mapIterator0, class0);
      assertEquals(0, sQLExceptionArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Predicate must not be null", (String) null, (-3179));
      DataTruncation dataTruncation0 = new DataTruncation((-1471), true, true, 2168, 2168, sQLTimeoutException0);
      Factory<DataTruncation> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<DataTruncation, DataTruncation> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends DataTruncation>) factory0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.objectGraphIterator(dataTruncation0, (Transformer<? super DataTruncation, ? extends DataTruncation>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray(iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("QNd");
      ResettableIterator<Locale.LanguageRange> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.LanguageRange>) list0);
      ListIterator<Locale.LanguageRange> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends Locale.LanguageRange>) resettableIterator0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Locale.LanguageRange>) listIterator0, 3473);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      Iterable<BatchUpdateException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends BatchUpdateException>) listIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OrderedMapIterator<SQLSyntaxErrorException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, Integer>(orderedMapIterator0);
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      Iterable<SQLSyntaxErrorException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) zippingIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Hashtable<ArrayList<SQLFeatureNotSupportedException>, Integer> hashtable0 = new Hashtable<ArrayList<SQLFeatureNotSupportedException>, Integer>();
      Enumeration<Integer> enumeration0 = hashtable0.elements();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Iterator<Integer> iterator0 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0, (Collection<? super Integer>) linkedHashSet0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Stack<SQLException> stack0 = new Stack<SQLException>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) null, (Collection<? super SQLSyntaxErrorException>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ResettableListIterator<SQLDataException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Enumeration<SQLDataException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) enumeration0, (Collection<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Hashtable<SQLTransientConnectionException, SQLDataException> hashtable0 = new Hashtable<SQLTransientConnectionException, SQLDataException>();
      EntrySetMapIterator<SQLTransientConnectionException, SQLDataException> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransientConnectionException, SQLDataException>(hashtable0);
      Enumeration<SQLTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransientConnectionException>) entrySetMapIterator0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLTransientException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Vector<Hashtable<ClientInfoStatus, SQLTransientException>> vector0 = new Vector<Hashtable<ClientInfoStatus, SQLTransientException>>();
      ResettableListIterator<Hashtable<ClientInfoStatus, SQLTransientException>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<Hashtable<ClientInfoStatus, SQLTransientException>>) vector0);
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends BatchUpdateException>) listIterator0, (Predicate<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLSyntaxErrorExceptionArray0[0]);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) equalPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ListIterator<Boolean> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>) listIterator0, (Iterator<? extends Boolean>) listIterator0, (Iterator<? extends Boolean>) listIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Boolean>) zippingIterator0, (Predicate<? super Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<?>) null, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer integer0 = new Integer((-876));
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) null, (Transformer<? super DataTruncation, ? extends Integer>) constantTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Properties>) null, (Iterator<? extends Properties>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException("oY)x3", "oY)x3", sQLException0);
      Transformer<Object, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("oY)x3", (Class<?>[]) null, (Object[]) null);
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLDataException>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'oY)x3' on 'class java.sql.SQLDataException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (Map<String, ClientInfoStatus>) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("L+", "L+", sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", sQLSyntaxErrorException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLIntegrityConstraintViolationException>) singletonIterator0, (Transformer<? super SQLIntegrityConstraintViolationException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 14, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      ResettableIterator<Locale.FilteringMode> resettableIterator0 = IteratorUtils.arrayIterator(locale_FilteringModeArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ListIterator<Boolean> listIterator0 = EmptyListIterator.emptyListIterator();
      ZippingIterator<Boolean> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Boolean>) listIterator0, (Iterator<? extends Boolean>) listIterator0, (Iterator<? extends Boolean>) listIterator0);
      Iterator<Boolean> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends Boolean>) listIterator0, (Iterator<? extends Boolean>) zippingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator("Estimated size must be gteater than 0");
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("Estimated size must be gteater than 0");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashSet<LinkedHashSet>>) iterator0, (Transformer<? super HashSet<LinkedHashSet>, String>) transformer0, (String) null, (String) null, "The predicate and closure arrays must be the same size");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Iterator<SQLTimeoutException>[] iteratorArray0 = (Iterator<SQLTimeoutException>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Object> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<?>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Object>) zippingIterator0, (Closure<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MapIterator<String, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<String, String> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[9];
      ObjectArrayIterator<DataTruncation> objectArrayIterator0 = new ObjectArrayIterator<DataTruncation>(dataTruncationArray0, 6);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super DataTruncation>) null, (Iterator<? extends DataTruncation>) objectArrayIterator0, (Iterator<? extends DataTruncation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      StackTraceElement[] stackTraceElementArray0 = sQLTimeoutException0.getStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object[]) stackTraceElementArray0, 3, (-4091));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[19];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 7, (-1698));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = IteratorUtils.toString((Iterator<HashSet<Iterator>>) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>) null, (Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning(",Q?fb/d&p5*", "vF!F5<8s", 10, (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLWarning0);
      IdentityPredicate<SQLTransactionRollbackException> identityPredicate0 = new IdentityPredicate<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      IfTransformer<SQLTransactionRollbackException, SQLTransactionRollbackException> ifTransformer0 = new IfTransformer<SQLTransactionRollbackException, SQLTransactionRollbackException>(identityPredicate0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) null, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) null);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.objectGraphIterator(sQLTransactionRollbackException0, (Transformer<? super SQLTransactionRollbackException, ? extends SQLTransactionRollbackException>) ifTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll(iterator0, (Predicate<? super SQLTransactionRollbackException>) identityPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends StringTokenizer>) null, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Boolean>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[2];
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      Iterator<Properties> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Properties>) objectArrayListIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) resettableListIterator0, 5, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ArrayDeque<SQLWarning>[] arrayDequeArray0 = (ArrayDeque<SQLWarning>[]) Array.newInstance(ArrayDeque.class, 9);
      ResettableListIterator<ArrayDeque<SQLWarning>> resettableListIterator0 = IteratorUtils.arrayListIterator(arrayDequeArray0, 9);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation((-1), false, false, 1196, (-166));
      boolean boolean0 = IteratorUtils.contains((Iterator<SQLTransientException>) null, (Object) dataTruncation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, (-1100));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTimeoutException0, (-527));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      ListIterator<ClientInfoStatus> listIterator0 = IteratorUtils.singletonListIterator(clientInfoStatus0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<ClientInfoStatus>) listIterator0, (Closure<? super ClientInfoStatus>) chainedClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("QNd");
      ResettableIterator<Locale.LanguageRange> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Locale.LanguageRange>) list0);
      Iterator<Locale.LanguageRange> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends Locale.LanguageRange>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 324);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends DataTruncation>) orderedIterator0, (Transformer<? super DataTruncation, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ZBLrgkFoS^c", "]V\"r?~m)+?7E,8\"_lvI*");
      Transformer<Object, SQLTransactionRollbackException> transformer0 = ConstantTransformer.constantTransformer(sQLTransactionRollbackException0);
      SingletonListIterator<Transformer<Object, SQLTransactionRollbackException>> singletonListIterator0 = new SingletonListIterator<Transformer<Object, SQLTransactionRollbackException>>(transformer0);
      ListIterator<Transformer<Object, SQLTransactionRollbackException>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Transformer<Object, SQLTransactionRollbackException>>) singletonListIterator0);
      assertTrue(listIterator0.hasNext());
  }
}
