/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 09:11:20 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      SingletonIterator<ClientInfoStatus> singletonIterator0 = new SingletonIterator<ClientInfoStatus>(clientInfoStatus0);
      Transformer<Object, Transformer<Integer, Object>> transformer0 = InvokerTransformer.invokerTransformer("aX,Ep]$wQw");
      Iterator<Transformer<Integer, Object>> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends ClientInfoStatus>) singletonIterator0, (Transformer<? super ClientInfoStatus, ? extends Transformer<Integer, Object>>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'aX,Ep]$wQw' on 'class java.sql.ClientInfoStatus' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Transformer<Integer, Object> transformer0 = ConstantTransformer.nullTransformer();
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>(transformer0);
      Integer integer0 = new Integer(10);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.singletonIterator(integer0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Integer>) resettableIterator0, (Closure<? super Integer>) closure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Transformer<Integer, Object> transformer0 = ConstantTransformer.nullTransformer();
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>(transformer0);
      IteratorUtils.get((Iterator<Transformer<Integer, Object>>) singletonIterator0, 0);
      BatchUpdateException[] batchUpdateExceptionArray0 = new BatchUpdateException[6];
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Node must not be null", "=Tk[c->ta3}fP'", 1, intArray0);
      batchUpdateExceptionArray0[0] = batchUpdateException0;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("delimiter may not be null", "delimiter may not be null", intArray0);
      batchUpdateExceptionArray0[1] = batchUpdateException1;
      BatchUpdateException batchUpdateException2 = new BatchUpdateException("", intArray0, batchUpdateException0);
      batchUpdateExceptionArray0[2] = batchUpdateException2;
      BatchUpdateException batchUpdateException3 = new BatchUpdateException("=Tk[c->ta3}fP'", "delimiter may not be null", 10, intArray0, batchUpdateException1);
      batchUpdateExceptionArray0[3] = batchUpdateException3;
      BatchUpdateException batchUpdateException4 = new BatchUpdateException("Z%q]uBD", "A7Le[%,dCi", intArray0);
      batchUpdateExceptionArray0[4] = batchUpdateException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException1);
      BatchUpdateException batchUpdateException5 = new BatchUpdateException(intArray0, sQLFeatureNotSupportedException0);
      batchUpdateExceptionArray0[5] = batchUpdateException5;
      ResettableListIterator<BatchUpdateException> resettableListIterator0 = IteratorUtils.arrayListIterator(batchUpdateExceptionArray0, 0, 1);
      assertTrue(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>((Transformer<Integer, Object>) null);
      IteratorUtils.get((Iterator<Transformer<Integer, Object>>) singletonIterator0, 0);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      LoopingIterator<SQLTransientConnectionException> loopingIterator0 = new LoopingIterator<SQLTransientConnectionException>(vector0);
      vector0.add((SQLTransientConnectionException) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) loopingIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Stack<SQLSyntaxErrorException> stack0 = new Stack<SQLSyntaxErrorException>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      stack0.add(sQLSyntaxErrorException0);
      LoopingListIterator<SQLSyntaxErrorException> loopingListIterator0 = new LoopingListIterator<SQLSyntaxErrorException>(stack0);
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) loopingListIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLIntegrityConstraintViolationException>) linkedList0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "?_<-1Sz4J/A`u$*yx", 1);
      linkedList0.offerLast(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, 1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IteratorUtils.singletonIterator((Stack<Object>) null);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[0];
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("|Egvg`0uWuN#d>U^|Jb");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) objectArrayListIterator0, (Transformer<? super SQLDataException, String>) transformer0, "edZVC", (String) null, "|Egvg`0uWuN#d>U^|Jb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EmptyListIterator.emptyListIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]");
      ListIterator<SQLSyntaxErrorException> listIterator0 = IteratorUtils.singletonListIterator(sQLSyntaxErrorException0);
      Class<SQLClientInfoException>[] classArray0 = (Class<SQLClientInfoException>[]) Array.newInstance(Class.class, 5);
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      classArray0[0] = class1;
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      classArray0[1] = class2;
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      classArray0[2] = class3;
      Class<SQLClientInfoException> class4 = SQLClientInfoException.class;
      classArray0[3] = class4;
      Class<SQLClientInfoException> class5 = SQLClientInfoException.class;
      classArray0[4] = class5;
      InvokerTransformer<SQLNonTransientException, SQLSyntaxErrorException> invokerTransformer0 = new InvokerTransformer<SQLNonTransientException, SQLSyntaxErrorException>("]", classArray0, classArray0);
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.objectGraphIterator(sQLSyntaxErrorException0, (Transformer<? super SQLSyntaxErrorException, ? extends SQLSyntaxErrorException>) invokerTransformer0);
      Iterator<SQLSyntaxErrorException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0, (Iterator<? extends SQLSyntaxErrorException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) iterator1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ']' on 'class java.sql.SQLSyntaxErrorException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLClientInfoException[] sQLClientInfoExceptionArray0 = new SQLClientInfoException[8];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-4818);
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) (-4818);
      longArray0[4] = (long) 3;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("1_pph~$)#ZHMM^", "A$", (-4818), longArray0, sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(batchUpdateException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("cZ2yQER", "prefix may not be null", 3, hashMap0, sQLTimeoutException0);
      sQLClientInfoExceptionArray0[0] = sQLClientInfoException1;
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("cZ2yQER", "prefix may not be null", hashMap0, sQLClientInfoException1);
      sQLClientInfoExceptionArray0[1] = sQLClientInfoException2;
      SQLClientInfoException sQLClientInfoException3 = new SQLClientInfoException("A$", "", hashMap0);
      sQLClientInfoExceptionArray0[2] = sQLClientInfoException3;
      SQLClientInfoException sQLClientInfoException4 = new SQLClientInfoException(hashMap0);
      sQLClientInfoExceptionArray0[3] = sQLClientInfoException4;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("A$");
      SQLClientInfoException sQLClientInfoException5 = new SQLClientInfoException("h M`>XrVoS", hashMap0, sQLFeatureNotSupportedException0);
      sQLClientInfoExceptionArray0[4] = sQLClientInfoException5;
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException6 = new SQLClientInfoException((String) null, hashtable0);
      sQLClientInfoExceptionArray0[5] = sQLClientInfoException6;
      SQLClientInfoException sQLClientInfoException7 = new SQLClientInfoException("The predicate and closure map must not be null", "", hashtable0, (Throwable) null);
      sQLClientInfoExceptionArray0[6] = sQLClientInfoException7;
      SQLClientInfoException sQLClientInfoException8 = new SQLClientInfoException(hashtable0, sQLClientInfoException6);
      sQLClientInfoExceptionArray0[7] = sQLClientInfoException8;
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.arrayIterator(sQLClientInfoExceptionArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(instanceofPredicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsTruePredicate0;
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) vector0);
      predicateArray0[1] = predicate0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLClientInfoException4, comparator0, comparatorPredicate_Criterion0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, comparatorPredicate0);
      predicateArray0[2] = (Predicate<Object>) andPredicate0;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(predicateArray0[0]);
      predicateArray0[3] = (Predicate<Object>) identityPredicate0;
      AndPredicate<Object> andPredicate1 = new AndPredicate<Object>(predicate0, andPredicate0);
      predicateArray0[4] = (Predicate<Object>) andPredicate1;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(nullIsTruePredicate0, comparatorPredicate0);
      predicateArray0[5] = (Predicate<Object>) orPredicate0;
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      IfClosure<SQLException> ifClosure0 = new IfClosure<SQLException>(predicate1, (Closure<? super SQLException>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLClientInfoException>) resettableIterator0, (Closure<? super SQLClientInfoException>) ifClosure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OrderedIterator<IIOMetadataNode> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) orderedIterator0, class0);
      Comparator<SQLTransientException> comparator0 = (Comparator<SQLTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 5);
      OrderedMapIterator<SQLTransactionRollbackException, StringTokenizer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      iteratorArray0[0] = (Iterator<SQLTransactionRollbackException>) orderedMapIterator0;
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      TreeSet<InstanceofPredicate> treeSet0 = new TreeSet<InstanceofPredicate>();
      TreeSet<InstanceofPredicate> treeSet1 = new TreeSet<InstanceofPredicate>((SortedSet<InstanceofPredicate>) treeSet0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) treeSet1);
      predicateArray1[0] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray1);
      predicateArray1[1] = (Predicate<Object>) allPredicate0;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicateArray1[1]);
      predicateArray1[2] = (Predicate<Object>) nullIsExceptionPredicate0;
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      predicateArray1[3] = predicate1;
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray1);
      predicateArray1[4] = (Predicate<Object>) allPredicate1;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicateArray1[2], nullIsExceptionPredicate0);
      predicateArray1[5] = (Predicate<Object>) orPredicate0;
      Predicate<Object> predicate2 = AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray1);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate2);
      predicateArray0[0] = (Predicate<Object>) nullIsFalsePredicate0;
      Predicate<Object> predicate3 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate3;
      Predicate<Object> predicate4 = EqualPredicate.equalPredicate((Object) null);
      predicateArray0[2] = predicate4;
      String string0 = "org.apache.commons.collections4.functors.SwitchClosure";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.SwitchClosure");
      Predicate<Object> predicate5 = EqualPredicate.equalPredicate((Object) sQLSyntaxErrorException0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(allPredicate0, predicate5);
      predicateArray0[3] = (Predicate<Object>) andPredicate0;
      Predicate<Object> predicate6 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[4] = predicate6;
      Predicate<Object> predicate7 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray1);
      predicateArray0[5] = predicate7;
      int int0 = (-511);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.SwitchClosure", "org.apache.commons.collections4.functors.SwitchClosure", (-511));
      Predicate<SQLNonTransientException> predicate8 = EqualPredicate.equalPredicate((SQLNonTransientException) sQLNonTransientConnectionException0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate9 = ComparatorPredicate.comparatorPredicate((Object) predicate8, comparator1);
      predicateArray0[6] = predicate9;
      Predicate<Object> predicate10 = EqualPredicate.equalPredicate((Object) predicate3);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate1 = new NullIsExceptionPredicate<Object>(predicate10);
      predicateArray0[7] = (Predicate<Object>) nullIsExceptionPredicate1;
      Predicate<Object> predicate11 = UniquePredicate.uniquePredicate();
      predicateArray0[8] = predicate11;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      Predicate<SQLTransactionRollbackException> predicate12 = NotPredicate.notPredicate((Predicate<? super SQLTransactionRollbackException>) anyPredicate0);
      Iterator<SQLTransactionRollbackException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) orderedMapIterator0, (Predicate<? super SQLTransactionRollbackException>) predicate12);
      iteratorArray0[1] = iterator0;
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLTransactionRollbackException>) iterator0, 1073741824);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("");
      SingletonListIterator<StringTokenizer> singletonListIterator0 = new SingletonListIterator<StringTokenizer>(stringTokenizer0);
      ListIteratorWrapper<StringTokenizer> listIteratorWrapper0 = new ListIteratorWrapper<StringTokenizer>(singletonListIterator0);
      ListIterator<StringTokenizer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<StringTokenizer>) listIteratorWrapper0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<StringTokenizer>) listIterator0, (Transformer<? super StringTokenizer, String>) invokerTransformer0, "", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.util.StringTokenizer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Stack<HashSet<String>> stack0 = new Stack<HashSet<String>>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      stack0.add((HashSet<String>) linkedHashSet0);
      ResettableListIterator<HashSet<String>> resettableListIterator0 = IteratorUtils.loopingListIterator((List<HashSet<String>>) stack0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<HashSet<String>>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MapIterator<IIOMetadataNode, Closure<SQLIntegrityConstraintViolationException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      int int0 = IteratorUtils.size(mapIterator0);
      assertEquals(0, int0);
      
      Vector<String>[] vectorArray0 = (Vector<String>[]) Array.newInstance(Vector.class, 2);
      Stack<String> stack0 = new Stack<String>();
      vectorArray0[0] = (Vector<String>) stack0;
      Stack<String> stack1 = new Stack<String>();
      vectorArray0[1] = (Vector<String>) stack1;
      ResettableListIterator<Vector<String>> resettableListIterator0 = IteratorUtils.arrayListIterator(vectorArray0, 2);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      OrderedIterator<HashSet<Properties>> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<HashSet<Properties>>) orderedIterator0, (Transformer<? super HashSet<Properties>, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Y", "Y");
      ListIterator<SQLInvalidAuthorizationSpecException> listIterator0 = IteratorUtils.singletonListIterator(sQLInvalidAuthorizationSpecException0);
      Transformer<SQLException, String> transformer0 = ConstantTransformer.constantTransformer("RD_0X?o<5(|8v\"&fjw");
      Transformer<Object, String> transformer1 = StringValueTransformer.stringValueTransformer();
      IfTransformer<SQLInvalidAuthorizationSpecException, String> ifTransformer0 = new IfTransformer<SQLInvalidAuthorizationSpecException, String>((Predicate<? super SQLInvalidAuthorizationSpecException>) null, transformer0, transformer1);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) listIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      Transformer<SQLException, String> transformer1 = IfTransformer.ifTransformer((Predicate<? super SQLException>) predicate0, (Transformer<? super SQLException, ? extends String>) transformer0, (Transformer<? super SQLException, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Transformer<? super SQLInvalidAuthorizationSpecException, String>) transformer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>((Transformer<Integer, Object>) null);
      ResettableIterator<HashSet<String>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.toString((Iterator<HashSet<String>>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Locale.Category>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MapIterator<HashSet<String>, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<HashSet<String>>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      MapIterator<IIOMetadataNode, SQLNonTransientConnectionException> mapIterator1 = IteratorUtils.emptyMapIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IIOMetadataNode[] iIOMetadataNodeArray0 = IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) mapIterator1, class0);
      assertEquals(0, iIOMetadataNodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) vector0);
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
      MapIterator<LinkedHashSet<SQLTransientException>, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedHashSet<SQLTransientException>>) mapIterator0, (Transformer<? super LinkedHashSet<SQLTransientException>, String>) transformer0, "", "T2#Iqd+P?-9", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "", 4376);
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.singletonIterator((SQLNonTransientException) sQLFeatureNotSupportedException0);
      OrderedMapIterator<SQLClientInfoException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, SQLFeatureNotSupportedException>) orderedMapIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) mapIterator0, (long) 4376);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 4, 4376);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>((Transformer<Integer, Object>) null);
      IteratorUtils.get((Iterator<Transformer<Integer, Object>>) singletonIterator0, 0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      String string0 = "[";
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<String> iterator0 = IteratorUtils.objectGraphIterator("[", (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedHashSet<SQLTimeoutException> linkedHashSet0 = new LinkedHashSet<SQLTimeoutException>(4, 1.0F);
      ResettableIterator<HashSet<SQLTimeoutException>> resettableIterator0 = IteratorUtils.singletonIterator((HashSet<SQLTimeoutException>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<HashSet<SQLTimeoutException>>) resettableIterator0, (Predicate<? super HashSet<SQLTimeoutException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      DataTruncation dataTruncation0 = new DataTruncation(1005, true, true, 1488, 1488);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("iterator", "iterator", 1488, dataTruncation0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLIntegrityConstraintViolationException0, (Equator<Object>) defaultEquator0);
      predicateArray0[0] = predicate0;
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) nonePredicate0;
      MapIterator<InstanceofPredicate, StringTokenizer> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends InstanceofPredicate>) mapIterator0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MapIterator<HashSet<String>, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<HashSet<String>>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) mapIterator0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("\"R!JbO.s12|.mr\"/");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("hf60jOJwO JrYy");
      SingletonIterator<SQLException> singletonIterator0 = new SingletonIterator<SQLException>(sQLTransientConnectionException0);
      sQLTransientConnectionException0.getLocalizedMessage();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) sQLTransientConnectionException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLException>) singletonIterator0, (Predicate<? super SQLException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>((Transformer<Integer, Object>) null);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("\"R!JbO.s12|.mr\"/");
      SingletonIterator<SQLException> singletonIterator1 = new SingletonIterator<SQLException>(sQLTransientException0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLException>) singletonIterator1, (Predicate<? super SQLException>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MapIterator<HashSet<String>, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<HashSet<String>>) mapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IteratorUtils.emptyMapIterator();
      StringTokenizer stringTokenizer0 = new StringTokenizer("", ",sJ");
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.contains((Iterator<Locale.Category>) null, (Object) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) null, (Iterator<? extends SQLTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[8];
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 7, 7);
      IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0);
      EmptyIterator.resettableEmptyIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Hashtable<Integer, Locale.Category> hashtable0 = new Hashtable<Integer, Locale.Category>();
      EntrySetMapIterator<Integer, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Locale.Category>(hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Integer>) entrySetMapIterator0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef");
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLFeatureNotSupportedException0, (Comparator<SQLException>) null, comparatorPredicate_Criterion0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) null, (Predicate<? super SQLInvalidAuthorizationSpecException>) comparatorPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLRecoverableException0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.Category>>) resettableIterator0, (Transformer<? super EnumSet<Locale.Category>, ? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MapIterator<HashSet<String>, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      String string0 = IteratorUtils.toString((Iterator<HashSet<String>>) mapIterator0);
      assertEquals("[]", string0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator("[]");
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>((Transformer<Integer, Object>) null);
      IteratorUtils.get((Iterator<Transformer<Integer, Object>>) singletonIterator0, 0);
      OrderedMapIterator<EnumSet<Locale.Category>, ServiceLoader<SQLClientInfoException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, Properties> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.Category>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.Category>, ? extends Properties>) transformer0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("6]^ llRI1v", "6]^ llRI1v", 0, (Throwable) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLRecoverableException0, comparator0, comparatorPredicate_Criterion0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonListIterator<SQLInvalidAuthorizationSpecException> singletonListIterator0 = new SingletonListIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) singletonListIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) comparatorPredicate0);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) singletonListIterator0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "gb,;&}MPnGnG_%EN";
      stringArray0[1] = "!_5]>{kv|";
      stringArray0[2] = "[DMb!^jxf";
      stringArray0[3] = "UXhOmg?_(5u)?iXb";
      stringArray0[4] = "gR@Th";
      stringArray0[5] = "GyQ./";
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      Iterator<String> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends String>) objectArrayListIterator0);
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLRecoverableException0);
      OrderedMapIterator<SQLDataException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLException, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ResettableListIterator<SQLException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.matchesAny((Iterator<SQLException>) resettableListIterator0, (Predicate<? super SQLException>) equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTimeoutException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      LoopingIterator<SQLClientInfoException> loopingIterator0 = new LoopingIterator<SQLClientInfoException>(treeSet0);
      Enumeration<SQLClientInfoException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLClientInfoException>) loopingIterator0);
      Iterator<SQLClientInfoException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLClientInfoException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) iterator0, (-2570L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(", ", ", ", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(", ", ", ");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLIntegrityConstraintViolationException0);
      OrderedMapIterator<SQLDataException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLException, SQLTransactionRollbackException> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLException, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(mapIterator0, defaultEquator0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLException>) null, (Predicate<? super SQLException>) equalPredicate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category2, locale_Category2, locale_Category0);
      enumSet0.iterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLFeatureNotSupportedException0, (Comparator<SQLException>) null, comparatorPredicate_Criterion0);
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, false);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) comparatorPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ComparatorPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1, locale_Category1);
      enumSet0.iterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 2);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1, locale_Category1);
      enumSet0.iterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.sql.SQLException.class) , any(java.sql.SQLException.class));
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<SQLException> comparatorPredicate0 = new ComparatorPredicate<SQLException>(sQLFeatureNotSupportedException0, comparator0, comparatorPredicate_Criterion0);
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("/2@ao&X&");
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException0, false);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) comparatorPredicate0);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) singletonIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) comparatorPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      ReverseListIterator<IIOMetadataNode> reverseListIterator0 = new ReverseListIterator<IIOMetadataNode>(vector0);
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) reverseListIterator0, class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("%}XlHEQG6F-#L}w^", "=h$#7%P&+wS|%wJ!");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("%}XlHEQG6F-#L}w^", "%}XlHEQG6F-#L}w^", 666, sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("%}XlHEQG6F-#L}w^", "%}XlHEQG6F-#L}w^", sQLFeatureNotSupportedException0);
      SingletonListIterator<SQLNonTransientConnectionException> singletonListIterator0 = new SingletonListIterator<SQLNonTransientConnectionException>(sQLNonTransientConnectionException1);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLNonTransientConnectionException>) singletonListIterator0);
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(instanceofPredicate0, defaultEquator0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(equalPredicate0);
      Predicate<SQLNonTransientConnectionException> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLNonTransientConnectionException>) nullIsFalsePredicate0);
      IteratorUtils.find(iterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(1, singletonListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MapIterator<HashSet<String>, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<HashSet<String>>) mapIterator0);
      OrderedMapIterator<EnumSet<Locale.Category>, ServiceLoader<SQLClientInfoException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, Properties> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.Category>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.Category>, ? extends Properties>) transformer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      Properties properties0 = new Properties();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      LinkedList<Closure<Object>> linkedList1 = new LinkedList<Closure<Object>>();
      Closure<SQLFeatureNotSupportedException> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLFeatureNotSupportedException>>) linkedList1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[]", "[]", 14);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Closure<? super SQLFeatureNotSupportedException>) closure0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("Initial capacity must be a non negative number");
      SingletonIterator<SQLInvalidAuthorizationSpecException> singletonIterator0 = new SingletonIterator<SQLInvalidAuthorizationSpecException>(sQLInvalidAuthorizationSpecException1, false);
      ArrayDeque<InstanceofPredicate> arrayDeque0 = new ArrayDeque<InstanceofPredicate>();
      Predicate<SQLNonTransientException> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super SQLNonTransientException>>) arrayDeque0);
      IteratorUtils.find((Iterator<SQLInvalidAuthorizationSpecException>) singletonIterator0, (Predicate<? super SQLInvalidAuthorizationSpecException>) predicate0);
      IteratorUtils.toListIterator((Iterator<? extends SQLException>) resettableIterator0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("=8oT60(_k@&>-'{");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.getIterator(resettableIterator0);
      Properties properties0 = new Properties();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("fW%Cs!<H`'B");
      SQLDataException sQLDataException0 = new SQLDataException("sQTr<~*3^tX6&FSA@", sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("fW%Cs!<H`'B", sQLDataException0);
      properties0.put("fW%Cs!<H`'B", sQLNonTransientConnectionException1);
      IteratorUtils.getIterator(properties0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Properties>) null, (-1066L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[9];
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("@?E", sQLFeatureNotSupportedException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLNonTransientException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("@?E", sQLClientInfoException0);
      sQLTransientExceptionArray0[0] = sQLTransientException0;
      SQLTransientException sQLTransientException1 = new SQLTransientException("", sQLFeatureNotSupportedException0);
      sQLTransientExceptionArray0[1] = sQLTransientException1;
      SQLTransientException sQLTransientException2 = new SQLTransientException("@?E", "@?E", sQLTransientException0);
      sQLTransientExceptionArray0[2] = sQLTransientException2;
      sQLTransientException1.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "@?E", 22, sQLTransientException2);
      sQLTransientExceptionArray0[3] = (SQLTransientException) sQLTransientConnectionException0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "yT!ZQoB9#BF", 22, sQLTransientConnectionException0);
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "", 0);
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTimeoutException1;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "", 2131);
      sQLTransientExceptionArray0[6] = (SQLTransientException) sQLTransientConnectionException1;
      MockPrintStream mockPrintStream0 = new MockPrintStream("prefix may not be null");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) sQLTransientExceptionArray0);
      sQLTransientException1.printStackTrace(printWriter0);
      SQLTransientException sQLTransientException3 = new SQLTransientException("FoF'LTjt:\"%,");
      sQLTransientExceptionArray0[7] = sQLTransientException3;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException(sQLTransientExceptionArray0[4]);
      sQLTransientExceptionArray0[8] = (SQLTransientException) sQLTimeoutException2;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, 0, (-1815));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>((Transformer<Integer, Object>) null);
      IteratorUtils.get((Iterator<Transformer<Integer, Object>>) singletonIterator0, 0);
      OrderedMapIterator<EnumSet<Locale.Category>, ServiceLoader<SQLClientInfoException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, Properties> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.Category>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.Category>, ? extends Properties>) transformer0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("6]^ llRI1v");
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = linkedList0.listIterator(0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("FpoxiG=0", "y+'U2*,]");
      linkedList0.add(sQLFeatureNotSupportedException0);
      LinkedList<Closure<Object>> linkedList1 = new LinkedList<Closure<Object>>();
      Closure<SQLFeatureNotSupportedException> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLFeatureNotSupportedException>>) linkedList1);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) listIterator0, (Closure<? super SQLFeatureNotSupportedException>) closure0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MapIterator<HashSet<String>, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<HashSet<String>>) mapIterator0);
      IteratorUtils.getIterator("[]");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[]");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) null, (Predicate<? super Locale.Category>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MapIterator<IIOMetadataNode, Closure<SQLIntegrityConstraintViolationException>> mapIterator0 = IteratorUtils.emptyMapIterator();
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) mapIterator0, class0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>((Transformer<Integer, Object>) null);
      IteratorUtils.get((Iterator<Transformer<Integer, Object>>) singletonIterator0, 0);
      OrderedMapIterator<EnumSet<Locale.Category>, ServiceLoader<SQLClientInfoException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, Properties> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.Category>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.Category>, ? extends Properties>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Locale.Category[]) null, 5, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      EmptyIterator.resettableEmptyIterator();
      ArrayList<SQLNonTransientConnectionException> arrayList0 = new ArrayList<SQLNonTransientConnectionException>();
      ReverseListIterator<SQLNonTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLNonTransientConnectionException>(arrayList0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) reverseListIterator0, (Predicate<? super SQLNonTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      UniquePredicate<SQLNonTransientException> uniquePredicate0 = new UniquePredicate<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) null, (Predicate<? super SQLNonTransientConnectionException>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<SQLNonTransientException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLNonTransientException>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLSyntaxErrorException>) null, (Predicate<? super SQLSyntaxErrorException>) predicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[8];
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 4, 4);
      IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0);
      ResettableIterator<SQLException> resettableIterator1 = EmptyIterator.resettableEmptyIterator();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[W", "", sQLTransientException0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLTimeoutException0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLException>) resettableIterator1, (Predicate<? super SQLException>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("NodeList must not be null");
      IteratorUtils.toString((Iterator<PriorityQueue<HashMap>>) null, (Transformer<? super PriorityQueue<HashMap>, String>) transformer0, "XZ", "XZ", "NodeList must not be null");
      IteratorUtils.size((Iterator<?>) null);
      ArrayDeque<SQLWarning>[] arrayDequeArray0 = (ArrayDeque<SQLWarning>[]) Array.newInstance(ArrayDeque.class, 6);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayDeque<SQLWarning> arrayDeque0 = new ArrayDeque<SQLWarning>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<SQLWarning> arrayDeque1 = new ArrayDeque<SQLWarning>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<SQLWarning> arrayDeque2 = new ArrayDeque<SQLWarning>((-3314));
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<SQLWarning> arrayDeque3 = new ArrayDeque<SQLWarning>();
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<SQLWarning> arrayDeque4 = new ArrayDeque<SQLWarning>();
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<SQLWarning> arrayDeque5 = new ArrayDeque<SQLWarning>();
      arrayDequeArray0[5] = arrayDeque5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(arrayDequeArray0, 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("cY");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("*");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "yaP_X60'|(<!+", 1);
      SQLDataException sQLDataException0 = new SQLDataException("", (String) null, 1);
      ListIterator<SQLRecoverableException> listIterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLRecoverableException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>((Transformer<Integer, Object>) null);
      IteratorUtils.get((Iterator<Transformer<Integer, Object>>) singletonIterator0, 0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Invalid map index: ", "S~EK>V=", sQLIntegrityConstraintViolationException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("suffix may not be null", sQLTimeoutException0);
      EmptyListIterator.emptyListIterator();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1050);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1050);
      SQLDataException sQLDataException0 = new SQLDataException("", "suffix may not be null", (-458));
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[1];
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLNonTransientException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = new UniquePredicate<Object>();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      Hashtable<Integer, Locale.Category> hashtable0 = new Hashtable<Integer, Locale.Category>();
      Integer integer0 = new Integer(541);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      hashtable0.put(integer0, locale_Category0);
      EntrySetMapIterator<Integer, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Locale.Category>(hashtable0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Integer>) entrySetMapIterator0, (Predicate<? super Integer>) predicate0);
      assertTrue(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<Integer>) entrySetMapIterator0;
      iteratorArray0[1] = (Iterator<Integer>) entrySetMapIterator0;
      int int0 = IteratorUtils.size(iteratorArray0[0]);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Hashtable<Integer, Locale.Category> hashtable0 = new Hashtable<Integer, Locale.Category>();
      Integer integer0 = new Integer((-1820));
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      hashtable0.put(integer0, locale_Category0);
      EntrySetMapIterator<Integer, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Locale.Category>(hashtable0);
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Integer>) entrySetMapIterator0, (Predicate<? super Integer>) uniquePredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MapIterator<HashSet<String>, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<HashSet<String>>) mapIterator0);
      OrderedMapIterator<EnumSet<Locale.Category>, ServiceLoader<SQLClientInfoException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, Properties> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.Category>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.Category>, ? extends Properties>) transformer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      Properties properties0 = new Properties();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      LinkedList<Closure<Object>> linkedList1 = new LinkedList<Closure<Object>>();
      Closure<SQLFeatureNotSupportedException> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLFeatureNotSupportedException>>) linkedList1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[]", "[]", 14);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.singletonIterator(sQLFeatureNotSupportedException0);
      IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Closure<? super SQLFeatureNotSupportedException>) closure0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      ListIterator<String> listIterator0 = EmptyListIterator.emptyListIterator();
      Transformer<Object, String> transformer1 = ExceptionTransformer.exceptionTransformer();
      IteratorUtils.toString((Iterator<String>) listIterator0, (Transformer<? super String, String>) transformer1, "", "", "");
      ResettableIterator<BatchUpdateException> resettableIterator1 = IteratorUtils.singletonIterator((BatchUpdateException) null);
      assertNotNull(resettableIterator1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category1, locale_Category1, locale_Category0, locale_Category0, locale_Category2);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      IteratorUtils.contains(iterator0, (Object) iterator0);
      MapIterator<DataTruncation, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      ListIterator<DataTruncation> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends DataTruncation>) mapIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      Hashtable<Integer, Locale.Category> hashtable0 = new Hashtable<Integer, Locale.Category>();
      Integer integer0 = new Integer(541);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      hashtable0.put(integer0, locale_Category0);
      EntrySetMapIterator<Integer, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Locale.Category>(hashtable0);
      IteratorUtils.matchesAll((Iterator<Integer>) entrySetMapIterator0, (Predicate<? super Integer>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>((Transformer<Integer, Object>) null);
      IteratorUtils.get((Iterator<Transformer<Integer, Object>>) singletonIterator0, 0);
      OrderedMapIterator<EnumSet<Locale.Category>, ServiceLoader<SQLClientInfoException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Transformer<Object, Properties> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.Category>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.Category>, ? extends Properties>) transformer0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("6]^ llRI1v");
      Properties properties0 = new Properties();
      LinkedList<SQLFeatureNotSupportedException> linkedList0 = new LinkedList<SQLFeatureNotSupportedException>();
      ListIterator<SQLFeatureNotSupportedException> listIterator0 = linkedList0.listIterator(0);
      LinkedList<Closure<Object>> linkedList1 = new LinkedList<Closure<Object>>();
      Closure<SQLFeatureNotSupportedException> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super SQLFeatureNotSupportedException>>) linkedList1);
      IteratorUtils.apply((Iterator<SQLFeatureNotSupportedException>) listIterator0, (Closure<? super SQLFeatureNotSupportedException>) closure0);
      assertFalse(listIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends IIOMetadataNode>) null, (long) 0, (-1559L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category0, locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) iterator0, (Predicate<? super Locale.Category>) predicate0);
      boolean boolean0 = IteratorUtils.contains((Iterator<Locale.Category>) null, (Object) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      Hashtable<Integer, Locale.Category> hashtable0 = new Hashtable<Integer, Locale.Category>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("1!:OqaPXL`t#= 0_a", "Hl*nXJ5d", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("1n", "Hl*nXJ5d", sQLNonTransientConnectionException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonListIterator0);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) zippingIterator0);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) zippingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0, (Collection<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ExceptionTransformer.exceptionTransformer();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 2);
      SQLException sQLException0 = new SQLException("vq%N_Vv", "maxSize parameter must not be negative.");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("vq%N_Vv", sQLException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iteratorArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[8];
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 4, 4);
      IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>((Transformer<Integer, Object>) null);
      IteratorUtils.get((Iterator<Transformer<Integer, Object>>) singletonIterator0, 0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Invalid map index: ", "S~EK>V=", sQLIntegrityConstraintViolationException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("suffix may not be null", sQLTimeoutException0);
      EmptyListIterator.emptyListIterator();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1050);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1050);
      integerArray0[1] = integer1;
      IteratorUtils.arrayListIterator(integerArray0, 1);
      ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLException[] sQLExceptionArray0 = new SQLException[0];
      IteratorUtils.arrayListIterator(sQLExceptionArray0);
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.boundedIterator((Iterator<? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0, 1L, 1L);
      MapIterator<PriorityQueue<SQLTransactionRollbackException>, EnumSet<Locale.Category>> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<PriorityQueue<SQLTransactionRollbackException>>) mapIterator0, (Closure<? super PriorityQueue<SQLTransactionRollbackException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      Hashtable<Integer, Locale.Category> hashtable0 = new Hashtable<Integer, Locale.Category>();
      long long0 = 2007L;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends StringTokenizer>) null, 944);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>();
      ReverseListIterator<SQLIntegrityConstraintViolationException> reverseListIterator0 = new ReverseListIterator<SQLIntegrityConstraintViolationException>(linkedList0);
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) reverseListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) reverseListIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) reverseListIterator0);
      List<SQLIntegrityConstraintViolationException> list0 = IteratorUtils.toList((Iterator<? extends SQLIntegrityConstraintViolationException>) zippingIterator0);
      LoopingIterator<SQLIntegrityConstraintViolationException> loopingIterator0 = new LoopingIterator<SQLIntegrityConstraintViolationException>(list0);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) loopingIterator0;
      IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) loopingIterator0, class0);
      Properties properties0 = new Properties();
      Iterator<Properties> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null, (-1946));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.getIterator(resettableIterator0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fW%Cs!<H`'B");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("The predicate to call must not be null", "The predicate to call must not be null", sQLInvalidAuthorizationSpecException0);
      EqualPredicate<SQLException> equalPredicate0 = new EqualPredicate<SQLException>(sQLInvalidAuthorizationSpecException0);
      OrderedMapIterator<SQLDataException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<? extends SQLException, ? extends SQLTransactionRollbackException>) orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category2, locale_Category3);
      EnumSet.copyOf((Collection<Locale.Category>) enumSet0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Iterator<Locale.Category> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends Locale.Category>) iterator0, (Predicate<? super Locale.Category>) predicate0);
      IteratorUtils.contains(iterator1, (Object) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends BatchUpdateException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>((Transformer<Integer, Object>) null);
      IteratorUtils.get((Iterator<Transformer<Integer, Object>>) singletonIterator0, 0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Invalid map index: ", "S~EK>V=", sQLIntegrityConstraintViolationException0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) null, (Collection<? super SQLInvalidAuthorizationSpecException>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IteratorUtils.emptyIterator();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 2);
      SQLException sQLException0 = new SQLException("vq%N_Vv", "maxSize parameter must not be negative.");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("vq%N_Vv", sQLException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0, 1L, 83L);
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) boundedIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) zippingIterator0;
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iteratorArray0[0]);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0, (Collection<? super SQLIntegrityConstraintViolationException>) linkedList0);
      iteratorArray0[1] = iterator0;
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ExceptionTransformer.exceptionTransformer();
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 2);
      SQLException sQLException0 = new SQLException("vq%N_Vv", "maxSize parameter must not be negative.");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("vq%N_Vv", sQLException0);
      SingletonIterator<SQLIntegrityConstraintViolationException> singletonIterator0 = new SingletonIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      BoundedIterator<SQLIntegrityConstraintViolationException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0, 1L, 83L);
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) boundedIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) singletonIterator0);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) zippingIterator0;
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) iteratorArray0[0]);
      LinkedList<SQLException> linkedList0 = new LinkedList<SQLException>();
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0, (Collection<? super SQLIntegrityConstraintViolationException>) linkedList0);
      iteratorArray0[1] = iterator0;
      Iterator<SQLIntegrityConstraintViolationException> iterator1 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator1, class0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Boolean>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      OrderedMapIterator<EnumSet<Locale.Category>, ServiceLoader<SQLClientInfoException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.Category>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.Category>, ? extends Properties>) transformer0);
      HashSet<IIOMetadataNode> hashSet0 = new HashSet<IIOMetadataNode>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("p>?LZ'", "p>?LZ'", (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("p>?LZ'", "RgN_M");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("RgN_M", sQLTransactionRollbackException0);
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      BoundedIterator<Integer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Integer>) listIterator0, (long) 1);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) boundedIterator0, (Iterator<? extends Integer>) listIterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.find((Iterator<Integer>) zippingIterator0, (Predicate<? super Integer>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<Transformer<Object, SQLTransientConnectionException>>) null, 2319L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>((Transformer<Integer, Object>) null);
      IteratorUtils.get((Iterator<Transformer<Integer, Object>>) singletonIterator0, 0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Invalid map index: ", "S~EK>V=", sQLIntegrityConstraintViolationException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("suffix may not be null", sQLTimeoutException0);
      EmptyListIterator.emptyListIterator();
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1050);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1050);
      integerArray0[1] = integer1;
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.arrayListIterator(integerArray0, 1);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Integer>) resettableListIterator0, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      String string1 = "B%t=]";
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagNameNS("", "B%t=]");
      IteratorUtils.nodeListIterator(nodeList0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 7);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLInvalidAuthorizationSpecException, BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("mt");
      singletonIterator0.reset();
      singletonIterator0.next();
      IteratorUtils.skippingIterator((Iterator<String>) singletonIterator0, 0L);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[7];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.AbstractHashedMap", "[", sQLFeatureNotSupportedException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("mt", "mt", sQLIntegrityConstraintViolationException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("mt", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      ListIterator<Integer> listIterator0 = EmptyListIterator.emptyListIterator();
      BoundedIterator<Integer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Integer>) listIterator0, (long) 1);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) boundedIterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      IteratorUtils.find((Iterator<Integer>) zippingIterator0, (Predicate<? super Integer>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.getIterator((Object) null);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category1, locale_Category0, locale_Category2, locale_Category3, locale_Category1);
      enumSet0.iterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(".f%>", ".f%>", 97);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) instanceofPredicate0);
      Iterator<Object> iterator0 = IteratorUtils.pushbackIterator((Iterator<?>) listIterator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      String string0 = "e\"?WprlO?OIMpec@";
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super Object, String>) transformer0, (String) null, "e\"?WprlO?OIMpec@", "6?1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Predicate must not be null", "Predicate must not be null", 44, (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Predicate must not be null", "Predicate must not be null", sQLTransientConnectionException1);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      OrderedMapIterator<Object, SQLNonTransientConnectionException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<Object, SQLNonTransientConnectionException>) orderedMapIterator0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[8];
      SQLWarning sQLWarning0 = new SQLWarning(":e9.D[N2[(/S|&", "Predicate must not be null", 101, sQLTransientConnectionException0);
      sQLWarningArray0[0] = sQLWarning0;
      SQLWarning sQLWarning1 = new SQLWarning(", ");
      sQLWarningArray0[1] = sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning("", "NodeList must not be null", (-1362));
      sQLWarningArray0[2] = sQLWarning2;
      DataTruncation dataTruncation0 = new DataTruncation(5, true, false, 1073741824, 10);
      sQLWarningArray0[3] = (SQLWarning) dataTruncation0;
      SQLWarning sQLWarning3 = new SQLWarning(":e9.D[N2[(/S|&");
      sQLWarningArray0[4] = sQLWarning3;
      DataTruncation dataTruncation1 = new DataTruncation(1073741824, true, false, (-224), (-1362));
      dataTruncation1.getNextWarning();
      sQLWarningArray0[5] = null;
      SQLWarning sQLWarning4 = new SQLWarning(", ", "Predicate must not be null");
      sQLWarningArray0[6] = sQLWarning4;
      SQLWarning sQLWarning5 = new SQLWarning(sQLWarning4);
      sQLWarningArray0[7] = sQLWarning5;
      ObjectArrayIterator<SQLWarning> objectArrayIterator0 = new ObjectArrayIterator<SQLWarning>(sQLWarningArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLWarning>) objectArrayIterator0, 101);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 93
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLNonTransientException>(orderedMapIterator0);
      IteratorUtils.emptyIterator();
      Class<Properties> class0 = Properties.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLIntegrityConstraintViolationException[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[7];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties0;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 3, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category1, locale_Category0, locale_Category2, locale_Category3, locale_Category3);
      enumSet0.iterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[2] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      AllPredicate<Integer> allPredicate0 = new AllPredicate<Integer>(predicateArray0);
      IteratorUtils.matchesAll((Iterator<Integer>) null, (Predicate<? super Integer>) instanceofPredicate0);
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      ResettableIterator<StringTokenizer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends StringTokenizer>) linkedList0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/LmR~hVnW&*\"M/nH", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/LmR~hVnW&*\"M/nH", "/LmR~hVnW&*\"M/nH", sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(":sI;PT", ":sI;PT", sQLTransactionRollbackException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("*pD@m/ vI", "/LmR~hVnW&*\"M/nH");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) resettableIterator0);
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      IteratorUtils.emptyOrderedMapIterator();
      Hashtable<Integer, Locale.Category> hashtable0 = new Hashtable<Integer, Locale.Category>();
      EntrySetMapIterator<Integer, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Locale.Category>(hashtable0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Predicate<Integer> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Integer>) allPredicate0);
      boolean boolean1 = IteratorUtils.matchesAll((Iterator<Integer>) entrySetMapIterator0, (Predicate<? super Integer>) predicate0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) instanceofPredicate0);
      Hashtable<Integer, Locale.Category> hashtable0 = new Hashtable<Integer, Locale.Category>();
      EntrySetMapIterator<Integer, Locale.Category> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Locale.Category>(hashtable0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Integer>) entrySetMapIterator0, (Predicate<? super Integer>) instanceofPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      ZippingIterator<SQLTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLNonTransientException>(orderedMapIterator0);
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      IteratorUtils.skippingIterator((Iterator<SQLNonTransientException>) resettableIterator0, 0L);
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(0, int0);
      
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>) zippingIterator0, (Iterator<? extends SQLTransientException>) zippingIterator0, (Iterator<? extends SQLTransientException>) zippingIterator0);
      Iterator<SQLTransientConnectionException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) zippingIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SingletonIterator<String> singletonIterator0 = new SingletonIterator<String>("kQe?h`nn6>4 lv&ta-");
      singletonIterator0.reset();
      singletonIterator0.next();
      IteratorUtils.skippingIterator((Iterator<String>) singletonIterator0, 0L);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[7];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.apache.commons.collections4.map.AbstractHashedMap", "[", sQLFeatureNotSupportedException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("kQe?h`nn6>4 lv&ta-", "kQe?h`nn6>4 lv&ta-", sQLIntegrityConstraintViolationException0);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("", "", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("kQe?h`nn6>4 lv&ta-", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      DataTruncation dataTruncation0 = new DataTruncation((-1432), true, false, 10, 10, sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("[", "org.apache.commons.collections4.map.AbstractHashedMap", 1, dataTruncation0);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("", sQLTimeoutException1);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("end", sQLTimeoutException2);
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      SQLTimeoutException sQLTimeoutException6 = new SQLTimeoutException("", sQLIntegrityConstraintViolationException0);
      sQLTimeoutExceptionArray0[6] = sQLTimeoutException6;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      IteratorUtils.asIterable((Iterator<? extends SQLTimeoutException>) objectArrayIterator0);
      DataTruncation[] dataTruncationArray0 = new DataTruncation[2];
      DataTruncation dataTruncation1 = new DataTruncation(804, false, true, 100, 2300);
      dataTruncationArray0[0] = dataTruncation1;
      dataTruncationArray0[1] = dataTruncation0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(dataTruncationArray0, 804);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OrderedMapIterator<DataTruncation, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<DataTruncation, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, BatchUpdateException>) orderedMapIterator0);
      IteratorUtils.peekingIterator((Iterator<? extends SQLWarning>) mapIterator0);
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      Enumeration<SQLRecoverableException> enumeration0 = stack0.elements();
      IteratorUtils.asIterator((Enumeration<?>) enumeration0);
      int int0 = (-868);
      Vector<DataTruncation> vector0 = null;
      try {
        vector0 = new Vector<DataTruncation>((-868));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -868
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("-N5J'>*'N4ZL}'DZbf", "", (-2330));
      stack0.add(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLTimeoutException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MapIterator<HashSet<String>, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<HashSet<String>>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Node must not be null");
      IteratorUtils.getIterator("Node must not be null");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category1);
      enumSet0.iterator();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      SingletonIterator<SQLClientInfoException> singletonIterator0 = new SingletonIterator<SQLClientInfoException>(sQLClientInfoException0);
      ExceptionTransformer.exceptionTransformer();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      Transformer<SQLClientInfoException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      String string0 = IteratorUtils.toString((Iterator<SQLClientInfoException>) singletonIterator0, (Transformer<? super SQLClientInfoException, String>) transformer0);
      assertFalse(singletonIterator0.hasNext());
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>((Transformer<Integer, Object>) null);
      IteratorUtils.get((Iterator<Transformer<Integer, Object>>) singletonIterator0, 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Vcz1&+ie!!");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.cloneNode(true);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Transformer<Locale.Category, Locale.Category> transformer0 = InvokerTransformer.invokerTransformer("s#4U0");
      Iterator<Locale.Category> iterator0 = IteratorUtils.objectGraphIterator(locale_Category0, (Transformer<? super Locale.Category, ? extends Locale.Category>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.contains(iterator0, (Object) node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 's#4U0' on 'class java.util.Locale$Category' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>((Transformer<Integer, Object>) null);
      IteratorUtils.get((Iterator<Transformer<Integer, Object>>) singletonIterator0, 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Vcz1&+ie!!");
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends Properties>) null, (Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category1, locale_Category0, locale_Category1, locale_Category1, locale_Category0);
      enumSet0.iterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) enumSet0, 1378, (-628));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashSet<String>[] hashSetArray0 = (HashSet<String>[]) Array.newInstance(HashSet.class, 9);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      hashSetArray0[0] = (HashSet<String>) linkedHashSet0;
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      hashSetArray0[1] = (HashSet<String>) linkedHashSet1;
      LinkedHashSet<String> linkedHashSet2 = new LinkedHashSet<String>();
      hashSetArray0[2] = (HashSet<String>) linkedHashSet2;
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSetArray0[3] = hashSet0;
      LinkedHashSet<String> linkedHashSet3 = new LinkedHashSet<String>();
      hashSetArray0[4] = (HashSet<String>) linkedHashSet3;
      HashSet<String> hashSet1 = new HashSet<String>();
      hashSetArray0[5] = hashSet1;
      LinkedHashSet<String> linkedHashSet4 = new LinkedHashSet<String>();
      hashSetArray0[6] = (HashSet<String>) linkedHashSet4;
      LinkedHashSet<String> linkedHashSet5 = new LinkedHashSet<String>();
      hashSetArray0[7] = (HashSet<String>) linkedHashSet5;
      LinkedHashSet<String> linkedHashSet6 = new LinkedHashSet<String>();
      hashSetArray0[8] = (HashSet<String>) linkedHashSet6;
      ObjectArrayListIterator<HashSet<String>> objectArrayListIterator0 = new ObjectArrayListIterator<HashSet<String>>(hashSetArray0);
      IteratorUtils.toString((Iterator<HashSet<String>>) objectArrayListIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("[[], [], [], [], [], [], [], [], []]");
      IteratorUtils.getIterator(linkedHashSet1);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category1, locale_Category0, locale_Category0, locale_Category2, locale_Category3);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      IteratorUtils.contains(iterator0, (Object) linkedHashSet6);
      Class<SQLDataException> class0 = SQLDataException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) instanceofPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      OrderedMapIterator<EnumSet<Locale.Category>, ServiceLoader<SQLClientInfoException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      Iterator<Properties> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.Category>>) orderedMapIterator0, (Transformer<? super EnumSet<Locale.Category>, ? extends Properties>) transformer0);
      HashSet<IIOMetadataNode> hashSet0 = new HashSet<IIOMetadataNode>();
      Properties[] propertiesArray0 = new Properties[3];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      int int0 = 1;
      IteratorUtils.arrayIterator(propertiesArray0, 0, 1);
      IteratorUtils.toList((Iterator<? extends Properties>) iterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Oz=xnZ:OO:1{+.I-");
      ArrayListIterator<LinkedHashSet<SQLTransactionRollbackException>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<LinkedHashSet<SQLTransactionRollbackException>>(sQLIntegrityConstraintViolationException0, (-2104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      IteratorUtils.singletonListIterator((Boolean) null);
      int int0 = 1199;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 1199, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLNonTransientException>(orderedMapIterator0);
      Properties[] propertiesArray0 = new Properties[9];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[6] = properties6;
      Properties properties7 = new Properties();
      propertiesArray0[7] = properties7;
      Properties properties8 = new Properties();
      propertiesArray0[8] = properties8;
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.arrayListIterator(propertiesArray0);
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) resettableListIterator0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) listIterator0, 10);
      ResettableListIterator<Properties> resettableListIterator1 = IteratorUtils.loopingListIterator(list0);
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends Properties>) resettableListIterator1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category1, locale_Category0, locale_Category2, locale_Category3, locale_Category2);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      boolean boolean1 = IteratorUtils.contains(iterator0, (Object) locale_Category3);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ExceptionTransformer.exceptionTransformer();
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      Properties properties0 = new Properties();
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      IteratorUtils.toList((Iterator<? extends Properties>) singletonListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1, locale_Category1);
      enumSet0.iterator();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "", 580, 580);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      OrderedIterator<Boolean> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.peekingIterator((Iterator<? extends Boolean>) orderedIterator0);
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[4];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackExceptionArray0[0] = sQLTransactionRollbackException0;
      String string0 = "kM~-ve`P7`)";
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, "kM~-ve`P7`)", sQLTransactionRollbackException0);
      sQLTransactionRollbackExceptionArray0[1] = sQLTransactionRollbackException1;
      String string1 = "Y";
      int int0 = 1;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException((String) null, "Y", 1);
      sQLTransactionRollbackExceptionArray0[2] = sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException("remove() method is not supported for an ObjectArrayIterator", "kM~-ve`P7`)", 1);
      sQLTransactionRollbackExceptionArray0[3] = sQLTransactionRollbackException3;
      ResettableIterator<SQLTransactionRollbackException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransactionRollbackExceptionArray0);
      IteratorUtils.get((Iterator<SQLTransactionRollbackException>) resettableIterator0, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransactionRollbackException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MapIterator<HashSet<String>, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<HashSet<String>>) mapIterator0);
      Vector<SQLTransientConnectionException> vector0 = new Vector<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) vector0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (Iterator<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      IteratorUtils.isEmpty((Iterator<?>) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("4DV,HH,UCtewg#16S-", "", sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.list.CursorableLinkedList", "", sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Sq", "*pD@m/ vI");
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[3];
      SQLRecoverableException sQLRecoverableException2 = new SQLRecoverableException(sQLTransactionRollbackException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException2;
      SQLRecoverableException sQLRecoverableException3 = new SQLRecoverableException((String) null);
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException3;
      sQLRecoverableExceptionArray0[2] = sQLRecoverableException0;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) resettableIterator0);
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[5];
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException0;
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException0;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) resettableListIterator0);
      IteratorUtils.getIterator(sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Sq", "", sQLNonTransientConnectionException0);
      DefaultEquator<SQLTransientConnectionException> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<SQLTransientConnectionException> predicate0 = EqualPredicate.equalPredicate(sQLTransientConnectionException0, (Equator<SQLTransientConnectionException>) defaultEquator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) predicate0, 2804);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      String string0 = "";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/LmR~hVnW&*\"M/nH", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/LmR~hVnW&*\"M/nH", "/LmR~hVnW&*\"M/nH", sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("H}6QP5Mr", "H}6QP5Mr", sQLTransactionRollbackException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("*pD@m/ vI", "/LmR~hVnW&*\"M/nH");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) resettableIterator0);
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      OrderedMapIterator<Object, Locale.Category> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Object>) orderedMapIterator0, (Transformer<? super Object, String>) null, "/LmR~hVnW&*\"M/nH", (String) null, "*pD@m/ vI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>((Transformer<Integer, Object>) null);
      IteratorUtils.get((Iterator<Transformer<Integer, Object>>) singletonIterator0, 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Vcz1&+ie!!");
      IteratorUtils.emptyIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.apache.commons.collections4.iterators.EntrySetMapIterator", " cannot be null", (-3646), sQLInvalidAuthorizationSpecException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" cannot be null", "", sQLTransientConnectionException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 2);
      iteratorArray0[0] = (Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0;
      iteratorArray0[1] = (Iterator<SQLIntegrityConstraintViolationException>) singletonListIterator0;
      ZippingIterator<SQLIntegrityConstraintViolationException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/LmR~hVnW&*\"M/nH", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/LmR~hVnW&*\"M/nH", "/LmR~hVnW&*\"M/nH", sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("H}6QP5Mr", "H}6QP5Mr", sQLTransactionRollbackException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("*pD@m/ vI", "/LmR~hVnW&*\"M/nH");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) resettableIterator0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      Iterator<?> iterator1 = IteratorUtils.getIterator(iterator0);
      assertNotNull(iterator1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null, 44, sQLException0);
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(sQLException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "NodeList must not be null", sQLException0);
      SingletonListIterator<SQLIntegrityConstraintViolationException> singletonListIterator0 = new SingletonListIterator<SQLIntegrityConstraintViolationException>(sQLIntegrityConstraintViolationException0);
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<Integer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) resettableListIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) resettableListIterator0);
      IteratorUtils.isEmpty(listIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IteratorUtils.isEmpty((Iterator<?>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("3m|kx", "", (-3217));
      sQLRecoverableException0.getStackTrace();
      sQLRecoverableException0.getLocalizedMessage();
      sQLRecoverableException0.getStackTrace();
      sQLRecoverableException0.printStackTrace();
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLRecoverableException0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1, locale_Category1);
      Iterator<Locale.Category> iterator1 = enumSet0.iterator();
      IteratorUtils.contains(iterator1, (Object) "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>((Transformer<Integer, Object>) null);
      IteratorUtils.get((Iterator<Transformer<Integer, Object>>) singletonIterator0, 0);
      int int0 = (-3646);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Vcz1&+ie!!");
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLNonTransientException>) resettableIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[9];
      SQLException sQLException0 = new SQLException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLException0);
      sQLWarningArray0[0] = sQLWarning0;
      int int0 = 100;
      DataTruncation dataTruncation0 = new DataTruncation(100, false, false, 100, 1, sQLException0);
      dataTruncation0.getNextWarning();
      SQLWarning sQLWarning1 = new SQLWarning(";.");
      sQLWarningArray0[2] = sQLWarning1;
      int int1 = (-361);
      DataTruncation dataTruncation1 = new DataTruncation(100, false, false, (-361), 32, sQLException0);
      sQLWarningArray0[3] = (SQLWarning) dataTruncation1;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(";.");
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      MapIterator<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Comparator<SQLIntegrityConstraintViolationException> comparator1 = (Comparator<SQLIntegrityConstraintViolationException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator1, (Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SQLWarning sQLWarning2 = new SQLWarning("v3~Z7@\".L5$<nU", dataTruncation1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLWarning2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedList0);
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[6];
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarningArray0[0] = sQLWarning0;
      MockFile mockFile0 = new MockFile("The comparator must not be null");
      File file0 = MockFile.createTempFile("%V&uPj(jR", "%V&uPj(jR", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.format("The comparator must not be null", (Object[]) sQLWarningArray0);
      sQLWarning0.printStackTrace(printWriter0);
      SQLWarning sQLWarning1 = new SQLWarning("l0+{!", "l0+{!", (-251));
      sQLWarningArray0[1] = sQLWarning1;
      DataTruncation dataTruncation0 = new DataTruncation(1, true, true, 125, 1);
      dataTruncation0.getNextWarning();
      sQLWarningArray0[2] = null;
      SQLWarning sQLWarning2 = new SQLWarning("", sQLWarning0);
      sQLWarningArray0[3] = sQLWarning2;
      DataTruncation dataTruncation1 = new DataTruncation(125, true, true, 2747, 0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 3049, dataTruncation1);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[0];
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsTruePredicate<SQLTimeoutException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLTimeoutException>(predicate0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) resettableListIterator0, (Predicate<? super SQLTimeoutException>) nullIsTruePredicate0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[9];
      SQLException sQLException0 = new SQLException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLException0);
      sQLWarningArray0[0] = sQLWarning0;
      IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, 929L);
      int int0 = 44;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) class0, 44);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<DataTruncation>) resettableListIterator0, (Object) resettableListIterator0);
      IteratorUtils.emptyOrderedIterator();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "!Di\"ZGX}&2h!";
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      propertiesArray0[0] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[1] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[2] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[3] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[4] = properties5;
      Properties properties6 = new Properties();
      propertiesArray0[5] = properties6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, (-3687), 1282);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("mDInmQxf-VC0BJY", "mDInmQxf-VC0BJY", 0, intArray0);
      batchUpdateException0.getSuppressed();
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("R|T'5f*U6B", (String) null);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("VgdF{&kkP/", "u3}[q,/mWy*~C!", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("Collection must not be null", "eNzUTQXM>n9_iY4", 0, sQLTimeoutException1);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException2;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      sQLTimeoutException2.getLocalizedMessage();
      NullIsTruePredicate<SQLTimeoutException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLTimeoutException>(predicate0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) resettableListIterator0, (Predicate<? super SQLTimeoutException>) nullIsTruePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.isEmpty(listIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/LmR~hVnW&*\"M/nH", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/LmR~hVnW&*\"M/nH", "/LmR~hVnW&*\"M/nH", sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("H}6QP5Mr", "H}6QP5Mr", sQLTransactionRollbackException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      Class<IIOMetadataNode> class1 = IIOMetadataNode.class;
      Class<IIOMetadataNode> class2 = IIOMetadataNode.class;
      Class<IIOMetadataNode> class3 = IIOMetadataNode.class;
      Class<IIOMetadataNode>[] classArray0 = (Class<IIOMetadataNode>[]) Array.newInstance(Class.class, 7);
      Class<IIOMetadataNode> class4 = IIOMetadataNode.class;
      classArray0[0] = class4;
      Class<IIOMetadataNode> class5 = IIOMetadataNode.class;
      classArray0[1] = class5;
      Class<IIOMetadataNode> class6 = IIOMetadataNode.class;
      classArray0[2] = class6;
      classArray0[3] = class1;
      classArray0[4] = class3;
      classArray0[5] = class0;
      classArray0[6] = class2;
      Transformer<Object, SQLInvalidAuthorizationSpecException> transformer0 = InvokerTransformer.invokerTransformer("/LmR~hVnW&*\"M/nH", (Class<?>[]) classArray0, (Object[]) classArray0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.objectGraphIterator((SQLNonTransientException) sQLNonTransientConnectionException0, (Transformer<? super SQLNonTransientException, ? extends SQLNonTransientException>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Properties[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<Integer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) resettableListIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) resettableListIterator0);
      IteratorUtils.isEmpty(listIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      SQLWarning sQLWarning0 = new SQLWarning("l0+{!", "l0+{!", 1670);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 125, 0);
      dataTruncation0.getNextWarning();
      SQLWarning sQLWarning1 = new SQLWarning("", (Throwable) null);
      DataTruncation dataTruncation1 = new DataTruncation(0, true, true, 125, 1507);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("l0+{!", "Index ");
      SQLWarning sQLWarning2 = new SQLWarning("l0+{!", dataTruncation1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLWarning[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 3882);
      SQLException sQLException0 = new SQLException(sQLTimeoutException0);
      sQLTimeoutException0.initCause(sQLException0);
      stack0.add(sQLTimeoutException0);
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) stack0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("'2y", "'2y", 0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) instanceofPredicate0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      String string0 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 3907);
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) stack0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("'2y", "'2y", 0);
      IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) instanceofPredicate0, 3907, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      int int0 = 44;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iteratorArray0[0], 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 3405);
      SQLException sQLException0 = new SQLException("org.apache.commons.collections4.map.AbstractHashedMap$EntrySetIterator", sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLException0);
      IteratorUtils.singletonIterator(sQLNonTransientConnectionException1);
      int[] intArray0 = new int[4];
      intArray0[0] = 3405;
      intArray0[1] = 3405;
      intArray0[2] = 3405;
      intArray0[3] = 3405;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(".u_", "", intArray0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stack0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("p]M", "-/T*J");
      Iterator<?> iterator1 = IteratorUtils.getIterator("");
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Transformer<Object, Properties> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends EnumSet<Locale.Category>>) null, (Transformer<? super EnumSet<Locale.Category>, ? extends Properties>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      int[] intArray0 = new int[9];
      intArray0[0] = (-2748);
      intArray0[1] = 0;
      intArray0[2] = (-5274);
      intArray0[3] = 2898;
      intArray0[4] = 10;
      intArray0[5] = (-1);
      intArray0[6] = 1907;
      intArray0[7] = (-3302);
      intArray0[8] = (-1731);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("suffix may not be null", intArray0);
      batchUpdateException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SingletonIterator<Transformer<Integer, Object>> singletonIterator0 = new SingletonIterator<Transformer<Integer, Object>>((Transformer<Integer, Object>) null);
      IteratorUtils.get((Iterator<Transformer<Integer, Object>>) singletonIterator0, 0);
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[1];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Vcz1&+ie!!");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("@^\";IJC54>a4TrrMOT+", sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLNonTransientException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransactionRollbackException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("@^\";IJC54>a4TrrMOT+", "@^\";IJC54>a4TrrMOT+", (-3646), batchUpdateException0);
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException1;
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TreeSet<SQLClientInfoException>[] treeSetArray0 = (TreeSet<SQLClientInfoException>[]) Array.newInstance(TreeSet.class, 2);
      TreeSet<SQLClientInfoException> treeSet0 = new TreeSet<SQLClientInfoException>();
      treeSetArray0[0] = treeSet0;
      TreeSet<SQLClientInfoException> treeSet1 = new TreeSet<SQLClientInfoException>();
      treeSetArray0[1] = treeSet1;
      IteratorUtils.arrayListIterator(treeSetArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLTimeoutException>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "";
      SQLException sQLException0 = new SQLException("org.apache.commons.collections4.functors.OrPredicate", "org.apache.commons.collections4.functors.OrPredicate");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", sQLException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<Integer>) null, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getOwnerDocument();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MapIterator<HashSet<String>, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<HashSet<String>>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Node must not be null");
      Node node0 = iIOMetadataNode0.cloneNode(false);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(node0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.contains((Iterator<DataTruncation>) resettableListIterator0, (Object) resettableListIterator0);
      IteratorUtils.emptyOrderedIterator();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "!Di\"ZGX}&2h!";
      int int0 = (-3687);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(stringArray0, (-3687));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ArrayList<SQLTransientConnectionException> arrayList0 = new ArrayList<SQLTransientConnectionException>();
      arrayList0.listIterator(0);
      ReverseListIterator<SQLTransientConnectionException> reverseListIterator0 = new ReverseListIterator<SQLTransientConnectionException>(arrayList0);
      IteratorUtils.toArray((Iterator<?>) reverseListIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLException sQLException0 = new SQLException("org.apache.commons.collections4.functors.IfClosure", sQLFeatureNotSupportedException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLException0);
      IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.apache.commons.collections4.functors.IfClosure", "org.apache.commons.collections4.functors.IfClosure", intArray0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("p]M", "end");
      Iterator<?> iterator1 = IteratorUtils.getIterator(sQLTransactionRollbackException0);
      assertNotSame(iterator1, iterator0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[6];
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException("", "$4 daGCxoJ", (-1859));
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("$4 daGCxoJ", "", sQLDataException0);
      sQLDataExceptionArray0[2] = sQLDataException2;
      SQLDataException sQLDataException3 = new SQLDataException("$4 daGCxoJ", "");
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException();
      sQLDataExceptionArray0[4] = sQLDataException4;
      SQLDataException sQLDataException5 = new SQLDataException("List must not be null", "X#", (-2430), sQLDataException1);
      sQLDataExceptionArray0[5] = sQLDataException5;
      ObjectArrayListIterator<SQLDataException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLDataException>(sQLDataExceptionArray0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) objectArrayListIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ResettableListIterator<Integer> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<Integer> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Integer>) resettableListIterator0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) resettableListIterator0);
      IteratorUtils.isEmpty(listIterator0);
      IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      OrderedMapIterator<SQLTransactionRollbackException, SQLFeatureNotSupportedException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.toList((Iterator<? extends SQLException>) orderedMapIterator0);
      IteratorUtils.isEmpty(resettableListIterator0);
      IteratorUtils.boundedIterator((Iterator<? extends Integer>) resettableListIterator0, 0L);
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      LoopingListIterator<DataTruncation> loopingListIterator0 = new LoopingListIterator<DataTruncation>(vector0);
      Iterator<DataTruncation> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<DataTruncation>) loopingListIterator0);
      IteratorUtils.toString(iterator0);
      ArrayListIterator<ArrayList<StringTokenizer>> arrayListIterator0 = null;
      try {
        arrayListIterator0 = new ArrayListIterator<ArrayList<StringTokenizer>>(zippingIterator0, (-1742));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      HashSet<IIOMetadataNode> hashSet0 = new HashSet<IIOMetadataNode>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "mDInmQxf-VC0BJY";
      stringArray0[1] = "mDInmQxf-VC0BJY";
      stringArray0[2] = "";
      stringArray0[3] = "mDInmQxf-VC0BJY";
      stringArray0[4] = "prefix may not be null";
      hashSet0.toArray(stringArray0);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) hashSet0);
      IteratorUtils.pushbackIterator((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("mDInmQxf-VC0BJY");
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      MapIterator<SQLIntegrityConstraintViolationException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0, (Iterator<? extends SQLIntegrityConstraintViolationException>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "prefix may not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OrderedIterator<String> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      IteratorUtils.toList((Iterator<? extends String>) orderedIterator0, 5506);
      SQLTransientException[] sQLTransientExceptionArray0 = new SQLTransientException[9];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransientExceptionArray0[0] = (SQLTransientException) sQLTransactionRollbackException0;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("%8d+1{v[ENq", "/\"", 5506);
      sQLTransientExceptionArray0[1] = (SQLTransientException) sQLTransactionRollbackException1;
      String string0 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("/\"", "");
      sQLTransientExceptionArray0[2] = (SQLTransientException) sQLTimeoutException0;
      SQLTransientException sQLTransientException0 = new SQLTransientException("/\"", sQLTransientExceptionArray0[1]);
      sQLTransientExceptionArray0[3] = sQLTransientException0;
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException("setValue() is not supported", "", (-3901));
      sQLTransientExceptionArray0[4] = (SQLTransientException) sQLTransactionRollbackException2;
      SQLTransactionRollbackException sQLTransactionRollbackException3 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      sQLTransientExceptionArray0[5] = (SQLTransientException) sQLTransactionRollbackException3;
      SQLTransientException sQLTransientException1 = new SQLTransientException("/\"", "", sQLTransientException0);
      sQLTransientExceptionArray0[6] = sQLTransientException1;
      SQLTransactionRollbackException sQLTransactionRollbackException4 = new SQLTransactionRollbackException(sQLTransientExceptionArray0[2]);
      sQLTransientExceptionArray0[7] = (SQLTransientException) sQLTransactionRollbackException4;
      SQLTransactionRollbackException sQLTransactionRollbackException5 = new SQLTransactionRollbackException("/\"", "setValue() is not supported", sQLTransactionRollbackException3);
      sQLTransientExceptionArray0[8] = (SQLTransientException) sQLTransactionRollbackException5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLTransientExceptionArray0, (-3901), 5506);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MapIterator<SQLNonTransientConnectionException, DataTruncation> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.isEmpty(mapIterator0);
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[2];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/LmR~hVnW&*\"M/nH", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("/LmR~hVnW&*\"M/nH", "/LmR~hVnW&*\"M/nH", sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("H}6QP5Mr", "H}6QP5Mr", sQLTransactionRollbackException0);
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("*pD@m/ vI", "/LmR~hVnW&*\"M/nH");
      sQLRecoverableExceptionArray0[1] = sQLRecoverableException1;
      ResettableIterator<SQLRecoverableException> resettableIterator0 = IteratorUtils.arrayIterator(sQLRecoverableExceptionArray0, 0);
      IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) resettableIterator0);
      Enumeration<SQLNonTransientException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientException>) mapIterator0);
      Iterator<SQLNonTransientException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException((String) null, ":RBdX4Xr");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("O95siO54\"-gu0g(]", "O95siO54\"-gu0g(]", 4483, sQLDataException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "4\"<'IGB", 1, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLNonTransientException0, (-88));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PriorityQueue<SQLException>[] priorityQueueArray0 = (PriorityQueue<SQLException>[]) Array.newInstance(PriorityQueue.class, 4);
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      priorityQueueArray0[0] = priorityQueue0;
      PriorityQueue<SQLException> priorityQueue1 = new PriorityQueue<SQLException>();
      priorityQueueArray0[1] = priorityQueue1;
      PriorityQueue<SQLException> priorityQueue2 = new PriorityQueue<SQLException>();
      priorityQueueArray0[2] = priorityQueue2;
      PriorityQueue<SQLException> priorityQueue3 = new PriorityQueue<SQLException>();
      priorityQueueArray0[3] = priorityQueue3;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(priorityQueueArray0, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ArrayList<SQLSyntaxErrorException> arrayList0 = new ArrayList<SQLSyntaxErrorException>();
      ListIterator<SQLSyntaxErrorException> listIterator0 = arrayList0.listIterator();
      IteratorUtils.pushbackIterator((Iterator<? extends SQLSyntaxErrorException>) listIterator0);
      IteratorUtils.emptyIterator();
      Properties properties0 = new Properties();
      properties0.clone();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) properties0, 1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Iterator<SQLTransactionRollbackException> iterator0 = null;
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends SQLTransactionRollbackException>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 0;
      String string0 = "ListIterator must not be null";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLIntegrityConstraintViolationException0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException1);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, class0);
      SQLException sQLException0 = new SQLException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLIntegrityConstraintViolationException1);
      IteratorUtils.boundedIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) listIterator0, 1L);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLInvalidAuthorizationSpecException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLIntegrityConstraintViolationException>[] iteratorArray0 = (Iterator<SQLIntegrityConstraintViolationException>[]) Array.newInstance(Iterator.class, 0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) comparator0, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) iteratorArray0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      IteratorUtils.toArray((Iterator<? extends SQLIntegrityConstraintViolationException>) iterator0, class0);
      SQLWarning[] sQLWarningArray0 = new SQLWarning[9];
      SQLException sQLException0 = new SQLException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLException0);
      sQLWarningArray0[0] = sQLWarning0;
      DataTruncation dataTruncation0 = new DataTruncation(100, false, false, 100, 1, sQLException0);
      dataTruncation0.getNextWarning();
      sQLWarningArray0[1] = null;
      SQLWarning sQLWarning1 = new SQLWarning(";.");
      sQLWarningArray0[2] = sQLWarning1;
      DataTruncation dataTruncation1 = new DataTruncation(100, false, false, (-361), 32, sQLException0);
      sQLWarningArray0[3] = (SQLWarning) dataTruncation1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("W__MR7Gb'&p*v", sQLWarning0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("C9z9vX4avz", sQLFeatureNotSupportedException0);
      SQLWarning sQLWarning2 = new SQLWarning(";.", "C9z9vX4avz", sQLIntegrityConstraintViolationException0);
      sQLWarningArray0[4] = sQLWarning2;
      SQLWarning sQLWarning3 = new SQLWarning((String) null);
      sQLWarningArray0[5] = sQLWarning3;
      SQLWarning sQLWarning4 = new SQLWarning(dataTruncation1);
      sQLWarningArray0[6] = sQLWarning4;
      SQLWarning sQLWarning5 = new SQLWarning("W__MR7Gb'&p*v", "C9z9vX4avz", 512);
      sQLWarningArray0[7] = sQLWarning5;
      SQLWarning sQLWarning6 = new SQLWarning();
      sQLWarningArray0[8] = sQLWarning6;
      ResettableIterator<SQLWarning> resettableIterator0 = IteratorUtils.arrayIterator(sQLWarningArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[8];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Transformer must not be null", "", (-1141));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("x3'NKpR6", "/&h=8sW", 0, intArray0, sQLSyntaxErrorException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("x3'NKpR6", "", batchUpdateException1);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(batchUpdateException1);
      sQLNonTransientExceptionArray0[1] = sQLNonTransientException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/&h=8sW", "-$<bi,UoF?a/GQ_", batchUpdateException0);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("Transformer must not be null", batchUpdateException0);
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLNonTransientConnectionException2;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("oc");
      sQLNonTransientExceptionArray0[5] = (SQLNonTransientException) sQLSyntaxErrorException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("", sQLNonTransientExceptionArray0[3]);
      sQLNonTransientExceptionArray0[6] = (SQLNonTransientException) sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("", "");
      sQLNonTransientExceptionArray0[7] = (SQLNonTransientException) sQLNonTransientConnectionException4;
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLNonTransientConnectionException>) resettableListIterator0, (Predicate<? super SQLNonTransientConnectionException>) predicate0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(",=a8A-gd:Y}b\"zS", ",=a8A-gd:Y}b\"zS", 935);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      Enumeration<SQLIntegrityConstraintViolationException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLIntegrityConstraintViolationException>) enumeration0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Stack<SQLTimeoutException> stack0 = new Stack<SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "", 3907);
      stack0.add(sQLTimeoutException0);
      IteratorUtils.loopingListIterator((List<SQLTimeoutException>) stack0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("'2y", "'2y", 0);
      ResettableIterator<SQLIntegrityConstraintViolationException> resettableIterator0 = IteratorUtils.singletonIterator(sQLIntegrityConstraintViolationException0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Iterator<SQLIntegrityConstraintViolationException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLIntegrityConstraintViolationException>) resettableIterator0, (Predicate<? super SQLIntegrityConstraintViolationException>) instanceofPredicate0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MapIterator<HashSet<String>, SQLWarning> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.toString((Iterator<HashSet<String>>) mapIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Node must not be null");
      IteratorUtils.getIterator("Node must not be null");
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLNonTransientException>(orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLNonTransientException> abstractOrderedMapIteratorDecorator1 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLNonTransientException>(abstractOrderedMapIteratorDecorator0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
      OrderedIterator<DataTruncation> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLIntegrityConstraintViolationException>) null, (Iterator<? extends SQLIntegrityConstraintViolationException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Iterator<SQLDataException>[] iteratorArray0 = (Iterator<SQLDataException>[]) Array.newInstance(Iterator.class, 0);
      IteratorUtils.chainedIterator((Iterator<? extends SQLDataException>[]) iteratorArray0);
      Comparator<SQLNonTransientException> comparator0 = (Comparator<SQLNonTransientException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.collatedIterator((Comparator<? super SQLDataException>) comparator0, (Iterator<? extends SQLDataException>[]) iteratorArray0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[6];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("o#|", "jzaW~9");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("*MYh]zh@\"", "o#|");
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("List must not be null", (String) null, 3083, sQLTimeoutException1);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException("J,T33[n5k*]~3`8", "List must not be null", sQLTimeoutException2);
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      SQLTimeoutException sQLTimeoutException5 = new SQLTimeoutException("jzaW~9");
      sQLTimeoutExceptionArray0[5] = sQLTimeoutException5;
      ObjectArrayListIterator<SQLTimeoutException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0, 0, 0);
      Predicate<SQLException> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<SQLTimeoutException> predicate1 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super SQLTimeoutException>) predicate0);
      Iterator<SQLTimeoutException> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends SQLTimeoutException>) objectArrayListIterator0, (Predicate<? super SQLTimeoutException>) predicate1);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends EnumSet<Locale.Category>>) resettableIterator0);
      IteratorUtils.emptyMapIterator();
      OrderedIterator<SQLTransientConnectionException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0, (Iterator<? extends SQLTransientConnectionException>) orderedIterator0);
      OrderedMapIterator<SQLInvalidAuthorizationSpecException, SQLNonTransientException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLNonTransientException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLInvalidAuthorizationSpecException, SQLNonTransientException>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        abstractOrderedMapIteratorDecorator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[6];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Map must not be null");
      sQLNonTransientExceptionArray0[2] = sQLNonTransientException0;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("suffix may not be null");
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLIntegrityConstraintViolationException1;
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "$)1 U;&5Q</\"H>Nv");
      sQLNonTransientExceptionArray0[4] = (SQLNonTransientException) sQLSyntaxErrorException1;
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("Map must not be null", sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[5] = sQLNonTransientException1;
      ResettableIterator<SQLNonTransientException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 0);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("mDInmQxf-VC0BJY", "mDInmQxf-VC0BJY", 0, intArray0);
      batchUpdateException0.getSuppressed();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      sQLSyntaxErrorException0.addSuppressed(batchUpdateException0);
      sQLSyntaxErrorException0.getStackTrace();
      IteratorUtils.singletonIterator((SQLException) sQLSyntaxErrorException0);
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[4];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("R|T'5f*U6B", (String) null);
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("VgdF{&kkP/", "u3}[q,/mWy*~C!", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException((String) null, sQLSyntaxErrorException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("Collection must not be null", "eNzUTQXM>n9_iY4", 0, sQLTimeoutException1);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0);
      Predicate<SQLException> predicate0 = ExceptionPredicate.exceptionPredicate();
      NullIsTruePredicate<SQLTimeoutException> nullIsTruePredicate0 = new NullIsTruePredicate<SQLTimeoutException>(predicate0);
      ListIterator<SQLTimeoutException> listIterator0 = IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) resettableListIterator0, (Predicate<? super SQLTimeoutException>) nullIsTruePredicate0);
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Iterator<SQLTransientConnectionException> iterator0 = EmptyIterator.emptyIterator();
      IteratorUtils.toList((Iterator<? extends SQLTransientConnectionException>) iterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((EnumSet<Locale.Category>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      OrderedMapIterator<StringTokenizer, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends StringTokenizer>) orderedMapIterator0);
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) linkedList0);
      IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLTransientException[]) null, (-993));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[7];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("&S\"[o..1", "&S\"[o..1", (Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, (-292), 93, sQLSyntaxErrorException0);
      dataTruncation0.getNextWarning();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException((Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("&S\"[o..1", sQLSyntaxErrorException1);
      sQLNonTransientConnectionExceptionArray0[0] = sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("&S\"[o..1", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[1] = sQLNonTransientConnectionException1;
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("The map size must be 1", "", 93, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionExceptionArray0[2] = sQLNonTransientConnectionException2;
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("?'Es`in2jd:D^D7h$", "&S\"[o..1", sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[3] = sQLNonTransientConnectionException3;
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[4] = sQLNonTransientConnectionException4;
      SQLNonTransientConnectionException sQLNonTransientConnectionException5 = new SQLNonTransientConnectionException("org.apache.commons.collections4.functors.TransformerClosure", sQLNonTransientConnectionException2);
      sQLNonTransientConnectionExceptionArray0[5] = sQLNonTransientConnectionException5;
      SQLNonTransientConnectionException sQLNonTransientConnectionException6 = new SQLNonTransientConnectionException("?'Es`in2jd:D^D7h$");
      sQLNonTransientConnectionExceptionArray0[6] = sQLNonTransientConnectionException6;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientConnectionExceptionArray0, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((DataTruncation[]) null, 1705);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) "", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("The collection must not be null");
      int int0 = (-3983);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) stringTokenizer0, (-3983));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Properties[] propertiesArray0 = new Properties[0];
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0, 0, 0);
      List<Properties> list0 = IteratorUtils.toList((Iterator<? extends Properties>) resettableIterator0);
      assertEquals(0, list0.size());
  }
}
