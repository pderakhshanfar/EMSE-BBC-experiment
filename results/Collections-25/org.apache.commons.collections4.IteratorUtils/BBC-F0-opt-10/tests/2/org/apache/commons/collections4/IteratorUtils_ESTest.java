/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 21:57:25 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.ArrayIterator;
import org.apache.commons.collections4.iterators.ArrayListIterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.ListIteratorWrapper;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.UnmodifiableMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IteratorUtils.emptyMapIterator();
      Stack<DataTruncation> stack0 = new Stack<DataTruncation>();
      ResettableListIterator<DataTruncation> resettableListIterator0 = IteratorUtils.loopingListIterator((List<DataTruncation>) stack0);
      int int0 = 1;
      DataTruncation dataTruncation0 = new DataTruncation(3, false, false, 233, 1);
      stack0.add(dataTruncation0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataTruncation dataTruncation1 = new DataTruncation(1, true, true, 1, 1);
      stack0.add(dataTruncation1);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLWarning>) resettableListIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[3];
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException(sQLDataException0);
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator");
      sQLDataExceptionArray0[2] = sQLDataException2;
      IteratorUtils.arrayListIterator(sQLDataExceptionArray0, 1, 2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      DataTruncation dataTruncation0 = new DataTruncation(4673, false, true, 100, 100);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      OrderedMapIterator<SQLTransientException, BatchUpdateException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      MapIterator<SQLTransientException, BatchUpdateException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransientException, BatchUpdateException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(mapIterator0);
      
      OrderedIterator<SQLRecoverableException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLRecoverableException>) orderedIterator0);
      assertNotNull(iterator0);
      
      boolean boolean0 = linkedHashSet0.add(dataTruncation0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(dataTruncation0));
      
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(dataTruncation0));
      assertNotNull(resettableIterator0);
      
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) resettableIterator0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(dataTruncation0));
      assertNotNull(enumeration0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      // Undeclared exception!
      IteratorUtils.toList((Iterator<? extends SQLWarning>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IteratorUtils.emptyOrderedIterator();
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[1];
      SQLException sQLException0 = new SQLException((String) null, "org.apache.commons.collections4.functors.ExceptionClosure");
      SQLDataException sQLDataException0 = new SQLDataException("org.apache.commons.collections4.functors.ExceptionClosure", (String) null, 1, sQLException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.apache.commons.collections4.functors.ExceptionClosure", "org.apache.commons.collections4.functors.ExceptionClosure", sQLDataException0);
      sQLSyntaxErrorExceptionArray0[0] = sQLSyntaxErrorException0;
      IteratorUtils.arrayListIterator(sQLSyntaxErrorExceptionArray0, 1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      IteratorUtils.get((Iterator<LinkedHashSet<Closure>>) resettableIterator0, 1);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicateTransformer<SQLTransientException> predicateTransformer0 = new PredicateTransformer<SQLTransientException>(predicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      Boolean boolean0 = predicateTransformer0.transform(sQLTransientConnectionException0);
      Factory<Boolean> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(factory0);
      Iterator<Boolean> iterator0 = IteratorUtils.objectGraphIterator(boolean0, (Transformer<? super Boolean, ? extends Boolean>) factoryTransformer0);
      sQLTransientConnectionException0.getStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends Boolean>) iterator0, (long) 1, (long) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IteratorUtils.emptyIterator();
      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[7];
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[0] = clientInfoStatus0;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[1] = clientInfoStatus1;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      clientInfoStatusArray0[2] = clientInfoStatus2;
      ClientInfoStatus clientInfoStatus3 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[3] = clientInfoStatus3;
      ClientInfoStatus clientInfoStatus4 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[4] = clientInfoStatus4;
      ClientInfoStatus clientInfoStatus5 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      clientInfoStatusArray0[5] = clientInfoStatus5;
      ClientInfoStatus clientInfoStatus6 = ClientInfoStatus.REASON_VALUE_INVALID;
      clientInfoStatusArray0[6] = clientInfoStatus6;
      int int0 = 1;
      IteratorUtils.arrayListIterator(clientInfoStatusArray0, 1, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 9);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) resettableIterator0;
      OrderedIterator<IIOMetadataNode> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) orderedIterator0;
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[1];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0);
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) objectArrayIterator0;
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      iteratorArray0[3] = (Iterator<IIOMetadataNode>) resettableListIterator0;
      Iterator<IIOMetadataNode> iterator0 = EmptyIterator.emptyIterator();
      iteratorArray0[4] = iterator0;
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Iterator<? extends IIOMetadataNode>) resettableIterator0);
      iteratorArray0[5] = (Iterator<IIOMetadataNode>) zippingIterator0;
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(linkedHashSet0);
      iteratorArray0[6] = (Iterator<IIOMetadataNode>) loopingIterator0;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator1 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 0);
      iteratorArray0[7] = (Iterator<IIOMetadataNode>) objectArrayIterator1;
      ListIterator<IIOMetadataNode> listIterator0 = EmptyListIterator.emptyListIterator();
      iteratorArray0[8] = (Iterator<IIOMetadataNode>) listIterator0;
      Iterator<IIOMetadataNode> iterator1 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) null, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      Iterator<IIOMetadataNode> iterator2 = IteratorUtils.unmodifiableIterator(iterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<Closure>>) iterator2, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // You must invoke setComparator() to set a comparator first.
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends Integer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.getIterator(uniquePredicate0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("59{{)6am0|");
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLIntegrityConstraintViolationException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("59{{)6am0|", "", 0);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLSyntaxErrorException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      IteratorUtils.arrayIterator(sQLNonTransientExceptionArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IteratorUtils.getIterator("vp)`i+L1};;\"jDPAD");
      Iterator<SQLDataException> iterator0 = EmptyIterator.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.toString(iterator0, (Transformer<? super SQLDataException, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[3];
      IteratorUtils.arrayIterator(stringArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("lx0.D", "");
      sQLTransientConnectionException0.printStackTrace();
      IteratorUtils.getIterator(sQLTransientConnectionException0);
      Comparator<SQLNonTransientConnectionException> comparator0 = null;
      Iterator<SQLNonTransientConnectionException>[] iteratorArray0 = (Iterator<SQLNonTransientConnectionException>[]) Array.newInstance(Iterator.class, 9);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Start index must not be less than zero", sQLTransientConnectionException0);
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.singletonIterator(sQLNonTransientConnectionException0);
      iteratorArray0[0] = (Iterator<SQLNonTransientConnectionException>) resettableIterator0;
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLNonTransientConnectionException>) iteratorArray0[0]);
      iteratorArray0[1] = iterator0;
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      iteratorArray0[2] = (Iterator<SQLNonTransientConnectionException>) resettableListIterator0;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLNonTransientConnectionException>) null, (Iterator<? extends SQLNonTransientConnectionException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[1];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      ObjectArrayIterator<SQLTimeoutException> objectArrayIterator0 = new ObjectArrayIterator<SQLTimeoutException>(sQLTimeoutExceptionArray0);
      Enumeration<SQLTimeoutException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTimeoutException>) objectArrayIterator0);
      IteratorUtils.asIterator((Enumeration<? extends SQLTimeoutException>) enumeration0);
      SingletonIterator<SQLTransientException> singletonIterator0 = new SingletonIterator<SQLTransientException>(sQLTimeoutException0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(allPredicate0, transformer0, transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientException>) singletonIterator0, (Transformer<? super SQLTransientException, String>) ifTransformer0, "(QJ_^4_6L", "", "(QJ_^4_6L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.sql.SQLTimeoutException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Transformer<Object, IIOMetadataNode> transformer0 = InvokerTransformer.invokerTransformer("");
      iIOMetadataNode0.getNextSibling();
      IfTransformer<Object, IIOMetadataNode> ifTransformer0 = new IfTransformer<Object, IIOMetadataNode>(uniquePredicate0, transformer0, transformer0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.objectGraphIterator(iIOMetadataNode0, (Transformer<? super IIOMetadataNode, ? extends IIOMetadataNode>) ifTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<Closure>>) iterator0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class javax.imageio.metadata.IIOMetadataNode' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      IteratorUtils.get((Iterator<LinkedHashSet<Closure>>) resettableIterator0, 0);
      Integer integer0 = new Integer(0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      PriorityQueue<SQLClientInfoException> priorityQueue0 = new PriorityQueue<SQLClientInfoException>();
      ListIterator<PriorityQueue<SQLClientInfoException>> listIterator0 = IteratorUtils.singletonListIterator(priorityQueue0);
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IteratorUtils.toString((Iterator<PriorityQueue<SQLClientInfoException>>) listIterator0, (Transformer<? super PriorityQueue<SQLClientInfoException>, String>) transformer0);
      IteratorUtils.emptyOrderedIterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends ClientInfoStatus>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      IteratorUtils.get((Iterator<LinkedHashSet<Closure>>) resettableIterator0, 0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends String>) resettableIterator0, (Class<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Array class must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      IteratorUtils.get((Iterator<LinkedHashSet<Closure>>) resettableIterator0, 0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Node must not be null");
      SQLDataException sQLDataException0 = new SQLDataException("Node must not be null", "[zg L#484", sQLSyntaxErrorException0);
      Transformer<SQLDataException, SQLDataException> transformer0 = InvokerTransformer.invokerTransformer("[zg L#484");
      Iterator<SQLDataException> iterator0 = IteratorUtils.objectGraphIterator(sQLDataException0, (Transformer<? super SQLDataException, ? extends SQLDataException>) transformer0);
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[8];
      sQLDataExceptionArray0[0] = sQLDataException0;
      sQLDataExceptionArray0[1] = sQLDataException0;
      sQLDataExceptionArray0[2] = sQLDataException0;
      sQLDataExceptionArray0[3] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      sQLDataExceptionArray0[4] = sQLDataException1;
      sQLDataExceptionArray0[5] = sQLDataException0;
      sQLDataExceptionArray0[6] = sQLDataException0;
      sQLDataExceptionArray0[7] = sQLDataException0;
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.arrayIterator(sQLDataExceptionArray0);
      ZippingIterator<SQLDataException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) iterator0, (Iterator<? extends SQLDataException>) iterator0, (Iterator<? extends SQLDataException>) resettableIterator1);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Transformer<Object, Boolean> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends Boolean>) hashMap0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer1);
      Transformer<Object, String> transformer2 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<SQLException, String> ifTransformer0 = new IfTransformer<SQLException, String>(predicate0, transformer2, transformer2);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) zippingIterator0, (Transformer<? super SQLDataException, String>) ifTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '[zg L#484' on 'class java.sql.SQLDataException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.getIterator(uniquePredicate0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("AMT)+{'");
      IteratorUtils.toString((Iterator<Transformer<Object, SQLFeatureNotSupportedException>>) null, (Transformer<? super Transformer<Object, SQLFeatureNotSupportedException>, String>) constantTransformer0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = "`O*bQR+JYu%CjF\\";
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("`O*bQR+JYu%CjF");
      Transformer<String, String> transformer0 = InvokerTransformer.invokerTransformer("`O*bQR+JYu%CjF");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<String>) singletonListIterator0, (Transformer<? super String, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '`O*bQR+JYu%CjF' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      IteratorUtils.size(resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((ServiceLoader<SQLTransactionRollbackException>[]) null, 2147);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableIterator0);
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>((IIOMetadataNode) null);
      Transformer<Object, IIOMetadataNode> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) equalPredicate0, (Transformer<? super Object, ? extends IIOMetadataNode>) constantTransformer0, (Transformer<? super Object, ? extends IIOMetadataNode>) constantTransformer0);
      IteratorUtils.transformedIterator((Iterator<?>) resettableIterator0, (Transformer<? super Object, ? extends IIOMetadataNode>) transformer0);
      Predicate<Object> predicate0 = null;
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null, false);
      IfClosure<Object> ifClosure1 = new IfClosure<Object>(equalPredicate0, (Closure<? super Object>) null, ifClosure0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(whileClosure0);
      IteratorUtils.apply((Iterator<Object>) null, (Closure<? super Object>) ifClosure0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) singletonIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) mapIterator0, (Transformer<? super Object, ? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends StringTokenizer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[3];
      IteratorUtils.arrayIterator(stringArray0);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties[] propertiesArray0 = new Properties[9];
      propertiesArray0[0] = properties3;
      propertiesArray0[1] = properties0;
      propertiesArray0[2] = properties1;
      propertiesArray0[3] = properties0;
      Properties properties5 = new Properties();
      propertiesArray0[4] = properties5;
      propertiesArray0[5] = properties4;
      propertiesArray0[6] = properties2;
      propertiesArray0[7] = properties4;
      Properties properties6 = new Properties();
      propertiesArray0[8] = properties6;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>((Predicate<? super Object>) null);
      Integer integer0 = new Integer((-1019));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 3);
      properties6.put(integer0, sQLFeatureNotSupportedException0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(predicateTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Properties>) resettableIterator0, (Predicate<? super Properties>) transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.PredicateTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3565;
      longArray0[1] = (long) 3565;
      longArray0[2] = (long) 3565;
      longArray0[3] = 0L;
      longArray0[4] = (long) 3565;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("gwU`?", "Closure collection must not be null", sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("V[BB`RELCf", "The predicate and closure arrays must be the same size", 3565, longArray0, sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("The predicate and closure arrays must be the same size", batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLTransactionRollbackException2);
      Properties properties0 = new Properties();
      Transformer<Object, IIOMetadataNode> transformer0 = ExceptionTransformer.exceptionTransformer();
      Transformer<Object, IIOMetadataNode> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends IIOMetadataNode>) transformer0, (Transformer<? super Object, ? extends IIOMetadataNode>) transformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<?>) null, (Transformer<? super Object, ? extends IIOMetadataNode>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[3];
      IteratorUtils.arrayIterator(stringArray0);
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[6];
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[0] = iIOMetadataNode0;
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      iIOMetadataNodeArray0[1] = iIOMetadataNode1;
      IIOMetadataNode iIOMetadataNode2 = new IIOMetadataNode("");
      iIOMetadataNodeArray0[2] = iIOMetadataNode2;
      IIOMetadataNode iIOMetadataNode3 = new IIOMetadataNode();
      iIOMetadataNodeArray0[3] = iIOMetadataNode3;
      IIOMetadataNode iIOMetadataNode4 = new IIOMetadataNode();
      iIOMetadataNodeArray0[4] = iIOMetadataNode4;
      IIOMetadataNode iIOMetadataNode5 = new IIOMetadataNode();
      iIOMetadataNodeArray0[5] = iIOMetadataNode5;
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.arrayIterator(iIOMetadataNodeArray0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      IteratorUtils.matchesAll((Iterator<IIOMetadataNode>) resettableIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[3];
      IteratorUtils.arrayIterator(stringArray0);
      OrderedIterator<Object> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      SkippingIterator<Object> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<Object>) orderedIterator0, 3499L);
      TreeSet<Closure<Object>> treeSet0 = new TreeSet<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) treeSet0);
      IteratorUtils.apply((Iterator<Object>) skippingIterator0, (Closure<? super Object>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "e@[iv>]R^fF$9n0";
      stringArray0[2] = "C9l8!N}qo`";
      stringArray0[3] = "e@[iv>]R^fF$9n0";
      stringArray0[4] = "mjaF_s3,q0L";
      stringArray0[5] = "";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      IteratorUtils.get((Iterator<LinkedHashSet<Closure>>) resettableIterator0, 0);
      Integer integer0 = new Integer(0);
      OrderedMapIterator<SQLWarning, EnumSet<Locale.Category>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLWarning, EnumSet<Locale.Category>> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLWarning, EnumSet<Locale.Category>>(orderedMapIterator0);
      IteratorUtils.toArray((Iterator<?>) abstractOrderedMapIteratorDecorator0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3565;
      longArray0[1] = (long) 3565;
      longArray0[2] = (long) 3565;
      longArray0[3] = 0L;
      longArray0[4] = (long) 3565;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("gwU`?", "Closure collection must not be null", sQLInvalidAuthorizationSpecException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("V[BB`RELCf", "The predicate and closure arrays must be the same size", 3565, longArray0, sQLTransactionRollbackException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("The predicate and closure arrays must be the same size", batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException2 = new SQLTransactionRollbackException(sQLTransactionRollbackException1);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) sQLTransactionRollbackException2);
      Properties[] propertiesArray0 = new Properties[5];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      ResettableIterator<Properties> resettableIterator0 = IteratorUtils.arrayIterator(propertiesArray0);
      IteratorUtils.matchesAll((Iterator<Properties>) resettableIterator0, (Predicate<? super Properties>) predicate0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, (Closure<? super Object>) null);
      IfClosure<Object> ifClosure1 = new IfClosure<Object>(predicate0, ifClosure0, (Closure<? super Object>) null);
      IteratorUtils.emptyOrderedIterator();
      OrderedMapIterator<SQLTransactionRollbackException, Boolean> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<Object, Boolean> mapIterator0 = UnmodifiableMapIterator.unmodifiableMapIterator((MapIterator<?, ? extends Boolean>) orderedMapIterator0);
      IteratorUtils.apply((Iterator<Object>) mapIterator0, (Closure<? super Object>) ifClosure1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      StringTokenizer stringTokenizer0 = new StringTokenizer("' is invalid.");
      IteratorUtils.getIterator(stringTokenizer0);
      OrderedMapIterator<String, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) orderedMapIterator0, class0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Object object0 = new Object();
      IdentityPredicate.identityPredicate(object0);
      IteratorUtils.matchesAll((Iterator<Properties>) mapIterator0, (Predicate<? super Properties>) uniquePredicate0);
      IteratorUtils.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Hashtable<SQLTransactionRollbackException, ServiceLoader<Properties>> hashtable0 = new Hashtable<SQLTransactionRollbackException, ServiceLoader<Properties>>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("p)");
      Class<Properties> class0 = Properties.class;
      ServiceLoader<Properties> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      hashtable0.put(sQLTransactionRollbackException0, serviceLoader0);
      EntrySetMapIterator<SQLTransactionRollbackException, ServiceLoader<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, ServiceLoader<Properties>>(hashtable0);
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) entrySetMapIterator0, 10);
      IteratorUtils.size(entrySetMapIterator0);
      IteratorUtils.emptyMapIterator();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LoopingListIterator<Integer> loopingListIterator0 = new LoopingListIterator<Integer>(linkedList0);
      Iterator<Integer> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<Integer>) loopingListIterator0);
      Properties properties0 = new Properties();
      Integer integer0 = new Integer(1232);
      linkedList0.add(integer0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) properties0);
      Predicate<Integer> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Integer>) predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find(iterator0, (Predicate<? super Integer>) predicate1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.emptyIterator();
      int int0 = 128;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLSyntaxErrorException[]) null, 26, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      IteratorUtils.get((Iterator<LinkedHashSet<Closure>>) resettableIterator0, 0);
      Integer integer0 = new Integer(1393);
      IteratorUtils.toArray((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>((IIOMetadataNode) null);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends IIOMetadataNode>) constantTransformer0, (Transformer<? super Object, ? extends IIOMetadataNode>) constantTransformer0);
      IteratorUtils.transformedIterator((Iterator<?>) resettableIterator0, (Transformer<? super Object, ? extends IIOMetadataNode>) constantTransformer0);
      ConstantTransformer.constantTransformer((SQLClientInfoException) null);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate.notPredicate((Predicate<? super IIOMetadataNode>) uniquePredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(nullIsExceptionPredicate0, (Closure<? super Object>) null);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(nullIsExceptionPredicate0, (Closure<? super Object>) null, false);
      IfClosure<Object> ifClosure1 = new IfClosure<Object>(uniquePredicate0, whileClosure0, whileClosure0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(sQLTransactionRollbackException0);
      IteratorUtils.apply((Iterator<Object>) singletonIterator0, (Closure<? super Object>) ifClosure1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Hashtable<SQLTransactionRollbackException, ServiceLoader<Properties>> hashtable0 = new Hashtable<SQLTransactionRollbackException, ServiceLoader<Properties>>();
      EntrySetMapIterator<SQLTransactionRollbackException, ServiceLoader<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, ServiceLoader<Properties>>(hashtable0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate.notPredicate((Predicate<? super IIOMetadataNode>) uniquePredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(uniquePredicate0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(uniquePredicate0, (Closure<? super Object>) null);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(nullIsExceptionPredicate0, ifClosure0, true);
      IfClosure<Object> ifClosure1 = new IfClosure<Object>(nullIsExceptionPredicate0, (Closure<? super Object>) null, (Closure<? super Object>) null);
      Integer integer0 = new Integer(10);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>(integer0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<Object>) singletonIterator0, (Closure<? super Object>) ifClosure1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableIterator0);
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>((IIOMetadataNode) null);
      Transformer<Object, IIOMetadataNode> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) equalPredicate0, (Transformer<? super Object, ? extends IIOMetadataNode>) constantTransformer0, (Transformer<? super Object, ? extends IIOMetadataNode>) constantTransformer0);
      IteratorUtils.transformedIterator((Iterator<?>) resettableIterator0, (Transformer<? super Object, ? extends IIOMetadataNode>) transformer0);
      ConstantTransformer.constantTransformer((SQLClientInfoException) null);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate.notPredicate((Predicate<? super IIOMetadataNode>) uniquePredicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(equalPredicate0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(nullIsExceptionPredicate0, (Closure<? super Object>) null);
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(uniquePredicate0, ifClosure0, true);
      IfClosure<Object> ifClosure1 = new IfClosure<Object>(uniquePredicate0, ifClosure0, whileClosure0);
      SingletonIterator<Object> singletonIterator0 = new SingletonIterator<Object>((Object) null);
      IteratorUtils.apply((Iterator<Object>) singletonIterator0, (Closure<? super Object>) whileClosure0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Hashtable<SQLTransactionRollbackException, ServiceLoader<Properties>> hashtable0 = new Hashtable<SQLTransactionRollbackException, ServiceLoader<Properties>>();
      EntrySetMapIterator<SQLTransactionRollbackException, ServiceLoader<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, ServiceLoader<Properties>>(hashtable0);
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) entrySetMapIterator0, 10);
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      IteratorUtils.toArray((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, class0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) resettableListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLTimeoutException>) null, (Predicate<? super SQLTimeoutException>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IteratorUtils.emptyOrderedMapIterator();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator((SQLClientInfoException) null);
      DefaultEquator<SQLClientInfoException> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<SQLClientInfoException> equalPredicate0 = new EqualPredicate<SQLClientInfoException>((SQLClientInfoException) null, defaultEquator0);
      Predicate<SQLClientInfoException> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLClientInfoException>) equalPredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableIterator0);
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>((IIOMetadataNode) null);
      Transformer<Object, IIOMetadataNode> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) equalPredicate0, (Transformer<? super Object, ? extends IIOMetadataNode>) constantTransformer0, (Transformer<? super Object, ? extends IIOMetadataNode>) constantTransformer0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) resettableIterator0, (Transformer<? super Object, ? extends IIOMetadataNode>) transformer0);
      ConstantTransformer.constantTransformer((SQLClientInfoException) null);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<IIOMetadataNode> predicate0 = NotPredicate.notPredicate((Predicate<? super IIOMetadataNode>) uniquePredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("PiX*z~nCa!]sC~", "PiX*z~nCa!]sC~", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getSuppressed();
      ResettableIterator<SQLClientInfoException> resettableIterator1 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      Predicate<SQLClientInfoException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLClientInfoException>) uniquePredicate0);
      IteratorUtils.find((Iterator<SQLClientInfoException>) resettableIterator1, (Predicate<? super SQLClientInfoException>) predicate1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLNonTransientConnectionException, SQLTransactionRollbackException>(orderedMapIterator0);
      OrderedMapIterator<SQLNonTransientConnectionException, SQLTransactionRollbackException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLNonTransientConnectionException, ? extends SQLTransactionRollbackException>) abstractOrderedMapIteratorDecorator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      EqualPredicate<SQLNonTransientException> equalPredicate0 = new EqualPredicate<SQLNonTransientException>(sQLFeatureNotSupportedException0);
      IteratorUtils.matchesAny((Iterator<SQLNonTransientConnectionException>) orderedMapIterator1, (Predicate<? super SQLNonTransientConnectionException>) equalPredicate0);
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 8);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>();
      arrayDequeArray0[1] = arrayDeque1;
      ArrayDeque<Object> arrayDeque2 = new ArrayDeque<Object>();
      arrayDequeArray0[2] = arrayDeque2;
      ArrayDeque<Object> arrayDeque3 = new ArrayDeque<Object>();
      arrayDequeArray0[3] = arrayDeque3;
      ArrayDeque<Object> arrayDeque4 = new ArrayDeque<Object>();
      arrayDequeArray0[4] = arrayDeque4;
      ArrayDeque<Object> arrayDeque5 = new ArrayDeque<Object>();
      arrayDequeArray0[5] = arrayDeque5;
      ArrayDeque<Object> arrayDeque6 = new ArrayDeque<Object>();
      arrayDequeArray0[6] = arrayDeque6;
      ArrayDeque<Object> arrayDeque7 = new ArrayDeque<Object>();
      arrayDequeArray0[7] = arrayDeque7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(arrayDequeArray0, 4, (-1108));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MapIterator<SQLException, BatchUpdateException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, LinkedHashSet<HashSet>>) mapIterator0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SingletonIterator<SQLSyntaxErrorException> singletonIterator0 = new SingletonIterator<SQLSyntaxErrorException>(sQLSyntaxErrorException0);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLSyntaxErrorException>) arrayDeque0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) singletonIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", sQLSyntaxErrorException0);
      IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      NotPredicate.notPredicate((Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.emptyMapIterator();
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("Enumeration must not be null");
      IteratorUtils.toString((Iterator<LinkedList<Closure>>) null, (Transformer<? super LinkedList<Closure>, String>) transformer0, "Enumeration must not be null", "org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", "|23$%hc(lNkt0");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      Factory<String> factory0 = ConstantFactory.constantFactory("org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator");
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      IteratorUtils.emptyMapIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", "org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator");
      stack0.add(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<LinkedList<Closure>>) resettableIterator0, (Transformer<? super LinkedList<Closure>, String>) factoryTransformer0, "org.apache.commons.collections4.map.AbstractLinkedMap$ValuesIterator", "]", "qPJG~");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableIterator0);
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>((IIOMetadataNode) null);
      Transformer<Object, IIOMetadataNode> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) equalPredicate0, (Transformer<? super Object, ? extends IIOMetadataNode>) constantTransformer0, (Transformer<? super Object, ? extends IIOMetadataNode>) constantTransformer0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) resettableIterator0, (Transformer<? super Object, ? extends IIOMetadataNode>) transformer0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Predicate<IIOMetadataNode> predicate0 = NotPredicate.notPredicate((Predicate<? super IIOMetadataNode>) uniquePredicate0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.emptyIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterator<SQLTransactionRollbackException>[] iteratorArray0 = (Iterator<SQLTransactionRollbackException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLTransientException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLSyntaxErrorException, LinkedHashSet<HashSet>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, LinkedHashSet<HashSet>>) mapIterator0);
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator1, (Iterator<? extends SQLSyntaxErrorException>) mapIterator1);
      IteratorUtils.getIterator(zippingIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<Properties, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, SQLTimeoutException>(mapIterator0);
      Transformer<Properties, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<Properties>) mapIterator0, (Transformer<? super Properties, String>) transformer0, "*%", "\")[=4qx~2n", "\")[=4qx~2n");
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate.notPredicate((Predicate<? super IIOMetadataNode>) uniquePredicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) null, (Predicate<? super IIOMetadataNode>) uniquePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      Vector<IIOMetadataNode> vector0 = new Vector<IIOMetadataNode>();
      Vector<IIOMetadataNode> vector1 = new Vector<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(vector1);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      int int0 = (-1478);
      DataTruncation dataTruncation0 = new DataTruncation(1909, false, false, 1909, (-1478));
      dataTruncation0.getNextWarning();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (Throwable) null);
      stack0.push(sQLNonTransientConnectionException0);
      InstantiateFactory<SQLFeatureNotSupportedException> instantiateFactory0 = new InstantiateFactory<SQLFeatureNotSupportedException>(class0);
      FactoryTransformer<Object, SQLFeatureNotSupportedException> factoryTransformer0 = new FactoryTransformer<Object, SQLFeatureNotSupportedException>(instantiateFactory0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) factoryTransformer0);
      IteratorUtils.apply((Iterator<IIOMetadataNode>) loopingIterator0, (Closure<? super IIOMetadataNode>) closure0);
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<Closure>>) resettableIterator0, 11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 8
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("~h5Z\"B&DhV7e1zZQ{", "suffix may not be null", 61, (int[]) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((int[]) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(61).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      batchUpdateException1.fillInStackTrace();
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(comparator0, comparator0, comparatorPredicate_Criterion0);
      batchUpdateException1.addSuppressed(sQLTransientConnectionException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(comparatorPredicate0);
      IteratorUtils.size(iterator0);
      Integer integer0 = new Integer(31);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0, true);
      IteratorUtils.matchesAny((Iterator<Integer>) singletonIterator0, (Predicate<? super Integer>) comparatorPredicate0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MapIterator<SQLDataException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLSyntaxErrorException, LinkedHashSet<HashSet>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, LinkedHashSet<HashSet>>) mapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator1, (Iterator<? extends SQLSyntaxErrorException>) mapIterator1);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAll((Iterator<Properties>) null, (Predicate<? super Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("~h5Z\"B&DhV7e1zZQ{", "suffix may not be null", 61, (int[]) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((int[]) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(comparator0, comparator0, comparatorPredicate_Criterion0);
      batchUpdateException1.addSuppressed(sQLTransientConnectionException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(comparatorPredicate0);
      IteratorUtils.size(iterator0);
      Integer integer0 = new Integer(31);
      SingletonIterator<Integer> singletonIterator0 = new SingletonIterator<Integer>(integer0, true);
      IteratorUtils.matchesAny((Iterator<Integer>) singletonIterator0, (Predicate<? super Integer>) comparatorPredicate0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("~h5Z\"B&DhV7e1zZQ{", "suffix may not be null", 61, (int[]) null);
      ResettableListIterator<Properties> resettableListIterator0 = IteratorUtils.emptyListIterator();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer((String) null);
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, transformer0, transformer0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>(61, 1276.3817F);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, 61, hashtable0);
      ifTransformer0.transform(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Properties>) resettableListIterator0, (Transformer<? super Properties, String>) ifTransformer0, "", (String) null, "suffix may not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // prefix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      IdentityPredicate.identityPredicate((Object) mapIterator0);
      Transformer<Properties, String> transformer0 = ConstantTransformer.nullTransformer();
      Properties[] propertiesArray0 = new Properties[6];
      Properties properties0 = new Properties();
      propertiesArray0[0] = properties0;
      Properties properties1 = new Properties();
      propertiesArray0[1] = properties1;
      Properties properties2 = new Properties();
      propertiesArray0[2] = properties2;
      Properties properties3 = new Properties();
      propertiesArray0[3] = properties3;
      Properties properties4 = new Properties();
      propertiesArray0[4] = properties4;
      Properties properties5 = new Properties();
      propertiesArray0[5] = properties5;
      ObjectArrayListIterator<Properties> objectArrayListIterator0 = new ObjectArrayListIterator<Properties>(propertiesArray0);
      IteratorUtils.toString((Iterator<Properties>) objectArrayListIterator0, (Transformer<? super Properties, String>) transformer0, "*%", "*%", "*%");
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<Closure>>) objectArrayListIterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(resettableIterator0);
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>((IIOMetadataNode) null);
      Transformer<Object, IIOMetadataNode> transformer0 = IfTransformer.ifTransformer((Predicate<? super Object>) equalPredicate0, (Transformer<? super Object, ? extends IIOMetadataNode>) constantTransformer0, (Transformer<? super Object, ? extends IIOMetadataNode>) constantTransformer0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) resettableIterator0, (Transformer<? super Object, ? extends IIOMetadataNode>) transformer0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) iterator0, (Predicate<? super IIOMetadataNode>) equalPredicate0);
      OrderedMapIterator<SQLClientInfoException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, DataTruncation>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, SQLTransactionRollbackException> abstractOrderedMapIteratorDecorator0 = null;
      try {
        abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLTransientConnectionException, SQLTransactionRollbackException>((OrderedMapIterator<SQLTransientConnectionException, SQLTransactionRollbackException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<Properties, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, SQLTimeoutException>(mapIterator0);
      Transformer<Properties, String> transformer0 = ConstantTransformer.nullTransformer();
      IteratorUtils.toString((Iterator<Properties>) abstractMapIteratorDecorator0, (Transformer<? super Properties, String>) transformer0, "", "", "");
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(identityPredicate0, identityPredicate0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(orPredicate0);
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) nullIsFalsePredicate0, (Predicate<? super Object>) orPredicate0);
      IteratorUtils.matchesAny((Iterator<SQLException>) null, (Predicate<? super SQLException>) predicate0);
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) nullIsFalsePredicate0);
      Integer integer0 = new Integer((-9));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableListIterator1, (Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableListIterator1);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      IteratorUtils.matchesAny((Iterator<SQLException>) null, (Predicate<? super SQLException>) nullIsFalsePredicate0);
      ResettableListIterator<String> resettableListIterator2 = IteratorUtils.emptyListIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator2, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLTimeoutException[] sQLTimeoutExceptionArray0 = new SQLTimeoutException[5];
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      sQLTimeoutExceptionArray0[0] = sQLTimeoutException0;
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("a&\"E^~8-2L|o5'Bz", "", 0);
      sQLTimeoutExceptionArray0[1] = sQLTimeoutException1;
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("", "", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[2] = sQLTimeoutException2;
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("\">g!=dC`W?", sQLTimeoutException0);
      sQLTimeoutExceptionArray0[3] = sQLTimeoutException3;
      SQLTimeoutException sQLTimeoutException4 = new SQLTimeoutException((String) null, "\">g!=dC`W?");
      sQLTimeoutExceptionArray0[4] = sQLTimeoutException4;
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTimeoutExceptionArray0, 0);
      IteratorUtils.asIterable((Iterator<? extends SQLTimeoutException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("~h5Z\"B&DhV7e1zZQ{", "T*5wpFV", 61, (int[]) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("suffix may not be null", (String) null, 61, sQLTransientConnectionException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("~h5Z\"B&DhV7e1zZQ{", (String) null, 61, (int[]) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      batchUpdateException0.addSuppressed(sQLTransientConnectionException0);
      Properties properties0 = new Properties();
      Iterator<?> iterator0 = IteratorUtils.getIterator(properties0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.size(iterator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Hashtable<SQLTransactionRollbackException, ServiceLoader<Properties>> hashtable0 = new Hashtable<SQLTransactionRollbackException, ServiceLoader<Properties>>();
      EntrySetMapIterator<SQLTransactionRollbackException, ServiceLoader<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, ServiceLoader<Properties>>(hashtable0);
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) entrySetMapIterator0, 10);
      Integer integer0 = new Integer((-3749));
      IteratorUtils.getIterator(hashtable0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ArrayList<SQLTransactionRollbackException> arrayList0 = new ArrayList<SQLTransactionRollbackException>();
      Throwable throwable0 = null;
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("mVa1]aQuqH", "", (-716), sQLWarning0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("mVa1]aQuqH", sQLTimeoutException0);
      arrayList0.add(sQLTransactionRollbackException0);
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTransactionRollbackException>) arrayList0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLTransactionRollbackException>) resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>((IIOMetadataNode) null);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 8);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) singletonListIterator0;
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) singletonListIterator0;
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) singletonListIterator0;
      iteratorArray0[3] = (Iterator<IIOMetadataNode>) singletonListIterator0;
      iteratorArray0[4] = (Iterator<IIOMetadataNode>) singletonListIterator0;
      Hashtable<IIOMetadataNode, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<IIOMetadataNode, SQLFeatureNotSupportedException>();
      EntrySetMapIterator<IIOMetadataNode, SQLFeatureNotSupportedException> entrySetMapIterator0 = new EntrySetMapIterator<IIOMetadataNode, SQLFeatureNotSupportedException>(hashtable0);
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) entrySetMapIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0, (Collection<? super IIOMetadataNode>) vector0);
      iteratorArray0[5] = iterator0;
      iteratorArray0[6] = (Iterator<IIOMetadataNode>) singletonListIterator0;
      iteratorArray0[7] = (Iterator<IIOMetadataNode>) singletonListIterator0;
      ZippingIterator<IIOMetadataNode> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) zippingIterator0);
      singletonListIterator0.set((IIOMetadataNode) null);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      Vector<IIOMetadataNode> vector1 = new Vector<IIOMetadataNode>();
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(vector1);
      // Undeclared exception!
      try { 
        IteratorUtils.apply(iterator0, (Closure<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) mapIterator0);
      IteratorUtils.matchesAll((Iterator<Properties>) mapIterator0, (Predicate<? super Properties>) predicate0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonListIterator0.forEachRemaining(consumer0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator0, (Predicate<? super String>) predicate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.size(singletonListIterator0);
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 4);
      iteratorArray0[0] = (Iterator<IIOMetadataNode>) singletonListIterator0;
      iteratorArray0[1] = (Iterator<IIOMetadataNode>) singletonListIterator0;
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode(".G");
      iIOMetadataNodeArray0[0] = iIOMetadataNode1;
      iIOMetadataNodeArray0[1] = iIOMetadataNode0;
      iIOMetadataNodeArray0[2] = iIOMetadataNode0;
      iIOMetadataNodeArray0[3] = iIOMetadataNode0;
      iIOMetadataNodeArray0[4] = iIOMetadataNode0;
      ObjectArrayIterator<IIOMetadataNode> objectArrayIterator0 = new ObjectArrayIterator<IIOMetadataNode>(iIOMetadataNodeArray0, 0);
      iteratorArray0[2] = (Iterator<IIOMetadataNode>) objectArrayIterator0;
      iteratorArray0[3] = (Iterator<IIOMetadataNode>) singletonListIterator0;
      IteratorUtils.zippingIterator((Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray1 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 6);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[4];
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 2840;
      longArray0[3] = (long) 2840;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 2840;
      longArray0[6] = (long) 2840;
      longArray0[7] = (long) 2840;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(".G", ".G", 2840, longArray0, (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(batchUpdateException0);
      sQLFeatureNotSupportedExceptionArray0[0] = sQLFeatureNotSupportedException0;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(".G", "", 2389);
      sQLFeatureNotSupportedExceptionArray0[1] = sQLFeatureNotSupportedException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedExceptionArray0[2] = sQLFeatureNotSupportedException2;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException3 = new SQLFeatureNotSupportedException("FP}|?I%s^V", ".G", 2985);
      sQLFeatureNotSupportedExceptionArray0[3] = sQLFeatureNotSupportedException3;
      ObjectArrayIterator<SQLFeatureNotSupportedException> objectArrayIterator1 = new ObjectArrayIterator<SQLFeatureNotSupportedException>(sQLFeatureNotSupportedExceptionArray0);
      iteratorArray1[0] = (Iterator<SQLFeatureNotSupportedException>) objectArrayIterator1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLFeatureNotSupportedExceptionArray0, 2840, 2985);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MapIterator<SQLDataException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLSyntaxErrorException, LinkedHashSet<HashSet>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, LinkedHashSet<HashSet>>) mapIterator0);
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator1, (Iterator<? extends SQLSyntaxErrorException>) mapIterator1);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      Predicate<Object> predicate0 = null;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((SQLException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MapIterator<SQLDataException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLSyntaxErrorException, LinkedHashSet<HashSet>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, LinkedHashSet<HashSet>>) mapIterator0);
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator1, (Iterator<? extends SQLSyntaxErrorException>) mapIterator1);
      IteratorUtils.contains((Iterator<ServiceLoader<LinkedHashSet>>) zippingIterator0, (Object) mapIterator0);
      OrderedMapIterator<IIOMetadataNode, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      Predicate<IIOMetadataNode> predicate1 = NotPredicate.notPredicate((Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (Predicate<? super IIOMetadataNode>) predicate1);
      OrderedMapIterator<SQLClientInfoException, DataTruncation> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, DataTruncation> mapIterator2 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, DataTruncation>) orderedMapIterator1);
      IteratorUtils.find((Iterator<SQLClientInfoException>) mapIterator2, (Predicate<? super SQLClientInfoException>) predicate0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ConstantTransformer<Object, IIOMetadataNode> constantTransformer0 = new ConstantTransformer<Object, IIOMetadataNode>((IIOMetadataNode) null);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) constantTransformer0, (Predicate<? super Object>) predicate0);
      IfTransformer.ifTransformer((Predicate<? super Object>) predicate1, (Transformer<? super Object, ? extends IIOMetadataNode>) constantTransformer0, (Transformer<? super Object, ? extends IIOMetadataNode>) constantTransformer0);
      ConstantTransformer.constantTransformer((SQLClientInfoException) null);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      NotPredicate.notPredicate((Predicate<? super IIOMetadataNode>) uniquePredicate0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.apache.commons.collections4.functors.IfTransformer", "Rz6JpUgv\t,]93", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getSuppressed();
      ResettableIterator<SQLClientInfoException> resettableIterator0 = IteratorUtils.singletonIterator(sQLClientInfoException0);
      NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLClientInfoException>) predicate0);
      IteratorUtils.find((Iterator<SQLClientInfoException>) resettableIterator0, (Predicate<? super SQLClientInfoException>) predicate1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResettableListIterator<SQLSyntaxErrorException> resettableListIterator0 = IteratorUtils.emptyListIterator();
      IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0, (Iterator<? extends SQLSyntaxErrorException>) resettableListIterator0);
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      Transformer<Object, SQLClientInfoException> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedPredicate<SQLClientInfoException> transformedPredicate0 = new TransformedPredicate<SQLClientInfoException>(transformer0, (Predicate<? super SQLClientInfoException>) null);
      IteratorUtils.find((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) transformedPredicate0);
      OrderedMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      OrderedMapIterator<DataTruncation, SQLInvalidAuthorizationSpecException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<DataTruncation, ? extends SQLInvalidAuthorizationSpecException>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLInvalidAuthorizationSpecException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLInvalidAuthorizationSpecException>(orderedMapIterator1);
      Iterator<SQLWarning> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLWarning>) abstractOrderedMapIteratorDecorator0, (Iterator<? extends SQLWarning>) orderedMapIterator0);
      IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) iterator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MapIterator<SQLDataException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      MapIterator<SQLSyntaxErrorException, LinkedHashSet<HashSet>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, LinkedHashSet<HashSet>>) mapIterator0);
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator1, (Iterator<? extends SQLSyntaxErrorException>) mapIterator1);
      IteratorUtils.contains((Iterator<ServiceLoader<LinkedHashSet>>) zippingIterator0, (Object) mapIterator0);
      OrderedMapIterator<IIOMetadataNode, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      Predicate<IIOMetadataNode> predicate1 = NotPredicate.notPredicate((Predicate<? super IIOMetadataNode>) predicate0);
      IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (Predicate<? super IIOMetadataNode>) predicate1);
      OrderedMapIterator<SQLClientInfoException, DataTruncation> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      MapIterator<SQLClientInfoException, DataTruncation> mapIterator2 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLClientInfoException, DataTruncation>) orderedMapIterator1);
      IteratorUtils.find((Iterator<SQLClientInfoException>) mapIterator2, (Predicate<? super SQLClientInfoException>) predicate0);
      Iterator<SQLInvalidAuthorizationSpecException>[] iteratorArray0 = (Iterator<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonListIterator0.forEachRemaining(consumer0);
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      singletonListIterator0.set(iIOMetadataNode0);
      LinkedHashSet<IIOMetadataNode> linkedHashSet0 = new LinkedHashSet<IIOMetadataNode>();
      IteratorUtils.emptyIterator();
      IteratorUtils.unmodifiableListIterator((ListIterator<IIOMetadataNode>) singletonListIterator0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      IteratorUtils.emptyIterator();
      Hashtable<SQLTransactionRollbackException, ServiceLoader<Properties>> hashtable0 = new Hashtable<SQLTransactionRollbackException, ServiceLoader<Properties>>();
      EntrySetMapIterator<SQLTransactionRollbackException, ServiceLoader<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, ServiceLoader<Properties>>(hashtable0);
      IteratorUtils.toList((Iterator<? extends SQLTransientException>) entrySetMapIterator0, 10);
      Integer integer0 = new Integer((-3731));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[3];
      IteratorUtils.arrayIterator(stringArray0);
      IteratorUtils.emptyIterator();
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLClientInfoException>) null, (Predicate<? super SQLClientInfoException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.emptyIterator();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) resettableIterator0, class0);
      Integer integer0 = new Integer(10);
      IteratorUtils.boundedIterator((Iterator<? extends SQLSyntaxErrorException>) resettableIterator1, (long) 10, 0L);
      IteratorUtils.toListIterator((Iterator<?>) resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "H";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("H");
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      Predicate<Object> predicate0 = null;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLException>) zippingIterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<Properties, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Properties, SQLTimeoutException>(mapIterator0);
      IteratorUtils.emptyListIterator();
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      LinkedList<SQLClientInfoException> linkedList0 = new LinkedList<SQLClientInfoException>();
      LoopingListIterator<SQLClientInfoException> loopingListIterator0 = new LoopingListIterator<SQLClientInfoException>(linkedList0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) loopingListIterator0, (Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) loopingListIterator0);
      stack0.iterator();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        IteratorUtils.matchesAny((Iterator<SQLException>) zippingIterator0, (Predicate<? super SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EmptyListIterator.resettableEmptyListIterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("5WOP``d%F%jL7/", "~h5Z\"B&DhV7e1zZQ{", 3662, (int[]) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 61, sQLTransientConnectionException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((String) null, "", 3662, (int[]) null);
      batchUpdateException0.printStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("suffix may not be null", "Be%Jl_3TZdn", (-1673));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLTransientConnectionException1, comparator0, comparatorPredicate_Criterion0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Be%Jl_3TZdn", "Be%Jl_3TZdn", sQLTransientConnectionException1);
      batchUpdateException0.addSuppressed(sQLTransactionRollbackException0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Iterator<?> iterator0 = IteratorUtils.getIterator(iIOMetadataNode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorUtils.size(iterator0);
      PredicateTransformer<SQLTransientException> predicateTransformer0 = new PredicateTransformer<SQLTransientException>(comparatorPredicate0);
      Boolean boolean0 = predicateTransformer0.transform(sQLTransientConnectionException1);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[3];
      IteratorUtils.arrayIterator(stringArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IteratorUtils.getIterator(iIOMetadataNode0);
      ConstantTransformer.nullTransformer();
      Iterator<SQLRecoverableException> iterator0 = new SingletonIterator<SQLRecoverableException>((SQLRecoverableException) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("H");
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      singletonListIterator0.set(iIOMetadataNode0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      LoopingIterator<IIOMetadataNode> loopingIterator0 = new LoopingIterator<IIOMetadataNode>(list0);
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<IIOMetadataNode>) loopingIterator0, (Closure<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) mapIterator0);
      IteratorUtils.matchesAll((Iterator<Properties>) mapIterator0, (Predicate<? super Properties>) predicate0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("7`1[.uG", "VIDu,cHA1xA", (-58));
      SQLDataException sQLDataException0 = new SQLDataException("Predicate must not be null.");
      LinkedList<IIOMetadataNode> linkedList0 = new LinkedList<IIOMetadataNode>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("VIDu,cHA1xA");
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        singletonListIterator0.set(iIOMetadataNode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.SingletonListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("H");
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) null, (Collection<? super BatchUpdateException>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      IteratorUtils.get((Iterator<LinkedHashSet<Closure>>) resettableIterator0, 2);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      TreeSet<Integer> treeSet1 = new TreeSet<Integer>((SortedSet<Integer>) treeSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends Integer>) null, (Collection<? super Integer>) treeSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.emptyIterator();
      Class<String> class0 = String.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IteratorUtils.toArray((Iterator<? extends String>) resettableIterator0, class0);
      IteratorUtils.emptyOrderedMapIterator();
      IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLSyntaxErrorException>) resettableIterator1);
      OrderedMapIterator<Vector<Locale.Category>, Stack<Object>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      IteratorUtils.matchesAny((Iterator<Vector<Locale.Category>>) orderedMapIterator0, (Predicate<? super Vector<Locale.Category>>) nullIsExceptionPredicate0);
      IteratorUtils.objectGraphIterator((SQLIntegrityConstraintViolationException) null, (Transformer<? super SQLIntegrityConstraintViolationException, ? extends SQLIntegrityConstraintViolationException>) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("~h5Z\"B&DhV7e1zZQ{", "T*5wpFV", 4, (int[]) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      IteratorUtils.emptyOrderedMapIterator();
      ArrayDeque<SQLSyntaxErrorException> arrayDeque0 = new ArrayDeque<SQLSyntaxErrorException>();
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      IteratorUtils.emptyIterator();
      Class<String> class0 = String.class;
      IteratorUtils.toArray((Iterator<? extends String>) resettableIterator0, class0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      Node node0 = iIOMetadataNode0.cloneNode(true);
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(node0);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Y^.Gbz_Y9ja{EKymk");
      SQLWarning sQLWarning0 = new SQLWarning("Y^.Gbz_Y9ja{EKymk", "Y^.Gbz_Y9ja{EKymk", 10, sQLInvalidAuthorizationSpecException0);
      IteratorUtils.size(nodeListIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 0, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OrderedIterator<SQLTransientException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      Iterator<SQLTransientException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLTransientException>) orderedIterator0);
      IteratorUtils.toArray(iterator0);
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[3];
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "List must not be null", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", sQLTransientException0);
      sQLNonTransientExceptionArray0[0] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("", sQLNonTransientExceptionArray0[0]);
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLNonTransientConnectionException1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientConnectionException1);
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLFeatureNotSupportedException0;
      ObjectArrayIterator<SQLNonTransientException> objectArrayIterator0 = new ObjectArrayIterator<SQLNonTransientException>(sQLNonTransientExceptionArray0);
      IteratorUtils.contains((Iterator<SQLNonTransientException>) objectArrayIterator0, (Object) sQLFeatureNotSupportedException0);
      ListIterator<SQLTransientConnectionException> listIterator0 = EmptyListIterator.emptyListIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("List must not be null", "", 0);
      Comparator<SQLException> comparator0 = (Comparator<SQLException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<SQLException> predicate0 = ComparatorPredicate.comparatorPredicate((SQLException) sQLTransientConnectionException0, comparator0);
      NullIsFalsePredicate<SQLException> nullIsFalsePredicate0 = new NullIsFalsePredicate<SQLException>(predicate0);
      Predicate<SQLException> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super SQLException>) nullIsFalsePredicate0);
      IteratorUtils.filteredListIterator((ListIterator<? extends SQLTransientConnectionException>) listIterator0, (Predicate<? super SQLTransientConnectionException>) predicate1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IteratorUtils.getIterator(uniquePredicate0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      ResettableIterator<EnumSet<Locale.Category>> resettableIterator0 = IteratorUtils.singletonIterator(enumSet0);
      IteratorUtils.matchesAny((Iterator<EnumSet<Locale.Category>>) resettableIterator0, (Predicate<? super EnumSet<Locale.Category>>) uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      ObjectArrayIterator<Locale.Category> objectArrayIterator0 = new ObjectArrayIterator<Locale.Category>(locale_CategoryArray0);
      assertTrue(objectArrayIterator0.hasNext());
      assertEquals(2, objectArrayIterator0.getEndIndex());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(2, locale_CategoryArray0.length);
      assertNotNull(objectArrayIterator0);
      
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(predicate0));
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Locale.Category>) objectArrayIterator0, (Predicate<? super Locale.Category>) predicate0);
      assertEquals(2, objectArrayIterator0.getEndIndex());
      assertFalse(objectArrayIterator0.hasNext());
      assertEquals(0, objectArrayIterator0.getStartIndex());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(2, locale_CategoryArray0.length);
      assertFalse(boolean0);
      assertFalse(arrayList0.contains(predicate0));
      
      Transformer<Object, SQLFeatureNotSupportedException>[] transformerArray0 = (Transformer<Object, SQLFeatureNotSupportedException>[]) Array.newInstance(Transformer.class, 1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = predicate0;
      Hashtable<Object, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<Object, SQLFeatureNotSupportedException>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Transformer<Object, SQLFeatureNotSupportedException> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends SQLFeatureNotSupportedException>) hashtable0);
      // Undeclared exception!
      try { 
        SwitchTransformer.switchTransformer((Predicate<? super Object>[]) predicateArray0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>[]) transformerArray0, (Transformer<? super Object, ? extends SQLFeatureNotSupportedException>) transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The transformer array must not contain a null transformer, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("~h5Z\"B&DhV7e1zZQ{", "T*5wpFV", 61, (int[]) null);
      assertEquals("~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.toString());
      assertEquals("T*5wpFV", batchUpdateException0.getSQLState());
      assertEquals(61, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      assertEquals("~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.toString());
      assertEquals("T*5wpFV", batchUpdateException0.getSQLState());
      assertEquals(61, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("suffix may not be null", (String) null, 61, sQLTransientConnectionException0);
      assertEquals("~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.toString());
      assertEquals("T*5wpFV", batchUpdateException0.getSQLState());
      assertEquals(61, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: suffix may not be null", sQLSyntaxErrorException0.toString());
      assertEquals(61, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("suffix may not be null", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("~h5Z\"B&DhV7e1zZQ{", (String) null, 61, (int[]) null);
      assertEquals("~h5Z\"B&DhV7e1zZQ{", batchUpdateException1.getMessage());
      assertEquals(61, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertNotNull(batchUpdateException1);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(batchUpdateException1, comparator0, comparatorPredicate_Criterion0);
      assertEquals("~h5Z\"B&DhV7e1zZQ{", batchUpdateException1.getMessage());
      assertEquals(61, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertNotNull(comparatorPredicate0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*P$`");
      assertFalse(boolean0);
      
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(uniquePredicate0);
      assertNotNull(iterator0);
      
      Transformer<Object, SQLRecoverableException> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("H");
      assertNotNull(iIOMetadataNode0);
      
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertNotNull(singletonListIterator0);
      
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains(iIOMetadataNode0));
      assertNotNull(list0);
      
      singletonListIterator0.set(iIOMetadataNode0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(1, singletonListIterator0.nextIndex());
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableListIterator0, (Iterator<? extends SQLException>) resettableListIterator0, (Iterator<? extends SQLException>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(zippingIterator0);
      
      List<IIOMetadataNode> list1 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(list1.contains(iIOMetadataNode0));
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      
      ArrayDeque<IIOMetadataNode> arrayDeque0 = new ArrayDeque<IIOMetadataNode>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(iIOMetadataNode0));
      assertNotNull(arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      String string0 = "\")[=4qx~2n";
      String string1 = null;
      String string2 = "";
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<Closure>>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = IteratorUtils.toString((Iterator<Integer>) null);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      OrderedMapIterator<SQLSyntaxErrorException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Iterable<SQLSyntaxErrorException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterable0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 245);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertNotNull(singletonListIterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      String string0 = IteratorUtils.toString((Iterator<Integer>) null);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      OrderedMapIterator<SQLSyntaxErrorException, Object> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Iterable<SQLSyntaxErrorException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLSyntaxErrorException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterable0);
      
      SQLNonTransientException[] sQLNonTransientExceptionArray0 = new SQLNonTransientException[4];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[]");
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: []", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("[]", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[]", sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: []", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("[]", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("[]", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: []", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      sQLNonTransientExceptionArray0[0] = sQLNonTransientException0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "xnnoMI|ShmX\"vT{", sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: []", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("[]", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("xnnoMI|ShmX\"vT{", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      sQLNonTransientExceptionArray0[1] = (SQLNonTransientException) sQLNonTransientConnectionException0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("\"@7;UWpI)o", sQLNonTransientException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: []", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("[]", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("[]", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: []", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("\"@7;UWpI)o", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: \"@7;UWpI)o", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      sQLNonTransientExceptionArray0[2] = (SQLNonTransientException) sQLSyntaxErrorException0;
      int int0 = (-3164);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "8mY }zQzTO>98", (-3164));
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException1.toString());
      assertEquals("8mY }zQzTO>98", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals((-3164), sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException1.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertFalse(sQLIntegrityConstraintViolationException1.equals((Object)sQLIntegrityConstraintViolationException0));
      
      Throwable[] throwableArray0 = sQLNonTransientConnectionException0.getSuppressed();
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: []", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("[]", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals("xnnoMI|ShmX\"vT{", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      assertFalse(sQLIntegrityConstraintViolationException0.equals((Object)sQLIntegrityConstraintViolationException1));
      assertNotSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      
      sQLNonTransientExceptionArray0[3] = (SQLNonTransientException) sQLIntegrityConstraintViolationException1;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLNonTransientExceptionArray0, (-3164));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(resettableIterator0);
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      String string0 = "\")[=4qx~2n";
      String string1 = null;
      Iterator<Properties> iterator0 = null;
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      assertNotNull(transformer0);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Properties>) null, (Transformer<? super Properties, String>) transformer0, (String) null, "", "\")[=4qx~2n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<Properties, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertNotNull(mapIterator1);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      Transformer<Properties, String> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      String string0 = IteratorUtils.toString((Iterator<Properties>) mapIterator1, (Transformer<? super Properties, String>) transformer0, "", "\")[=4qx~2n", "\")[=4qx~2n");
      assertEquals("\")[=4qx~2n\")[=4qx~2n", string0);
      assertNotNull(string0);
      assertFalse(mapIterator0.equals((Object)mapIterator1));
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<LinkedHashSet<Closure>>) mapIterator1, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MapIterator<SQLDataException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLSyntaxErrorException, LinkedHashSet<HashSet>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, LinkedHashSet<HashSet>>) mapIterator0);
      assertNotNull(mapIterator1);
      
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator1, (Iterator<? extends SQLSyntaxErrorException>) mapIterator1);
      assertNotNull(zippingIterator0);
      
      boolean boolean0 = IteratorUtils.contains((Iterator<ServiceLoader<LinkedHashSet>>) zippingIterator0, (Object) mapIterator0);
      assertFalse(boolean0);
      
      OrderedMapIterator<IIOMetadataNode, String> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      ArrayList<Predicate<Object>> arrayList0 = new ArrayList<Predicate<Object>>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(predicate0));
      assertNotNull(predicate0);
      
      Predicate<IIOMetadataNode> predicate1 = NotPredicate.notPredicate((Predicate<? super IIOMetadataNode>) predicate0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(predicate0));
      assertNotNull(predicate1);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) orderedMapIterator0, (Predicate<? super IIOMetadataNode>) predicate1);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(predicate0));
      assertNotNull(iterator0);
      
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterable0);
      
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(enumeration0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertNotNull(resettableListIterator1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(resettableIterator0);
      
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      assertNotNull(nullIsFalsePredicate0);
      
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertNotNull(integer0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      SingletonListIterator<SQLTransactionRollbackException> singletonListIterator0 = new SingletonListIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertNotNull(singletonListIterator0);
      
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<SQLTransactionRollbackException>) singletonListIterator0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertFalse(singletonListIterator0.hasPrevious());
      assertTrue(singletonListIterator0.hasNext());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLTransactionRollbackException>) listIterator0, (Predicate<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(singletonListIterator0.hasPrevious());
      assertNotNull(singletonListIterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonListIterator0.forEachRemaining(consumer0);
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(iIOMetadataNode0));
      assertNotNull(list0);
      
      singletonListIterator0.set(iIOMetadataNode0);
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) locale_Category0, comparator0);
      assertNotNull(predicate0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.filteredIterator((Iterator<? extends IIOMetadataNode>) singletonListIterator0, (Predicate<? super IIOMetadataNode>) predicate0);
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) iterator0);
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertEquals(0, singletonListIterator0.previousIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertNotNull(iterable0);
      
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) locale_Category0);
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Properties>) null, (Predicate<? super Properties>) predicate0);
      assertTrue(boolean0);
      
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      int int0 = (-151);
      int int1 = (-58);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("bj#1qI!Wtp<", ")Xn4f@j,IgKc,", (-58));
      assertEquals(")Xn4f@j,IgKc,", sQLTransientConnectionException0.getSQLState());
      assertEquals("bj#1qI!Wtp<", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: bj#1qI!Wtp<", sQLTransientConnectionException0.toString());
      assertEquals((-58), sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("bj#1qI!Wtp<", "bj#1qI!Wtp<", (-151), sQLTransientConnectionException0);
      assertEquals(")Xn4f@j,IgKc,", sQLTransientConnectionException0.getSQLState());
      assertEquals("bj#1qI!Wtp<", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: bj#1qI!Wtp<", sQLTransientConnectionException0.toString());
      assertEquals((-58), sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: bj#1qI!Wtp<", sQLDataException0.toString());
      assertEquals((-151), sQLDataException0.getErrorCode());
      assertEquals("bj#1qI!Wtp<", sQLDataException0.getSQLState());
      assertEquals("bj#1qI!Wtp<", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(")Xn4f@j,IgKc,", sQLDataException0);
      assertEquals(")Xn4f@j,IgKc,", sQLTransientConnectionException0.getSQLState());
      assertEquals("bj#1qI!Wtp<", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: bj#1qI!Wtp<", sQLTransientConnectionException0.toString());
      assertEquals((-58), sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: bj#1qI!Wtp<", sQLDataException0.toString());
      assertEquals((-151), sQLDataException0.getErrorCode());
      assertEquals("bj#1qI!Wtp<", sQLDataException0.getSQLState());
      assertEquals("bj#1qI!Wtp<", sQLDataException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(")Xn4f@j,IgKc,", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: )Xn4f@j,IgKc,", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null, (Iterator<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-9));
      assertEquals((-9), (int)integer0);
      assertNotNull(integer0);
      
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.noneOf(class0);
      assertEquals(0, enumSet0.size());
      assertNotNull(enumSet0);
      
      SingletonIterator<EnumSet<Locale.Category>> singletonIterator0 = new SingletonIterator<EnumSet<Locale.Category>>(enumSet0);
      assertEquals(0, enumSet0.size());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends EnumSet<Locale.Category>>) singletonIterator0, (Iterator<? extends EnumSet<Locale.Category>>) null, (Iterator<? extends EnumSet<Locale.Category>>) singletonIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLWarning[] sQLWarningArray0 = new SQLWarning[8];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Cannot add to list until next() or previous() called", "Gq:U*>c-B4w38G.rM`_");
      assertEquals("Gq:U*>c-B4w38G.rM`_", sQLSyntaxErrorException0.getSQLState());
      assertEquals("Cannot add to list until next() or previous() called", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Cannot add to list until next() or previous() called", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Cannot add to list until next() or previous() called", sQLSyntaxErrorException0);
      assertEquals("Gq:U*>c-B4w38G.rM`_", sQLSyntaxErrorException0.getSQLState());
      assertEquals("Cannot add to list until next() or previous() called", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Cannot add to list until next() or previous() called", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Cannot add to list until next() or previous() called", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: Cannot add to list until next() or previous() called", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      DataTruncation dataTruncation0 = new DataTruncation((-2240), true, true, (-2240), 4, sQLNonTransientException0);
      assertEquals("Gq:U*>c-B4w38G.rM`_", sQLSyntaxErrorException0.getSQLState());
      assertEquals("Cannot add to list until next() or previous() called", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Cannot add to list until next() or previous() called", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Cannot add to list until next() or previous() called", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: Cannot add to list until next() or previous() called", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      sQLWarningArray0[0] = (SQLWarning) dataTruncation0;
      SQLWarning sQLWarning0 = new SQLWarning("0-H", "Estimated size must be greater than 0", (-1396), sQLNonTransientException0);
      assertEquals("Gq:U*>c-B4w38G.rM`_", sQLSyntaxErrorException0.getSQLState());
      assertEquals("Cannot add to list until next() or previous() called", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Cannot add to list until next() or previous() called", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Cannot add to list until next() or previous() called", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: Cannot add to list until next() or previous() called", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("0-H", sQLWarning0.getMessage());
      assertEquals((-1396), sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: 0-H", sQLWarning0.toString());
      assertEquals("Estimated size must be greater than 0", sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      sQLWarningArray0[1] = sQLWarning0;
      DataTruncation dataTruncation1 = new DataTruncation(3068, true, true, (-1396), (-1396), sQLWarning0);
      assertEquals("Gq:U*>c-B4w38G.rM`_", sQLSyntaxErrorException0.getSQLState());
      assertEquals("Cannot add to list until next() or previous() called", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Cannot add to list until next() or previous() called", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Cannot add to list until next() or previous() called", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: Cannot add to list until next() or previous() called", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("0-H", sQLWarning0.getMessage());
      assertEquals((-1396), sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: 0-H", sQLWarning0.toString());
      assertEquals("Estimated size must be greater than 0", sQLWarning0.getSQLState());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertNotNull(dataTruncation1);
      assertFalse(dataTruncation1.equals((Object)dataTruncation0));
      
      sQLWarningArray0[2] = (SQLWarning) dataTruncation1;
      SQLWarning sQLWarning1 = new SQLWarning("Estimated size must be greater than 0", sQLSyntaxErrorException0);
      assertEquals("Gq:U*>c-B4w38G.rM`_", sQLSyntaxErrorException0.getSQLState());
      assertEquals("Cannot add to list until next() or previous() called", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Cannot add to list until next() or previous() called", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLWarning1.getSQLState());
      assertEquals("java.sql.SQLWarning: Estimated size must be greater than 0", sQLWarning1.toString());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals("Estimated size must be greater than 0", sQLWarning1.getMessage());
      assertNotNull(sQLWarning1);
      assertFalse(sQLWarning1.equals((Object)sQLWarning0));
      
      sQLWarningArray0[3] = sQLWarning1;
      SQLWarning sQLWarning2 = new SQLWarning(sQLWarning0);
      assertEquals("Gq:U*>c-B4w38G.rM`_", sQLSyntaxErrorException0.getSQLState());
      assertEquals("Cannot add to list until next() or previous() called", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Cannot add to list until next() or previous() called", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("Cannot add to list until next() or previous() called", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: Cannot add to list until next() or previous() called", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("0-H", sQLWarning0.getMessage());
      assertEquals((-1396), sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: 0-H", sQLWarning0.toString());
      assertEquals("Estimated size must be greater than 0", sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning2.getErrorCode());
      assertNull(sQLWarning2.getSQLState());
      assertEquals("java.sql.SQLWarning: 0-H", sQLWarning2.getMessage());
      assertEquals("java.sql.SQLWarning: java.sql.SQLWarning: 0-H", sQLWarning2.toString());
      assertNotNull(sQLWarning2);
      assertFalse(sQLWarning0.equals((Object)sQLWarning1));
      assertFalse(sQLWarning2.equals((Object)sQLWarning1));
      assertFalse(sQLWarning2.equals((Object)sQLWarning0));
      
      sQLWarningArray0[4] = sQLWarning2;
      DataTruncation dataTruncation2 = new DataTruncation((-1396), true, true, 0, 16);
      assertEquals("01004", dataTruncation2.getSQLState());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals(0, dataTruncation2.getErrorCode());
      assertNotNull(dataTruncation2);
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      
      sQLWarningArray0[5] = (SQLWarning) dataTruncation2;
      DataTruncation dataTruncation3 = new DataTruncation(4, false, false, 3883, 0, dataTruncation2);
      assertEquals("01004", dataTruncation2.getSQLState());
      assertEquals("Data truncation", dataTruncation2.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation2.toString());
      assertEquals(0, dataTruncation2.getErrorCode());
      assertEquals("Data truncation", dataTruncation3.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation3.toString());
      assertEquals("22001", dataTruncation3.getSQLState());
      assertEquals(0, dataTruncation3.getErrorCode());
      assertNotNull(dataTruncation3);
      assertFalse(dataTruncation2.equals((Object)dataTruncation1));
      assertFalse(dataTruncation2.equals((Object)dataTruncation0));
      assertFalse(dataTruncation3.equals((Object)dataTruncation1));
      assertFalse(dataTruncation3.equals((Object)dataTruncation2));
      assertFalse(dataTruncation3.equals((Object)dataTruncation0));
      
      sQLWarningArray0[6] = (SQLWarning) dataTruncation3;
      SQLWarning sQLWarning3 = new SQLWarning("0-H", "setValue() is not supported");
      assertEquals(0, sQLWarning3.getErrorCode());
      assertEquals("setValue() is not supported", sQLWarning3.getSQLState());
      assertEquals("0-H", sQLWarning3.getMessage());
      assertEquals("java.sql.SQLWarning: 0-H", sQLWarning3.toString());
      assertNotNull(sQLWarning3);
      assertFalse(sQLWarning3.equals((Object)sQLWarning1));
      assertFalse(sQLWarning3.equals((Object)sQLWarning2));
      assertFalse(sQLWarning3.equals((Object)sQLWarning0));
      
      sQLWarningArray0[7] = sQLWarning3;
      ResettableListIterator<SQLWarning> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLWarningArray0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertEquals(8, sQLWarningArray0.length);
      assertNotNull(resettableListIterator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(enumeration0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(iterator0);
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertNotNull(resettableListIterator1);
      
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(resettableIterator0);
      
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableListIterator1, (Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(zippingIterator0);
      
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      assertNotNull(nullIsFalsePredicate0);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<SQLException>) zippingIterator0, (Predicate<? super SQLException>) nullIsFalsePredicate0);
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(boolean0);
      
      ResettableListIterator<String> resettableListIterator2 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator2.hasNext());
      assertFalse(resettableListIterator2.hasPrevious());
      assertNotNull(resettableListIterator2);
      
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends String>) resettableListIterator2, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<DataTruncation, SQLClientInfoException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator1);
      
      Iterator<SQLWarning> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>) mapIterator1, (Iterator<? extends SQLWarning>) mapIterator1);
      assertNotNull(iterator0);
      
      Iterator<BatchUpdateException> iterator1 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(resettableIterator0);
      
      Class<String> class0 = String.class;
      String[] stringArray1 = IteratorUtils.toArray((Iterator<? extends String>) resettableIterator0, class0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = (-936);
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(enumeration0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(iterator0);
      
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertNotNull(resettableListIterator1);
      
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(resettableIterator0);
      
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableListIterator1, (Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(zippingIterator0);
      
      Iterator<SQLNonTransientConnectionException> iterator1 = stack0.iterator();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(iterator1);
      
      Integer integer0 = new Integer((-1940));
      assertEquals((-1940), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(resettableIterator0);
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      Class<String> class0 = String.class;
      String[] stringArray1 = IteratorUtils.toArray((Iterator<? extends String>) resettableIterator0, class0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Integer integer0 = new Integer(100);
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(100);
      assertEquals(100, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      ResettableIterator<IIOMetadataNode> resettableIterator2 = EmptyIterator.resettableEmptyIterator();
      assertNotNull(resettableIterator2);
      
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableIterator2);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) resettableIterator2);
      assertNotNull(iterable0);
      
      ResettableIterator<SQLDataException> resettableIterator3 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator3);
      
      Iterator<PriorityQueue<Closure>> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<PriorityQueue<Closure>>) resettableIterator2);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertNotNull(singletonListIterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      singletonListIterator0.forEachRemaining(consumer0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(singletonListIterator0.hasNext());
      
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) singletonListIterator0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(iIOMetadataNode0));
      assertNotNull(list0);
      
      singletonListIterator0.set(iIOMetadataNode0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(singletonListIterator0.hasNext());
      
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) list0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(iIOMetadataNode0));
      assertNotNull(resettableIterator0);
      
      Iterable<IIOMetadataNode> iterable0 = IteratorUtils.asIterable((Iterator<? extends IIOMetadataNode>) resettableIterator0);
      assertEquals(0, singletonListIterator0.previousIndex());
      assertEquals(1, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasPrevious());
      assertFalse(singletonListIterator0.hasNext());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(iIOMetadataNode0));
      assertNotNull(iterable0);
      
      ResettableIterator<SQLDataException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      int int0 = 61;
      ArrayIterator<DataTruncation> arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator<DataTruncation>(sQLSyntaxErrorException0, 61);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      OrderedIterator<Integer> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      BoundedIterator<Integer> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends Integer>) orderedIterator0, 0L);
      assertNotNull(boundedIterator0);
      
      Iterator<Integer> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Integer>) boundedIterator0);
      assertNotNull(iterator0);
      
      Enumeration<Integer> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends Integer>) iterator0);
      assertNotNull(enumeration0);
      
      Iterator<Integer> iterator1 = IteratorUtils.asIterator((Enumeration<? extends Integer>) enumeration0);
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      
      Iterator<Integer> iterator2 = IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>) iterator1, (Iterator<? extends Integer>) orderedIterator0);
      assertNotNull(iterator2);
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(iterator2.equals((Object)iterator0));
      assertFalse(iterator2.equals((Object)iterator1));
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      ObjectArrayIterator<String> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<String>((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(resettableIterator0);
      
      LinkedHashSet<Closure> linkedHashSet0 = IteratorUtils.get((Iterator<LinkedHashSet<Closure>>) resettableIterator0, 0);
      assertEquals(3, stringArray0.length);
      assertNull(linkedHashSet0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 0, 1533);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(resettableIterator0);
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      Class<String> class0 = String.class;
      String[] stringArray1 = IteratorUtils.toArray((Iterator<? extends String>) resettableIterator0, class0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Integer integer0 = new Integer(100);
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      ResettableIterator<Integer> resettableIterator2 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator2);
      
      String string0 = IteratorUtils.toString((Iterator<Integer>) resettableIterator2);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      String string1 = IteratorUtils.toString((Iterator<String>) resettableIterator0);
      assertEquals(3, stringArray0.length);
      assertEquals("[]", string1);
      assertNotNull(string1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(stringArray0, stringArray1);
      
      ResettableIterator<Stack<EnumSet>> resettableIterator3 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator3);
      
      int int0 = IteratorUtils.size(resettableIterator1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(0, int0);
      
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertNotNull(resettableListIterator1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Enumeration must not be null", "[");
      assertEquals("[", sQLSyntaxErrorException0.getSQLState());
      assertEquals("Enumeration must not be null", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Enumeration must not be null", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[", "[", sQLSyntaxErrorException0);
      assertEquals("[", sQLSyntaxErrorException0.getSQLState());
      assertEquals("Enumeration must not be null", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: Enumeration must not be null", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("[", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("[", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: [", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>("/^{Z `[CL9a#9");
      assertNotNull(equalPredicate0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      predicateArray0[1] = (Predicate<Object>) equalPredicate0;
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      predicateArray0[3] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      assertEquals(4, predicateArray0.length);
      assertNotNull(predicate0);
      
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicateArray0[0]);
      assertEquals(4, predicateArray0.length);
      assertNotNull(nullIsExceptionPredicate0);
      
      ArrayDeque<Predicate<Object>> arrayDeque0 = new ArrayDeque<Predicate<Object>>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(predicate0));
      assertNotNull(arrayDeque0);
      
      Predicate<Object> predicate1 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(predicate0));
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(predicate2));
      assertNotNull(predicate2);
      assertFalse(predicate2.equals((Object)predicate0));
      assertSame(predicate2, predicate1);
      
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      Class<Object> class1 = Object.class;
      Predicate<Object> predicate3 = InstanceofPredicate.instanceOfPredicate(class1);
      assertNotNull(predicate3);
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      assertNotNull(equalPredicate1);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertFalse(equalPredicate1.equals((Object)equalPredicate0));
      
      Predicate<Object> predicate4 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      assertEquals(4, predicateArray0.length);
      assertNotNull(predicate4);
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate1));
      
      NonePredicate<String> nonePredicate0 = new NonePredicate<String>(predicateArray0);
      assertEquals(4, predicateArray0.length);
      assertNotNull(nonePredicate0);
      
      Predicate<String> predicate5 = AndPredicate.andPredicate((Predicate<? super String>) predicate1, (Predicate<? super String>) nonePredicate0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(4, predicateArray0.length);
      assertFalse(arrayDeque0.contains(predicate2));
      assertNotNull(predicate5);
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertSame(predicate1, predicate2);
      
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<String>) resettableListIterator0, (Predicate<? super String>) predicate1);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(boolean0);
      assertFalse(arrayDeque0.contains(predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertSame(predicate1, predicate2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Integer integer0 = new Integer((-34));
      assertEquals((-34), (int)integer0);
      assertNotNull(integer0);
      
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertNotNull(singletonListIterator0);
      
      singletonListIterator0.reset();
      assertTrue(singletonListIterator0.hasNext());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertEquals((-1), singletonListIterator0.previousIndex());
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      ResettableListIterator<Integer> resettableListIterator0 = new SingletonListIterator<Integer>(integer0);
      assertTrue(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      String string0 = IteratorUtils.toString((Iterator<Integer>) resettableListIterator0);
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals("[-34]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MapIterator<SQLDataException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLSyntaxErrorException, LinkedHashSet<HashSet>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, LinkedHashSet<HashSet>>) mapIterator0);
      assertNotNull(mapIterator1);
      
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator1, (Iterator<? extends SQLSyntaxErrorException>) mapIterator1);
      assertNotNull(zippingIterator0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      int int0 = 3752;
      Integer integer0 = new Integer(3752);
      assertEquals(3752, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(3752);
      assertEquals(3752, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(3752));
      assertNotNull(resettableIterator0);
      
      Properties[] propertiesArray0 = new Properties[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(propertiesArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Integer integer0 = new Integer(772);
      assertEquals(772, (int)integer0);
      assertNotNull(integer0);
      
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) integer0);
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Properties>) mapIterator0, (Predicate<? super Properties>) predicate0);
      assertTrue(boolean0);
      
      Transformer<Object, IIOMetadataNode> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.transformedIterator((Iterator<?>) mapIterator0, (Transformer<? super Object, ? extends IIOMetadataNode>) transformer0);
      assertNotNull(iterator0);
      
      OrderedMapIterator<SQLClientInfoException, DataTruncation> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Iterator<SQLClientInfoException> iterator1 = IteratorUtils.chainedIterator((Iterator<? extends SQLClientInfoException>) orderedMapIterator0, (Iterator<? extends SQLClientInfoException>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(iterator1);
      
      SQLClientInfoException sQLClientInfoException0 = IteratorUtils.find(iterator1, (Predicate<? super SQLClientInfoException>) predicate0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNull(sQLClientInfoException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("t");
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("t", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: t", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      SingletonIterator<SQLTransactionRollbackException> singletonIterator0 = new SingletonIterator<SQLTransactionRollbackException>(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("t", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: t", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(singletonIterator0);
      
      ZippingIterator<SQLTransactionRollbackException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLTransactionRollbackException>) singletonIterator0, (Iterator<? extends SQLTransactionRollbackException>) singletonIterator0, (Iterator<? extends SQLTransactionRollbackException>) singletonIterator0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("t", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: t", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(zippingIterator0);
      
      Enumeration<SQLTransactionRollbackException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLTransactionRollbackException>) zippingIterator0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("t", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: t", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertTrue(singletonIterator0.hasNext());
      assertNotNull(enumeration0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLTransactionRollbackException>) enumeration0, (Collection<? super SQLTransactionRollbackException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Enumeration<BatchUpdateException> enumeration0 = (Enumeration<BatchUpdateException>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 28;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = (-902);
      intArray0[4] = 10;
      intArray0[5] = 32;
      intArray0[6] = (-1617);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("The predicate and transformer map must not be null", "", intArray0);
      assertEquals("java.sql.BatchUpdateException: The predicate and transformer map must not be null", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("The predicate and transformer map must not be null", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {28, 0, 1, (-902), 10, 32, (-1617)}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      batchUpdateException0.printStackTrace();
      assertEquals("java.sql.BatchUpdateException: The predicate and transformer map must not be null", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("The predicate and transformer map must not be null", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {28, 0, 1, (-902), 10, 32, (-1617)}, intArray0);
      assertEquals(7, intArray0.length);
      
      ListIterator<BatchUpdateException> listIterator0 = IteratorUtils.singletonListIterator(batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException: The predicate and transformer map must not be null", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("The predicate and transformer map must not be null", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertArrayEquals(new int[] {28, 0, 1, (-902), 10, 32, (-1617)}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(listIterator0);
      
      Enumeration<BatchUpdateException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends BatchUpdateException>) listIterator0);
      assertEquals("java.sql.BatchUpdateException: The predicate and transformer map must not be null", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("The predicate and transformer map must not be null", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertArrayEquals(new int[] {28, 0, 1, (-902), 10, 32, (-1617)}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(enumeration0);
      
      PriorityQueue<SQLException> priorityQueue0 = new PriorityQueue<SQLException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<BatchUpdateException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends BatchUpdateException>) enumeration0, (Collection<? super BatchUpdateException>) priorityQueue0);
      assertEquals("java.sql.BatchUpdateException: The predicate and transformer map must not be null", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("The predicate and transformer map must not be null", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertEquals(0, priorityQueue0.size());
      assertArrayEquals(new int[] {28, 0, 1, (-902), 10, 32, (-1617)}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(iterator0);
      
      ListIterator<SQLRecoverableException> listIterator1 = EmptyListIterator.emptyListIterator();
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.hasNext());
      assertNotNull(listIterator1);
      
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLRecoverableException>) listIterator1, (-1167L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (-2002L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, (-2002L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MapIterator<IIOMetadataNode, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      BoundedIterator<SQLTransientConnectionException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLTransientConnectionException>) resettableIterator0, 0L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OrderedMapIterator<ArrayList<SQLTransactionRollbackException>, BatchUpdateException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) null, 0L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Iterator<SQLTimeoutException> iterator0 = null;
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
      
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mnl");
      assertFalse(boolean0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("mnl");
      assertNotNull(iIOMetadataNode0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      SingletonListIterator<Properties> singletonListIterator0 = new SingletonListIterator<Properties>(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertNotNull(singletonListIterator0);
      
      ListIterator<Properties> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Properties>) singletonListIterator0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Properties>) listIterator0, (Transformer<? super Properties, String>) null, "setValue() is not supported", "QM[wCloN_D6/N0/^1e1", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(resettableIterator0);
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      Class<String> class0 = String.class;
      String[] stringArray1 = IteratorUtils.toArray((Iterator<? extends String>) resettableIterator0, class0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Integer integer0 = new Integer(100);
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(10);
      assertEquals(10, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      ResettableIterator<Integer> resettableIterator2 = IteratorUtils.loopingIterator((Collection<? extends Integer>) hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(100));
      assertNotNull(resettableIterator2);
      
      ResettableListIterator<Vector<Object>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      
      Iterator<Vector<Object>> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends Vector<Object>>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      Stack<SQLNonTransientConnectionException> stack0 = new Stack<SQLNonTransientConnectionException>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLTransactionRollbackException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, int0);
      
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(resettableListIterator1.hasPrevious());
      assertFalse(resettableListIterator1.hasNext());
      assertNotNull(resettableListIterator1);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "/^{Z `[CL9a#9");
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("/^{Z `[CL9a#9", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      boolean boolean0 = arrayList0.add(sQLInvalidAuthorizationSpecException0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("/^{Z `[CL9a#9", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(sQLInvalidAuthorizationSpecException0));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/^{Z `[CL9a#9", "[");
      assertEquals("[", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("/^{Z `[CL9a#9", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: /^{Z `[CL9a#9", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      assertEquals("[", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("/^{Z `[CL9a#9", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: /^{Z `[CL9a#9", sQLNonTransientConnectionException0.toString());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) listIterator0, (Iterator<? extends SQLNonTransientConnectionException>) listIterator0, (Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      assertEquals("[", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("/^{Z `[CL9a#9", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: /^{Z `[CL9a#9", sQLNonTransientConnectionException0.toString());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(zippingIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) resettableListIterator1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(resettableIterator0);
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      Class<String> class0 = String.class;
      String[] stringArray1 = IteratorUtils.toArray((Iterator<? extends String>) resettableIterator0, class0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      assertNotNull(iIOMetadataNode0);
      
      Node node0 = iIOMetadataNode0.cloneNode(true);
      assertNotNull(node0);
      assertFalse(node0.equals((Object)iIOMetadataNode0));
      assertNotSame(iIOMetadataNode0, node0);
      assertNotSame(node0, iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(node0);
      assertNotNull(nodeListIterator0);
      assertFalse(iIOMetadataNode0.equals((Object)node0));
      assertFalse(node0.equals((Object)iIOMetadataNode0));
      assertNotSame(iIOMetadataNode0, node0);
      assertNotSame(node0, iIOMetadataNode0);
      
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Y^.Gbz_Y9ja{EKymk");
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Y^.Gbz_Y9ja{EKymk", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("Y^.Gbz_Y9ja{EKymk", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("transformer may not be null", "Y^.Gbz_Y9ja{EKymk", 10, sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Y^.Gbz_Y9ja{EKymk", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("Y^.Gbz_Y9ja{EKymk", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("transformer may not be null", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: transformer may not be null", sQLWarning0.toString());
      assertEquals(10, sQLWarning0.getErrorCode());
      assertEquals("Y^.Gbz_Y9ja{EKymk", sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      int int0 = IteratorUtils.size(nodeListIterator0);
      assertEquals(0, int0);
      assertFalse(iIOMetadataNode0.equals((Object)node0));
      assertFalse(node0.equals((Object)iIOMetadataNode0));
      assertNotSame(iIOMetadataNode0, node0);
      assertNotSame(node0, iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("#a1#MR");
      assertNotNull(iIOMetadataNode0);
      
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("ZS");
      assertNotNull(nodeList0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ZS", ":n9.6q");
      assertEquals(":n9.6q", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("ZS", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: ZS", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Integer integer0 = new Integer((-2444));
      assertEquals((-2444), (int)integer0);
      assertNotNull(integer0);
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains((-2444)));
      assertNotNull(linkedHashSet0);
      
      Integer integer1 = new Integer((-2444));
      assertEquals((-2444), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      boolean boolean0 = linkedHashSet0.add(integer1);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertFalse(treeSet0.contains(integer1));
      assertNotNull(treeSet0);
      
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) treeSet0);
      assertFalse(treeSet0.contains(integer1));
      assertNotNull(resettableIterator0);
      
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      ListIterator<Transformer<Object, EnumSet>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<Transformer<Object, EnumSet>>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Entry does not exist: ";
      stringArray0[1] = "t~$(q`Gm";
      stringArray0[2] = "J-=`u_2P^t^?38]";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(resettableIterator0);
      
      Comparator<SQLSyntaxErrorException> comparator0 = (Comparator<SQLSyntaxErrorException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      Class<String> class0 = String.class;
      String[] stringArray1 = IteratorUtils.toArray((Iterator<? extends String>) resettableIterator0, class0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Integer integer0 = new Integer(4201);
      assertEquals(4201, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1103));
      assertEquals((-1103), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean0 = hashSet0.add(integer1);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(boolean0);
      assertFalse(hashSet0.contains(4201));
      assertTrue(hashSet0.contains(integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      ResettableIterator<Integer> resettableIterator2 = IteratorUtils.loopingIterator((Collection<? extends Integer>) hashSet0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(4201));
      assertTrue(hashSet0.contains(integer1));
      assertNotNull(resettableIterator2);
      
      ResettableListIterator<Properties> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Class<Properties> class1 = Properties.class;
      Properties[] propertiesArray0 = IteratorUtils.toArray((Iterator<? extends Properties>) resettableListIterator0, class1);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, propertiesArray0.length);
      assertNotNull(propertiesArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, int0);
      
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertNotNull(resettableListIterator1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/^{Z `[CL9a#9", "[");
      assertEquals("java.sql.SQLNonTransientConnectionException: /^{Z `[CL9a#9", sQLNonTransientConnectionException0.toString());
      assertEquals("[", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("/^{Z `[CL9a#9", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: /^{Z `[CL9a#9", sQLNonTransientConnectionException0.toString());
      assertEquals("[", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("/^{Z `[CL9a#9", sQLNonTransientConnectionException0.getMessage());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) listIterator0, (Iterator<? extends SQLNonTransientConnectionException>) listIterator0, (Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      assertEquals("java.sql.SQLNonTransientConnectionException: /^{Z `[CL9a#9", sQLNonTransientConnectionException0.toString());
      assertEquals("[", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("/^{Z `[CL9a#9", sQLNonTransientConnectionException0.getMessage());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(zippingIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      StringTokenizer stringTokenizer0 = new StringTokenizer("/^{Z `[CL9a#9");
      assertEquals(2, stringTokenizer0.countTokens());
      assertNotNull(stringTokenizer0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((StringTokenizer[]) null, 61, (-2317));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("f,>", "]", 10, (int[]) null);
      assertEquals("]", batchUpdateException0.getSQLState());
      assertEquals("f,>", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: f,>", batchUpdateException0.toString());
      assertEquals(10, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      assertEquals("]", batchUpdateException0.getSQLState());
      assertEquals("f,>", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: f,>", batchUpdateException0.toString());
      assertEquals(10, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.BatchUpdateException: f,>", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.BatchUpdateException: f,>", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "]", 10, sQLTransientConnectionException0);
      assertEquals("]", batchUpdateException0.getSQLState());
      assertEquals("f,>", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: f,>", batchUpdateException0.toString());
      assertEquals(10, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.BatchUpdateException: f,>", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.BatchUpdateException: f,>", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(10, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("]", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("Jl", (String) null, (int[]) null, sQLTransientConnectionException0);
      assertEquals("]", batchUpdateException0.getSQLState());
      assertEquals("f,>", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: f,>", batchUpdateException0.toString());
      assertEquals(10, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.BatchUpdateException: f,>", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.BatchUpdateException: f,>", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("Jl", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: Jl", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertNotNull(batchUpdateException1);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLTransientConnectionException0, comparator0, comparatorPredicate_Criterion0);
      assertEquals("]", batchUpdateException0.getSQLState());
      assertEquals("f,>", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: f,>", batchUpdateException0.toString());
      assertEquals(10, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.BatchUpdateException: f,>", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.BatchUpdateException: f,>", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(comparatorPredicate0);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      
      batchUpdateException1.addSuppressed(sQLSyntaxErrorException0);
      assertEquals("]", batchUpdateException0.getSQLState());
      assertEquals("f,>", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: f,>", batchUpdateException0.toString());
      assertEquals(10, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.BatchUpdateException: f,>", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.BatchUpdateException: f,>", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(10, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("]", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("Jl", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: Jl", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
      
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(resettableIterator0);
      
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) resettableIterator0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(enumeration0);
      
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(boolean0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mnl");
      assertFalse(boolean0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("mnl");
      assertNotNull(iIOMetadataNode0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
      
      ArrayList<IIOMetadataNode> arrayList0 = new ArrayList<IIOMetadataNode>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(iIOMetadataNode0));
      assertNotNull(arrayList0);
      
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.loopingListIterator((List<IIOMetadataNode>) arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(arrayList0.contains(iIOMetadataNode0));
      assertNotNull(resettableListIterator0);
      
      SkippingIterator<IIOMetadataNode> skippingIterator0 = IteratorUtils.skippingIterator((Iterator<IIOMetadataNode>) resettableListIterator0, 0L);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(arrayList0.contains(iIOMetadataNode0));
      assertNotNull(skippingIterator0);
      
      ListIterator<IIOMetadataNode> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends IIOMetadataNode>) skippingIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(arrayList0.contains(iIOMetadataNode0));
      assertNotNull(listIterator0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      assertEquals(2, predicateArray0.length);
      assertNotNull(nonePredicate0);
      
      predicateArray0[1] = (Predicate<Object>) nonePredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      assertEquals(2, predicateArray0.length);
      assertNotNull(onePredicate0);
      
      ListIterator<IIOMetadataNode> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends IIOMetadataNode>) listIterator0, (Predicate<? super IIOMetadataNode>) onePredicate0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertEquals(2, predicateArray0.length);
      assertFalse(arrayList0.contains(iIOMetadataNode0));
      assertNotNull(listIterator1);
      assertFalse(listIterator1.equals((Object)listIterator0));
      
      // Undeclared exception!
      try { 
        IteratorUtils.apply((Iterator<IIOMetadataNode>) listIterator1, (Closure<? super IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      OrderedIterator<SQLException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2215;
      intArray0[1] = (-424);
      intArray0[2] = (-1);
      intArray0[3] = (-3161);
      intArray0[4] = (-94);
      intArray0[5] = 10;
      intArray0[6] = 1707;
      intArray0[7] = 0;
      intArray0[8] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertArrayEquals(new int[] {2215, (-424), (-1), (-3161), (-94), 10, 1707, 0, 1}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      ResettableIterator<BatchUpdateException> resettableIterator0 = IteratorUtils.singletonIterator(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertArrayEquals(new int[] {2215, (-424), (-1), (-3161), (-94), 10, 1707, 0, 1}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(resettableIterator0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, int0);
      
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertNotNull(resettableListIterator1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/^{Z `[CL9a#9", "[");
      assertEquals("[", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("/^{Z `[CL9a#9", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: /^{Z `[CL9a#9", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      ListIterator<SQLNonTransientConnectionException> listIterator0 = IteratorUtils.singletonListIterator(sQLNonTransientConnectionException0);
      assertEquals("[", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("/^{Z `[CL9a#9", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: /^{Z `[CL9a#9", sQLNonTransientConnectionException0.toString());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      ZippingIterator<SQLNonTransientConnectionException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLNonTransientConnectionException>) listIterator0, (Iterator<? extends SQLNonTransientConnectionException>) listIterator0, (Iterator<? extends SQLNonTransientConnectionException>) listIterator0);
      assertEquals("[", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("/^{Z `[CL9a#9", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: /^{Z `[CL9a#9", sQLNonTransientConnectionException0.toString());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(zippingIterator0);
      
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-3455));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("~h5Z\"B&DhV7e1zZQ{", "T*5wpFV", 61, (int[]) null);
      assertEquals("T*5wpFV", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.toString());
      assertEquals("~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.getMessage());
      assertEquals(61, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      assertEquals("T*5wpFV", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.toString());
      assertEquals("~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.getMessage());
      assertEquals(61, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "suffix may not be null", 61, batchUpdateException0);
      assertEquals("T*5wpFV", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.toString());
      assertEquals("~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.getMessage());
      assertEquals(61, batchUpdateException0.getErrorCode());
      assertEquals("suffix may not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals(61, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((String) null, "bY}", (int[]) null, sQLSyntaxErrorException0);
      assertEquals("T*5wpFV", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.toString());
      assertEquals("~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.getMessage());
      assertEquals(61, batchUpdateException0.getErrorCode());
      assertEquals("suffix may not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals(61, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("bY}", batchUpdateException1.getSQLState());
      assertNull(batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertNotNull(batchUpdateException1);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLSyntaxErrorException0, comparator0, comparatorPredicate_Criterion0);
      assertEquals("T*5wpFV", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.toString());
      assertEquals("~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.getMessage());
      assertEquals(61, batchUpdateException0.getErrorCode());
      assertEquals("suffix may not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals(61, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNotNull(comparatorPredicate0);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      
      batchUpdateException0.addSuppressed(batchUpdateException1);
      assertEquals("T*5wpFV", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.toString());
      assertEquals("~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.getMessage());
      assertEquals(61, batchUpdateException0.getErrorCode());
      assertEquals("suffix may not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals(61, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("bY}", batchUpdateException1.getSQLState());
      assertNull(batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "3)", batchUpdateException1);
      assertEquals("T*5wpFV", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.toString());
      assertEquals("~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.getMessage());
      assertEquals(61, batchUpdateException0.getErrorCode());
      assertEquals("suffix may not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals(61, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("bY}", batchUpdateException1.getSQLState());
      assertNull(batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("3)", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLTimeoutException0);
      assertEquals("T*5wpFV", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.toString());
      assertEquals("~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.getMessage());
      assertEquals(61, batchUpdateException0.getErrorCode());
      assertEquals("suffix may not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals(61, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("bY}", batchUpdateException1.getSQLState());
      assertNull(batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("3)", sQLTimeoutException0.getSQLState());
      assertNotNull(iterator0);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(resettableIterator0);
      
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) resettableIterator0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(enumeration0);
      
      boolean boolean0 = IteratorUtils.isEmpty(iterator0);
      assertEquals("T*5wpFV", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.toString());
      assertEquals("~h5Z\"B&DhV7e1zZQ{", batchUpdateException0.getMessage());
      assertEquals(61, batchUpdateException0.getErrorCode());
      assertEquals("suffix may not be null", sQLSyntaxErrorException0.getSQLState());
      assertEquals(61, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("bY}", batchUpdateException1.getSQLState());
      assertNull(batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("3)", sQLTimeoutException0.getSQLState());
      assertFalse(boolean0);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagName("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<DataTruncation, SQLClientInfoException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator1);
      
      Iterator<SQLWarning> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>) mapIterator1, (Iterator<? extends SQLWarning>) mapIterator1);
      assertNotNull(iterator0);
      
      Iterator<SQLWarning> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("45^Ex ", "w4At*)`LvK");
      assertEquals("java.sql.SQLTimeoutException: 45^Ex ", sQLTimeoutException0.toString());
      assertEquals("w4At*)`LvK", sQLTimeoutException0.getSQLState());
      assertEquals("45^Ex ", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("w4At*)`LvK", "w4At*)`LvK", int0, sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: 45^Ex ", sQLTimeoutException0.toString());
      assertEquals("w4At*)`LvK", sQLTimeoutException0.getSQLState());
      assertEquals("45^Ex ", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("w4At*)`LvK", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("w4At*)`LvK", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: w4At*)`LvK", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = int0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = int0;
      intArray0[5] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("45^Ex ", "", intArray0, sQLSyntaxErrorException0);
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: 45^Ex ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("45^Ex ", batchUpdateException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: 45^Ex ", sQLTimeoutException0.toString());
      assertEquals("w4At*)`LvK", sQLTimeoutException0.getSQLState());
      assertEquals("45^Ex ", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("w4At*)`LvK", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("w4At*)`LvK", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: w4At*)`LvK", sQLSyntaxErrorException0.toString());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(iIOMetadataNode0, comparator1, comparatorPredicate_Criterion0);
      assertNotNull(comparatorPredicate0);
      
      SQLWarning sQLWarning0 = new SQLWarning(">\")'", sQLSyntaxErrorException0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(">\")'", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: >\")'", sQLWarning0.toString());
      assertEquals("java.sql.SQLTimeoutException: 45^Ex ", sQLTimeoutException0.toString());
      assertEquals("w4At*)`LvK", sQLTimeoutException0.getSQLState());
      assertEquals("45^Ex ", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("w4At*)`LvK", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("w4At*)`LvK", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: w4At*)`LvK", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLWarning0);
      
      batchUpdateException0.addSuppressed(sQLWarning0);
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: 45^Ex ", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("45^Ex ", batchUpdateException0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(">\")'", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: >\")'", sQLWarning0.toString());
      assertEquals("java.sql.SQLTimeoutException: 45^Ex ", sQLTimeoutException0.toString());
      assertEquals("w4At*)`LvK", sQLTimeoutException0.getSQLState());
      assertEquals("45^Ex ", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("w4At*)`LvK", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("w4At*)`LvK", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: w4At*)`LvK", sQLSyntaxErrorException0.toString());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      Iterator<?> iterator2 = IteratorUtils.getIterator(locale_Category0);
      assertNotNull(iterator2);
      
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(resettableIterator0);
      
      Enumeration<SQLWarning> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) iterator0);
      assertNotNull(enumeration0);
      assertFalse(iterator0.equals((Object)iterator1));
      
      boolean boolean0 = IteratorUtils.isEmpty(mapIterator0);
      assertTrue(boolean0);
      
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode1);
      assertFalse(iIOMetadataNode1.equals((Object)iIOMetadataNode0));
      
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(resettableIterator0);
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      Class<String> class0 = String.class;
      String[] stringArray1 = IteratorUtils.toArray((Iterator<? extends String>) resettableIterator0, class0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Integer integer0 = new Integer(100);
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(10);
      assertEquals(10, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean0 = hashSet0.add(integer1);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      assertTrue(hashSet0.contains(10));
      assertFalse(hashSet0.contains(integer0));
      assertFalse(integer1.equals((Object)integer0));
      
      ResettableIterator<Integer> resettableIterator2 = IteratorUtils.loopingIterator((Collection<? extends Integer>) hashSet0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(10));
      assertFalse(hashSet0.contains(integer0));
      assertNotNull(resettableIterator2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>) resettableListIterator0, (Iterator<? extends String>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      int int0 = IteratorUtils.size(iterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, int0);
      
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ResettableListIterator<SQLInvalidAuthorizationSpecException> resettableListIterator1 = IteratorUtils.loopingListIterator((List<SQLInvalidAuthorizationSpecException>) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(resettableListIterator1.hasNext());
      assertFalse(resettableListIterator1.hasPrevious());
      assertNotNull(resettableListIterator1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PriorityQueue<SQLTransactionRollbackException>[] priorityQueueArray0 = (PriorityQueue<SQLTransactionRollbackException>[]) Array.newInstance(PriorityQueue.class, 1);
      PriorityQueue<SQLTransactionRollbackException> priorityQueue0 = new PriorityQueue<SQLTransactionRollbackException>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      priorityQueueArray0[0] = priorityQueue0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(priorityQueueArray0, 32, 2421);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      String string0 = "iterator";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("iterator", "iterator", 156, sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(156, sQLTransientConnectionException0.getErrorCode());
      assertEquals("iterator", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: iterator", sQLTransientConnectionException0.toString());
      assertEquals("iterator", sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("iterator", "iterator", 12, sQLTransientConnectionException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(156, sQLTransientConnectionException0.getErrorCode());
      assertEquals("iterator", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: iterator", sQLTransientConnectionException0.toString());
      assertEquals("iterator", sQLTransientConnectionException0.getSQLState());
      assertEquals("iterator", sQLTransientConnectionException1.getMessage());
      assertEquals("iterator", sQLTransientConnectionException1.getSQLState());
      assertEquals(12, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: iterator", sQLTransientConnectionException1.toString());
      assertNotNull(sQLTransientConnectionException1);
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      SQLDataException[] sQLDataExceptionArray0 = new SQLDataException[5];
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      sQLDataExceptionArray0[0] = sQLDataException0;
      SQLDataException sQLDataException1 = new SQLDataException();
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertNull(sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
      assertNotNull(sQLDataException1);
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      
      sQLDataExceptionArray0[1] = sQLDataException1;
      SQLDataException sQLDataException2 = new SQLDataException("cHT`{Sfgp", "", sQLTransientConnectionException1);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(156, sQLTransientConnectionException0.getErrorCode());
      assertEquals("iterator", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: iterator", sQLTransientConnectionException0.toString());
      assertEquals("iterator", sQLTransientConnectionException0.getSQLState());
      assertEquals("iterator", sQLTransientConnectionException1.getMessage());
      assertEquals("iterator", sQLTransientConnectionException1.getSQLState());
      assertEquals(12, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: iterator", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLDataException2.getErrorCode());
      assertEquals("java.sql.SQLDataException: cHT`{Sfgp", sQLDataException2.toString());
      assertEquals("", sQLDataException2.getSQLState());
      assertEquals("cHT`{Sfgp", sQLDataException2.getMessage());
      assertNotNull(sQLDataException2);
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLDataException2.equals((Object)sQLDataException0));
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      
      sQLDataExceptionArray0[2] = sQLDataException2;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SQLDataException sQLDataException3 = new SQLDataException();
      assertNull(sQLDataException3.getSQLState());
      assertNull(sQLDataException3.getMessage());
      assertEquals(0, sQLDataException3.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException3.toString());
      assertNotNull(sQLDataException3);
      assertFalse(sQLDataException3.equals((Object)sQLDataException1));
      assertFalse(sQLDataException3.equals((Object)sQLDataException2));
      assertFalse(sQLDataException3.equals((Object)sQLDataException0));
      
      sQLDataExceptionArray0[3] = sQLDataException3;
      SQLDataException sQLDataException4 = new SQLDataException(", ");
      assertEquals(", ", sQLDataException4.getMessage());
      assertNull(sQLDataException4.getSQLState());
      assertEquals("java.sql.SQLDataException: , ", sQLDataException4.toString());
      assertEquals(0, sQLDataException4.getErrorCode());
      assertNotNull(sQLDataException4);
      assertFalse(sQLDataException4.equals((Object)sQLDataException1));
      assertFalse(sQLDataException4.equals((Object)sQLDataException2));
      assertFalse(sQLDataException4.equals((Object)sQLDataException0));
      assertFalse(sQLDataException4.equals((Object)sQLDataException3));
      
      sQLDataExceptionArray0[4] = sQLDataException4;
      ResettableListIterator<SQLDataException> resettableListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException4);
      assertEquals(", ", sQLDataException4.getMessage());
      assertNull(sQLDataException4.getSQLState());
      assertEquals("java.sql.SQLDataException: , ", sQLDataException4.toString());
      assertEquals(0, sQLDataException4.getErrorCode());
      assertFalse(resettableListIterator0.hasPrevious());
      assertTrue(resettableListIterator0.hasNext());
      assertNotNull(resettableListIterator0);
      assertFalse(sQLDataException4.equals((Object)sQLDataException1));
      assertFalse(sQLDataException4.equals((Object)sQLDataException2));
      assertFalse(sQLDataException4.equals((Object)sQLDataException0));
      assertFalse(sQLDataException4.equals((Object)sQLDataException3));
      
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(", ", sQLDataException4.getMessage());
      assertNull(sQLDataException4.getSQLState());
      assertEquals("java.sql.SQLDataException: , ", sQLDataException4.toString());
      assertEquals(0, sQLDataException4.getErrorCode());
      assertTrue(resettableListIterator0.hasPrevious());
      assertFalse(resettableListIterator0.hasNext());
      assertEquals(1, int0);
      assertFalse(sQLDataException4.equals((Object)sQLDataException1));
      assertFalse(sQLDataException4.equals((Object)sQLDataException2));
      assertFalse(sQLDataException4.equals((Object)sQLDataException0));
      assertFalse(sQLDataException4.equals((Object)sQLDataException3));
      assertNotSame(sQLDataException4, sQLDataException1);
      assertNotSame(sQLDataException4, sQLDataException2);
      assertNotSame(sQLDataException4, sQLDataException0);
      assertNotSame(sQLDataException4, sQLDataException3);
      
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", 1, intArray0);
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals(1, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) batchUpdateException0, 12, (-2149));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(resettableListIterator0);
      
      Iterator<String> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends String>) resettableListIterator0, (Iterator<? extends String>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertNotNull(iterator0);
      
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[7];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("@36[T%yy^[s>Eq_");
      assertEquals("@36[T%yy^[s>Eq_", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: @36[T%yy^[s>Eq_", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("@36[T%yy^[s>Eq_", sQLTransientConnectionException0);
      assertEquals("@36[T%yy^[s>Eq_", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: @36[T%yy^[s>Eq_", sQLTransientConnectionException0.toString());
      assertEquals("@36[T%yy^[s>Eq_", sQLTransientConnectionException1.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: @36[T%yy^[s>Eq_", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertNotNull(sQLTransientConnectionException1);
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException1;
      Object[] objectArray0 = IteratorUtils.toArray(iterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MapIterator<SQLDataException, SQLException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<SQLSyntaxErrorException, LinkedHashSet<HashSet>> mapIterator1 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLSyntaxErrorException, LinkedHashSet<HashSet>>) mapIterator0);
      assertNotNull(mapIterator1);
      
      ZippingIterator<SQLSyntaxErrorException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLSyntaxErrorException>) mapIterator1, (Iterator<? extends SQLSyntaxErrorException>) mapIterator1);
      assertNotNull(zippingIterator0);
      
      boolean boolean0 = IteratorUtils.contains((Iterator<ServiceLoader<LinkedHashSet>>) zippingIterator0, (Object) mapIterator0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("iterator", "iterator", 156, sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(156, sQLTransientConnectionException0.getErrorCode());
      assertEquals("iterator", sQLTransientConnectionException0.getSQLState());
      assertEquals("iterator", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: iterator", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTransientConnectionException0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = 919;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) comparator0, 919);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = (-2946);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLDataException[]) null, (-2946));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<Properties, SQLTimeoutException> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertNotNull(mapIterator1);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      Transformer<Properties, String> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<Properties>) mapIterator1, (Transformer<? super Properties, String>) transformer0, "", "\")[=4qx~2n", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // suffix may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends ArrayDeque<SQLClientInfoException>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MapIterator<SQLClientInfoException, SQLNonTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      Comparator<SQLWarning> comparator0 = (Comparator<SQLWarning>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapIterator<DataTruncation, SQLClientInfoException> mapIterator1 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator1);
      
      Iterator<SQLWarning> iterator0 = IteratorUtils.collatedIterator((Comparator<? super SQLWarning>) comparator0, (Iterator<? extends SQLWarning>) mapIterator1, (Iterator<? extends SQLWarning>) mapIterator1);
      assertNotNull(iterator0);
      
      Iterator<SQLWarning> iterator1 = IteratorUtils.unmodifiableIterator(iterator0);
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      int int1 = 61;
      Integer integer2 = new Integer(61);
      assertEquals(61, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(int0 == int1);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1628);
      assertEquals(1628, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      
      integerArray0[5] = integer5;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, int1, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MapIterator<Properties, SQLTimeoutException> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      assertNotNull(mapIterator0);
      
      MapIterator<Properties, SQLTimeoutException> mapIterator1 = new AbstractMapIteratorDecorator<Properties, SQLTimeoutException>(mapIterator0);
      assertNotNull(mapIterator1);
      assertFalse(mapIterator1.equals((Object)mapIterator0));
      
      Transformer<Properties, String> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      String string0 = "";
      Integer integer0 = new Integer((-1163));
      assertEquals((-1163), (int)integer0);
      assertNotNull(integer0);
      
      SingletonListIterator<Integer> singletonListIterator0 = new SingletonListIterator<Integer>(integer0);
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertNotNull(singletonListIterator0);
      
      singletonListIterator0.reset();
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals((-1), singletonListIterator0.previousIndex());
      
      Iterator<Integer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super Integer>) null, (Iterator<? extends Integer>) singletonListIterator0, (Iterator<? extends Integer>) singletonListIterator0);
      assertFalse(singletonListIterator0.hasPrevious());
      assertEquals(0, singletonListIterator0.nextIndex());
      assertTrue(singletonListIterator0.hasNext());
      assertEquals((-1), singletonListIterator0.previousIndex());
      assertNotNull(iterator0);
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      ObjectArrayIterator<String> objectArrayIterator0 = null;
      try {
        objectArrayIterator0 = new ObjectArrayIterator<String>((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<IIOMetadataNode>[] iteratorArray0 = (Iterator<IIOMetadataNode>[]) Array.newInstance(Iterator.class, 0);
      Iterator<IIOMetadataNode> iterator0 = IteratorUtils.collatedIterator((Comparator<? super IIOMetadataNode>) comparator0, (Iterator<? extends IIOMetadataNode>[]) iteratorArray0);
      assertEquals(0, iteratorArray0.length);
      assertNotNull(iterator0);
      
      Enumeration<Object> enumeration0 = IteratorUtils.asEnumeration((Iterator<?>) iterator0);
      assertEquals(0, iteratorArray0.length);
      assertNotNull(enumeration0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OrderedMapIterator<SQLTransientException, HashSet<Closure>> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, SQLSyntaxErrorException> hashtable0 = new Hashtable<SQLNonTransientConnectionException, SQLSyntaxErrorException>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Enumeration<SQLSyntaxErrorException> enumeration0 = hashtable0.elements();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(enumeration0);
      
      Iterator<SQLSyntaxErrorException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(iterator0);
      
      OrderedMapIterator<SQLTransactionRollbackException, Iterator<SQLSyntaxErrorException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      MapIterator<SQLTransactionRollbackException, Iterator<SQLSyntaxErrorException>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, Iterator<SQLSyntaxErrorException>>) orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(mapIterator0);
      
      MapIterator<SQLTransactionRollbackException, Iterator<SQLSyntaxErrorException>> mapIterator1 = IteratorUtils.unmodifiableMapIterator(mapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(mapIterator1);
      assertSame(mapIterator0, mapIterator1);
      assertSame(mapIterator1, mapIterator0);
      
      Hashtable<String, ArrayDeque<BatchUpdateException>> hashtable1 = new Hashtable<String, ArrayDeque<BatchUpdateException>>();
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNotNull(hashtable1);
      
      EntrySetMapIterator<String, ArrayDeque<BatchUpdateException>> entrySetMapIterator0 = new EntrySetMapIterator<String, ArrayDeque<BatchUpdateException>>(hashtable1);
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNotNull(entrySetMapIterator0);
      
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator0 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator0);
      
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) resettableIterator0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(reverseListIterator0.hasNext());
      assertFalse(reverseListIterator0.hasPrevious());
      assertNotNull(reverseListIterator0);
      
      OrderedMapIterator<SQLSyntaxErrorException, SQLTimeoutException> orderedMapIterator1 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLTimeoutException>(orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      OrderedMapIterator<SQLSyntaxErrorException, SQLException> orderedMapIterator2 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends SQLException>) orderedMapIterator1);
      assertFalse(orderedMapIterator1.hasPrevious());
      assertFalse(orderedMapIterator2.hasPrevious());
      assertNotNull(orderedMapIterator2);
      
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends EnumSet<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(resettableIterator0);
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends String>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("#a1#MR");
      assertNotNull(iIOMetadataNode0);
      
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("ZS");
      assertNotNull(nodeList0);
      
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator(nodeList0);
      assertNotNull(nodeListIterator0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ZS", ":n9.6q");
      assertEquals("java.sql.SQLNonTransientConnectionException: ZS", sQLNonTransientConnectionException0.toString());
      assertEquals("ZS", sQLNonTransientConnectionException0.getMessage());
      assertEquals(":n9.6q", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator", "", sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals("org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: org.apache.commons.collections4.set.ListOrderedSet$OrderedSetIterator", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((SQLRecoverableException[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Entry does not exist: ";
      stringArray0[1] = "t~$(q`Gm";
      stringArray0[2] = "J-=`u_2P^t^?38]";
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(resettableIterator0);
      
      Comparator<SQLSyntaxErrorException> comparator0 = (Comparator<SQLSyntaxErrorException>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<SQLSyntaxErrorException>[] iteratorArray0 = (Iterator<SQLSyntaxErrorException>[]) Array.newInstance(Iterator.class, 9);
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      List<SQLSyntaxErrorException> list0 = IteratorUtils.toList((Iterator<? extends SQLSyntaxErrorException>) resettableIterator1);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ReverseListIterator<SQLSyntaxErrorException> reverseListIterator0 = new ReverseListIterator<SQLSyntaxErrorException>(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(reverseListIterator0.hasPrevious());
      assertFalse(reverseListIterator0.hasNext());
      assertNotNull(reverseListIterator0);
      
      iteratorArray0[0] = (Iterator<SQLSyntaxErrorException>) reverseListIterator0;
      OrderedMapIterator<SQLSyntaxErrorException, SQLTimeoutException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLTimeoutException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLSyntaxErrorException, SQLTimeoutException>(orderedMapIterator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertNotNull(abstractOrderedMapIteratorDecorator0);
      
      OrderedMapIterator<SQLSyntaxErrorException, SQLException> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<SQLSyntaxErrorException, ? extends SQLException>) abstractOrderedMapIteratorDecorator0);
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
      assertFalse(orderedMapIterator1.hasPrevious());
      assertNotNull(orderedMapIterator1);
      
      iteratorArray0[1] = (Iterator<SQLSyntaxErrorException>) orderedMapIterator1;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Entry does not exist: ", "J-=`u_2P^t^?38]", 0);
      assertEquals("Entry does not exist: ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Entry does not exist: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("J-=`u_2P^t^?38]", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("7zY+", (String) null, 0, sQLFeatureNotSupportedException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: 7zY+", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("7zY+", sQLRecoverableException0.getMessage());
      assertEquals("Entry does not exist: ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Entry does not exist: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("J-=`u_2P^t^?38]", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("t~$(q`Gm", "t~$(q`Gm", sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: 7zY+", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("7zY+", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: t~$(q`Gm", sQLTransientConnectionException0.toString());
      assertEquals("t~$(q`Gm", sQLTransientConnectionException0.getMessage());
      assertEquals("t~$(q`Gm", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("Entry does not exist: ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Entry does not exist: ", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("J-=`u_2P^t^?38]", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      int int0 = 10;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = IteratorUtils.toString((Iterator<Integer>) null);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[]", "", 0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("[]", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: []", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("[]", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: []", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: []", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLNonTransientConnectionException: []", batchUpdateException0.toString());
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      batchUpdateException0.addSuppressed(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("[]", sQLNonTransientConnectionException0.getMessage());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: []", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: []", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLNonTransientConnectionException: []", batchUpdateException0.toString());
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
      
      boolean boolean1 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = IteratorUtils.size(iterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(resettableIterator0);
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1540;
      intArray0[7] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("(g", "", 0, intArray0);
      assertEquals("(g", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: (g", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1540, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      assertEquals("(g", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: (g", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: (g", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.BatchUpdateException: (g", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1540, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(sQLTransientConnectionException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("J|m(", "", 1277, sQLTransientConnectionException0);
      assertEquals("(g", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: (g", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: (g", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.BatchUpdateException: (g", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(1277, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("J|m(", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: J|m(", sQLSyntaxErrorException0.toString());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1540, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(sQLSyntaxErrorException0);
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("", "suffix may not be null", 1540, intArray0);
      assertEquals("", batchUpdateException1.getMessage());
      assertEquals(1540, batchUpdateException1.getErrorCode());
      assertEquals("suffix may not be null", batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException1.toString());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1540, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(batchUpdateException1);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      SQLWarning sQLWarning0 = new SQLWarning("suffix may not be null", "?:k", (-2602));
      assertEquals((-2602), sQLWarning0.getErrorCode());
      assertEquals("suffix may not be null", sQLWarning0.getMessage());
      assertEquals("?:k", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: suffix may not be null", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(sQLWarning0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      assertEquals((-2602), sQLWarning0.getErrorCode());
      assertEquals("suffix may not be null", sQLWarning0.getMessage());
      assertEquals("?:k", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: suffix may not be null", sQLWarning0.toString());
      assertNotNull(comparatorPredicate0);
      
      BatchUpdateException batchUpdateException2 = new BatchUpdateException((String) null, intArray0, batchUpdateException1);
      assertNull(batchUpdateException2.getMessage());
      assertNull(batchUpdateException2.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException2.toString());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertEquals("", batchUpdateException1.getMessage());
      assertEquals(1540, batchUpdateException1.getErrorCode());
      assertEquals("suffix may not be null", batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException1.toString());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1540, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(batchUpdateException2);
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      batchUpdateException2.addSuppressed(sQLTransientConnectionException0);
      assertNull(batchUpdateException2.getMessage());
      assertNull(batchUpdateException2.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException2.toString());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertEquals("(g", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: (g", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: (g", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.BatchUpdateException: (g", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("", batchUpdateException1.getMessage());
      assertEquals(1540, batchUpdateException1.getErrorCode());
      assertEquals("suffix may not be null", batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException1.toString());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1540, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException2));
      assertNotSame(batchUpdateException2, batchUpdateException0);
      assertNotSame(batchUpdateException2, batchUpdateException1);
      assertNotSame(batchUpdateException0, batchUpdateException2);
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      assertNotSame(batchUpdateException1, batchUpdateException2);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("K@", (String) null, batchUpdateException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("K@", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: K@", sQLFeatureNotSupportedException0.toString());
      assertEquals("(g", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: (g", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1540, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("K@", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: K@", sQLFeatureNotSupportedException0.toString());
      assertEquals("(g", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: (g", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1540, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(iterator0);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertNotSame(batchUpdateException0, batchUpdateException2);
      assertNotSame(batchUpdateException0, batchUpdateException1);
      
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, int0);
      
      SQLInvalidAuthorizationSpecException[] sQLInvalidAuthorizationSpecExceptionArray0 = new SQLInvalidAuthorizationSpecException[8];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "&>A~XzpX`7v`:>dw", (-1832));
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals((-1832), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("&>A~XzpX`7v`:>dw", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      sQLInvalidAuthorizationSpecExceptionArray0[0] = sQLInvalidAuthorizationSpecException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("", "org.apache.commons.collections4.functors.IfTransformer", batchUpdateException1);
      assertEquals("org.apache.commons.collections4.functors.IfTransformer", sQLTransientConnectionException1.getSQLState());
      assertEquals("", sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("", batchUpdateException1.getMessage());
      assertEquals(1540, batchUpdateException1.getErrorCode());
      assertEquals("suffix may not be null", batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException1.toString());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1540, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(sQLTransientConnectionException1);
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException2));
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "", sQLTransientConnectionException1);
      assertEquals("org.apache.commons.collections4.functors.IfTransformer", sQLTransientConnectionException1.getSQLState());
      assertEquals("", sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("", batchUpdateException1.getMessage());
      assertEquals(1540, batchUpdateException1.getErrorCode());
      assertEquals("suffix may not be null", batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException1.toString());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1540, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException2));
      
      sQLInvalidAuthorizationSpecExceptionArray0[1] = sQLInvalidAuthorizationSpecException1;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = new SQLInvalidAuthorizationSpecException("ExceptionTransformer invoked", (String) null, sQLInvalidAuthorizationSpecException1);
      assertEquals("org.apache.commons.collections4.functors.IfTransformer", sQLTransientConnectionException1.getSQLState());
      assertEquals("", sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ExceptionTransformer invoked", sQLInvalidAuthorizationSpecException2.toString());
      assertNull(sQLInvalidAuthorizationSpecException2.getSQLState());
      assertEquals("ExceptionTransformer invoked", sQLInvalidAuthorizationSpecException2.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException2.getErrorCode());
      assertEquals("", batchUpdateException1.getMessage());
      assertEquals(1540, batchUpdateException1.getErrorCode());
      assertEquals("suffix may not be null", batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException1.toString());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1540, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(sQLInvalidAuthorizationSpecException2);
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException2));
      
      sQLInvalidAuthorizationSpecExceptionArray0[2] = sQLInvalidAuthorizationSpecException2;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException3 = new SQLInvalidAuthorizationSpecException();
      assertNull(sQLInvalidAuthorizationSpecException3.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException3.toString());
      assertNull(sQLInvalidAuthorizationSpecException3.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException3.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException3);
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException3.equals((Object)sQLInvalidAuthorizationSpecException2));
      
      sQLInvalidAuthorizationSpecExceptionArray0[3] = sQLInvalidAuthorizationSpecException3;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException4 = new SQLInvalidAuthorizationSpecException("?m}+0%).#{h|B:", "", 0, sQLInvalidAuthorizationSpecException2);
      assertEquals("", sQLInvalidAuthorizationSpecException4.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ?m}+0%).#{h|B:", sQLInvalidAuthorizationSpecException4.toString());
      assertEquals("?m}+0%).#{h|B:", sQLInvalidAuthorizationSpecException4.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException4.getErrorCode());
      assertEquals("org.apache.commons.collections4.functors.IfTransformer", sQLTransientConnectionException1.getSQLState());
      assertEquals("", sQLTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ExceptionTransformer invoked", sQLInvalidAuthorizationSpecException2.toString());
      assertNull(sQLInvalidAuthorizationSpecException2.getSQLState());
      assertEquals("ExceptionTransformer invoked", sQLInvalidAuthorizationSpecException2.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException2.getErrorCode());
      assertEquals("", batchUpdateException1.getMessage());
      assertEquals(1540, batchUpdateException1.getErrorCode());
      assertEquals("suffix may not be null", batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException1.toString());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1540, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(sQLInvalidAuthorizationSpecException4);
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException4.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLTransientConnectionException1.equals((Object)sQLTransientConnectionException0));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException2.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException2));
      
      sQLInvalidAuthorizationSpecExceptionArray0[4] = sQLInvalidAuthorizationSpecException4;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException5 = new SQLInvalidAuthorizationSpecException(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLTransientConnectionException: java.sql.BatchUpdateException: (g", sQLInvalidAuthorizationSpecException5.toString());
      assertNull(sQLInvalidAuthorizationSpecException5.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.BatchUpdateException: (g", sQLInvalidAuthorizationSpecException5.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException5.getErrorCode());
      assertEquals("(g", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: (g", batchUpdateException0.toString());
      assertEquals("", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: (g", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.BatchUpdateException: (g", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1540, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(sQLInvalidAuthorizationSpecException5);
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException4));
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException5.equals((Object)sQLInvalidAuthorizationSpecException3));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(sQLTransientConnectionException0.equals((Object)sQLTransientConnectionException1));
      
      sQLInvalidAuthorizationSpecExceptionArray0[5] = sQLInvalidAuthorizationSpecException5;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException6 = new SQLInvalidAuthorizationSpecException("d,Wd-r+<", "gnb(OG<\b");
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: d,Wd-r+<", sQLInvalidAuthorizationSpecException6.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException6.getErrorCode());
      assertEquals("gnb(OG<\b", sQLInvalidAuthorizationSpecException6.getSQLState());
      assertEquals("d,Wd-r+<", sQLInvalidAuthorizationSpecException6.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException6);
      assertFalse(sQLInvalidAuthorizationSpecException6.equals((Object)sQLInvalidAuthorizationSpecException5));
      assertFalse(sQLInvalidAuthorizationSpecException6.equals((Object)sQLInvalidAuthorizationSpecException4));
      assertFalse(sQLInvalidAuthorizationSpecException6.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException6.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException6.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException6.equals((Object)sQLInvalidAuthorizationSpecException3));
      
      sQLInvalidAuthorizationSpecExceptionArray0[6] = sQLInvalidAuthorizationSpecException6;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException7 = new SQLInvalidAuthorizationSpecException("V.M&+,", "&>A~XzpX`7v`:>dw", 854);
      assertEquals(854, sQLInvalidAuthorizationSpecException7.getErrorCode());
      assertEquals("&>A~XzpX`7v`:>dw", sQLInvalidAuthorizationSpecException7.getSQLState());
      assertEquals("V.M&+,", sQLInvalidAuthorizationSpecException7.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: V.M&+,", sQLInvalidAuthorizationSpecException7.toString());
      assertNotNull(sQLInvalidAuthorizationSpecException7);
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException2));
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException6));
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException4));
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException5));
      assertFalse(sQLInvalidAuthorizationSpecException7.equals((Object)sQLInvalidAuthorizationSpecException3));
      
      sQLInvalidAuthorizationSpecExceptionArray0[7] = sQLInvalidAuthorizationSpecException7;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(sQLInvalidAuthorizationSpecExceptionArray0, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) locale_Category0);
      assertNotNull(predicate0);
      
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<Properties>) null, (Predicate<? super Properties>) predicate0);
      assertTrue(boolean0);
      
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      int int0 = (-151);
      int int1 = (-58);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("bj#1qI!Wtp<", ")Xn4f@j,IgKc,", (-58));
      assertEquals((-58), sQLTransientConnectionException0.getErrorCode());
      assertEquals(")Xn4f@j,IgKc,", sQLTransientConnectionException0.getSQLState());
      assertEquals("bj#1qI!Wtp<", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: bj#1qI!Wtp<", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("bj#1qI!Wtp<", "bj#1qI!Wtp<", (-151), sQLTransientConnectionException0);
      assertEquals((-58), sQLTransientConnectionException0.getErrorCode());
      assertEquals(")Xn4f@j,IgKc,", sQLTransientConnectionException0.getSQLState());
      assertEquals("bj#1qI!Wtp<", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: bj#1qI!Wtp<", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLDataException: bj#1qI!Wtp<", sQLDataException0.toString());
      assertEquals("bj#1qI!Wtp<", sQLDataException0.getSQLState());
      assertEquals((-151), sQLDataException0.getErrorCode());
      assertEquals("bj#1qI!Wtp<", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("-78Nw?!", sQLTransientConnectionException0);
      assertEquals((-58), sQLTransientConnectionException0.getErrorCode());
      assertEquals(")Xn4f@j,IgKc,", sQLTransientConnectionException0.getSQLState());
      assertEquals("bj#1qI!Wtp<", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: bj#1qI!Wtp<", sQLTransientConnectionException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: -78Nw?!", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("-78Nw?!", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      Iterator<?> iterator0 = IteratorUtils.getIterator(locale_Category0);
      assertNotNull(iterator0);
      
      SQLTransactionRollbackException[] sQLTransactionRollbackExceptionArray0 = new SQLTransactionRollbackException[0];
      ResettableListIterator<SQLTransactionRollbackException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransactionRollbackExceptionArray0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertEquals(0, sQLTransactionRollbackExceptionArray0.length);
      assertNotNull(resettableListIterator0);
      
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLTransactionRollbackException>) resettableListIterator0);
      assertFalse(resettableListIterator0.hasNext());
      assertFalse(resettableListIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals(0, sQLTransactionRollbackExceptionArray0.length);
      assertNotNull(listIterator0);
      
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransactionRollbackException0, (-151), (-58));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ResettableIterator<String> resettableIterator0 = IteratorUtils.arrayIterator(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(resettableIterator0);
      
      ResettableIterator<SQLSyntaxErrorException> resettableIterator1 = IteratorUtils.emptyIterator();
      assertNotNull(resettableIterator1);
      
      Class<String> class0 = String.class;
      String[] stringArray1 = IteratorUtils.toArray((Iterator<? extends String>) resettableIterator0, class0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      HashSet<Integer> hashSet0 = new LinkedHashSet<Integer>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Integer integer0 = new Integer(100);
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(100);
      assertEquals(100, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      ResettableIterator<Integer> resettableIterator2 = IteratorUtils.loopingIterator((Collection<? extends Integer>) hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(integer1));
      assertNotNull(resettableIterator2);
      
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator2);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(boolean0);
      assertFalse(hashSet0.contains(integer1));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("~h5Z\"B&DhV7e1zZQ{", "T*5wpFV", 61, (int[]) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("suffix may not be null", (String) null, 61, sQLTransientConnectionException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException((String) null, "f,>", (int[]) null, sQLSyntaxErrorException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(batchUpdateException1, comparator0, comparatorPredicate_Criterion0);
      batchUpdateException1.addSuppressed(batchUpdateException0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(comparatorPredicate0);
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedHashSet0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) resettableIterator0);
      IteratorUtils.isEmpty(iterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagName("=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      IteratorUtils.singletonIterator(serviceLoader0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      Hashtable<Predicate<Object>, Closure<Object>> hashtable0 = new Hashtable<Predicate<Object>, Closure<Object>>();
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      EmptyMapIterator.emptyMapIterator();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer(3752);
      Integer integer1 = new Integer(3752);
      ResettableIterator<Integer> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends Integer>) hashSet0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "R}5dg'/c9mrq %j9c";
      int int0 = 125;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("R}5dg'/c9mrq %j9c");
      sQLSyntaxErrorException0.addSuppressed(sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("R}5dg'/c9mrq %j9c", "R}5dg'/c9mrq %j9c", 125, sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLIntegrityConstraintViolationException0, 125);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      IteratorUtils.emptyListIterator();
      Iterator<SQLTransactionRollbackException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator((Iterator<SQLTransactionRollbackException>) null, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Comparator<Object> comparator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super String>) null, (Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 6);
      Iterator<SQLFeatureNotSupportedException> iterator0 = null;
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) null, (Iterator<? extends SQLFeatureNotSupportedException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Transformer must not be null", "p2)TtC?6=.=JE%*", "Transformer must not be null", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Transformer must not be null", "^HmG7", "p2)TtC?6=.=JE%*", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Transformer must not be null", "Transformer must not be null", "", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("^HmG7", "", "", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("The map size must be 1", "cOE3D%kB|2PT)YoX0+", "The map size must be 1", 0);
      stackTraceElementArray0[4] = stackTraceElement4;
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
      ListIterator<SQLIntegrityConstraintViolationException> listIterator0 = IteratorUtils.singletonListIterator(sQLIntegrityConstraintViolationException0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("E");
      iIOMetadataNode0.getElementsByTagName("FDa=&$vW&SjQ3");
      HashSet<Integer>[] hashSetArray0 = (HashSet<Integer>[]) Array.newInstance(HashSet.class, 7);
      hashSetArray0[0] = hashSet0;
      hashSetArray0[1] = hashSet0;
      hashSetArray0[2] = hashSet0;
      hashSetArray0[3] = hashSet0;
      hashSetArray0[4] = hashSet0;
      hashSetArray0[5] = hashSet0;
      hashSetArray0[6] = hashSet0;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(hashSetArray0, 1, (-311));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = (-382);
      int int1 = 4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null, (-382), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End index must not be less than start index
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      LinkedHashSet<SQLTransactionRollbackException> linkedHashSet0 = new LinkedHashSet<SQLTransactionRollbackException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("WxHE2*{Y", "WxHE2*{Y", 1677);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("WxHE2*{Y", "", "&:o$ZG8z8;>2", 1677);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("WxHE2*{Y", "", "", 1677);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "The list must not be null", "", (-1));
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      linkedHashSet0.spliterator();
      linkedHashSet0.add(sQLTransactionRollbackException0);
      IteratorUtils.loopingIterator((Collection<? extends SQLTransactionRollbackException>) linkedHashSet0);
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<SQLNonTransientConnectionException, Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Enumeration<IIOMetadataNode> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends IIOMetadataNode>) resettableListIterator0);
      IteratorUtils.asIterator((Enumeration<? extends IIOMetadataNode>) enumeration0);
      ResettableListIterator<SQLNonTransientConnectionException> resettableListIterator1 = IteratorUtils.emptyListIterator();
      Vector<SQLNonTransientConnectionException> vector0 = new Vector<SQLNonTransientConnectionException>();
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLNonTransientConnectionException>) vector0);
      ZippingIterator<SQLException> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends SQLException>) resettableListIterator1, (Iterator<? extends SQLException>) resettableIterator0, (Iterator<? extends SQLException>) resettableIterator0);
      int int0 = 4;
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) zippingIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ListIterator<SQLTransactionRollbackException> listIterator0 = IteratorUtils.singletonListIterator((SQLTransactionRollbackException) null);
      IteratorUtils.toArray((Iterator<?>) listIterator0);
      Stack<StringTokenizer> stack0 = new Stack<StringTokenizer>();
      // Undeclared exception!
      try { 
        IteratorUtils.peekingIterator((Iterator<? extends Properties>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PeekingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Hashtable<SQLNonTransientConnectionException, SQLSyntaxErrorException> hashtable0 = new Hashtable<SQLNonTransientConnectionException, SQLSyntaxErrorException>();
      Enumeration<SQLSyntaxErrorException> enumeration0 = hashtable0.elements();
      IteratorUtils.asIterator((Enumeration<? extends SQLSyntaxErrorException>) enumeration0);
      OrderedMapIterator<SQLTransactionRollbackException, Iterator<SQLSyntaxErrorException>> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<SQLTransactionRollbackException, Iterator<SQLSyntaxErrorException>> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<SQLTransactionRollbackException, Iterator<SQLSyntaxErrorException>>) orderedMapIterator0);
      IteratorUtils.unmodifiableMapIterator(mapIterator0);
      Hashtable<String, ArrayDeque<BatchUpdateException>> hashtable1 = new Hashtable<String, ArrayDeque<BatchUpdateException>>();
      EntrySetMapIterator<String, ArrayDeque<BatchUpdateException>> entrySetMapIterator0 = new EntrySetMapIterator<String, ArrayDeque<BatchUpdateException>>(hashtable1);
      ArrayDeque<BatchUpdateException> arrayDeque0 = new ArrayDeque<BatchUpdateException>();
      hashtable1.put("org.apache.commons.collections4.IteratorUtils", arrayDeque0);
      AbstractMapIteratorDecorator<String, ArrayDeque<BatchUpdateException>> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, ArrayDeque<BatchUpdateException>>(entrySetMapIterator0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<String>) abstractMapIteratorDecorator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = EmptyIterator.resettableEmptyIterator();
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      Enumeration<SQLFeatureNotSupportedException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      Iterator<SQLFeatureNotSupportedException> iterator1 = IteratorUtils.asIterator((Enumeration<? extends SQLFeatureNotSupportedException>) enumeration0);
      Iterator<SQLFeatureNotSupportedException> iterator2 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator0, (Iterator<? extends SQLFeatureNotSupportedException>) iterator1);
      IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>) iterator2, (Iterator<? extends SQLFeatureNotSupportedException>) resettableIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) resettableIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      ResettableIterator<DataTruncation> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends DataTruncation>) linkedHashSet0);
      IteratorUtils.asEnumeration((Iterator<? extends SQLWarning>) resettableIterator0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        iIOMetadataNode0.getElementsByTagName("%MBvu.dLr~/_|z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[2];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("iterator", "iterator", 156, sQLIntegrityConstraintViolationException0);
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("iterator", "iterator", 12, sQLTransientConnectionException0);
      sQLTransientConnectionExceptionArray0[1] = sQLTransientConnectionException1;
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLTransientConnectionExceptionArray0, 1);
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableIterator0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = (-264);
      int int1 = (-182);
      String string0 = "x";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("x", "");
      DataTruncation dataTruncation0 = new DataTruncation((-264), true, false, (-264), (-182), sQLTimeoutException0);
      int int2 = (-1297);
      sQLTimeoutException0.getStackTrace();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) dataTruncation0, (-1297), (-160));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends BatchUpdateException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("#a1#MR");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("ZS");
      IteratorUtils.nodeListIterator(nodeList0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ZS", ":n9.6q");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("#a1#MR", ":n9.6q", "", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("-7H", "ZS", "#a1#MR", (-2089));
      stackTraceElementArray0[1] = stackTraceElement1;
      String string0 = "";
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "The list must not be null", "", (-313));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = null;
      try {
        stackTraceElement3 = new StackTraceElement((String) null, "jYG^#2", "#a1#MR", (-313));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MapIterator<Properties, SQLIntegrityConstraintViolationException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<Properties>[] iteratorArray0 = (Iterator<Properties>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<Properties>) mapIterator0;
      IteratorUtils.chainedIterator((Iterator<? extends Properties>[]) iteratorArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) mapIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends String>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Hashtable<SQLTransactionRollbackException, ServiceLoader<Properties>> hashtable0 = new Hashtable<SQLTransactionRollbackException, ServiceLoader<Properties>>();
      EntrySetMapIterator<SQLTransactionRollbackException, ServiceLoader<Properties>> entrySetMapIterator0 = new EntrySetMapIterator<SQLTransactionRollbackException, ServiceLoader<Properties>>(hashtable0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) entrySetMapIterator0, (-9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = (-9);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) null, (-9));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = 1;
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends SQLTransientException>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }
}
