/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 02:05:11 GMT 2021
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.ResettableIterator;
import org.apache.commons.collections4.ResettableListIterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.apache.commons.collections4.iterators.EmptyIterator;
import org.apache.commons.collections4.iterators.EmptyListIterator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.LoopingListIterator;
import org.apache.commons.collections4.iterators.NodeListIterator;
import org.apache.commons.collections4.iterators.ObjectArrayIterator;
import org.apache.commons.collections4.iterators.ObjectArrayListIterator;
import org.apache.commons.collections4.iterators.ReverseListIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.apache.commons.collections4.iterators.SingletonListIterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IteratorUtils_ESTest extends IteratorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SingletonIterator<SQLDataException> singletonIterator0 = new SingletonIterator<SQLDataException>(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) singletonIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLDataException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      MapIterator<DataTruncation, SQLDataException> mapIterator0 = IteratorUtils.unmodifiableMapIterator((MapIterator<DataTruncation, SQLDataException>) orderedMapIterator0);
      ZippingIterator<DataTruncation> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends DataTruncation>) mapIterator0, (Iterator<? extends DataTruncation>) orderedMapIterator0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 4);
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(linkedList0);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends StringTokenizer>) reverseListIterator0, (Iterator<? extends StringTokenizer>) iteratorArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 4);
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(linkedList0);
      iteratorArray0[0] = (Iterator<StringTokenizer>) reverseListIterator0;
      iteratorArray0[1] = iteratorArray0[0];
      SkippingIterator<StringTokenizer> skippingIterator0 = IteratorUtils.skippingIterator(iteratorArray0[0], 0L);
      iteratorArray0[2] = (Iterator<StringTokenizer>) skippingIterator0;
      iteratorArray0[3] = (Iterator<StringTokenizer>) reverseListIterator0;
      ZippingIterator<StringTokenizer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends StringTokenizer>[]) iteratorArray0);
      assertNotNull(zippingIterator0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ResettableListIterator<ArrayDeque<BatchUpdateException>> resettableListIterator0 = IteratorUtils.emptyListIterator();
      ListIterator<ArrayDeque<BatchUpdateException>> listIterator0 = IteratorUtils.unmodifiableListIterator((ListIterator<ArrayDeque<BatchUpdateException>>) resettableListIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(sQLDataException0, defaultEquator0);
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(equalPredicate0, transformer0, transformer0);
      ResettableIterator<TreeSet<SQLNonTransientException>> resettableIterator0 = IteratorUtils.emptyIterator();
      String string0 = IteratorUtils.toString((Iterator<TreeSet<SQLNonTransientException>>) resettableIterator0, (Transformer<? super TreeSet<SQLNonTransientException>, String>) ifTransformer0, "", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      List<Object> list0 = IteratorUtils.toList((Iterator<?>) iterator0, 107);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = new Integer(599);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      PriorityQueue<Predicate<Object>> priorityQueue0 = new PriorityQueue<Predicate<Object>>();
      Predicate<Integer> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Integer>>) priorityQueue0);
      ListIterator<Integer> listIterator1 = IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) listIterator0, (Predicate<? super Integer>) predicate0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator1, (Iterator<? extends Integer>) listIterator1);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) zippingIterator0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MapIterator<SQLRecoverableException, SQLTimeoutException> mapIterator0 = IteratorUtils.emptyMapIterator();
      AbstractMapIteratorDecorator<SQLRecoverableException, SQLTimeoutException> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<SQLRecoverableException, SQLTimeoutException>(mapIterator0);
      Iterator<SQLRecoverableException> iterator0 = IteratorUtils.pushbackIterator((Iterator<? extends SQLRecoverableException>) abstractMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableExceptionArray0[0] = sQLRecoverableException0;
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator0 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      SQLRecoverableException sQLRecoverableException1 = IteratorUtils.find((Iterator<SQLRecoverableException>) objectArrayIterator0, (Predicate<? super SQLRecoverableException>) uniquePredicate0);
      assertNull(sQLRecoverableException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 4);
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(linkedList0);
      iteratorArray0[0] = (Iterator<StringTokenizer>) reverseListIterator0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Iterator<StringTokenizer> iterator0 = IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>) reverseListIterator0, (Iterator<? extends StringTokenizer>) iteratorArray0[0]);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      SQLFeatureNotSupportedException[] sQLFeatureNotSupportedExceptionArray0 = new SQLFeatureNotSupportedException[2];
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.arrayIterator(sQLFeatureNotSupportedExceptionArray0, 0);
      iteratorArray0[0] = (Iterator<SQLFeatureNotSupportedException>) resettableIterator0;
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OrderedIterator<BatchUpdateException> orderedIterator0 = EmptyOrderedIterator.emptyOrderedIterator();
      BoundedIterator<BatchUpdateException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends BatchUpdateException>) orderedIterator0, 736L, 250L);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[4];
      ResettableListIterator<SQLTransientConnectionException> resettableListIterator0 = IteratorUtils.arrayListIterator(sQLTransientConnectionExceptionArray0, 1);
      assertFalse(resettableListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MapIterator<SQLDataException, SQLTransientConnectionException> mapIterator0 = IteratorUtils.emptyMapIterator();
      // Undeclared exception!
      try { 
        IteratorUtils.zippingIterator((Iterator<? extends SQLDataException>) null, (Iterator<? extends SQLDataException>) mapIterator0, (Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableMapIterator((MapIterator<Stack<HashSet>, BatchUpdateException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableListIterator((ListIterator<SQLDataException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.unmodifiableIterator((Iterator<SQLNonTransientException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[6];
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionExceptionArray0[0] = sQLTransientConnectionException0;
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.iterators.ArrayListIterator");
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLTransientConnectionException>) objectArrayListIterator0, (Transformer<? super SQLTransientConnectionException, String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.iterators.ArrayListIterator' on 'class java.sql.SQLTransientConnectionException' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>((String) null);
      ArrayDeque<SQLFeatureNotSupportedException> arrayDeque0 = new ArrayDeque<SQLFeatureNotSupportedException>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "CK1F\"b/s,TO8R6y)g");
      arrayDeque0.addFirst(sQLFeatureNotSupportedException0);
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLFeatureNotSupportedException>) arrayDeque0);
      // Undeclared exception!
      IteratorUtils.toString((Iterator<SQLFeatureNotSupportedException>) resettableIterator0, (Transformer<? super SQLFeatureNotSupportedException, String>) constantTransformer0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends Properties>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[5];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      List<IIOMetadataNode> list0 = IteratorUtils.toList((Iterator<? extends IIOMetadataNode>) resettableListIterator0, 15);
      ResettableIterator<IIOMetadataNode> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends IIOMetadataNode>) list0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableIterator0, class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.get((Iterator<SQLFeatureNotSupportedException>) null, 2258);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLNonTransientConnectionException>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ListIterator<String> listIterator0 = IteratorUtils.singletonListIterator("");
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends String>) listIterator0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Stack<SQLInvalidAuthorizationSpecException>[]) null, 100, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(integerArray0, 1374, 214);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DataTruncation[] dataTruncationArray0 = new DataTruncation[5];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(dataTruncationArray0, (-50));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be less than zero
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((IIOMetadataNode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, 4, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("@p\u0005,|DZpQj*VHA>", "o;TO2uj", (-2637));
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLTransientConnectionException0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[8];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 4825);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Start index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((LinkedList<Iterator<DataTruncation>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) "0eJk", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((NodeList) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) nodeListIterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PriorityQueue<DataTruncation>[] priorityQueueArray0 = (PriorityQueue<DataTruncation>[]) Array.newInstance(PriorityQueue.class, 4);
      ObjectArrayListIterator<PriorityQueue<DataTruncation>> objectArrayListIterator0 = new ObjectArrayListIterator<PriorityQueue<DataTruncation>>(priorityQueueArray0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      ZippingIterator<PriorityQueue<DataTruncation>> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends PriorityQueue<DataTruncation>>) objectArrayListIterator0, (Iterator<? extends PriorityQueue<DataTruncation>>) objectArrayListIterator0, (Iterator<? extends PriorityQueue<DataTruncation>>) objectArrayListIterator0);
      String string0 = IteratorUtils.toString((Iterator<PriorityQueue<DataTruncation>>) zippingIterator0, (Transformer<? super PriorityQueue<DataTruncation>, String>) transformer0, "h?V0iFWP*@7x:,mV([r", "l?=h!wM_3P+)$@2", "l?=h!wM_3P+)$@2");
      assertEquals("l?=h!wM_3P+)$@2nullh?V0iFWP*@7x:,mV([rnullh?V0iFWP*@7x:,mV([rnullh?V0iFWP*@7x:,mV([rnulll?=h!wM_3P+)$@2", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("o1,*=.8wIZw7(V/,;V");
      String string0 = IteratorUtils.toString((Iterator<TreeSet<SQLNonTransientException>>) null, (Transformer<? super TreeSet<SQLNonTransientException>, String>) constantTransformer0, "IteratorChain cannot be changed after the first use of a method from the Iterator interface", "rtyd^nU", "org.apache.commons.collections4.functors.NullPredicate");
      assertEquals("rtyd^nUorg.apache.commons.collections4.functors.NullPredicate", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Stack<PriorityQueue<Boolean>> stack0 = new Stack<PriorityQueue<Boolean>>();
      LoopingListIterator<PriorityQueue<Boolean>> loopingListIterator0 = new LoopingListIterator<PriorityQueue<Boolean>>(stack0);
      PriorityQueue<InstanceofPredicate> priorityQueue0 = new PriorityQueue<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) priorityQueue0);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(predicateTransformer0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<PriorityQueue<Boolean>>) loopingListIterator0, (Predicate<? super PriorityQueue<Boolean>>) transformerPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OrderedMapIterator<SQLClientInfoException, Integer> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<SQLClientInfoException, Integer>(orderedMapIterator0);
      // Undeclared exception!
      try { 
        IteratorUtils.boundedIterator((Iterator<? extends SQLClientInfoException>) abstractOrderedMapIteratorDecorator0, 2294L, (-1766L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLTransientConnectionException[] sQLTransientConnectionExceptionArray0 = new SQLTransientConnectionException[1];
      ObjectArrayListIterator<SQLTransientConnectionException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLTransientConnectionException>(sQLTransientConnectionExceptionArray0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      String string0 = IteratorUtils.toString((Iterator<SQLTransientConnectionException>) objectArrayListIterator0, (Transformer<? super SQLTransientConnectionException, String>) constantTransformer0);
      assertEquals(1, objectArrayListIterator0.nextIndex());
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TreeSet<SQLNonTransientException>[] treeSetArray0 = (TreeSet<SQLNonTransientException>[]) Array.newInstance(TreeSet.class, 5);
      ObjectArrayIterator<TreeSet<SQLNonTransientException>> objectArrayIterator0 = new ObjectArrayIterator<TreeSet<SQLNonTransientException>>(treeSetArray0, 3);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<TreeSet<SQLNonTransientException>>) objectArrayIterator0, (Transformer<? super TreeSet<SQLNonTransientException>, String>) transformer0, "org.apache.commons.collections4.functors.NullPredicate", "org.apache.commons.collections4.functors.NullPredicate", "org.apache.commons.collections4.functors.NullPredicate");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ResettableIterator<SQLDataException> resettableIterator0 = IteratorUtils.emptyIterator();
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      Transformer<SQLNonTransientException, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      // Undeclared exception!
      try { 
        IteratorUtils.toString((Iterator<SQLDataException>) resettableIterator0, (Transformer<? super SQLDataException, String>) transformer0, (String) null, "", "q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResettableIterator<String> resettableIterator0 = IteratorUtils.singletonIterator("");
      int int0 = IteratorUtils.size(resettableIterator0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ResettableListIterator<String> resettableListIterator0 = IteratorUtils.emptyListIterator();
      int int0 = IteratorUtils.size(resettableListIterator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = IteratorUtils.size((Iterator<?>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "fx");
      ConstantTransformer<Object, SQLFeatureNotSupportedException> constantTransformer0 = new ConstantTransformer<Object, SQLFeatureNotSupportedException>(sQLFeatureNotSupportedException0);
      Iterator<SQLFeatureNotSupportedException> iterator0 = IteratorUtils.objectGraphIterator(sQLFeatureNotSupportedException0, (Transformer<? super SQLFeatureNotSupportedException, ? extends SQLFeatureNotSupportedException>) constantTransformer0);
      // Undeclared exception!
      try { 
        IteratorUtils.get(iterator0, 52);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 51
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("lki\"N`}C HDj'B/~8", sQLDataException0);
      arrayList0.add(sQLTimeoutException0);
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) arrayList0);
      boolean boolean0 = IteratorUtils.isEmpty(resettableListIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = IteratorUtils.isEmpty((Iterator<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MapIterator<TreeSet<SQLNonTransientException>, BatchUpdateException> mapIterator0 = IteratorUtils.emptyMapIterator();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(mapIterator0, defaultEquator0);
      LinkedList<Iterator<DataTruncation>>[] linkedListArray0 = (LinkedList<Iterator<DataTruncation>>[]) Array.newInstance(LinkedList.class, 1);
      ResettableIterator<LinkedList<Iterator<DataTruncation>>> resettableIterator0 = IteratorUtils.arrayIterator(linkedListArray0);
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<LinkedList<Iterator<DataTruncation>>>) resettableIterator0, (Predicate<? super LinkedList<Iterator<DataTruncation>>>) equalPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<BatchUpdateException>) null, (Predicate<? super BatchUpdateException>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<Iterator<DataTruncation>>[] linkedListArray0 = (LinkedList<Iterator<DataTruncation>>[]) Array.newInstance(LinkedList.class, 1);
      ResettableIterator<LinkedList<Iterator<DataTruncation>>> resettableIterator0 = IteratorUtils.arrayIterator(linkedListArray0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      boolean boolean0 = IteratorUtils.matchesAll((Iterator<LinkedList<Iterator<DataTruncation>>>) resettableIterator0, (Predicate<? super LinkedList<Iterator<DataTruncation>>>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Predicate<Object>>) null, (Predicate<? super Predicate<Object>>) anyPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      UniquePredicate<SQLException> uniquePredicate0 = new UniquePredicate<SQLException>();
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[8];
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator0 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      SQLRecoverableException sQLRecoverableException0 = IteratorUtils.find((Iterator<SQLRecoverableException>) objectArrayIterator0, (Predicate<? super SQLRecoverableException>) uniquePredicate0);
      assertNull(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Iterator<InstanceofPredicate> iterator0 = EmptyIterator.emptyIterator();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      InstanceofPredicate instanceofPredicate0 = IteratorUtils.find(iterator0, (Predicate<? super InstanceofPredicate>) nonePredicate0);
      assertNull(instanceofPredicate0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[9];
      ObjectArrayListIterator<SQLRecoverableException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLRecoverableException>) objectArrayListIterator0, (Predicate<? super SQLRecoverableException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLRecoverableException[] sQLRecoverableExceptionArray0 = new SQLRecoverableException[1];
      ObjectArrayIterator<SQLRecoverableException> objectArrayIterator0 = new ObjectArrayIterator<SQLRecoverableException>(sQLRecoverableExceptionArray0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 8);
      InvokerTransformer<Object, DataTruncation> invokerTransformer0 = new InvokerTransformer<Object, DataTruncation>(" must be Comparable", classArray0, sQLRecoverableExceptionArray0);
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(invokerTransformer0, predicate0);
      // Undeclared exception!
      try { 
        IteratorUtils.find((Iterator<SQLRecoverableException>) objectArrayIterator0, (Predicate<? super SQLRecoverableException>) transformedPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Iterator<?> iterator0 = IteratorUtils.getIterator(class0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      Iterator<?> iterator0 = IteratorUtils.getIterator(hashMap0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Collection must not be null", "\"qul)tj+~=D$q.B");
      Iterator<?> iterator0 = IteratorUtils.getIterator(sQLInvalidAuthorizationSpecException0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OrderedMapIterator<Properties, SQLClientInfoException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<Properties, SQLClientInfoException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Properties, SQLClientInfoException>(orderedMapIterator0);
      Iterator<?> iterator0 = IteratorUtils.getIterator(abstractOrderedMapIteratorDecorator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Iterator<?> iterator0 = IteratorUtils.getIterator((Object) null);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("", "", true);
      Iterator<?> iterator0 = IteratorUtils.getIterator(stringTokenizer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ObjectArrayListIterator<String> objectArrayListIterator0 = new ObjectArrayListIterator<String>(stringArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<? extends String>) objectArrayListIterator0, (-608));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Estimated size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toList((Iterator<?>) null, 512);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      SingletonListIterator<IIOMetadataNode> singletonListIterator0 = new SingletonListIterator<IIOMetadataNode>(iIOMetadataNode0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IIOMetadataNode[] iIOMetadataNodeArray0 = IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) singletonListIterator0, class0);
      assertEquals(1, iIOMetadataNodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toArray((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResettableListIterator<SQLNonTransientException> resettableListIterator0 = EmptyListIterator.resettableEmptyListIterator();
      Object[] objectArray0 = IteratorUtils.toArray((Iterator<?>) resettableListIterator0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OrderedMapIterator<DataTruncation, SQLRecoverableException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<DataTruncation, SQLRecoverableException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<DataTruncation, SQLRecoverableException>(orderedMapIterator0);
      ListIterator<SQLWarning> listIterator0 = IteratorUtils.toListIterator((Iterator<? extends SQLWarning>) abstractOrderedMapIteratorDecorator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asMultipleUseIterable((Iterator<? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      Iterable<SQLNonTransientConnectionException> iterable0 = IteratorUtils.asMultipleUseIterable((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MapIterator<SQLSyntaxErrorException, SQLFeatureNotSupportedException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterable<SQLSyntaxErrorException> iterable0 = IteratorUtils.asIterable((Iterator<? extends SQLSyntaxErrorException>) mapIterator0);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asEnumeration((Iterator<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SingletonListIterator<String> singletonListIterator0 = new SingletonListIterator<String>("?:8@`7Z");
      List<String> list0 = IteratorUtils.toList((Iterator<? extends String>) singletonListIterator0, 52);
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends String>) null, (Collection<? super String>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MapIterator<String, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Enumeration<String> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends String>) mapIterator0);
      Stack<String> stack0 = new Stack<String>();
      Iterator<String> iterator0 = IteratorUtils.asIterator((Enumeration<? extends String>) enumeration0, (Collection<? super String>) stack0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.asIterator((Enumeration<? extends SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Enumeration must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[3];
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0, 0, 0);
      Enumeration<SQLNonTransientConnectionException> enumeration0 = IteratorUtils.asEnumeration((Iterator<? extends SQLNonTransientConnectionException>) resettableIterator0);
      Iterator<SQLNonTransientConnectionException> iterator0 = IteratorUtils.asIterator((Enumeration<? extends SQLNonTransientConnectionException>) enumeration0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Node must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeListIterator nodeListIterator0 = IteratorUtils.nodeListIterator((Node) iIOMetadataNode0);
      assertNotNull(nodeListIterator0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.nodeListIterator((NodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // NodeList must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingListIterator((List<Locale>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ArrayList<SQLTimeoutException> arrayList0 = new ArrayList<SQLTimeoutException>();
      ResettableListIterator<SQLTimeoutException> resettableListIterator0 = IteratorUtils.loopingListIterator((List<SQLTimeoutException>) arrayList0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vector<InstanceofPredicate> vector0 = new Vector<InstanceofPredicate>();
      Predicate<Integer> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Integer>>) vector0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends Integer>) null, (Predicate<? super Integer>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException("i.I;-b8G", "org.apache.commons.collections4.list.CursorableLinkedList", sQLException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredListIterator((ListIterator<? extends SQLDataException>) listIterator0, (Predicate<? super SQLDataException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLSyntaxErrorException[] sQLSyntaxErrorExceptionArray0 = new SQLSyntaxErrorException[8];
      ObjectArrayListIterator<SQLSyntaxErrorException> objectArrayListIterator0 = new ObjectArrayListIterator<SQLSyntaxErrorException>(sQLSyntaxErrorExceptionArray0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends SQLSyntaxErrorException>) objectArrayListIterator0, (Predicate<? super SQLSyntaxErrorException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        IteratorUtils.filteredIterator((Iterator<? extends String>) null, (Predicate<? super String>) instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Iterator<String> iterator0 = EmptyIterator.emptyIterator();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Iterator<String> iterator1 = IteratorUtils.filteredIterator((Iterator<? extends String>) iterator0, (Predicate<? super String>) instanceofPredicate0);
      assertFalse(iterator1.equals((Object)iterator0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends SQLNonTransientException>) singletonListIterator0, (Transformer<? super SQLNonTransientException, ? extends IIOMetadataNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Factory<DataTruncation> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, DataTruncation> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends DataTruncation>) factory0);
      // Undeclared exception!
      try { 
        IteratorUtils.transformedIterator((Iterator<? extends ClientInfoStatus>) null, (Transformer<? super ClientInfoStatus, ? extends SQLWarning>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("");
      SingletonListIterator<SQLDataException> singletonListIterator0 = new SingletonListIterator<SQLDataException>(sQLDataException0);
      Transformer<Object, DataTruncation> transformer0 = ExceptionTransformer.exceptionTransformer();
      Iterator<SQLWarning> iterator0 = IteratorUtils.transformedIterator((Iterator<? extends SQLDataException>) singletonListIterator0, (Transformer<? super SQLDataException, ? extends SQLWarning>) transformer0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 4);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super Integer>) comparator0, (Iterator<? extends Integer>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 4);
      // Undeclared exception!
      try { 
        IteratorUtils.skippingIterator(iteratorArray0[0], 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) sQLTimeoutException0, 0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Properties[]) null, 1343);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TreeSet<SQLTransientConnectionException> treeSet0 = new TreeSet<SQLTransientConnectionException>();
      ResettableIterator<SQLTransientConnectionException> resettableIterator0 = IteratorUtils.loopingIterator((Collection<? extends SQLTransientConnectionException>) treeSet0);
      Iterator<SQLTransientException> iterator0 = IteratorUtils.chainedIterator((Iterator<? extends SQLTransientException>) resettableIterator0, (Iterator<? extends SQLTransientException>) resettableIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ResettableIterator<SQLFeatureNotSupportedException> resettableIterator0 = IteratorUtils.emptyIterator();
      boolean boolean0 = IteratorUtils.isEmpty(resettableIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MapIterator<SQLDataException, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      Iterator<SQLDataException> iterator0 = IteratorUtils.unmodifiableIterator((Iterator<SQLDataException>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Iterator<StringTokenizer>[] iteratorArray0 = (Iterator<StringTokenizer>[]) Array.newInstance(Iterator.class, 4);
      LinkedList<StringTokenizer> linkedList0 = new LinkedList<StringTokenizer>();
      ReverseListIterator<StringTokenizer> reverseListIterator0 = new ReverseListIterator<StringTokenizer>(linkedList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IteratorUtils.collatedIterator((Comparator<? super StringTokenizer>) comparator0, (Iterator<? extends StringTokenizer>) reverseListIterator0, (Iterator<? extends StringTokenizer>) iteratorArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.CollatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Stack<SQLInvalidAuthorizationSpecException>[] stackArray0 = (Stack<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Stack.class, 3);
      ResettableListIterator<Stack<SQLInvalidAuthorizationSpecException>> resettableListIterator0 = IteratorUtils.arrayListIterator(stackArray0, 0, 0);
      assertFalse(resettableListIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator(integerArray0, 1380, 131);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // End index must not be greater than the array length
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OrderedMapIterator<HashSet<Predicate<Object>>, SQLException> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      AbstractOrderedMapIteratorDecorator<HashSet<Predicate<Object>>, SQLException> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<HashSet<Predicate<Object>>, SQLException>(orderedMapIterator0);
      String string0 = IteratorUtils.toString((Iterator<HashSet<Predicate<Object>>>) abstractOrderedMapIteratorDecorator0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Integer integer0 = new Integer(599);
      ListIterator<Integer> listIterator0 = IteratorUtils.singletonListIterator(integer0);
      ZippingIterator<Integer> zippingIterator0 = IteratorUtils.zippingIterator((Iterator<? extends Integer>) listIterator0, (Iterator<? extends Integer>) listIterator0);
      List<Integer> list0 = IteratorUtils.toList((Iterator<? extends Integer>) zippingIterator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0];
      ResettableIterator<SQLNonTransientConnectionException> resettableIterator0 = IteratorUtils.arrayIterator(sQLNonTransientConnectionExceptionArray0);
      BoundedIterator<SQLNonTransientException> boundedIterator0 = IteratorUtils.boundedIterator((Iterator<? extends SQLNonTransientException>) resettableIterator0, (long) 599);
      assertNotNull(boundedIterator0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Iterator<SQLFeatureNotSupportedException>[] iteratorArray0 = (Iterator<SQLFeatureNotSupportedException>[]) Array.newInstance(Iterator.class, 1);
      // Undeclared exception!
      try { 
        IteratorUtils.chainedIterator((Iterator<? extends SQLFeatureNotSupportedException>[]) iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("D{");
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Iterator<BatchUpdateException>[] iteratorArray0 = (Iterator<BatchUpdateException>[]) Array.newInstance(Iterator.class, 3);
      // Undeclared exception!
      try { 
        IteratorUtils.pushbackIterator((Iterator<? extends BatchUpdateException>) iteratorArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.PushbackIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator(object0, (-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((StringTokenizer[]) null, (-292));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectArrayIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayListIterator((Object) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MapIterator<String, SQLNonTransientException> mapIterator0 = IteratorUtils.emptyMapIterator();
      Iterator<String> iterator0 = IteratorUtils.peekingIterator((Iterator<? extends String>) mapIterator0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OrderedMapIterator<IIOMetadataNode, SQLInvalidAuthorizationSpecException> orderedMapIterator0 = IteratorUtils.emptyOrderedMapIterator();
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      boolean boolean0 = IteratorUtils.contains((Iterator<IIOMetadataNode>) orderedMapIterator0, (Object) sQLDataException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        IteratorUtils.arrayIterator((Object) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OrderedIterator<SQLRecoverableException> orderedIterator0 = IteratorUtils.emptyOrderedIterator();
      assertNotNull(orderedIterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      IIOMetadataNode[] iIOMetadataNodeArray0 = new IIOMetadataNode[0];
      ResettableListIterator<IIOMetadataNode> resettableListIterator0 = IteratorUtils.arrayListIterator(iIOMetadataNodeArray0);
      Class<IIOMetadataNode> class0 = IIOMetadataNode.class;
      IIOMetadataNode[] iIOMetadataNodeArray1 = IteratorUtils.toArray((Iterator<? extends IIOMetadataNode>) resettableListIterator0, class0);
      assertEquals(0, iIOMetadataNodeArray1.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException("i.I;-b8G", "org.apache.commons.collections4.list.CursorableLinkedList", sQLException0);
      ListIterator<SQLDataException> listIterator0 = IteratorUtils.singletonListIterator(sQLDataException0);
      ListIterator<SQLDataException> listIterator1 = IteratorUtils.unmodifiableListIterator(listIterator0);
      assertFalse(listIterator1.hasPrevious());
  }
}
