/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 07:13:02 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xf");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0_Y{,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+%uX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      short short0 = NumberUtils.max((short)1018, (short) (-1224), (short)686);
      assertEquals((short)1018, short0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = NumberUtils.max((-2879), (-2879), (-1073741823));
      assertEquals((-2879), int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-1), (byte) (-1), (byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short short0 = NumberUtils.min((short)16, (short)43, (short) (byte)36);
      assertEquals((short)16, short0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) numberUtils0.SHORT_ONE, (short)1930, (short) numberUtils0.BYTE_ONE);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = NumberUtils.min((long) (short)16, (long) (short)1442, (long) (short)16);
      assertEquals(16L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = 693.3F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(693.3F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)65;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)65, short0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)2017;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (int) (byte)65;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1784L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1784L), long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      try { 
        NumberUtils.createNumber("#cgK0X;kG.'*I aVe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"cgK0X;kG.'*I aVe\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      short short0 = NumberUtils.toShort(">g", (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short short0 = NumberUtils.toShort("0x", (short) (-1241));
      assertEquals((short) (-1241), short0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short short0 = NumberUtils.toShort("2");
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = NumberUtils.toLong("3\">K`V>I/o}=K`", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = NumberUtils.toLong("7");
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = NumberUtils.toInt("@w", (-2879));
      assertEquals((-2879), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = NumberUtils.toInt(")vIM");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = NumberUtils.toInt("2");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = NumberUtils.toFloat("0", 1362.4F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float float0 = NumberUtils.toFloat("5*");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float float0 = NumberUtils.toFloat("7");
      assertEquals(7.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = NumberUtils.toDouble("nd}@yQ", 495.41);
      assertEquals(495.41, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = NumberUtils.toDouble("8");
      assertEquals(8.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-2.");
      assertEquals((-2.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("7v!{zfA?h", (byte)94);
      assertEquals((byte)94, byte0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("4");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-2");
      assertEquals((byte) (-2), byte0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1904;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)1904, short0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[4] = (short) (-1166);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1166), short0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)4;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (-1296);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1296), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2700.0F;
      floatArray0[1] = 92.0F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(92.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2734.0758104;
      doubleArray0[1] = 2890.48500682;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(2734.0758104, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1326.965311);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1326.965311), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)17, byte0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-63);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-63), byte0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      short short0 = NumberUtils.min((short)0, (short)0, (short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = NumberUtils.min((long) (byte)70, 469L, 469L);
      assertEquals(70L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = NumberUtils.min(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = NumberUtils.min((-1), 367, 4455);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = NumberUtils.min(256.0F, 171.739F, 1869.04F);
      assertEquals(171.739F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float float0 = NumberUtils.min((-18.738178F), (-18.738178F), (float) (short)57);
      assertEquals((-18.738178F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = NumberUtils.min(0.0, 2317.9445, (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = NumberUtils.min((double) (byte) (-1), (double) (byte) (-17), (double) (byte) (-17));
      assertEquals((-17.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[2] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)117;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(117, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1740);
      intArray0[1] = (-558);
      intArray0[2] = (-1740);
      intArray0[3] = (-558);
      intArray0[4] = (-1740);
      intArray0[5] = (-1740);
      intArray0[6] = (-1740);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-558), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-415L);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-415.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1792.9467192144668;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1792.9467192144668, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte) (-17);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-93);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-18), byte0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      short short0 = NumberUtils.max((short)0, (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1113), (short) (-3), (short) (-60));
      assertEquals((short) (-3), short0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = NumberUtils.max((float) (short)2232, (float) (short)2232, 0.0F);
      assertEquals(2232.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float float0 = NumberUtils.max((-2725.259F), (-2725.259F), (-2725.259F));
      assertEquals((-2725.259F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = NumberUtils.max((-1.0), (double) 0.0F, (-2535.372));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = NumberUtils.max((-2008.9), (-1951.6698), (-2008.9));
      assertEquals((-1951.6698), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-90), (byte) (-41), (byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0xf");
      assertEquals((-15L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("7");
      assertEquals(7, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0xf");
      assertEquals((-15), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("3");
      assertEquals(3.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-.34d");
      assertEquals((-0.34F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("2");
      assertEquals(2.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-2");
      assertEquals((-2.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("7");
      assertEquals((byte)7, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-2");
      assertEquals((short) (-2), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("l");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("-+)H VWn ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Sign character in wrong position
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("(=: SR~*<K3D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(=: SR~*<K3D\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("^1Hvh{K~5~Ri");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("--");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -- is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal(" vs ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("R[ce16fS`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"R[ce16fS`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0_Y{,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_Y{,\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-0xCe");
      assertEquals((short) (-206), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Long long0 = NumberUtils.createLong("4");
      assertEquals(4L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("0x9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)1726);
      assertEquals((short)1726, short0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("lJ|p;5~+H+8aBCL#TT", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte) (-100));
      assertEquals((byte) (-100), byte0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-0X", (-925.550999343));
      assertEquals((-925.550999343), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float float0 = NumberUtils.toFloat("okf7tSq&hq%~eu?;", (-3346.154F));
      assertEquals((-3346.154F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (-882L));
      assertEquals((-882L), long0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long long0 = NumberUtils.toLong("Ch<;W=$*W61=3m<t", 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = NumberUtils.toInt("0x-*-", (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("9E?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0.E.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("5e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("00");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--Y|[J");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e*]zFTS<j]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("53e9e=lm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8EL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xa%KjYFa");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xDd");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xcAB;h^|sAiY[7d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0.L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-2.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("3e+{g$IxZzijU*j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)43, (byte)36, (byte)117);
      assertEquals((byte)117, byte0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)68, (byte)76, (byte)68);
      assertEquals((byte)76, byte0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      short short0 = NumberUtils.max((short)97, (short)256, (short)2232);
      assertEquals((short)2232, short0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = NumberUtils.max((int) (byte) (-97), (int) (short) (-97), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = NumberUtils.max(872, 2146285636, 2146285636);
      assertEquals(2146285636, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = NumberUtils.max((-558), (-1740), (-558));
      assertEquals((-558), int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long long0 = NumberUtils.max(0L, 0L, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      long long0 = NumberUtils.max((-1877L), (long) (short)0, (long) (short)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)70, (byte)89, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)18, (byte)4, (byte)43);
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      short short0 = NumberUtils.min((short)3931, (short)0, (short) (-1));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = NumberUtils.min(3029, (int) (short)43, (int) (short)43);
      assertEquals(43, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = NumberUtils.min(3029, 8192, (int) (short)43);
      assertEquals(43, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long long0 = NumberUtils.min((long) (byte)117, 1906L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long long0 = NumberUtils.min(0L, (-1824L), 0L);
      assertEquals((-1824L), long0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long long0 = NumberUtils.min((long) (byte) (-90), (long) (byte) (-90), (long) (byte)3);
      assertEquals((-90L), long0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1761.9F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[5] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) (byte) (-1);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)5;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (byte)126;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)126, short0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1740);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = 994L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(994L, long0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      long[] longArray0 = new long[7];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-1416.2F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1416.2F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2082.2495;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-1431L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1431L), long0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--4");
      assertEquals((byte)4, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("#Ce");
      assertEquals((short)206, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0.");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        NumberUtils.createNumber("--.>/%K5Nmw=OD9X !15");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --.>/%K5Nmw=OD9X !15 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0EH:Gb_59");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0fF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0fF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("01F");
      assertEquals(1.0F, number0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-8L");
      assertEquals((-8L), number0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        NumberUtils.createNumber("17 .y+.1c/cL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 17 .y+.1c/cL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("4l");
      assertEquals(4L, number0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        NumberUtils.createNumber("(6_w+vH f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // (6_w+vH f is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".4d");
      assertEquals(0.4, number0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        NumberUtils.createNumber("D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0EHEs:b\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0EHEs:b\" is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.F");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        NumberUtils.createNumber("cgK0X;kG.'*I aVe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // cgK0X;kG.'*I aVe is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        NumberUtils.createNumber(":V,'C$oEe)5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // :V,'C$oEe)5 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        NumberUtils.createNumber("EA~%N-'mz'|pte5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        NumberUtils.createNumber("bie.Ts:] 7E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // bie.Ts:] 7E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        NumberUtils.createNumber("E28I+.S:&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // E28I+.S:& is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-2.");
      assertEquals((-2.0F), number0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      try { 
        NumberUtils.createNumber("08L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        NumberUtils.createNumber("#04{Udy}[x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"04{Udy}[x\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x*@.\"x1@9NNt@l.1sZj");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*@.\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0X00");
      assertEquals(0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, (double) (byte)0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (float) (short)126);
      assertEquals(126.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, 3262);
      assertEquals(3262, int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      short short0 = NumberUtils.toShort("-2");
      assertEquals((short) (-2), short0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-2.");
      assertEquals((-2.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = NumberUtils.toInt("-2");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      long long0 = NumberUtils.toLong("-2");
      assertEquals((-2L), long0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double double0 = NumberUtils.max((-423.154678372231), 1.0, (-510.375));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.max((long) numberUtils0.INTEGER_MINUS_ONE, (-1824L), (-415L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double double0 = NumberUtils.min(1793.247280591, 3325.0, 1793.247280591);
      assertEquals(1793.247280591, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double double0 = NumberUtils.toDouble("0");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      float float0 = NumberUtils.min(0.0F, 1.0F, 2498.2776F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      float float0 = NumberUtils.max(0.0F, (-4268.809F), (-4268.809F));
      assertEquals(0.0F, float0, 0.01F);
  }
}
