/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 04:45:56 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xArraycannot beemty.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xaRPgSk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x9^\u0006b*~<~Gc6.QwP!D`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-1), (byte) (-94), (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short short0 = NumberUtils.max((short)5, (short)5, (short)5);
      assertEquals((short)5, short0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short short0 = NumberUtils.max((short)65, (short) (-140), (short) (-93));
      assertEquals((short)65, short0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = NumberUtils.max(1791L, 0L, 0L);
      assertEquals(1791L, long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-1), (byte)0, (byte)100);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short short0 = NumberUtils.min((short)10, (short)3338, (short)3821);
      assertEquals((short)10, short0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = NumberUtils.min(10, (int) (short) (-1), 327);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = NumberUtils.min((-1012), (-1012), (-1012));
      assertEquals((-1012), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = NumberUtils.min((-1L), 15L, 0L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)1285;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1285, short0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)109;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(109, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[3] = (-1L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        NumberUtils.createNumber("#+<ep&#!8Ap_|{B>>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Sign character in wrong position
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        NumberUtils.createNumber("08l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      short short0 = NumberUtils.toShort("9($CW", (short)100);
      assertEquals((short)100, short0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      short short0 = NumberUtils.toShort("3");
      assertEquals((short)3, short0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      short short0 = NumberUtils.toShort("-08");
      assertEquals((short) (-8), short0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = NumberUtils.toLong("0", (long) (byte) (-16));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = NumberUtils.toLong("uk-ePL+e@)", (-643L));
      assertEquals((-643L), long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = NumberUtils.toLong("5");
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = NumberUtils.toInt("q=K9JHBlE{n", 351);
      assertEquals(351, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = NumberUtils.toInt(")pD38[~;=V!Y)aI$\"", (-2131));
      assertEquals((-2131), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = NumberUtils.toInt("7");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", (float) 395L);
      assertEquals(395.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float float0 = NumberUtils.toFloat("2");
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-2");
      assertEquals((-2.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = NumberUtils.toDouble(" x3YdSWpp-", 3623.478580702257);
      assertEquals(3623.478580702257, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = NumberUtils.toDouble("FTLB`trL", (double) (-905.216F));
      assertEquals((-905.2160034179688), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = NumberUtils.toDouble("2");
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-08");
      assertEquals((-8.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte byte0 = NumberUtils.toByte(";m<ss&n9", (byte)124);
      assertEquals((byte)124, byte0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("Strings must not be null", (byte) (-88));
      assertEquals((byte) (-88), byte0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("1");
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2545;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)2545, short0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      short[] shortArray0 = new short[23];
      shortArray0[4] = (short) (-1);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)2128;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(2128L, long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1002;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(1002, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2342);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-2342), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)1;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-5542.0F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-5542.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 436.228853;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(436.228853, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)65;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)30, byte0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-88);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-88), byte0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      short short0 = NumberUtils.min((short)0, (short)0, (short) (-1));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float float0 = NumberUtils.min(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float float0 = NumberUtils.min(555.84863F, 555.84863F, 555.84863F);
      assertEquals(555.84863F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = NumberUtils.min(1841.6461, 0.0, 1841.6461);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = NumberUtils.min(985.65899, 1.0, 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)30, (byte)30, (byte)30);
      assertEquals((byte)30, byte0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)73;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)73, short0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-11);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-11), short0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 1L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1335L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-1335L), long0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 5;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1049);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-1049), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) (byte)109;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(109.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1238.456F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-1238.456F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-5542.0F);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-5542.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)21;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)21, byte0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-51), byte0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = NumberUtils.max((-1267L), (-1267L), (-1267L));
      assertEquals((-1267L), long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = NumberUtils.max(0, (-395), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = NumberUtils.max((-1), (-1), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float float0 = NumberUtils.max((-430.76F), 0.0F, (-5542.0F));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float float0 = NumberUtils.max((-947.26F), (-947.26F), (-1440.1144F));
      assertEquals((-947.26F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = NumberUtils.max((-1.0), 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = NumberUtils.max((-6743.102823645), (-2047.778600401276), (-2047.778600401276));
      assertEquals((-2047.778600401276), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)104, (byte)104, (byte)0);
      assertEquals((byte)104, byte0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Long long0 = NumberUtils.createLong("7");
      assertEquals(7L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0x0D");
      assertEquals((-13L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("2");
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-1");
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("5");
      assertEquals(5.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-08");
      assertEquals((-8.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("8");
      assertEquals(8.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-08");
      assertEquals((-8.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("5");
      assertEquals((byte)5, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("5");
      assertEquals((byte)5, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-08");
      assertEquals((byte) (-8), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("l");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("Eo{~\"d+8w-Z;O");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("--.-AbGat3#~}*3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --.-AbGat3#~}*3 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("Aborting to protect against StackOverflowError - output of one loop is the input of another");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("j");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("...");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"...\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("+^k(:%r");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("0x:MvBu.he{*\"f{*SC x4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      short short0 = NumberUtils.toShort("-", (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, (double) 0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, 1941L);
      assertEquals(1941L, long0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = NumberUtils.toInt("", (int) (short)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".-AbGaRt3H#~}*3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("6+AqcANl9RY0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("EeDcU4mK3\"]qV}F/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4eE&dqL0S}Xb,F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("08el");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x#1-m!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x0D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-08");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x4f>tc");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-106), (byte) (-32), (byte) (-106));
      assertEquals((byte) (-32), byte0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-1), (byte) (-1), (byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-4249), (short) (-581), (short) (-11257));
      assertEquals((short) (-581), short0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-11257), (short) (-1241), (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = NumberUtils.max((-2691), (-250), 2028);
      assertEquals(2028, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = NumberUtils.max(69, (-1721), (-1721));
      assertEquals(69, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = NumberUtils.max((-1L), 395L, 314L);
      assertEquals(395L, long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long long0 = NumberUtils.max((-1267L), (-1267L), 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)109, (byte) (-86), (byte) (-86));
      assertEquals((byte) (-86), byte0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)109, (byte)109, (byte) (-86));
      assertEquals((byte) (-86), byte0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      short short0 = NumberUtils.min((short)1753, (short)7, (short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      short short0 = NumberUtils.min((short)338, (short)338, (short)338);
      assertEquals((short)338, short0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = NumberUtils.min(196, 192, (-109));
      assertEquals((-109), int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = NumberUtils.min(195, 192, 192);
      assertEquals(192, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = NumberUtils.min((int) (byte)0, 3467, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      long long0 = NumberUtils.min((-1L), (-1654L), (-1813L));
      assertEquals((-1813L), long0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long long0 = NumberUtils.min(1285L, (long) (short)0, 16L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long long0 = NumberUtils.min(1791L, 1791L, 1791L);
      assertEquals(1791L, long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-766.318F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = 1285.0;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1285.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-70);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1550);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 763.97784F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (byte) (-51);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-51.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3884;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)3005;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (-1959L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1959L), long0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      try { 
        NumberUtils.createNumber("--.-AbGWRls#~*3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --.-AbGWRls#~*3 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"F\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-0xc");
      assertEquals((short) (-12), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--8");
      assertEquals((byte)8, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".0");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".-AbGhLNSJaBtP#}*3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("2E4");
      assertEquals(20000.0F, number0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        NumberUtils.createNumber("8jieW1UpY0<:E*G4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8jieW1U\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("60F");
      assertEquals(60.0F, number0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      try { 
        NumberUtils.createNumber("--8l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --8l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-5l");
      assertEquals((-5L), number0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        NumberUtils.createNumber("p.>j]v/EaP)ql");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // p.>j]v/EaP)ql is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        NumberUtils.createNumber("f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // f is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        NumberUtils.createNumber("ud[(?`VeL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ud[(?`VeL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      try { 
        NumberUtils.createNumber("U6!9y@.L,wp-%YvJwD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // U6!9y@.L,wp-%YvJwD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.ko;L%reDJ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.ko;L%reDJ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Mgu,eYs7u3dc5FSd");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Mgu,eYs7u3dc5FSd is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      try { 
        NumberUtils.createNumber("h{xDL8ZAeEWt#Ra-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // h{xDL8ZAeEWt#Ra- is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      try { 
        NumberUtils.createNumber("7jieW1>pY0.EG4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 7jieW1>pY0.EG4 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.-ae_5*tX3H*?R{}*3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0xhs^M|Tq\"H(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-hs^M|Tq\"H(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      try { 
        NumberUtils.createNumber("#A blank string is not a valid number");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" blank \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      try { 
        NumberUtils.createNumber("\r");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x4f>tc");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"4f>tc\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short) (-2275));
      assertEquals((short) (-2275), short0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      short short0 = NumberUtils.toShort("0.");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int int0 = NumberUtils.toInt("-08");
      assertEquals((-8), int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      long long0 = NumberUtils.toLong("-08");
      assertEquals((-8L), long0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double double0 = NumberUtils.max(813.7254990531, 119.94808, 0.0);
      assertEquals(813.7254990531, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-08");
      assertEquals((byte) (-8), byte0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double double0 = NumberUtils.min(1.0, (double) (-5542.0F), 1.0);
      assertEquals((-5542.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      float float0 = NumberUtils.min((-773.3166F), (-773.3166F), 403.69F);
      assertEquals((-773.3166F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      float float0 = NumberUtils.max((float) (byte)109, (float) (byte)109, 0.0F);
      assertEquals(109.0F, float0, 0.01F);
  }
}
