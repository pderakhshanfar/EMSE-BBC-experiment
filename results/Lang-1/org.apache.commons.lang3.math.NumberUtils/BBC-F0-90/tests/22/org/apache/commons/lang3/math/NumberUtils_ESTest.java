/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 04:58:33 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xa7:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xC19 Dv|B,!1kOX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0{[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = NumberUtils.max((long) (short)1, 1L, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-22), (byte) (-20), (byte) (-20));
      assertEquals((byte) (-22), byte0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      short short0 = NumberUtils.min((short)1, (short)1, (short)1);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short short0 = NumberUtils.toShort("A blank string is not a valid number", (short) (-4869));
      assertEquals((short) (-4869), short0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short short0 = NumberUtils.toShort("-8");
      assertEquals((short) (-8), short0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = NumberUtils.toLong("", (long) (short)43);
      assertEquals(43L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = NumberUtils.toLong("-1");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = NumberUtils.toInt("", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = NumberUtils.toInt("0x", (-142492359));
      assertEquals((-142492359), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = NumberUtils.toInt("3O");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = NumberUtils.toInt("6");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float float0 = NumberUtils.toFloat("qdD!Tbn@", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-#0F");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float float0 = NumberUtils.toFloat("2");
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = NumberUtils.toDouble("", (double) (-524));
      assertEquals((-524.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = NumberUtils.toDouble("8");
      assertEquals(8.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("r[(~", (byte) (-41));
      assertEquals((byte) (-41), byte0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-7");
      assertEquals((byte) (-7), byte0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)48;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)48, short0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)63;
      longArray0[1] = (long) (short)63;
      longArray0[2] = (long) (short)63;
      longArray0[3] = 4032L;
      longArray0[4] = (long) (short)63;
      longArray0[5] = (long) (short)63;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(63L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-20);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-20L), long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)5;
      intArray0[1] = (int) (short)5;
      intArray0[2] = (int) (short)5;
      intArray0[3] = (int) (short)4554;
      intArray0[4] = (int) (short)5;
      intArray0[5] = (int) (short)63;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-927);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-927), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 10.0F;
      floatArray0[1] = 239.9F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(10.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[6] = (-923.0903F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-923.0903F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)48;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(48.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (-1.0);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte)62;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)36, byte0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-45);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-45), byte0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = NumberUtils.min((-3499L), (long) (byte)1, (long) (byte)100);
      assertEquals((-3499L), long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = NumberUtils.min((int) (short)45, 2901, 4554);
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float float0 = NumberUtils.min(1.0F, 2108.639F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float float0 = NumberUtils.min(1230.0F, (float) 0L, (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = NumberUtils.min(0.0, 0.0, 77.6718866);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = NumberUtils.min(1070.2937089, (-844.1), (-1685.279689));
      assertEquals((-1685.279689), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-125);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-125), short0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 374L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(374L, long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-20);
      longArray0[1] = (long) (short) (-20);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-20L), long0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-20);
      intArray0[1] = (int) (byte) (-20);
      intArray0[2] = (int) (byte) (-20);
      intArray0[3] = (int) (byte) (-20);
      intArray0[4] = (int) (byte) (-20);
      intArray0[5] = (int) (byte) (-20);
      intArray0[6] = (int) (byte) (-20);
      intArray0[7] = (int) (byte) (-20);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-20), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1380L);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-1380.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-310.45068);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) (short) (-2330);
      doubleArray0[4] = (double) (-1575);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (double) (short) (-2330);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)21;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)21, byte0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-114);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-114), byte0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-2257), (short) (byte)0, (short) (byte) (-6));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-127), (short) (-127), (short) (-127));
      assertEquals((short) (-127), short0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = NumberUtils.max((-143L), (-2189L), (-987L));
      assertEquals((-143L), long0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = NumberUtils.max((-1348), (-1348), (-1348));
      assertEquals((-1348), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float float0 = NumberUtils.max(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float float0 = NumberUtils.max((-2165.7239F), (-2165.7239F), (-683.654F));
      assertEquals((-683.654F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = NumberUtils.max((double) 0.0F, (-3113.267746073759), (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = NumberUtils.max((-574.34710505), (double) (-1320.9572F), (-574.34710505));
      assertEquals((-574.34710505), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-20), (byte) (-22), (byte) (-112));
      assertEquals((byte) (-20), byte0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0X0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0X0d");
      assertEquals((-13L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0x0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0X0d");
      assertEquals((-13), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("2");
      assertEquals(2.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-4.");
      assertEquals((-4.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("3");
      assertEquals(3.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("3");
      assertEquals((byte)3, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("28");
      assertEquals((byte)28, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("l");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("Ar");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ar\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("&{jnB>^VgGEwn^[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"&{jnB>^VgGEwn^[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("0X0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("i_1-N");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("--");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -- is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-1");
      assertEquals((byte) (-1), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-#0F");
      assertEquals((short) (-15), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Long long0 = NumberUtils.createLong("3");
      assertEquals(3L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0xF");
      assertEquals(15, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-8");
      assertEquals((-8.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)1257);
      assertEquals((short)1257, short0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      short short0 = NumberUtils.toShort("v&7GXV", (short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("k", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte)89);
      assertEquals((byte)89, byte0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = NumberUtils.toDouble("", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float float0 = NumberUtils.toFloat("II!qz5Jx>WN]", (-2311.5425F));
      assertEquals((-2311.5425F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = NumberUtils.toLong("Strings must not be null", (long) (-1575));
      assertEquals((-1575L), long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = NumberUtils.toInt("0x", 619);
      assertEquals(619, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0ea");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+0Q=.<O=1.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("EE7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8El");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xfz4=_l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xA lank strin is nt a valid number");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0e-00e0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte)5);
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)38, (byte) (-20));
      assertEquals((byte)38, byte0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      short short0 = NumberUtils.max((short)16, (short)16, (short)2117);
      assertEquals((short)2117, short0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      short short0 = NumberUtils.max((short)2365, (short)614, (short)108);
      assertEquals((short)2365, short0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = NumberUtils.max((int) (short)10, (-2330), 1402);
      assertEquals(1402, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = NumberUtils.max((-524), 0, (-524));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = NumberUtils.max((long) (-6), (long) (-6), 3862L);
      assertEquals(3862L, long0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = NumberUtils.max((-46L), 3566L, (-46L));
      assertEquals(3566L, long0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = NumberUtils.max(0L, 0L, (-1L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)68, (byte)26, (byte)105);
      assertEquals((byte)26, byte0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-20), (byte) (-20), (byte) (-20));
      assertEquals((byte) (-20), byte0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short short0 = NumberUtils.min((short)783, (short)10, (short) (-1534));
      assertEquals((short) (-1534), short0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      short short0 = NumberUtils.min((short)13, (short)0, (short)1965);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      short short0 = NumberUtils.min((short)5, (short)4554, (short)4554);
      assertEquals((short)5, short0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = NumberUtils.min(48, 3, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = NumberUtils.min((-3998), (-3998), (-3998));
      assertEquals((-3998), int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = NumberUtils.min((long) (byte)58, 1L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long long0 = NumberUtils.min((long) 16, 1L, (long) 7);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long long0 = NumberUtils.min(0L, (long) 0, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[3] = (float) 1402;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1402.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[3] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) (short)741;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(741.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-48);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)2332;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)2332, short0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = 1566;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1566, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-188L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[3] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 193.0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[5] = (short) (-2992);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-2992), short0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 48;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("--0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0?v+WRUo]uRo21l/V?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0x7elW");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7elW\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("4.");
      assertEquals(4.0F, number0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0.");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".bBz[!ar=ms35388SY9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0...");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      try { 
        NumberUtils.createNumber("--n;nod(IrVQJ6HE4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --n;nod(IrVQJ6HE4 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("3");
      assertEquals(3, number0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1d");
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0l");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-ffz4=_Ml");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -ffz4=_Ml is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Strings must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        NumberUtils.createNumber("P.n/7OodN> 2bz~l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // P.n/7OodN> 2bz~l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        NumberUtils.createNumber("]slfzmbQ|]cS{Ef");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ]slfzmbQ|]cS{Ef is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      try { 
        NumberUtils.createNumber("JQ5>;u!jj-II?L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // JQ5>;u!jj-II?L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("90F");
      assertEquals(90.0F, number0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        NumberUtils.createNumber("ZcqcD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ZcqcD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        NumberUtils.createNumber("GES)~^r(Pa1e6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"GES)\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        NumberUtils.createNumber("xxQM{eBiE/; y");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // xxQM{eBiE/; y is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0E_!?bO=[pbT!b");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E_!?bO=[pbT!b is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".p%CYAR1}eYEAakg");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .p%CYAR1}eYEAakg is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.eY..");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.d");
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x0xC19 Dv|B,!1kOX");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0xC19 Dv|B,!1kOX\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-#org.apache.commons.lang3.math.NumberUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.ap\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0x0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-00l");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (float) (short)63);
      assertEquals(63.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, 3376);
      assertEquals(3376, int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      short short0 = NumberUtils.toShort("3");
      assertEquals((short)3, short0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-1");
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = NumberUtils.toInt("-1");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      long long0 = NumberUtils.toLong("3");
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double double0 = NumberUtils.max(1269.42, 45.0, 21.0);
      assertEquals(1269.42, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("8");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte)89, (byte)22, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double double0 = NumberUtils.min(2108.638916015625, 3654.893355204062, 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-1");
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      float float0 = NumberUtils.min(2108.639F, 2108.639F, 2108.639F);
      assertEquals(2108.639F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      float float0 = NumberUtils.max((float) (-20), (float) (-20), 48.0F);
      assertEquals(48.0F, float0, 0.01F);
  }
}
