/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 09:49:05 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xA blank string is not a valid number");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xf");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0X(`Lz{LZ<}+f$ (T9;e2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0zF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+Pg5mi|F7qT%XA'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      short short0 = NumberUtils.max((short)1544, (short)1544, (short)1544);
      assertEquals((short)1544, short0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = NumberUtils.max((long) (byte)4, (-2542L), (long) (byte)4);
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)45;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)45, short0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short short0 = NumberUtils.toShort("?|5}$iG)a", (short) (-605));
      assertEquals((short) (-605), short0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      short short0 = NumberUtils.toShort("47");
      assertEquals((short)47, short0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = NumberUtils.toLong("The Array must not be null", (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = NumberUtils.toLong("b9wvoL5a!=", 210L);
      assertEquals(210L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = NumberUtils.toLong("4");
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = NumberUtils.toLong("-84");
      assertEquals((-84L), long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = NumberUtils.toInt("-0x", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = NumberUtils.toInt("8C\r&3rr/ ,@] I4", (-2745));
      assertEquals((-2745), int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = NumberUtils.toInt("4");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = NumberUtils.toInt("-3");
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float float0 = NumberUtils.toFloat("{wHJ", (float) (byte)0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float float0 = NumberUtils.toFloat("4");
      assertEquals(4.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-1");
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = NumberUtils.toDouble("", (double) 1794L);
      assertEquals(1794.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-98");
      assertEquals((-98.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("0", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("\r", (byte)81);
      assertEquals((byte)81, byte0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("2");
      assertEquals((byte)2, byte0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-3");
      assertEquals((byte) (-3), byte0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)77;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)77, short0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)7;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1283);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1283L), long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2817;
      intArray0[1] = 620;
      intArray0[2] = 425;
      intArray0[3] = 8;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1283);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1283), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 215.3838F;
      floatArray0[1] = (float) (byte)65;
      floatArray0[2] = 215.3838F;
      floatArray0[3] = 215.3838F;
      floatArray0[4] = 215.3838F;
      floatArray0[5] = 215.3838F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(65.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = (-1.0F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)1734;
      doubleArray0[1] = (double) (short)1734;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(1734.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)16;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)16, byte0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = NumberUtils.min(1524L, 1862L, 1524L);
      assertEquals(1524L, long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = NumberUtils.min(0, (int) (byte)0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float float0 = NumberUtils.min(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float float0 = NumberUtils.min((float) 5, (float) (byte)50, (float) 76);
      assertEquals(5.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = NumberUtils.min(0.0, (double) (short)8, 2160.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = NumberUtils.min((double) (-785), (double) (-785), (-1.0));
      assertEquals((-785.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-65);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-65), short0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1310);
      longArray0[1] = (long) (-1310);
      longArray0[2] = (long) (-1310);
      longArray0[3] = (long) (-1310);
      longArray0[4] = (long) (-1310);
      longArray0[5] = (long) (-1310);
      longArray0[6] = (long) (-1310);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-1310L), long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-42);
      intArray0[1] = (int) (byte) (-42);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-42), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[3] = 2274.0F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(2274.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1600.0048F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-1600.0048F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1283);
      doubleArray0[2] = (double) (-1048);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)10;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-108);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-4), byte0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      short short0 = NumberUtils.max((short) (byte) (-43), (short) (byte) (-36), (short) (-818));
      assertEquals((short) (-36), short0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = NumberUtils.max((long) (byte)0, (long) (byte)0, (-1L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = NumberUtils.max((-1283), (-3848), (-1283));
      assertEquals((-1283), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = NumberUtils.max((float) (short) (-1), 0.0F, (-297.62793F));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float float0 = NumberUtils.max(1172.7013F, (float) (-2745), 3304.0F);
      assertEquals(3304.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float float0 = NumberUtils.max((-5368.91F), (-5368.91F), (-5368.91F));
      assertEquals((-5368.91F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = NumberUtils.max((-1283.6636178902), 0.0, (double) 0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = NumberUtils.max((double) (short)1734, 4745.4, 4745.4);
      assertEquals(4745.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = NumberUtils.max((-2254.081058167805), (double) (-61L), (double) (byte) (-61));
      assertEquals((-61.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-74), (byte) (-74), (byte) (-14));
      assertEquals((byte) (-14), byte0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--1");
      assertEquals((short)1, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Long long0 = NumberUtils.createLong("#a");
      assertEquals(10L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-#4");
      assertEquals((-4L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("8");
      assertEquals(8, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-#a");
      assertEquals((-10), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("2");
      assertEquals(2.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-5");
      assertEquals((-5.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("2");
      assertEquals(2.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("2");
      assertEquals((byte)2, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("2");
      assertEquals((short)2, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-3");
      assertEquals((short) (-3), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("#{~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{~\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("(?: s|[s&&[^ ]])s*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("HR[Z*sWmayYm.-y7xj6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("--0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("--");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -- is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("0x01d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0X\"j1w6~&E.)o");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-#a");
      assertEquals((byte) (-10), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("SMr 5[=x;N");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"SMr 5[=x;N\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-08");
      assertEquals((-8.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)4323);
      assertEquals((short)4323, short0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      short short0 = NumberUtils.toShort("0x", (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("K", (byte) (-58));
      assertEquals((byte) (-58), byte0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = NumberUtils.toDouble("", (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, 1969.6116F);
      assertEquals(1969.6116F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float float0 = NumberUtils.toFloat("seO$yl{@=RNh]^,H\"LH", (float) (byte) (-9));
      assertEquals((-9.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (long) (short) (-285));
      assertEquals((-285L), long0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = NumberUtils.toInt("seO$yl{@=RNh]^,H\"LH", (int) (byte)65);
      assertEquals(65, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("Elu@o!+7JF[?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-3eE0qD}IuY<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0EF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x~B7t3vrm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x9@^?/aDjEjG/VD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xaEa");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E+-0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)3, (byte)124, (byte) (-58));
      assertEquals((byte)124, byte0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)2, (byte) (-20), (byte)77);
      assertEquals((byte)77, byte0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      short short0 = NumberUtils.max((short) (byte)0, (short) (-2336), (short)812);
      assertEquals((short)812, short0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-770), (short) (byte)0, (short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = NumberUtils.max((-3848), (-3848), 46);
      assertEquals(46, int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = NumberUtils.max((-1879048191), 1, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = NumberUtils.max(0, (int) (short)0, (int) (short) (-770));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = NumberUtils.max(0L, (-1475L), 1794L);
      assertEquals(1794L, long0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = NumberUtils.max((long) (-1048), (-1L), (-1886L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)15, (byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)8, (byte)5, (byte)99);
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      short short0 = NumberUtils.min((short)1180, (short)1180, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      short short0 = NumberUtils.min((short)1974, (short) (-3461), (short)888);
      assertEquals((short) (-3461), short0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      short short0 = NumberUtils.min((short)1, (short)69, (short)1);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = NumberUtils.min(1000, 69, (int) (byte)10);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = NumberUtils.min(0, (-785), 0);
      assertEquals((-785), int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = NumberUtils.min((-1638), 6, (int) (short)0);
      assertEquals((-1638), int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long long0 = NumberUtils.min(749L, 749L, (long) (byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long long0 = NumberUtils.min(663L, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = NumberUtils.min((-1L), 61L, 3314L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-513.8625F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = 1925.2415010564725;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1925.2415010564725, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)1734;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1734, short0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 3;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 755L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(755L, long0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 215.3838F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[3] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (short) (-1909);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1909.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-108);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-108), byte0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)12;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)1104;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = new long[18];
      longArray0[0] = (long) (short)7;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      try { 
        NumberUtils.createNumber("--0xMinimum abbreviation width with offset is 7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --0xMinimum abbreviation width with offset is 7 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      try { 
        NumberUtils.createNumber("F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      try { 
        NumberUtils.createNumber("08L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Rf.F+Rz%u-!8btGPV9{3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        NumberUtils.createNumber("6E Lb?e8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6E Lb?e8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-i}G<?HfDL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -i}G<?HfDL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1L");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      try { 
        NumberUtils.createNumber("MzN.T7(*Z:=9FHl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // MzN.T7(*Z:=9FHl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("l");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        NumberUtils.createNumber("{_6{,63 LTQ7Yyf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // {_6{,63 LTQ7Yyf is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-01d");
      assertEquals((-1.0), number0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("2F");
      assertEquals(2.0F, number0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        NumberUtils.createNumber("9@^?/aDjEjG/VD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 9@^?/aDjEjG/VD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0eBoiv7`I@:?N?aL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0eBoiv7`I@:?N?aL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.q");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.q is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-ib 2:E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -ib 2:E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-00.");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0zF*bmekIEQd");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0zF*bmekIEQd is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        NumberUtils.createNumber("WK~=u.c.e#:");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // WK~=u.c.e#: is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" .Z8}@3h[Ge56hE_9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  .Z8}@3h[Ge56hE_9 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".6");
      assertEquals(0.6F, number0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        NumberUtils.createNumber("#--0xginimum abbreviation width with offset is 7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x#94n}r{B^wr~?8}q");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"#94n}r{B^wr~?8}q\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0E+-0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte) (-23));
      assertEquals((byte) (-23), byte0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, 101);
      assertEquals(101, int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      short short0 = NumberUtils.toShort("-08");
      assertEquals((short) (-8), short0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int int0 = NumberUtils.toInt("The Array must not be null");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("0X");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double double0 = NumberUtils.min(70.0, (double) 3, (double) 3);
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double double0 = NumberUtils.toDouble("2");
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      float float0 = NumberUtils.min((float) 76, (-1059.343F), (float) 1);
      assertEquals((-1059.343F), float0, 0.01F);
  }
}
