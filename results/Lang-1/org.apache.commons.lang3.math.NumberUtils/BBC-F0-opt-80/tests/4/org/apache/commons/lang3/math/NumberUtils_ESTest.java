/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 23:26:03 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xA blank string is not a valid number");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x1f\"9S?4p`^^nzRxKUk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x2b9*d2%V;,<Y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0x2b**hd]I2e%@VY!<Y~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0~$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      short short0 = NumberUtils.max((short) (byte)0, (short) (byte)0, (short)45);
      assertEquals((short)45, short0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-768), (short) (-768), (short) (-768));
      assertEquals((short) (-768), short0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-2309), (short) (-285), (short)4476);
      assertEquals((short) (-2309), short0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = NumberUtils.min((-1199), 0, 0);
      assertEquals((-1199), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)9;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)9, short0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short)2160;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = 13;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x.n7rf^6<,d0Ei(_]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \".n7rf^6<,d0Ei(_]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        NumberUtils.createNumber("LJ/#8`X.PF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // LJ/#8`X.PF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      short short0 = NumberUtils.toShort("OX", (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      short short0 = NumberUtils.toShort("yMyS@,33m", (short) (-1));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short short0 = NumberUtils.toShort("0x0x2b**hd]I2e%@VY!<Y~");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short short0 = NumberUtils.toShort("-1");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = NumberUtils.toLong("<#4|_c", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = NumberUtils.toLong("OcW", (-513L));
      assertEquals((-513L), long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = NumberUtils.toLong("9");
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = NumberUtils.toLong("-9");
      assertEquals((-9L), long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = NumberUtils.toInt("0x", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = NumberUtils.toInt("", (-69));
      assertEquals((-69), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = NumberUtils.toInt("7");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = NumberUtils.toInt("-9");
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float float0 = NumberUtils.toFloat("yMyS@,33m", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float float0 = NumberUtils.toFloat(";!f,Hkpb%?%3m3", 2375.005F);
      assertEquals(2375.005F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float float0 = NumberUtils.toFloat("6");
      assertEquals(6.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-1");
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = NumberUtils.toDouble("Threshold must not be negative", (double) 8192);
      assertEquals(8192.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = NumberUtils.toDouble("9");
      assertEquals(9.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-1");
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("", (byte) (-69));
      assertEquals((byte) (-69), byte0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("9");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-8");
      assertEquals((byte) (-8), byte0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)45;
      shortArray0[1] = (short)45;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)45, short0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-2758);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-2758), short0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)1114;
      longArray0[1] = (long) (short)1114;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(1114L, long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1591L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1591L), long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2506;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(2506, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[3] = (-2933);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-2933), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2314L;
      floatArray0[1] = 616.0F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(616.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-799.7649F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-799.7649F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-1.0);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)127, byte0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-107);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-107), byte0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      short short0 = NumberUtils.min((short)21, (short)21, (short)341);
      assertEquals((short)21, short0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = NumberUtils.min((long) (byte)0, 656L, 656L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = NumberUtils.min(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float float0 = NumberUtils.min(0.0F, (float) 120, 3607.7942F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float float0 = NumberUtils.min(3504.721F, 3504.721F, 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = NumberUtils.min(2411.73719935684, (double) 936.0F, 660.35329669221);
      assertEquals(660.35329669221, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = NumberUtils.min((double) (-1816.16F), (double) (short)0, (double) (byte)0);
      assertEquals((-1816.1600341796875), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)16, (byte)80, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)13, (byte)13, (byte)13);
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-31058);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-31058), short0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[2] = 1370L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1370L, long0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-9L);
      longArray0[1] = (-9L);
      longArray0[2] = (-9L);
      longArray0[3] = (-9L);
      longArray0[4] = (-9L);
      longArray0[5] = (-9L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-9L), long0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-69);
      intArray0[1] = (int) (byte) (-69);
      intArray0[2] = (int) (byte) (-69);
      intArray0[3] = (int) (byte) (-69);
      intArray0[4] = (int) (byte) (-69);
      intArray0[5] = (int) (byte) (-69);
      intArray0[6] = (int) (byte) (-69);
      intArray0[7] = (int) (byte) (-69);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-69), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)8;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(8.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-103);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-103.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.0;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-117);
      doubleArray0[1] = (double) (byte) (-117);
      doubleArray0[2] = (double) (byte) (-117);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (byte) (-117);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-92), byte0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      short short0 = NumberUtils.max((short) (byte)0, (short) (-1176), (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1760), (short) (-1989), (short) (-1760));
      assertEquals((short) (-1760), short0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = NumberUtils.max((long) 0, (long) 0, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = NumberUtils.max((-5318L), (-1548L), (-1492L));
      assertEquals((-1492L), long0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = NumberUtils.max((int) (short)0, (int) (short)0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      float float0 = NumberUtils.max((-1.0F), 0.0F, (-1816.16F));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float float0 = NumberUtils.max((-1.0F), (-1.0F), (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = NumberUtils.max((double) (short)0, 0.0, (-3776.9111003521257));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = NumberUtils.max((double) (byte) (-1), (double) (byte) (-127), (double) (short) (-1760));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte) (-106));
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-45), (byte) (-5), (byte) (-121));
      assertEquals((byte) (-5), byte0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--030");
      assertEquals((byte)30, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0xD");
      assertEquals(13L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0x8");
      assertEquals(8, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0x2c");
      assertEquals((-44), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-5");
      assertEquals((-5.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("1");
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-8");
      assertEquals((-8.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("8");
      assertEquals((byte)8, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("3");
      assertEquals((short)3, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("l");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("E^ER+8uS~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("Minimum abbreviation width is 4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("3.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-9");
      assertEquals((byte) (-9), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("1D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1D\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("#zq]9-m5LG>mQ@");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0x2c");
      assertEquals((-44L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("--|Mu7)I1oo$S");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Sign character in wrong position
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("9");
      assertEquals(9.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      short short0 = NumberUtils.toShort("yMyS@,33m", (short)2532);
      assertEquals((short)2532, short0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("u82Z?4tU=`;Z", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte)1);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = NumberUtils.toDouble(".W", (double) (-2202L));
      assertEquals((-2202.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = NumberUtils.toInt("0x", 15);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0el");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("9d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-8e.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0E0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+x?3GeVv[d6.<Rp9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".E$<GaE'ev");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("3eE`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0e.*8[9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0e--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xau+6%@x@f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-55), (byte)53, (byte)53);
      assertEquals((byte)53, byte0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-95), (byte) (-127), (byte)70);
      assertEquals((byte)70, byte0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-29149), (short)1114, (short) (-29149));
      assertEquals((short)1114, short0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = NumberUtils.max((int) (short)53, 0, 2145743385);
      assertEquals(2145743385, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = NumberUtils.max(59, 8192, 3);
      assertEquals(8192, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = NumberUtils.max((-1717), (-1717), (-1717));
      assertEquals((-1717), int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long long0 = NumberUtils.max(2185L, (-1483L), (long) (byte) (-107));
      assertEquals(2185L, long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-83), (byte) (-127), (byte)6);
      assertEquals((byte) (-127), byte0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      short short0 = NumberUtils.min((short)6, (short) (byte)0, (short)6);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-113), (short) (-113), (short) (-479));
      assertEquals((short) (-479), short0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = NumberUtils.min(0, 0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = NumberUtils.min(1, (-915), 1);
      assertEquals((-915), int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = NumberUtils.min(4, 4, 4);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      long long0 = NumberUtils.min(1L, 0L, (-1044L));
      assertEquals((-1044L), long0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long long0 = NumberUtils.min(421L, 45L, 421L);
      assertEquals(45L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long long0 = NumberUtils.min((long) (byte) (-107), (long) (byte) (-107), (long) (byte) (-107));
      assertEquals((-107L), long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-538.0F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[5] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-117);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)45;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)45, byte0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (byte)120;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)120, short0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 256;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(256, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-848L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2048.0F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 412.335159334799;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2314L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("--");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -- is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0-5");
      assertEquals((byte) (-5), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-0x2c");
      assertEquals((short) (-44), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0.");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("3.");
      assertEquals(3.0F, number0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        NumberUtils.createNumber("B5.CO:(G50mZ-B-D;291");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0EF*0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0l");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0l");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Strings must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1f");
      assertEquals(1.0F, number0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        NumberUtils.createNumber("BDj:=d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // BDj:=d is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-jC7$2}B}9(.L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -jC7$2}B}9(.L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("00F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1D");
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.n is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      try { 
        NumberUtils.createNumber("VPWlNe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // VPWlNe is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      try { 
        NumberUtils.createNumber("|cu1u6EEeI*%&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // |cu1u6EEeI*%& is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        NumberUtils.createNumber("iE(RLe}2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"iE(RLe}2\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.n7rf^6<,d0Ei(y]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.n7rf^6<,d0Ei(y] is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      try { 
        NumberUtils.createNumber("&X+E=1kiq-4A}-yI.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // &X+E=1kiq-4A}-yI. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      try { 
        NumberUtils.createNumber("w.E(@=Vb#eD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // w.E(@=Vb#eD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-G~|#j2C^SuU9*~?il");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -G~|#j2C^SuU9*~?il is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x,J/Jfas");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",J/Jfas\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-#m%n{z1v6aW~'oLi?8t");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"m%n{\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      try { 
        NumberUtils.createNumber("...");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)127);
      assertEquals((short)127, short0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      short short0 = NumberUtils.toShort("1");
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      float float0 = NumberUtils.toFloat("VPWlNe");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double double0 = NumberUtils.max((-1.0), (double) 0L, (double) 2332L);
      assertEquals(2332.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double double0 = NumberUtils.min(0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double double0 = NumberUtils.toDouble("0x--");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      float float0 = NumberUtils.min((-219.13258F), 616.0F, 616.0F);
      assertEquals((-219.13258F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      float float0 = NumberUtils.max((float) (short)127, (float) (-915), (float) (-915));
      assertEquals(127.0F, float0, 0.01F);
  }
}
