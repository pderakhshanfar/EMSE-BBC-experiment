/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 17:38:10 GMT 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math3.geometry.euclidean.threed.Segment;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubLine_ESTest extends SubLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(4.0, 4.0);
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Vector3D vector3D2 = new Vector3D(4.0, vector3D0, 4.0, vector3D0, 4.0, vector3D1, 4.0, vector3D1);
      Plane plane0 = new Plane(vector3D2);
      Plane plane1 = new Plane(vector3D1, vector3D1);
      Line line0 = plane0.intersection(plane1);
      IntervalsSet intervalsSet0 = new IntervalsSet();
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      Vector3D vector3D3 = subLine0.intersection(subLine0, false);
      assertFalse(vector3D3.equals((Object)vector3D2));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(4.0, 4.0);
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Vector3D vector3D2 = new Vector3D(4.0, vector3D0, 4.0, vector3D0, 4.0, vector3D1, 4.0, vector3D1);
      Plane plane0 = new Plane(vector3D2);
      Plane plane1 = new Plane(vector3D0, vector3D0);
      Line line0 = plane0.intersection(plane1);
      IntervalsSet intervalsSet0 = new IntervalsSet();
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      Vector3D vector3D3 = subLine0.intersection(subLine0, false);
      assertNotSame(vector3D0, vector3D3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2295.6031831978), 0.0);
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      Vector3D vector3D2 = rotationOrder0.getA1();
      Line line0 = new Line(vector3D0, vector3D2);
      SubLine subLine1 = line0.wholeLine();
      Vector3D vector3D3 = subLine0.intersection(subLine1, true);
      assertNotNull(vector3D3);
      assertEquals((-0.7839770427960571), vector3D3.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Plane plane0 = new Plane(vector3D0);
      Vector3D vector3D1 = new Vector3D((-2577.778684112089), 700.0055436529277, 1.9987994582857286E-8);
      Plane plane1 = new Plane(vector3D0, vector3D1);
      Plane plane2 = new Plane(plane1);
      Line line0 = plane0.intersection(plane2);
      Vector1D vector1D0 = Vector1D.ONE;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>("0c!wehsD&B");
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree0);
      SubLine subLine0 = new SubLine(line0, intervalsSet1);
      // Undeclared exception!
      try { 
        subLine0.intersection(subLine0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Plane plane0 = new Plane(vector3D0, vector3D0, vector3D0);
      Line line0 = plane0.intersection(plane0);
      SubLine subLine0 = new SubLine(line0, (IntervalsSet) null);
      // Undeclared exception!
      try { 
        subLine0.getSegments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.SubLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>("xmc!<KZI");
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      Line line0 = new Line(vector3D0, vector3D0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      // Undeclared exception!
      try { 
        subLine0.getSegments();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine((Vector3D) null, vector3D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D((-1006.0), vector3D0, 0.0, vector3D0, 2575.0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Segment segment0 = new Segment(vector3D0, vector3D0, line0);
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine(segment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine((Segment) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.SubLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Plane plane0 = new Plane(vector3D0);
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Plane plane1 = new Plane(vector3D1, vector3D1);
      Line line0 = plane0.intersection(plane1);
      IntervalsSet intervalsSet0 = new IntervalsSet(4.0, 4.0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      SubLine subLine1 = line0.wholeLine();
      Vector3D vector3D2 = subLine1.intersection(subLine0, false);
      assertNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, false);
      assertNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Plane plane0 = new Plane(vector3D0);
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Plane plane1 = new Plane(vector3D1, vector3D1);
      Line line0 = plane0.intersection(plane1);
      IntervalsSet intervalsSet0 = new IntervalsSet();
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      IntervalsSet intervalsSet1 = new IntervalsSet(4.0, (-418.975346181));
      SubLine subLine1 = new SubLine(line0, intervalsSet1);
      Vector3D vector3D2 = subLine0.intersection(subLine1, true);
      assertNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Plane plane0 = new Plane(vector3D1);
      Plane plane1 = new Plane(vector3D0, vector3D0);
      Line line0 = plane0.intersection(plane1);
      IntervalsSet intervalsSet0 = new IntervalsSet(4.0, 4.0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, true);
      assertNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Plane plane0 = new Plane(vector3D0);
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Plane plane1 = new Plane(vector3D1, vector3D1);
      Line line0 = plane0.intersection(plane1);
      IntervalsSet intervalsSet0 = new IntervalsSet();
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, false);
      assertNotSame(vector3D2, vector3D1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Plane plane0 = new Plane(vector3D0);
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Plane plane1 = new Plane(vector3D1, vector3D1);
      Line line0 = plane0.intersection(plane1);
      IntervalsSet intervalsSet0 = new IntervalsSet();
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      List<Segment> list0 = subLine0.getSegments();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.PLUS_K;
      Line line0 = new Line(vector3D1, vector3D0);
      Segment segment0 = new Segment(vector3D0, vector3D1, line0);
      SubLine subLine0 = new SubLine(segment0);
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(vector3D1);
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint((Hyperplane<Euclidean1D>) null, intervalsSet0);
      BSPTree<Euclidean1D> bSPTree1 = new BSPTree<Euclidean1D>(subOrientedPoint0, bSPTree0, bSPTree0, vector3D1);
      IntervalsSet intervalsSet1 = new IntervalsSet(bSPTree1);
      SubLine subLine1 = new SubLine(line0, intervalsSet1);
      // Undeclared exception!
      try { 
        subLine1.intersection(subLine0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.BSPTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2295.6031831978), 0.0);
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, true);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2295.6031831978), 0.0);
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }
}
