/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 17:54:05 GMT 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Interval;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math3.geometry.euclidean.threed.Segment;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubLine_ESTest extends SubLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = Vector3D.PLUS_I;
      SubLine subLine1 = new SubLine(vector3D2, vector3D0);
      Vector3D vector3D3 = subLine0.intersection(subLine1, true);
      assertNotNull(vector3D3);
      
      SubLine subLine2 = new SubLine(vector3D3, vector3D2);
      Vector3D vector3D4 = subLine2.intersection(subLine0, true);
      assertNotNull(vector3D4);
      assertEquals((-2.237114317075737E-17), vector3D4.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Vector3D vector3D2 = Vector3D.PLUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Segment segment0 = new Segment(vector3D0, vector3D2, line0);
      SubLine subLine0 = new SubLine(segment0);
      Vector3D vector3D3 = subLine0.intersection(subLine0, false);
      assertTrue(vector3D3.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Plane plane0 = new Plane(vector3D0, vector3D0, vector3D0);
      Line line0 = plane0.intersection(plane0);
      Segment segment0 = new Segment(vector3D0, vector3D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      // Undeclared exception!
      try { 
        subLine0.intersection(subLine0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      SubLine subLine0 = line0.wholeLine();
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      Interval interval0 = new Interval((-1247.8), (-1790.17047));
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(interval0);
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree0);
      SubLine subLine1 = new SubLine(line0, intervalsSet1);
      // Undeclared exception!
      try { 
        subLine0.intersection(subLine1, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.oned.Interval cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      SubLine subLine0 = new SubLine(line0, (IntervalsSet) null);
      // Undeclared exception!
      try { 
        subLine0.getSegments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.SubLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Plane plane0 = new Plane(vector3D0);
      Line line0 = plane0.intersection(plane0);
      Segment segment0 = new Segment(vector3D0, vector3D0, line0);
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(segment0);
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      // Undeclared exception!
      try { 
        subLine0.getSegments();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.threed.Segment cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      Vector3D vector3D0 = rotationOrder0.getA3();
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine((Vector3D) null, vector3D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      Vector3D vector3D0 = rotationOrder0.getA1();
      Segment segment0 = new Segment(vector3D0, vector3D0, (Line) null);
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine(segment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Segment segment0 = new Segment((Vector3D) null, (Vector3D) null, line0);
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine(segment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Vector3D vector3D1 = Vector3D.PLUS_I;
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, false);
      assertEquals(0.5, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = Vector3D.PLUS_I;
      Line line0 = new Line(vector3D2, vector3D1);
      Segment segment0 = new Segment(vector3D0, vector3D2, line0);
      SubLine subLine1 = new SubLine(segment0);
      Vector3D vector3D3 = subLine1.intersection(subLine0, false);
      assertNull(vector3D3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Vector3D vector3D2 = Vector3D.PLUS_I;
      SubLine subLine0 = new SubLine(vector3D2, vector3D0);
      Line line0 = new Line(vector3D1, vector3D2);
      Segment segment0 = new Segment(vector3D2, vector3D1, line0);
      SubLine subLine1 = new SubLine(segment0);
      Vector3D vector3D3 = subLine0.intersection(subLine1, true);
      assertNull(vector3D3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D(1419.4765367955, vector3D0, 1419.4765367955, vector3D0, 1419.4765367955, vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, true);
      assertNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Vector3D vector3D1 = rotationOrder0.getA2();
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, true);
      assertEquals(0.5, vector3D2.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, false);
      assertNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      Vector3D vector3D0 = rotationOrder0.getA3();
      Vector3D vector3D1 = rotationOrder0.getA2();
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      List<Segment> list0 = subLine0.getSegments();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D((-1.0), (-43.327), (-1.0));
      SubLine subLine0 = new SubLine(vector3D0, vector3D1);
      Vector3D vector3D2 = subLine0.intersection(subLine0, true);
      assertFalse(vector3D2.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }
}
