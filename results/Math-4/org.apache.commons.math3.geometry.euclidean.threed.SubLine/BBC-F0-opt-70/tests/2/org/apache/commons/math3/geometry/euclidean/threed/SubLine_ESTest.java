/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 15:29:27 GMT 2021
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Interval;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.Segment;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubLine_ESTest extends SubLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7249995199969751, 0.7249995199969751);
      Vector3D vector3D1 = new Vector3D(0.7249995199969751, vector3D0);
      Vector3D vector3D2 = vector3D1.add(284.8365727, (Vector<Euclidean3D>) vector3D0);
      Vector3D vector3D3 = vector3D1.negate();
      SubLine subLine0 = new SubLine(vector3D2, vector3D3);
      Vector3D vector3D4 = subLine0.intersection(subLine0, false);
      assertEquals((-2.7935878275975834E-15), vector3D4.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7249995199969751, 0.7249995199969751);
      Vector3D vector3D1 = Vector3D.MINUS_J;
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, true);
      assertEquals(0.28012593059444707, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7249995199969751, 0.7249995199969751);
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Vector3D vector3D2 = vector3D0.subtract((Vector<Euclidean3D>) vector3D1);
      Vector3D vector3D3 = vector3D1.add(284.8365727, (Vector<Euclidean3D>) vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D2);
      SubLine subLine1 = new SubLine(vector3D1, vector3D3);
      Vector3D vector3D4 = subLine0.intersection(subLine1, true);
      assertNotNull(vector3D4);
      assertEquals(1.0000000000000004, vector3D4.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.PLUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      SubLine subLine0 = line0.wholeLine();
      Vector3D vector3D2 = subLine0.intersection(subLine0, true);
      assertNotSame(vector3D0, vector3D2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      IntervalsSet intervalsSet0 = new IntervalsSet();
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      // Undeclared exception!
      try { 
        subLine0.intersection(subLine0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubLine subLine0 = new SubLine((Line) null, (IntervalsSet) null);
      // Undeclared exception!
      try { 
        subLine0.getSegments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.SubLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Plane plane0 = new Plane(vector3D0, vector3D0);
      Line line0 = plane0.intersection(plane0);
      IntervalsSet intervalsSet0 = new IntervalsSet();
      Interval interval0 = new Interval(1.0, 1.0);
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(interval0);
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree0);
      SubLine subLine0 = new SubLine(line0, intervalsSet1);
      // Undeclared exception!
      try { 
        subLine0.getSegments();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.oned.Interval cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7249995199969751, 0.7249995199969751);
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine((Vector3D) null, vector3D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1559.5350371), (-1559.5350371));
      Segment segment0 = new Segment(vector3D0, vector3D0, (Line) null);
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine(segment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Segment segment0 = new Segment((Vector3D) null, (Vector3D) null, (Line) null);
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine(segment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7249995199969751, 0.7249995199969751);
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Vector3D vector3D2 = vector3D1.subtract((Vector<Euclidean3D>) vector3D0);
      Vector3D vector3D3 = vector3D2.add(284.8365727, (Vector<Euclidean3D>) vector3D1);
      Vector3D vector3D4 = new Vector3D(285.33424975031176, vector3D3, 882.685, vector3D3, 0.7249995199969751, vector3D3);
      SubLine subLine0 = new SubLine(vector3D2, vector3D3);
      SubLine subLine1 = new SubLine(vector3D4, vector3D3);
      Vector3D vector3D5 = subLine0.intersection(subLine1, false);
      assertNull(vector3D5);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = new Vector3D(284.8365727, vector3D0, 882.685, vector3D0, 0.7249995199969751, vector3D0);
      SubLine subLine0 = new SubLine(vector3D0, vector3D1);
      Vector3D vector3D2 = subLine0.intersection(subLine0, false);
      assertNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7249995199969751, 0.7249995199969751);
      Vector3D vector3D1 = new Vector3D(0.7249995199969751, vector3D0);
      Vector3D vector3D2 = vector3D1.add(284.8365727, (Vector<Euclidean3D>) vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D3 = vector3D2.orthogonal();
      Plane plane0 = new Plane(vector3D2, vector3D3, vector3D1);
      Plane plane1 = new Plane(vector3D0);
      Line line0 = plane0.intersection(plane1);
      SubLine subLine1 = line0.wholeLine();
      Vector3D vector3D4 = subLine1.intersection(subLine0, true);
      assertNull(vector3D4);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7249995199969751, 0.7249995199969751);
      Vector3D vector3D1 = new Vector3D(0.7249995199969751, vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, true);
      assertNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      List<Segment> list0 = subLine0.getSegments();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7249995199969751, 0.7249995199969751);
      Vector3D vector3D1 = new Vector3D(0.7249995199969751, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Segment segment0 = new Segment(vector3D0, vector3D1, line0);
      SubLine subLine0 = new SubLine(segment0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = new Vector3D(2388.6, vector3D0, 2388.6, vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(subOrientedPoint0);
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree0);
      SubLine subLine1 = new SubLine(line0, intervalsSet1);
      // Undeclared exception!
      try { 
        subLine0.intersection(subLine1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }
}
