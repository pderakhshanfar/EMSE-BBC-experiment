/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:22:59 GMT 2020
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Interval;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Segment;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubLine_ESTest extends SubLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D((-0.9999999999), vector3D0, (-0.9999999999), vector3D0, 0.0, vector3D0, 0.0, vector3D0);
      Vector3D vector3D2 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D2);
      Segment segment0 = new Segment(vector3D1, vector3D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      Vector3D vector3D3 = subLine0.intersection(subLine0, true);
      assertEquals((-0.5), vector3D3.getZ(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D((-0.9999999999), vector3D0, (-0.9999999999), vector3D0, 0.0, vector3D0, 0.0, vector3D0);
      Vector3D vector3D2 = new Vector3D(0.0, 0.0);
      Line line0 = new Line(vector3D2, vector3D0);
      Segment segment0 = new Segment(vector3D1, vector3D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      Vector3D vector3D3 = subLine0.intersection(subLine0, false);
      assertFalse(vector3D3.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D((-0.9999999999), vector3D0, (-0.9999999999), vector3D0, 0.0, vector3D0, 0.0, vector3D0);
      Vector3D vector3D2 = new Vector3D(0.0, 0.0);
      Line line0 = new Line(vector3D2, vector3D1);
      Segment segment0 = new Segment(vector3D1, vector3D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      Vector3D vector3D3 = subLine0.intersection(subLine0, false);
      assertNotSame(vector3D1, vector3D3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1936.635861805), (-1936.635861805), 4.2097537363);
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Vector3D vector3D2 = new Vector3D(4.2097537363, vector3D0, 0.0, vector3D1, 1032.3385646, vector3D1, 1.0, vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Line line0 = new Line(vector3D2, vector3D0);
      Segment segment0 = new Segment(vector3D1, vector3D2, line0);
      SubLine subLine1 = new SubLine(segment0);
      Vector3D vector3D3 = subLine1.intersection(subLine0, true);
      assertEquals((-1.660670055298924E-12), vector3D3.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D((-0.9999999999), vector3D0, (-0.9999999999), vector3D0, 0.0, vector3D0, 0.0, vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      // Undeclared exception!
      try { 
        subLine0.intersection((SubLine) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.SubLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1.0), (-3083.5049003));
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Segment segment0 = new Segment(vector3D1, vector3D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      Interval interval0 = new Interval(0.19999954104423523, 0.01745329052209854);
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(interval0);
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      SubLine subLine1 = new SubLine(line0, intervalsSet0);
      // Undeclared exception!
      try { 
        subLine0.intersection(subLine1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.oned.Interval cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      SubLine subLine0 = new SubLine(line0, (IntervalsSet) null);
      // Undeclared exception!
      try { 
        subLine0.getSegments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.SubLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      IntervalsSet intervalsSet0 = new IntervalsSet(linkedList0);
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint((Hyperplane<Euclidean1D>) null, intervalsSet0);
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(subOrientedPoint0);
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree0);
      SubLine subLine0 = new SubLine(line0, intervalsSet1);
      // Undeclared exception!
      try { 
        subLine0.getSegments();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine(vector3D0, (Vector3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Segment segment0 = new Segment(vector3D0, vector3D0, (Line) null);
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine(segment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Segment segment0 = new Segment((Vector3D) null, (Vector3D) null, (Line) null);
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine(segment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = new Vector3D(0.0, vector3D1, 0.0, vector3D0, (-930.8867914842), vector3D0, (-2927.1), vector3D1);
      Line line0 = new Line(vector3D2, vector3D1);
      Segment segment0 = new Segment(vector3D0, vector3D2, line0);
      SubLine subLine1 = new SubLine(segment0);
      Vector3D vector3D3 = subLine1.intersection(subLine0, false);
      assertNull(vector3D3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Vector3D vector3D2 = vector3D1.subtract(0.0, (Vector<Euclidean3D>) vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D3 = Vector3D.ZERO;
      Line line0 = new Line(vector3D3, vector3D1);
      Segment segment0 = new Segment(vector3D2, vector3D0, line0);
      SubLine subLine1 = new SubLine(segment0);
      Vector3D vector3D4 = subLine1.intersection(subLine0, false);
      assertNull(vector3D4);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_K;
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = new Vector3D(0.0, vector3D1, 0.0, vector3D0, Double.NEGATIVE_INFINITY, vector3D0, (-2927.1), vector3D1);
      Line line0 = new Line(vector3D0, vector3D1);
      Segment segment0 = new Segment(vector3D0, vector3D2, line0);
      SubLine subLine1 = new SubLine(segment0);
      Vector3D vector3D3 = subLine0.intersection(subLine1, true);
      assertNull(vector3D3);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1936.635861805), (-1936.635861805), 4.2097537363);
      Vector3D vector3D1 = new Vector3D((-1936.635861805), vector3D0, 1318.255947886, vector3D0, (-1936.635861805), vector3D0, 0.01745329052209854, vector3D0);
      Vector3D vector3D2 = new Vector3D((-1536.99819237), vector3D0, (-1936.635861805), vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D2);
      Vector3D vector3D3 = subLine0.intersection(subLine0, true);
      assertNull(vector3D3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1936.635861805), (-1936.635861805), 4.2097537363);
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, true);
      assertTrue(vector3D2.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D((-0.9999999999), vector3D0, (-0.9999999999), vector3D0, 0.0, vector3D0, 0.0, vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      List<Segment> list0 = subLine0.getSegments();
      assertEquals(1, list0.size());
  }
}
