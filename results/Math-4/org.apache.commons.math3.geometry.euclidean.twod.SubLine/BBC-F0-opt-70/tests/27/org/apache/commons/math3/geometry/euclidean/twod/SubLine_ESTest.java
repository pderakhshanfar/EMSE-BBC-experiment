/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 13:37:02 GMT 2021
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.Segment;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.Region;
import org.apache.commons.math3.geometry.partitioning.Side;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubLine_ESTest extends SubLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, (-1.0E-10));
      Line line1 = new Line(line0);
      line1.setOriginOffset((-1.0E-10));
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line1);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, vector2D0);
      line0.setOriginOffset(1.0E-10);
      Side side0 = subLine0.side(line0);
      assertEquals(Side.HYPER, side0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, (-1.0E-10));
      Line line1 = new Line(line0);
      line1.setOriginOffset((-1.0E-10));
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      Side side0 = subLine0.side(line1);
      assertEquals(Side.HYPER, side0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = line0.wholeHyperplane();
      Vector2D vector2D1 = subLine0.intersection(subLine0, false);
      assertEquals(Double.NaN, vector2D1.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D((-735.41), (-735.41));
      Vector2D vector2D2 = new Vector2D((-735.41), vector2D0, (-4.0), vector2D0, (-4.0), vector2D1, (-2828.2157303056815), vector2D0);
      Line line0 = new Line(vector2D2, (-2828.2157303056815));
      SubLine subLine0 = line0.wholeHyperplane();
      SubLine subLine1 = new SubLine(vector2D2, vector2D1);
      Vector2D vector2D3 = subLine1.intersection(subLine0, true);
      assertEquals(2941.640000000001, vector2D3.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 0.09090909090909091);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      IntervalsSet intervalsSet0 = new IntervalsSet(0.09090909090909091, (-1925.780125413188));
      BSPTree<Euclidean1D> bSPTree0 = intervalsSet0.getTree(false);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.getCell(vector1D0);
      IntervalsSet intervalsSet1 = new IntervalsSet(bSPTree1);
      AbstractSubHyperplane<Euclidean2D, Euclidean1D> abstractSubHyperplane0 = subLine0.buildNew(line0, intervalsSet1);
      assertNotSame(subLine0, abstractSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, (-2828.2157303056815));
      SubLine subLine0 = line0.wholeHyperplane();
      Region<Euclidean1D> region0 = subLine0.getRemainingRegion();
      AbstractSubHyperplane<Euclidean2D, Euclidean1D> abstractSubHyperplane0 = subLine0.buildNew(line0, region0);
      assertFalse(abstractSubHyperplane0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = line0.wholeHyperplane();
      // Undeclared exception!
      try { 
        subLine0.split((Hyperplane<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, vector2D0);
      List<Segment> list0 = subLine0.getSegments();
      IntervalsSet intervalsSet0 = new IntervalsSet(1.0, (-2521.3));
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(list0);
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew(bSPTree0);
      SubLine subLine1 = new SubLine(line0, intervalsSet1);
      // Undeclared exception!
      try { 
        subLine1.split(line0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.ArrayList cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-1162.79177733), 0.0);
      Line line0 = new Line(vector2D0, 0.1888588949765012);
      IntervalsSet intervalsSet0 = new IntervalsSet((-2112.3244822), (-2313.50532578));
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      // Undeclared exception!
      try { 
        subLine0.side((Hyperplane<Euclidean2D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, (-0.8591890173735879));
      Line line1 = new Line(vector2D0, vector2D0);
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(line0);
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      // Undeclared exception!
      try { 
        subLine0.side(line1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.twod.Line cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-735.41), (-735.41));
      Line line0 = new Line(vector2D0, vector2D0);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      // Undeclared exception!
      try { 
        subLine0.intersection(subLine0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = Vector2D.POSITIVE_INFINITY;
      SubLine subLine0 = new SubLine(vector2D1, vector2D0);
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      BSPTree<Euclidean1D> bSPTree1 = new BSPTree<Euclidean1D>(intervalsSet0);
      IntervalsSet intervalsSet1 = new IntervalsSet(bSPTree1);
      SubLine subLine1 = new SubLine(line0, intervalsSet1);
      // Undeclared exception!
      try { 
        subLine0.intersection(subLine1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.partitioning.AbstractRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      // Undeclared exception!
      try { 
        subLine0.getSegments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(vector2D0);
      IntervalsSet intervalsSet0 = new IntervalsSet(bSPTree0);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      // Undeclared exception!
      try { 
        subLine0.getSegments();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math3.geometry.euclidean.twod.Vector2D cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine((Vector2D) null, (Vector2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine((Segment) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.SubLine", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D((-735.41), (-735.41));
      Line line0 = new Line(vector2D0, (-2828.2157303056815));
      SubLine subLine0 = new SubLine(vector2D0, vector2D1);
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Vector2D vector2D1 = new Vector2D((-735.41), (-735.41));
      Line line0 = new Line(vector2D1, (-2828.2157303056815));
      SubLine subLine0 = new SubLine(vector2D0, vector2D1);
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-735.051392294102), (-735.051392294102));
      Line line0 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D1, vector2D1);
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, (-1.0E-10));
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split(line0);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Vector2D vector2D1 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D0, vector2D1);
      Vector2D vector2D2 = new Vector2D(1.2246467991473532E-16, 689.715133);
      Line line0 = new Line(vector2D1, vector2D2);
      Side side0 = subLine0.side(line0);
      assertEquals(Side.MINUS, side0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, vector2D0);
      Vector2D vector2D1 = new Vector2D((-1289.4117470261779), (-1289.4117470261779));
      SubLine subLine0 = new SubLine(vector2D1, vector2D1);
      Side side0 = subLine0.side(line0);
      assertEquals(Side.PLUS, side0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, vector2D0);
      line0.setOriginOffset((-938.2345582));
      Side side0 = subLine0.side(line0);
      assertEquals(Side.MINUS, side0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector2D vector2D0 = new Vector2D((-735.41), (-735.41));
      Line line0 = new Line(vector2D0, vector2D0);
      IntervalsSet intervalsSet0 = new IntervalsSet();
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      Line line1 = new Line(vector2D0, 3080.8564852867);
      SubLine subLine1 = line1.wholeHyperplane();
      Vector2D vector2D1 = subLine0.intersection(subLine1, false);
      assertEquals(735.41, vector2D1.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector2D0, 0.09090909090909091);
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      SubLine subLine0 = new SubLine(segment0);
      SubLine subLine1 = new SubLine(vector2D0, vector2D0);
      Vector2D vector2D1 = subLine0.intersection(subLine1, false);
      assertNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = line0.wholeHyperplane();
      SubLine subLine1 = new SubLine(vector2D0, vector2D0);
      Vector2D vector2D1 = subLine0.intersection(subLine1, true);
      assertNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      Line line0 = new Line(vector2D0, vector2D0);
      SubLine subLine0 = line0.wholeHyperplane();
      SubLine subLine1 = new SubLine(vector2D0, vector2D0);
      Vector2D vector2D1 = subLine1.intersection(subLine0, true);
      assertNull(vector2D1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      Line line0 = new Line(vector2D0, (-1.0E-10));
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      SubLine subLine1 = new SubLine(segment0);
      Vector2D vector2D1 = subLine0.intersection(subLine1, true);
      assertEquals(0.0, vector2D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, (-2828.2157303056815));
      SubLine subLine0 = line0.wholeHyperplane();
      SubLine subLine1 = new SubLine(vector2D0, vector2D0);
      Vector2D vector2D1 = subLine0.intersection(subLine1, false);
      assertNull(vector2D1);
  }
}
