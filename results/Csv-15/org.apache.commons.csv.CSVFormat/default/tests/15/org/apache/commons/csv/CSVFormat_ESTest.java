/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 06:36:05 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Locale;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "+nTR,";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat0.POSTGRESQL_CSV.withRecordSeparator('Z');
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = '!';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      byte byte0 = (byte) (-43);
      // Undeclared exception!
      try { 
        cSVFormat0.INFORMIX_UNLOAD.println(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      char[] charArray0 = new char[31];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Float float0 = new Float((float) '\u0000');
      cSVFormat1.print((Object) float0, (Appendable) charBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      StringWriter stringWriter0 = new StringWriter(3472);
      StringWriter stringWriter1 = stringWriter0.append('T');
      CharBuffer charBuffer0 = CharBuffer.allocate(3472);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) charBuffer0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[6] = (Object) charBuffer0;
      objectArray0[7] = (Object) stringWriter2;
      objectArray0[8] = (Object) charBuffer0;
      // Undeclared exception!
      cSVFormat0.printRecord(stringWriter2, objectArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = '5';
      charArray0[2] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Float float0 = new Float(0.0F);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) float0, (Appendable) charBuffer0, true);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      char[] charArray0 = new char[19];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Float float0 = new Float((float) '\u0000');
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) float0, (Appendable) charBuffer0, true);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "SMupHn.:\"csMRak,um";
      stringArray0[1] = "NONE";
      stringArray0[2] = "\u0010";
      stringArray0[3] = "RFC4180";
      stringArray0[4] = "9NrNz{5vbufq(df";
      stringArray0[5] = "The quoteChar character and the delimiter cannot be the same ('";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('Z');
      cSVFormat4.withAutoFlush(true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withCommentMarker('+');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.equals(cSVFormat1);
      Character character0 = new Character('+');
      cSVFormat2.withQuote(character0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(65534);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      cSVFormat0.POSTGRESQL_TEXT.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charBuffer0;
      // Undeclared exception!
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.MYSQL.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('!');
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withEscape(character0);
      cSVFormat1.MYSQL.withTrim(true);
      cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('z');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('7');
      cSVFormat3.INFORMIX_UNLOAD.withCommentMarker((Character) null);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(false);
      cSVFormat5.hashCode();
      cSVFormat5.withIgnoreEmptyLines(false);
      cSVFormat3.printer();
      cSVFormat5.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('t');
      cSVFormat1.withTrim(true);
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = 't';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat2.print((Object) charBuffer0, (Appendable) charBuffer0, true);
      Object object1 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">|r(x?";
      stringArray0[1] = "JtjQ\"0K";
      stringArray0[2] = "}";
      stringArray0[3] = "";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      cSVFormat3.format(stringArray0);
      cSVFormat2.printer();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim(true);
      cSVFormat2.MYSQL.print((Object) charBuffer0, (Appendable) charBuffer0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) charBuffer0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('|');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "";
      CSVFormat cSVFormat3 = cSVFormat2.POSTGRESQL_CSV.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat0.withRecordSeparator("");
      cSVFormat4.getRecordSeparator();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('|');
      cSVFormat0.withQuote(character0);
      CSVFormat.Predefined.values();
      cSVFormat3.withAllowMissingColumnNames(true);
      cSVFormat1.equals(cSVFormat5);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Character character0 = new Character(';');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      CharBuffer.allocate(428);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      cSVFormat1.format(objectArray0);
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withTrim();
      cSVFormat4.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('6');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVFormat0;
      Object object0 = new Object();
      cSVFormat1.EXCEL.withCommentMarker('6');
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) cSVFormat1;
      cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat1.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.newFormat('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The delimiter cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(842);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("TDF");
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(':');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      cSVFormat2.POSTGRESQL_CSV.withAutoFlush(false);
      // Undeclared exception!
      try { 
        cSVFormat2.withQuote(':');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same (':')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("Header:");
      MockPrintStream mockPrintStream0 = new MockPrintStream("\r\n");
      mockPrintStream0.flush();
      CSVFormat cSVFormat3 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat3.println(mockPrintStream0);
      CSVFormat cSVFormat4 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      cSVFormat5.withIgnoreHeaderCase();
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "z\r\n";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      cSVFormat6.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      cSVFormat0.POSTGRESQL_CSV.withTrim();
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      cSVFormat0.withTrim(true);
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = 't';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
      cSVFormat0.withQuote('5');
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      
      Object object0 = new Object();
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      cSVFormat1.withAutoFlush(true);
      Character character0 = new Character('~');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker(character0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat4 = CSVFormat.MYSQL;
      cSVFormat0.TDF.withRecordSeparator('~');
      CharBuffer charBuffer0 = CharBuffer.allocate(428);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) charBuffer0;
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[9];
      CSVFormat.valueOf("Excel");
      objectArray0[0] = (Object) " recordNqumber=";
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) cSVFormat0;
      objectArray1[1] = (Object) " recordNqumber=";
      cSVFormat0.format(objectArray1);
      cSVFormat0.withAutoFlush(true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('C');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.equals(cSVFormat0);
      Character character0 = Character.valueOf('C');
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('C')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.DEFAULT.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ", recordNumber=";
      cSVFormat0.format(objectArray0);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("=yg@ZOv;qDY}:c}2sl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.=yg@ZOv;qDY}:c}2sl
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ", recordNqumber=";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " reZe-rdKubber=");
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withAutoFlush(true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat1.POSTGRESQL_TEXT.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('3');
      cSVFormat0.equals(cSVFormat2);
      cSVFormat2.getRecordSeparator();
      CSVFormat.newFormat('q');
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray1 = new Object[0];
      cSVFormat2.INFORMIX_UNLOAD.format(objectArray1);
      cSVFormat0.print((Object) "3", (Appendable) mockPrintWriter0, true);
      cSVFormat0.print((Object) "3", (Appendable) mockPrintWriter0, true);
      cSVFormat0.withDelimiter('3');
      cSVFormat2.withDelimiter('q');
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(' ');
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "u*U rnrdNqmbeq=";
      cSVFormat0.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) "}";
      cSVFormat0.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "},,,,,,,,,,");
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat0.RFC4180.withSkipHeaderRecord();
      cSVFormat1.withIgnoreSurroundingSpaces();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
      cSVFormat1.getCommentMarker();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat1.RFC4180.withHeader(class0);
      cSVFormat1.withTrailingDelimiter(true);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.isCommentMarkerSet();
      cSVFormat1.equals(cSVFormat0);
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_CSV.withAutoFlush(true);
      cSVFormat0.withEscape('!');
      cSVFormat2.withQuote('+');
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "' in ";
      stringArray0[2] = "&,W`/.ArB<4n0?2%";
      stringArray0[3] = ":.ZzzV\bu";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('|');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape((Character) null);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(false);
      cSVFormat5.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c7TWCr#S");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "c7TWCr#S");
      cSVFormat0.POSTGRESQL_TEXT.print((Object) cSVFormat1, (Appendable) printWriter0, true);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('8');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('8');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(true);
      cSVFormat5.withFirstRecordAsHeader();
      cSVFormat5.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "(%";
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(true);
      cSVFormat4.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
      cSVFormat5.hashCode();
      cSVFormat1.withCommentMarker('.');
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('.');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('f');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat4.withEscape(')');
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      cSVFormat0.POSTGRESQL_TEXT.hashCode();
      cSVFormat0.toString();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      cSVFormat0.format(objectArray0);
      cSVFormat1.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.POSTGRESQL_TEXT.hashCode();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat0.toString();
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      cSVFormat0.format(objectArray0);
      Character character0 = Character.valueOf('c');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('.');
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object[] objectArray0 = new Object[15];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
      cSVFormat0.withCommentMarker((Character) null);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat1.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      cSVFormat5.withIgnoreSurroundingSpaces(false);
      cSVFormat3.isCommentMarkerSet();
      cSVFormat3.equals("ALL_NON_NULL");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat0.isCommentMarkerSet();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('k');
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      cSVFormat4.equals(cSVFormat3);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('f');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat1.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('e');
      cSVFormat1.equals(cSVFormat0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.csv.Constants";
      stringArray0[1] = "\"?rS Jmo`d$T";
      stringArray0[2] = "/$kj4";
      stringArray0[3] = "QOX\"Z$wbNfb%";
      stringArray0[4] = "org.apache.commons.csv.QuoteMode";
      stringArray0[5] = "$VALUES";
      stringArray0[6] = "P';9d.`.\"%HshUo9Jwu";
      stringArray0[7] = "r y ";
      cSVFormat1.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat1.hashCode();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      Character character0 = Character.valueOf('=');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat3.toString();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('}');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      MockFileWriter mockFileWriter0 = new MockFileWriter("G1", true);
      cSVFormat3.TDF.print((Object) "(line ", (Appendable) mockFileWriter0, true);
      cSVFormat0.POSTGRESQL_CSV.withSkipHeaderRecord();
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat4 = cSVFormat0.MYSQL.withIgnoreEmptyLines();
      cSVFormat4.INFORMIX_UNLOAD.withQuote((Character) null);
      objectArray0[4] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.csv.Token");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("\"org.apache.commons.csv.CSVFormat@0000000002\"|\"org.apache.commons.csv.CSVFormat@0000000002\"|\"org.apache.commons.csv.CSVFormat@0000000001\"|\"org.apache.commons.csv.CSVFormat@0000000008\"|\"org.apache.commons.csv.CSVFormat@0000000001\"|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.\"org.apache.commons.csv.CSVFormat@0000000002\"|\"org.apache.commons.csv.CSVFormat@0000000002\"|\"org.apache.commons.csv.CSVFormat@0000000001\"|\"org.apache.commons.csv.CSVFormat@0000000008\"|\"org.apache.commons.csv.CSVFormat@0000000001\"|
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) "(line ", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('!');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("zMT!\b(tT}Y");
      cSVFormat5.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = new Character('T');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat2.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "";
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "";
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      cSVFormat3.format(objectArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("ALL_NON_NULL", ",\"\",,,,,,,");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ,\"\",,,,,,,
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(true);
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      cSVFormat1.isCommentMarkerSet();
      cSVFormat1.equals(cSVFormat3);
      cSVFormat2.withCommentMarker('7');
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\"');
      Character character0 = Character.valueOf('N');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(stringArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat5.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFile mockFile0 = new MockFile("ALL_NON_NULL", "#''-'=9we:~Vx");
      MockFile mockFile1 = new MockFile(mockFile0, "format");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "#''-'=9we:~Vx";
      objectArray0[1] = (Object) "#''-'=9we:~Vx";
      objectArray0[2] = (Object) "format";
      objectArray0[3] = (Object) "ALL_NON_NULL";
      objectArray0[4] = (Object) "format";
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) "format";
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat0.printRecord(mockFileWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.withDelimiter('H');
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "InformixUnloadCsv");
      CSVFormat.newFormat('P');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.withHeader(class0);
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.getQuoteMode();
      cSVFormat3.withRecordSeparator("");
      char[] charArray0 = new char[1];
      cSVFormat3.withEscape('P');
      charArray0[0] = 'P';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 1855, 1855);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('8');
      cSVFormat0.equals(cSVFormat1);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat2.getCommentMarker();
      cSVFormat1.withAllowMissingColumnNames(false);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('/');
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat0 = CSVFormat.valueOf("PostgreSQLCsv");
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      cSVFormat1.INFORMIX_UNLOAD.printer();
      Character character0 = new Character('L');
      cSVFormat2.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat1.EXCEL.withDelimiter('~');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('m');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.POSTGRESQL_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.MYSQL.withIgnoreEmptyLines();
      cSVFormat1.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      cSVFormat2.hashCode();
      cSVFormat0.toString();
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames(true);
      cSVFormat1.format(cSVFormat_PredefinedArray0);
      cSVFormat0.format(cSVFormat_PredefinedArray0);
      cSVFormat4.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "E\n";
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "";
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('K');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      Character character0 = Character.valueOf('b');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat1.equals(cSVFormat4);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('M');
      Character character0 = new Character('M');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        cSVFormat4.withDelimiter('M');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('M')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      CharBuffer charBuffer0 = CharBuffer.allocate(41);
      // Undeclared exception!
      try { 
        cSVFormat0.RFC4180.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0:N%$&";
      stringArray0[1] = ") EOF reached before encapsulated token finished";
      stringArray0[2] = "IK[B]kgODZ0bpt";
      stringArray0[3] = "i13S>i@*8]^Or";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat4.getIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Character character0 = new Character('$');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat2.withTrailingDelimiter(false);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat2.equals(cSVFormat0);
      Character character0 = Character.valueOf('1');
      cSVFormat1.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      Character character0 = new Character(']');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat6 = cSVFormat5.withAutoFlush(false);
      cSVFormat5.hashCode();
      cSVFormat6.toString();
      CSVFormat cSVFormat7 = CSVFormat.EXCEL;
      CSVFormat cSVFormat8 = cSVFormat2.withRecordSeparator(']');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat4;
      cSVFormat8.format(objectArray0);
      cSVFormat7.withSkipHeaderRecord();
      cSVFormat4.equals(objectArray0[0]);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAutoFlush(true);
      cSVFormat1.POSTGRESQL_TEXT.hashCode();
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat1.isCommentMarkerSet();
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("ALL_NON_NULL");
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("P.l7Qym`lB");
      cSVFormat2.equals(cSVFormat3);
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat.newFormat('B');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("}");
      cSVFormat2.equals(cSVFormat4);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('{');
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = new Character('~');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('`');
      CSVFormat cSVFormat5 = CSVFormat.MYSQL;
      cSVFormat4.withQuote('~');
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat1.hashCode();
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[8] = object0;
      cSVFormat1.format(objectArray0);
      cSVFormat1.withSkipHeaderRecord();
      Float float0 = new Float(0.0);
      cSVFormat2.equals(float0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "";
      CSVFormat cSVFormat0 = CSVFormat.newFormat('C');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('L');
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
      Character character0 = Character.valueOf('=');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      cSVFormat4.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat0.POSTGRESQL_TEXT.print((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "4>kKH:E='2>A~";
      stringArray0[1] = ",K";
      stringArray0[2] = "BY`A4m@Fr";
      stringArray0[3] = "`#YERtXgl";
      stringArray0[4] = "c46myzyjbzr2v*s`";
      stringArray0[5] = "ALL_NON_NULL";
      stringArray0[6] = "The quoteChar character and the delimiter cannot be the same ('";
      stringArray0[7] = "";
      cSVFormat1.withHeader(stringArray0);
      MockFile.createTempFile("I@./[V", ",K");
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(']');
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withQuote(']');
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withDelimiter(']');
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat6 = cSVFormat5.withAutoFlush(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat7 = cSVFormat6.withTrailingDelimiter(true);
      CSVFormat cSVFormat8 = cSVFormat4.POSTGRESQL_CSV.withSkipHeaderRecord();
      CSVFormat cSVFormat9 = cSVFormat8.POSTGRESQL_TEXT.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat10 = cSVFormat5.RFC4180.withQuote('s');
      cSVFormat7.toString();
      cSVFormat6.withIgnoreEmptyLines(true);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat10;
      objectArray0[2] = (Object) cSVFormat9;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) null;
      cSVFormat6.withHeaderComments(objectArray0);
      cSVFormat6.withIgnoreSurroundingSpaces(false);
      cSVFormat0.getTrailingDelimiter();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Delimiter=<]> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      stringArray0[1] = "Delimiter=<]> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      stringArray0[2] = "S\"E&Q1S_a$K&tz;W7e<";
      stringArray0[3] = "Delimiter=<]> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      stringArray0[4] = "Delimiter=<]> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      stringArray0[5] = "Delimiter=<]> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      stringArray0[6] = "Delimiter=<]> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      stringArray0[7] = "Delimiter=<]> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'Delimiter=<]> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false' in [Delimiter=<]> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false, Delimiter=<]> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false, S\"E&Q1S_a$K&tz;W7e<, Delimiter=<]> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false, Delimiter=<]> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false, Delimiter=<]> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false, Delimiter=<]> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false, Delimiter=<]> SurroundingSpaces:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\"";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.MYSQL.withTrailingDelimiter();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(resultSet0);
      char char0 = '5';
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withDelimiter('5');
      cSVFormat1.POSTGRESQL_TEXT.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('(');
      cSVFormat3.TDF.withCommentMarker('(');
      cSVFormat3.POSTGRESQL_TEXT.withTrim(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qs:;)r3To:_#QO!r");
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('(');
      cSVFormat4.withCommentMarker('(');
      CSVFormat.newFormat(']');
      cSVFormat4.withIgnoreSurroundingSpaces(false);
      cSVFormat2.withSkipHeaderRecord();
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("qs:;)r3To:_#QO!r", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      cSVFormat4.withIgnoreHeaderCase();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(82);
      CSVFormat cSVFormat5 = CSVFormat.DEFAULT;
      Object object0 = new Object();
      Object object1 = new Object();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('T');
      cSVFormat1.getRecordSeparator();
      cSVFormat1.getDelimiter();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('o');
      cSVFormat1.withAllowMissingColumnNames();
      cSVFormat0.withEscape('o');
      cSVFormat0.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('q');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("ALL_NON_NULL");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      Character character0 = new Character('q');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      cSVFormat2.TDF.withIgnoreEmptyLines();
      Character character1 = Character.valueOf(' ');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker(character1);
      cSVFormat5.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) stringWriter0;
      cSVFormat0.DEFAULT.printRecord(stringWriter0, objectArray0);
      cSVFormat0.INFORMIX_UNLOAD.withSkipHeaderRecord(true);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
      cSVFormat1.withSkipHeaderRecord();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);
      cSVFormat1.hashCode();
      cSVFormat2.toString();
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord();
      cSVFormat3.equals(cSVFormat5);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      cSVFormat2.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "(%";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withRecordSeparator('-');
      cSVFormat0.RFC4180.format(cSVFormat_PredefinedArray0);
      cSVFormat0.format(cSVFormat_PredefinedArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.withEscape(')');
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ";";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\r\n";
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(')');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.RFC4180.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(')');
      cSVFormat3.getRecordSeparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.csv.Lexer", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      cSVFormat0.print((Object) "\r\n", (Appendable) mockPrintWriter0, true);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) character0;
      cSVFormat1.POSTGRESQL_CSV.withTrim();
      objectArray0[5] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      Character character1 = new Character('2');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character1);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(false);
      cSVFormat5.withRecordSeparator(",bw");
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      cSVFormat_Predefined0.getFormat();
      cSVFormat1.withAllowMissingColumnNames(false);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) class0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(']');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
      cSVFormat5.withHeader(class0);
      CSVFormat cSVFormat6 = cSVFormat1.withAutoFlush(true);
      cSVFormat1.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat7 = cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat7.format(objectArray0);
      cSVFormat0.getCommentMarker();
      cSVFormat6.withIgnoreHeaderCase(true);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat3.withDelimiter('c');
      cSVFormat2.getRecordSeparator();
      cSVFormat2.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object object0 = new Object();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('p');
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      cSVFormat4.print((Object) class0, (Appendable) stringWriter1, true);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat3.withHeader(class1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withDelimiter('=');
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.withEscape('y');
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      char char0 = '_';
      cSVFormat1.POSTGRESQL_CSV.withCommentMarker('_');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('#');
      char char1 = 'd';
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('d');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat5.getTrim();
      cSVFormat0.getEscapeCharacter();
      cSVFormat1.getQuoteCharacter();
      cSVFormat2.withAllowMissingColumnNames(false);
      cSVFormat4.getHeaderComments();
      cSVFormat1.EXCEL.withEscape((Character) null);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-3133));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('8');
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote('8');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('8')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("ALL_NON_NULL");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(912);
      Object object0 = new Object();
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "ALL_NON_NULL";
      objectArray0[1] = (Object) byteArrayOutputStream0;
      cSVFormat1.withTrim(false);
      cSVFormat1.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withTrim();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ALL_NON_NULL");
      CSVFormat.newFormat('u');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.getRecordSeparator();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      cSVFormat2.MYSQL.printer();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      char char0 = 'k';
      cSVFormat3.withQuote('k');
      cSVFormat2.POSTGRESQL_CSV.withSkipHeaderRecord();
      cSVFormat1.printer();
      cSVFormat2.withDelimiter('@');
      BufferedWriter bufferedWriter0 = null;
      try {
        bufferedWriter0 = new BufferedWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      cSVFormat1.withNullString("J");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4928);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat1.equals(objectArray0[1]);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('C');
      Object object0 = new Object();
      cSVFormat0.withTrim(true);
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      stringArray0[2] = ") invalid parse sequence";
      stringArray0[3] = "[Gj}v,QA";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat2.equals(quoteMode0);
      cSVFormat1.isCommentMarkerSet();
      cSVFormat1.getQuoteCharacter();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) ") invalid parse sequence", 32, 114);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat1.withQuote('C');
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "";
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(false);
      cSVFormat5.format(objectArray0);
      cSVFormat1.toString();
      Character character0 = new Character('2');
      cSVFormat0.withQuote(character0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat2.EXCEL.withHeader((String[]) null);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat4 = CSVFormat.MYSQL;
      cSVFormat0.withQuote('A');
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('p');
      cSVFormat2.withAutoFlush(true);
      cSVFormat1.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat3.toString();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[6];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) cSVFormat1;
      Object object2 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.toString();
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('}');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      char char0 = ']';
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(']');
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(false);
      cSVFormat0.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      cSVFormat5.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD;
      // Undeclared exception!
      try { 
        cSVFormat2.withQuote('}');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('}')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      cSVFormat1.withFirstRecordAsHeader();
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = 'Q';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        cSVFormat0.INFORMIX_UNLOAD.println(charBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('h');
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat4.withNullString((String) null);
      cSVFormat5.withTrim(false);
      Double double0 = new Double(873.1323);
      cSVFormat0.equals(double0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      char char0 = 'd';
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('d');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf('d');
      // Undeclared exception!
      try { 
        cSVFormat3.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('d')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("ALL_NON_NULL");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(912);
      Object object0 = new Object();
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      cSVFormat2.withAutoFlush(true);
      Character character0 = new Character('~');
      cSVFormat1.withCommentMarker(character0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat4 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.allocate(428);
      cSVFormat2.print((Object) null, (Appendable) charBuffer0, false);
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat0.withAutoFlush(true);
      cSVFormat3.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      cSVFormat0.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat2;
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withAutoFlush(true);
      cSVFormat2.POSTGRESQL_TEXT.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, PostgreSQLCsv, PostgreSQLText, RFC4180, TDF]";
      cSVFormat2.format(objectArray0);
      Character character0 = new Character('f');
      cSVFormat4.withEscape(character0);
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = object0;
      cSVFormat1.format(objectArray0);
      cSVFormat2.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAutoFlush(true);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat1.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('C');
      Object object0 = new Object();
      cSVFormat1.withTrim(false);
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('7');
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      MockFile mockFile0 = new MockFile("");
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat0.print((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat.newFormat('q');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("J");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4928);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) cSVFormat0;
      Object object1 = new Object();
      cSVFormat0.format(objectArray0);
      cSVFormat1.withIgnoreHeaderCase();
      MockFile mockFile0 = new MockFile("");
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat2.print((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote('G');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('G')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('6');
      Character character0 = new Character('`');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      cSVFormat4.MYSQL.withIgnoreHeaderCase();
      boolean boolean0 = true;
      cSVFormat4.withIgnoreSurroundingSpaces(true);
      cSVFormat3.TDF.withAllowMissingColumnNames();
      URI uRI0 = MockURI.aHttpURI;
      cSVFormat4.MYSQL.withCommentMarker('W');
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('c');
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat3.withTrim(true);
      cSVFormat2.equals(cSVFormat3);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('C');
      Object object0 = new Object();
      CSVFormat.valueOf("Default");
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat1.toString();
      cSVFormat1.getCommentMarker();
      cSVFormat2.withIgnoreEmptyLines(false);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('j');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.TDF.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("B|jw[{vajOW(63uj?!");
      cSVFormat5.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4928);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces(false);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "";
      objectArray0[4] = object0;
      Object object1 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat0.withQuote('{');
      cSVFormat3.getCommentMarker();
      CSVFormat cSVFormat4 = cSVFormat2.withQuote('J');
      cSVFormat4.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('p');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('p');
      // Undeclared exception!
      try { 
        cSVFormat3.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "(%";
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAutoFlush(false);
      cSVFormat1.POSTGRESQL_TEXT.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.MYSQL.withTrailingDelimiter();
      cSVFormat0.toString();
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "";
      objectArray0[4] = object0;
      Object object1 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat2.toString();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat2.withEscape('?');
      cSVFormat0.withDelimiter('?');
      Character.valueOf('l');
      Character character0 = Character.valueOf('j');
      cSVFormat4.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      cSVFormat5.withIgnoreHeaderCase(true);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object object0 = new Object();
      cSVFormat0.equals(cSVFormat0);
      cSVFormat0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        cSVFormat0.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.getIgnoreHeaderCase();
      cSVFormat0.isCommentMarkerSet();
      cSVFormat0.getQuoteMode();
      String string0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("NullString=<");
      cSVFormat5.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      Object object0 = new Object();
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      cSVFormat0.withFirstRecordAsHeader();
      cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      cSVFormat4.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat1.withTrim(false);
      StringWriter stringWriter0 = new StringWriter(1846);
      cSVFormat4.withDelimiter('b');
      cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('d');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat0.withCommentMarker('d');
      Character character1 = new Character('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat2.withAllowMissingColumnNames();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YQ>mvqRemR63PQ~!gMz");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "YQ>mvqRemR63PQ~!gMz");
      cSVFormat2.isNullStringSet();
      cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat2.POSTGRESQL_CSV.withSkipHeaderRecord(false);
      CSVFormat cSVFormat5 = cSVFormat4.TDF.withTrim(true);
      cSVFormat5.MYSQL.withSkipHeaderRecord(false);
      StringWriter stringWriter0 = new StringWriter(2218);
      cSVFormat3.POSTGRESQL_CSV.withDelimiter('#');
      cSVFormat3.RFC4180.withIgnoreHeaderCase(true);
      cSVFormat1.withEscape('#');
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "";
      objectArray0[4] = object0;
      CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator(')');
      Character character0 = Character.valueOf('y');
      cSVFormat5.withEscape(character0);
      cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat0.INFORMIX_UNLOAD_CSV.format(objectArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9E#$V|O,O8*M{ig8X*");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9E#$V|O,O8*M{ig8X*");
      cSVFormat0.isNullStringSet();
      CSVFormat cSVFormat6 = cSVFormat3.withFirstRecordAsHeader();
      cSVFormat6.getEscapeCharacter();
      cSVFormat2.withSkipHeaderRecord();
      cSVFormat6.withTrailingDelimiter(false);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "";
      objectArray0[4] = object0;
      Object object1 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Character character0 = Character.valueOf('U');
      cSVFormat0.EXCEL.withAllowMissingColumnNames(false);
      cSVFormat0.withQuote(character0);
      cSVFormat1.hashCode();
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat3.withAllowMissingColumnNames();
      cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.withAutoFlush(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(") invalid char between encapsulated token and delimiter");
      mockPrintStream0.printf("t{8O1x", (Object[]) stringArray0);
      boolean boolean0 = false;
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat4.withAllowMissingColumnNames();
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-725));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5ur~TKPQWkg$-");
      Character character0 = new Character('d');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Default", "Default");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = null;
      objectArray0[1] = (Object) mockPrintStream0;
      CSVFormat cSVFormat2 = cSVFormat0.EXCEL.withSkipHeaderRecord();
      cSVFormat2.TDF.toString();
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      cSVFormat4.MYSQL.withRecordSeparator("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
      StringWriter stringWriter0 = new StringWriter(2194);
      cSVFormat2.withDelimiter('d');
      cSVFormat4.withIgnoreHeaderCase(false);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
      cSVFormat1.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat4.toString();
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[3] = (Object) cSVFormat5;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) class0;
      cSVFormat2.format(objectArray0);
      cSVFormat5.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('@');
      Character character0 = new Character('@');
      Character character1 = new Character('&');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character1);
      cSVFormat1.withAllowMissingColumnNames();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QuoteChar=<");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t}=!_8(");
      cSVFormat1.isNullStringSet();
      cSVFormat4.withFirstRecordAsHeader();
      Character.valueOf('&');
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('P');
      cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.getRecordSeparator();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVFormat cSVFormat4 = cSVFormat2.DEFAULT.withSkipHeaderRecord(false);
      CSVFormat.newFormat('P');
      cSVFormat3.print((Object) cSVFormat0, (Appendable) charArrayWriter0, false);
      cSVFormat2.getCommentMarker();
      cSVFormat3.hashCode();
      cSVFormat3.getQuoteMode();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/NDN[bF3'vA>");
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat4.withCommentMarker('P');
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("EH/'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.EH/'
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withQuote('C');
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.withTrim(false);
      cSVFormat0.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat1.isCommentMarkerSet();
      cSVFormat1.withSkipHeaderRecord();
      cSVFormat0.equals(cSVFormat1);
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "";
      objectArray0[4] = object0;
      Object object1 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.withTrim(false);
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      char char0 = '@';
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withCommentMarker('@');
      char char1 = '&';
      Character character0 = new Character('&');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      String string0 = "YQ>mvqRemR63PQ~!gMz";
      cSVFormat1.POSTGRESQL_CSV.withAllowMissingColumnNames();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "YQ>mvqRemR63PQ~!gMz");
      cSVFormat1.isNullStringSet();
      cSVFormat3.printer();
      cSVFormat2.withQuote(character0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("YQ>mvqRemR63PQ~!gMz", "YQ>mvqRemR63PQ~!gMz");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // YQ>mvqRemR63PQ~!gMz
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      cSVFormat0.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat2;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat5 = cSVFormat1.withEscape('K');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat5.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.withAutoFlush(false);
      cSVFormat0.hashCode();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);
      cSVFormat3.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(false);
      cSVFormat5.toString();
      cSVFormat0.withIgnoreEmptyLines();
      cSVFormat3.withIgnoreHeaderCase(false);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Character character0 = Character.valueOf('z');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(false);
      cSVFormat5.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.toString();
      cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat7 = CSVFormat.RFC4180;
      Object object0 = new Object();
      cSVFormat6.format(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withCommentMarker('@');
      Character character0 = new Character('&');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat1.POSTGRESQL_CSV.withAllowMissingColumnNames();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "YQ>mvqRemR63PQ~!gMz");
      cSVFormat1.isNullStringSet();
      cSVFormat3.printer();
      cSVFormat0.withDelimiter('@');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.toString();
      cSVFormat0.withIgnoreEmptyLines();
      cSVFormat3.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) "Delimiter=<,> Escape=<\"> QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false";
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat0.printer();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      char char0 = 'f';
      cSVFormat2.withDelimiter('f');
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('H');
      Character character0 = new Character('H');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat2.DEFAULT.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('b');
      cSVFormat5.getIgnoreHeaderCase();
      File file0 = MockFile.createTempFile("The comment start character and the delimiter cannot be the same ('", "The comment start character and the delimiter cannot be the same ('", (File) null);
      Charset charset0 = Charset.defaultCharset();
      cSVFormat5.print(file0, charset0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      char char0 = '@';
      cSVFormat1.POSTGRESQL_TEXT.withCommentMarker('@');
      char char1 = '&';
      Character character0 = new Character('&');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      String string0 = "YQ>mvqRemR63PQ~!gMz";
      cSVFormat1.POSTGRESQL_CSV.withAllowMissingColumnNames();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "YQ>mvqRemR63PQ~!gMz");
      cSVFormat1.isNullStringSet();
      cSVFormat2.printer();
      cSVFormat0.withDelimiter('@');
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("YQ>mvqRemR63PQ~!gMz", "YQ>mvqRemR63PQ~!gMz");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // YQ>mvqRemR63PQ~!gMz
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.equals(rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.equals(cSVFormat1);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "";
      objectArray0[4] = object0;
      Object object1 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.RFC4180.withFirstRecordAsHeader();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      cSVFormat2.equals("");
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('8');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('8');
      cSVFormat1.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withAutoFlush(true);
      cSVFormat1.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.toString();
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat3.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[2] = (Object) class0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat1;
      cSVFormat3.format(objectArray0);
      cSVFormat2.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.toString();
      Character character0 = new Character('+');
      cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat1.withAutoFlush(true);
      MockFile mockFile0 = new MockFile("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, PostgreSQLCsv, PostgreSQLText, RFC4180, TDF]");
      File file0 = MockFile.createTempFile("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, PostgreSQLCsv, PostgreSQLText, RFC4180, TDF]", "ic1#", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "org.apache.commons.csv.CSVFormat$1");
      CSVFormat cSVFormat4 = cSVFormat0.withAllowMissingColumnNames();
      Long long0 = new Long((-1L));
      Character character1 = Character.valueOf('5');
      cSVFormat4.withCommentMarker(character1);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat2.toString();
      cSVFormat5.withTrim();
      cSVFormat3.getIgnoreSurroundingSpaces();
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("J");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4928);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      cSVFormat0.toString();
      cSVFormat1.withIgnoreEmptyLines();
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("org.apache.commons.csv.Assertions");
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[4] = (Object) dataOutputStream0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) dataOutputStream0;
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat2.withRecordSeparator("TB{pbqD(WM");
      cSVFormat1.withIgnoreHeaderCase();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat2.withEscape('S');
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('d');
      cSVFormat0.withEscape(character0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = null;
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
      cSVFormat1.TDF.toString();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      Class<Token.Type> class1 = Token.Type.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class1);
      cSVFormat4.withAutoFlush(true);
      cSVFormat0.hashCode();
      cSVFormat1.toString();
      cSVFormat0.withIgnoreEmptyLines();
      cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat3.format(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.print((Object) null, (Appendable) pipedWriter0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("J");
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('k');
      cSVFormat2.withIgnoreEmptyLines();
      CSVFormat.newFormat('h');
      // Undeclared exception!
      try { 
        cSVFormat3.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('*');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('*');
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\u0010');
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('d');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat3.withQuote('!');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Default";
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat3;
      cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat2.getRecordSeparator();
      QuoteMode quoteMode1 = QuoteMode.NONE;
      cSVFormat2.withQuoteMode(quoteMode1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      boolean boolean0 = false;
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat3.DEFAULT.toString();
      CSVFormat cSVFormat4 = cSVFormat1.withAutoFlush(false);
      CSVFormat cSVFormat5 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat5.DEFAULT.withSkipHeaderRecord(true);
      CSVFormat cSVFormat6 = cSVFormat3.withAllowMissingColumnNames(false);
      File file0 = MockFile.createTempFile(") EOF reached before encapsulated token finished", "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) ") EOF reached before encapsulated token finished");
      cSVFormat6.POSTGRESQL_CSV.printRecord(printWriter0, objectArray0);
      CSVFormat cSVFormat7 = cSVFormat5.withTrailingDelimiter();
      cSVFormat7.TDF.withCommentMarker('b');
      Character character0 = Character.valueOf('j');
      cSVFormat4.withCommentMarker(character0);
      cSVFormat0.withAllowMissingColumnNames();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r
         // > EmptyLines:ignored SkipHeaderRecord:false
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "out");
      Character character0 = new Character('W');
      cSVFormat0.INFORMIX_UNLOAD.withEscape(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('s');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator('s');
      cSVFormat0.getRecordSeparator();
      cSVFormat1.getQuoteCharacter();
      cSVFormat2.withSkipHeaderRecord();
      cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat3.withRecordSeparator("<ozPSwrDujO$>}=c~0c");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[16];
      cSVFormat0.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withCommentMarker('b');
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat2.withHeader((ResultSet) null);
      cSVFormat0.getNullString();
      cSVFormat0.withAllowMissingColumnNames(false);
      // Undeclared exception!
      try { 
        cSVFormat3.printRecord((Appendable) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withHeader((ResultSet) null);
      cSVFormat0.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.TDF.withRecordSeparator('k');
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withAutoFlush(true);
      cSVFormat2.POSTGRESQL_TEXT.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, PostgreSQLCsv, PostgreSQLText, RFC4180, TDF]";
      objectArray0[1] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, PostgreSQLCsv, PostgreSQLText, RFC4180, TDF]";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat1;
      cSVFormat5.withRecordSeparator("");
      cSVFormat0.format(objectArray0);
      cSVFormat4.getIgnoreHeaderCase();
      cSVFormat3.withIgnoreSurroundingSpaces(true);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('-');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      cSVFormat2.getRecordSeparator();
      cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = CSVFormat.newFormat('-');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
      cSVFormat6.withIgnoreHeaderCase(true);
      cSVFormat5.getHeader();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\r\n";
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
      
      Object[] objectArray0 = new Object[10];
      objectArray0[5] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withAutoFlush(false);
      cSVFormat2.POSTGRESQL_TEXT.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, PostgreSQLCsv, PostgreSQLText, RFC4180, TDF]";
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) "p7Dd\"HpqCYNd%";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4928);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.ITALIAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      cSVFormat0.withAutoFlush(false);
      cSVFormat5.withFirstRecordAsHeader();
      CSVFormat cSVFormat7 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat7.getRecordSeparator();
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4928);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.ITALIAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) mockPrintStream0;
      cSVFormat2.getNullString();
      Appendable appendable0 = null;
      MockFile mockFile0 = new MockFile("tyNAJ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      cSVFormat1.RFC4180.print((Appendable) mockFileWriter0);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) "", (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('U');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape('U');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('U')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator((String) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) quoteMode0;
      cSVFormat2.format(objectArray0);
      cSVFormat3.println((Appendable) null);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        cSVFormat1.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.RFC4180.format(cSVFormat_PredefinedArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      boolean boolean0 = true;
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat2.withTrim(true);
      char char0 = '}';
      char char1 = '*';
      Character character0 = Character.valueOf('*');
      cSVFormat2.withEscape(character0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1885));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat.newFormat('{');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('T');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('Z');
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat5;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat4;
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withAutoFlush(true);
      Class<Token.Type> class1 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class1);
      cSVFormat1.getRecordSeparator();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat.newFormat('\"');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet0);
      cSVFormat5.getNullString();
      Appendable appendable0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        cSVFormat4.print((Object) class1, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4928);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.ITALIAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) dataOutputStream0;
      objectArray0[7] = (Object) dataOutputStream0;
      cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      CSVFormat cSVFormat4 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat5.getRecordSeparator();
      Object[] objectArray1 = new Object[9];
      Object object1 = new Object();
      objectArray1[0] = object1;
      objectArray1[1] = (Object) cSVFormat5;
      objectArray1[2] = (Object) cSVFormat2;
      objectArray1[3] = (Object) locale0;
      objectArray1[4] = (Object) "";
      objectArray1[5] = (Object) locale0;
      objectArray1[6] = (Object) cSVFormat5;
      objectArray1[7] = (Object) locale0;
      objectArray1[8] = (Object) cSVFormat4;
      cSVFormat3.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      boolean boolean0 = false;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4928);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.toString();
      cSVFormat2.withIgnoreEmptyLines();
      MockFile mockFile0 = new MockFile("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      MockFile.createTempFile("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", (File) mockFile0);
      // Undeclared exception!
      try { 
        Charset.forName("|S");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // |S
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4928);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.ITALIAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) dataOutputStream0;
      objectArray0[7] = (Object) dataOutputStream0;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      Object object1 = new Object();
      Character character0 = new Character('W');
      cSVFormat2.withEscape(character0);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "";
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withAllowMissingColumnNames();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.INFORMIX_UNLOAD.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.EXCEL.withEscape(':');
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      CSVFormat.newFormat('P');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.withHeader(class0);
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.getQuoteMode();
      cSVFormat3.withRecordSeparator("");
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 1855, 1855);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat.newFormat('{');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('T');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('Z');
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("");
      cSVFormat5.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.withNullString("_");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4928);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.ITALIAN;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf(locale0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim();
      cSVFormat3.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat2.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.TDF.withTrailingDelimiter();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat2.POSTGRESQL_CSV.withSkipHeaderRecord(true);
      cSVFormat4.TDF.withTrim(true);
      Character character0 = new Character('o');
      cSVFormat1.RFC4180.withQuote(character0);
      StringWriter stringWriter0 = new StringWriter(2218);
      cSVFormat3.POSTGRESQL_CSV.withDelimiter('#');
      CSVFormat cSVFormat5 = cSVFormat3.RFC4180.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat6 = cSVFormat5.POSTGRESQL_TEXT.withSkipHeaderRecord();
      CSVFormat cSVFormat7 = cSVFormat6.MYSQL.withEscape(character0);
      cSVFormat7.INFORMIX_UNLOAD_CSV.withHeader(stringArray0);
      CSVFormat cSVFormat8 = cSVFormat3.withAutoFlush(true);
      cSVFormat8.DEFAULT.withFirstRecordAsHeader();
      cSVFormat1.EXCEL.withHeaderComments(stringArray0);
      cSVFormat0.getRecordSeparator();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat2.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      Character character0 = new Character('7');
      cSVFormat0.withQuote(character0);
      StringWriter stringWriter0 = new StringWriter(2892);
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('o');
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat4.withSkipHeaderRecord();
      Character character1 = Character.valueOf('M');
      CSVFormat cSVFormat5 = cSVFormat4.withEscape(character1);
      cSVFormat5.withAutoFlush(true);
      cSVFormat1.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) character1;
      CSVFormat cSVFormat6 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat3.getRecordSeparator();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat6.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withTrailingDelimiter();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      cSVFormat3.POSTGRESQL_CSV.withSkipHeaderRecord(true);
      StringWriter stringWriter0 = new StringWriter(1563);
      cSVFormat1.println(stringWriter0);
      CSVFormat cSVFormat5 = cSVFormat1.withTrim();
      cSVFormat2.withAllowMissingColumnNames(false);
      Character character0 = new Character('?');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.POSTGRESQL_TEXT.withRecordSeparator('p');
      CSVFormat cSVFormat7 = cSVFormat6.withCommentMarker(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat8 = CSVFormat.newFormat('|');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat3.print((Object) cSVFormat7, (Appendable) stringWriter0, false);
      cSVFormat2.hashCode();
      QuoteMode quoteMode1 = QuoteMode.ALL_NON_NULL;
      cSVFormat8.withQuoteMode(quoteMode1);
      cSVFormat0.getEscapeCharacter();
      cSVFormat5.withSkipHeaderRecord(true);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withAutoFlush(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) rowSetMetaDataImpl0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      cSVFormat1.withAllowMissingColumnNames(false);
      Character.valueOf(',');
      Character character0 = new Character('#');
      CSVFormat cSVFormat3 = cSVFormat0.withEscape(character0);
      cSVFormat3.DEFAULT.withTrim();
      CSVFormat cSVFormat4 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character1 = new Character('#');
      cSVFormat3.withQuote(character1);
      CSVFormat.Predefined.values();
      cSVFormat4.getHeader();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat2.withTrim();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines();
      Character character0 = new Character('I');
      Character character1 = new Character('I');
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker(character1);
      CSVFormat cSVFormat5 = cSVFormat0.withTrim();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u2029");
      cSVFormat0.print((Appendable) mockPrintStream0);
      cSVFormat1.printer();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat6 = cSVFormat3.withTrailingDelimiter(false);
      CSVFormat cSVFormat7 = cSVFormat6.withDelimiter('z');
      CSVFormat cSVFormat8 = cSVFormat4.withTrim(false);
      cSVFormat8.getRecordSeparator();
      CSVFormat cSVFormat9 = cSVFormat5.withAllowMissingColumnNames();
      cSVFormat9.getQuoteCharacter();
      cSVFormat7.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      StringWriter stringWriter0 = new StringWriter(577);
      cSVFormat0.println(stringWriter0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames(false);
      Character character0 = new Character('g');
      cSVFormat4.withCommentMarker(character0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLCsv;
      CSVFormat cSVFormat5 = cSVFormat_Predefined0.getFormat();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat5.withHeader(resultSet0);
      CSVFormat.newFormat('P');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat2.print((Object) cSVFormat3, (Appendable) stringWriter0, false);
      cSVFormat4.hashCode();
      CSVFormat cSVFormat6 = cSVFormat2.withTrailingDelimiter(false);
      QuoteMode quoteMode1 = QuoteMode.ALL_NON_NULL;
      cSVFormat6.withQuoteMode(quoteMode1);
      cSVFormat6.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLText;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD.withTrim(false);
      cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(false);
      Character character0 = new Character('o');
      CSVFormat cSVFormat4 = cSVFormat2.withQuote(character0);
      StringWriter stringWriter0 = new StringWriter(2218);
      cSVFormat0.withDelimiter('#');
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord();
      cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat7 = cSVFormat6.withAutoFlush(false);
      cSVFormat5.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[0];
      cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat7.getRecordSeparator();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat7.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator('{');
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("Wjq@40(7\"6i</`}");
      cSVFormat4.withFirstRecordAsHeader();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat5 = cSVFormat3.withHeader(class0);
      PipedReader pipedReader0 = new PipedReader(35);
      cSVFormat2.parse(pipedReader0);
      CSVFormat cSVFormat6 = cSVFormat5.withAutoFlush(false);
      cSVFormat6.withIgnoreEmptyLines(false);
      cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat2.getRecordSeparator();
      CSVFormat cSVFormat7 = cSVFormat5.withHeader(class0);
      CharBuffer charBuffer0 = CharBuffer.allocate(11);
      cSVFormat3.println(charBuffer0);
      cSVFormat5.withAllowMissingColumnNames();
      CSVFormat cSVFormat8 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat9 = cSVFormat8.withIgnoreHeaderCase(false);
      cSVFormat2.getAllowMissingColumnNames();
      cSVFormat9.withTrim();
      CSVFormat cSVFormat10 = CSVFormat.newFormat('{');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat10.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat11 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat11.POSTGRESQL_CSV.withIgnoreHeaderCase();
      cSVFormat8.withAllowMissingColumnNames();
      cSVFormat7.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withAutoFlush(true);
      cSVFormat2.POSTGRESQL_TEXT.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = Character.valueOf('0');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      PipedReader pipedReader0 = new PipedReader(35);
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase(true);
      cSVFormat7.DEFAULT.withTrailingDelimiter(true);
      cSVFormat5.getRecordSeparator();
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat8 = cSVFormat6.withHeader(class1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class1;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) "\r\n";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) class1;
      objectArray0[5] = (Object) cSVFormat6;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat8;
      Object object1 = new Object();
      objectArray0[8] = object1;
      cSVFormat0.format(objectArray0);
      cSVFormat8.withRecordSeparator("java.lang.Class@0000000013\torg.apache.commons.csv.CSVFormat@0000000006\t\"\r\n\"\tjava.lang.Object@0000000014\tjava.lang.Class@0000000013\torg.apache.commons.csv.CSVFormat@0000000008\torg.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000011\tjava.lang.Object@0000000015");
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4928);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) mockPrintStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Object[] objectArray1 = new Object[8];
      Object object1 = new Object();
      objectArray1[0] = object1;
      objectArray1[1] = (Object) "";
      objectArray1[2] = (Object) printWriter0;
      objectArray1[3] = (Object) dataOutputStream0;
      objectArray1[4] = object0;
      objectArray1[5] = (Object) mockPrintWriter0;
      Character character0 = new Character('o');
      cSVFormat0.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat2.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      boolean boolean0 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      Character character0 = new Character('L');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat3.withHeader((ResultSetMetaData) null);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withAutoFlush(true);
      cSVFormat2.POSTGRESQL_TEXT.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      cSVFormat2.withIgnoreEmptyLines();
      cSVFormat3.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, PostgreSQLCsv, PostgreSQLText, RFC4180, TDF]";
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat0.TDF.withAutoFlush(false);
      StringWriter stringWriter0 = new StringWriter(577);
      cSVFormat0.RFC4180.println(stringWriter0);
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames(false);
      Character character0 = new Character('y');
      CSVFormat cSVFormat3 = cSVFormat2.RFC4180.withCommentMarker(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat4 = CSVFormat.newFormat('|');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.print((Object) quoteMode0, (Appendable) stringWriter0, false);
      cSVFormat4.hashCode();
      cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat3.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator(',');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat1.getDelimiter();
      cSVFormat3.withRecordSeparator(',');
      CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat5.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = cSVFormat0.withAllowMissingColumnNames(true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Delimiter=<,> Escape=<\"> QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) cSVFormat2;
      cSVFormat6.withHeaderComments(objectArray0);
      cSVFormat3.getHeaderComments();
      cSVFormat4.getTrim();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat7 = cSVFormat6.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat8 = cSVFormat7.withAutoFlush(false);
      cSVFormat3.withRecordSeparator('\\');
      cSVFormat8.getNullString();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVFormat2.print(object0, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = null;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      cSVFormat1.withAutoFlush(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) cSVFormat3;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator("java.lang.Object@0000000007,java.lang.Object@0000000008,javax.sql.rowset.RowSetMetaDataImpl@0000000009,org.apache.commons.csv.CSVFormat@0000000004");
      cSVFormat4.withAllowMissingColumnNames(true);
      Character character1 = Character.valueOf(',');
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withIgnoreHeaderCase(false);
      cSVFormat2.withRecordSeparator('|');
      cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat2.hashCode();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) cSVFormat2;
      cSVFormat0.format(objectArray0);
      Character character0 = new Character('d');
      Character character1 = new Character('=');
      cSVFormat3.withCommentMarker(character1);
      CSVFormat cSVFormat4 = CSVFormat.MYSQL;
      cSVFormat4.getIgnoreSurroundingSpaces();
      cSVFormat3.hashCode();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[0];
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('e');
      cSVFormat2.POSTGRESQL_TEXT.withTrailingDelimiter();
      cSVFormat1.withQuote('0');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      cSVFormat0.withRecordSeparator('S');
      cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat3.getHeaderComments();
      cSVFormat1.getTrim();
      CSVFormat cSVFormat4 = cSVFormat1.withAutoFlush(false);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('0');
      cSVFormat5.getNullString();
      // Undeclared exception!
      try { 
        cSVFormat5.print((Object) cSVFormat1, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat2.format(cSVFormat_PredefinedArray0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "\"org.apache.commons.csv.CSVFormat$Predefined@0000000003\",\"org.apache.commons.csv.CSVFormat$Predefined@0000000004\",\"org.apache.commons.csv.CSVFormat$Predefined@0000000005\",\"org.apache.commons.csv.CSVFormat$Predefined@0000000006\",\"org.apache.commons.csv.CSVFormat$Predefined@0000000007\",\"org.apache.commons.csv.CSVFormat$Predefined@0000000008\",\"org.apache.commons.csv.CSVFormat$Predefined@0000000009\",\"org.apache.commons.csv.CSVFormat$Predefined@0000000010\",\"org.apache.commons.csv.CSVFormat$Predefined@0000000011\"";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) "\"org.apache.commons.csv.CSVFormat$Predefined@0000000003\",\"org.apache.commons.csv.CSVFormat$Predefined@0000000004\",\"org.apache.commons.csv.CSVFormat$Predefined@0000000005\",\"org.apache.commons.csv.CSVFormat$Predefined@0000000006\",\"org.apache.commons.csv.CSVFormat$Predefined@0000000007\",\"org.apache.commons.csv.CSVFormat$Predefined@0000000008\",\"org.apache.commons.csv.CSVFormat$Predefined@0000000009\",\"org.apache.commons.csv.CSVFormat$Predefined@0000000010\",\"org.apache.commons.csv.CSVFormat$Predefined@0000000011\"";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      cSVFormat1.hashCode();
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withAutoFlush(true);
      cSVFormat2.POSTGRESQL_TEXT.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
      cSVFormat2.withIgnoreEmptyLines();
      cSVFormat3.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, PostgreSQLCsv, PostgreSQLText, RFC4180, TDF]";
      objectArray0[1] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[Default, Excel, InformixUnload, InformixUnloadCsv, MySQL, PostgreSQLCsv, PostgreSQLText, RFC4180, TDF]";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) rowSetMetaDataImpl0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.toString();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('N');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.RFC4180.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD.withHeaderComments(objectArray0);
      cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat4.POSTGRESQL_TEXT.withAutoFlush(true);
      CSVFormat cSVFormat6 = cSVFormat1.withTrim(true);
      cSVFormat3.withTrim();
      CSVFormat cSVFormat7 = cSVFormat6.RFC4180.withFirstRecordAsHeader();
      cSVFormat7.EXCEL.withIgnoreSurroundingSpaces();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat8 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat9 = cSVFormat6.withTrim();
      CSVFormat cSVFormat10 = cSVFormat3.withRecordSeparator('!');
      cSVFormat6.withIgnoreHeaderCase(true);
      cSVFormat10.getDelimiter();
      CSVFormat cSVFormat11 = cSVFormat5.withRecordSeparator('|');
      cSVFormat11.DEFAULT.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat12 = cSVFormat9.withHeaderComments(objectArray0);
      cSVFormat4.getHeaderComments();
      cSVFormat3.getTrim();
      CSVFormat cSVFormat13 = cSVFormat12.withAutoFlush(true);
      cSVFormat13.DEFAULT.withRecordSeparator('\\');
      cSVFormat13.getNullString();
      cSVFormat2.getEscapeCharacter();
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat8.withEscape((Character) null);
      cSVFormat0.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.withAutoFlush(true);
      cSVFormat1.withTrim(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat2 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      cSVFormat3.withAllowMissingColumnNames(true);
      Character character0 = Character.valueOf('n');
      CSVFormat cSVFormat4 = cSVFormat2.withEscape(character0);
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character1 = new Character('#');
      CSVFormat.Predefined.values();
      cSVFormat4.withRecordSeparator("");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('C');
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat0.RFC4180.format(cSVFormat_PredefinedArray0);
      cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.format(cSVFormat_PredefinedArray0);
      cSVFormat2.withAllowMissingColumnNames(true);
      Character character0 = Character.valueOf('H');
      cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withQuote(character0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4928);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) mockPrintStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Object[] objectArray1 = new Object[8];
      Object object1 = new Object();
      objectArray1[0] = object1;
      objectArray1[1] = (Object) "";
      objectArray1[2] = (Object) printWriter0;
      objectArray1[3] = (Object) dataOutputStream0;
      objectArray1[4] = object0;
      objectArray1[5] = (Object) mockPrintWriter0;
      Character character0 = new Character('o');
      cSVFormat0.withEscape(character0);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.format(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat0.toString();
      cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String string0 = "TDF";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "TDF");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "TDF";
      stringArray0[1] = "TDF";
      stringArray0[2] = "TDF";
      stringArray0[3] = "TDF";
      stringArray0[4] = "TDF";
      cSVFormat0.TDF.withTrailingDelimiter();
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'TDF' in [TDF, TDF, TDF, TDF, TDF]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withAutoFlush(true);
      cSVFormat2.POSTGRESQL_TEXT.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character0 = Character.valueOf('0');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat3.RFC4180.withNullString("");
      CSVFormat cSVFormat5 = cSVFormat3.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(class0);
      PipedReader pipedReader0 = new PipedReader(35);
      cSVFormat4.parse(pipedReader0);
      CSVFormat cSVFormat7 = cSVFormat5.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreHeaderCase(true);
      cSVFormat6.getRecordSeparator();
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat9 = cSVFormat7.withHeader(class1);
      CharBuffer charBuffer0 = CharBuffer.allocate(124);
      cSVFormat9.INFORMIX_UNLOAD.println(charBuffer0);
      cSVFormat9.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      cSVFormat5.withIgnoreHeaderCase(false);
      cSVFormat3.getAllowMissingColumnNames();
      CSVFormat cSVFormat10 = cSVFormat0.withTrim();
      CSVFormat.newFormat('0');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat11 = cSVFormat8.withQuoteMode(quoteMode0);
      cSVFormat10.withFirstRecordAsHeader();
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat11.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withIgnoreHeaderCase(false);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = CSVFormat.newFormat('\"');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat6 = cSVFormat4.withHeader(resultSet0);
      cSVFormat3.withIgnoreHeaderCase(true);
      cSVFormat5.getHeader();
      cSVFormat6.withIgnoreSurroundingSpaces(true);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat0.toString();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat2.MYSQL.withIgnoreHeaderCase(false);
      char char0 = '\\';
      cSVFormat1.withHeaderComments((Object[]) null);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1575));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      cSVFormat0.withTrim(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      cSVFormat0.format(cSVFormat_PredefinedArray0);
      cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat1.withAutoFlush(true);
      Character character0 = Character.valueOf('>');
      cSVFormat3.withEscape(character0);
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.withQuote(character0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLText;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      cSVFormat0.INFORMIX_UNLOAD.withTrim(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[3];
      cSVFormat1.MYSQL.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      Character character0 = Character.valueOf(',');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withQuote(character0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('/');
      cSVFormat0.INFORMIX_UNLOAD_CSV.toString();
      cSVFormat0.hashCode();
      cSVFormat0.getHeaderComments();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat1.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      Character character0 = new Character('e');
      cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u2029");
      cSVFormat3.print((Appendable) mockPrintStream0);
      CSVFormat cSVFormat4 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat4.printer();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      boolean boolean0 = false;
      cSVFormat3.withTrailingDelimiter(false);
      // Undeclared exception!
      try { 
        cSVFormat3.withDelimiter('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat3.withDelimiter('z');
      CSVFormat cSVFormat4 = cSVFormat1.withAutoFlush(true);
      cSVFormat4.withAllowMissingColumnNames();
      cSVFormat3.getRecordSeparator();
      MockFile mockFile0 = new MockFile("XY Kc)");
      File file0 = MockFile.createTempFile("Ra%yQ,sI\"V,", "'TZ#rg/,");
      MockFile mockFile1 = new MockFile(file0, "jqMNIlm2");
      // Undeclared exception!
      try { 
        Charset.forName("org.apache.commons.csv.Lexer");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.csv.Lexer
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLText;
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat3.DEFAULT.withRecordSeparator((String) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat_Predefined0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) quoteMode0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat_Predefined0;
      objectArray0[7] = (Object) cSVFormat3;
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      Character character0 = Character.valueOf('.');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      Character character1 = Character.valueOf('.');
      cSVFormat1.RFC4180.withNullString(".=/Ax@9YLf5hj1||");
      CSVFormat cSVFormat4 = cSVFormat1.EXCEL.withQuote(character1);
      Object object0 = new Object();
      cSVFormat3.withHeaderComments((Object[]) null);
      Character character2 = new Character('W');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat2.withHeader(class0);
      cSVFormat5.withEscape(character0);
      cSVFormat4.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      Character character0 = new Character('I');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u2029");
      cSVFormat5.POSTGRESQL_CSV.print((Appendable) mockPrintStream0);
      cSVFormat1.MYSQL.printer();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat6 = cSVFormat4.withTrailingDelimiter(false);
      cSVFormat6.TDF.withDelimiter('Z');
      CSVFormat cSVFormat7 = cSVFormat4.withTrim(false);
      cSVFormat7.getRecordSeparator();
      cSVFormat2.getQuoteCharacter();
      cSVFormat1.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.POSTGRESQL_TEXT.withDelimiter('z');
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD.withAutoFlush(true);
      CSVFormat cSVFormat5 = cSVFormat1.withAllowMissingColumnNames();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat5.withHeader(resultSet0);
      CSVFormat cSVFormat6 = cSVFormat3.withTrailingDelimiter(true);
      CSVFormat cSVFormat7 = cSVFormat4.withDelimiter('');
      cSVFormat6.withTrim(true);
      cSVFormat5.getRecordSeparator();
      cSVFormat7.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.TDF.hashCode();
      Object object0 = new Object();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.INFORMIX_UNLOAD.withHeader(class0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Character character0 = new Character('c');
      Character character1 = new Character('c');
      cSVFormat1.withTrailingDelimiter();
      cSVFormat1.withIgnoreHeaderCase(false);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFile mockFile0 = new MockFile("f@}b^");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.print((File) mockFile0, charset0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withQuote('0');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat0.getEscapeCharacter();
      MockFile mockFile0 = new MockFile("reader");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat3.print((File) mockFile0, charset0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape('`');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('`')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char char0 = 'S';
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('S');
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape('S');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('S')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      String string0 = ".554v.0}Xx9";
      cSVFormat0.MYSQL.withRecordSeparator(".554v.0}Xx9");
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('O');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('O');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('t');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.EXCEL.withNullString(".554v.0}Xx9");
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      cSVFormat4.withIgnoreEmptyLines();
      File file0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".4%NC7";
      stringArray0[1] = "The delimiter cannot be a line break";
      stringArray0[2] = "yl5f";
      stringArray0[3] = "YV";
      stringArray0[4] = "";
      stringArray0[5] = "o";
      stringArray0[6] = "";
      stringArray0[7] = "+~Z";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [.4%NC7, The delimiter cannot be a line break, yl5f, YV, , o, , +~Z]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.setColumnCount(2);
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      cSVFormat1.POSTGRESQL_CSV.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(true);
      cSVFormat2.EXCEL.withQuote('4');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat3.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('a');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      cSVFormat3.withHeaderComments(stringArray0);
      String string0 = "";
      try { 
        MockURI.URI("", "", "", (-2180), "", "", "Excel");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://@:-2180?#Excel
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      
      Character character0 = Character.valueOf('+');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat1.withDelimiter('^');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('+');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      cSVFormat4.print((Appendable) bufferedWriter0);
      cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat3.withRecordSeparator("EOF");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.TDF.withTrailingDelimiter();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withRecordSeparator('<');
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "mJf";
      stringArray0[1] = "EhKyImq";
      stringArray0[2] = "";
      cSVFormat2.MYSQL.withHeader(stringArray0);
      cSVFormat1.getSkipHeaderRecord();
      cSVFormat2.getAutoFlush();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("4rg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.4rg
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      char char0 = 'z';
      CSVFormat cSVFormat3 = cSVFormat2.POSTGRESQL_TEXT.withDelimiter('z');
      cSVFormat3.INFORMIX_UNLOAD.withAutoFlush(true);
      CSVFormat cSVFormat4 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat4.getRecordSeparator();
      MockFile mockFile0 = new MockFile("reader");
      MockFile mockFile1 = new MockFile(mockFile0, "reader");
      // Undeclared exception!
      try { 
        Charset.forName("\r\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \r
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLText;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      cSVFormat0.INFORMIX_UNLOAD.withTrim(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[0];
      cSVFormat1.MYSQL.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat2.TDF.withAutoFlush(false);
      Character character0 = Character.valueOf(',');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withQuote(character0);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('x');
      Character character0 = new Character('x');
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('x')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('j');
      cSVFormat0.getCommentMarker();
      Character character0 = new Character('j');
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('j')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "";
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4928);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) mockPrintStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Object[] objectArray1 = new Object[8];
      Object object1 = new Object();
      objectArray1[0] = object1;
      objectArray1[1] = (Object) "";
      objectArray1[2] = (Object) printWriter0;
      objectArray1[3] = (Object) dataOutputStream0;
      objectArray1[4] = object0;
      objectArray1[5] = (Object) mockPrintWriter0;
      objectArray1[6] = (Object) cSVFormat3;
      objectArray1[7] = (Object) locale0;
      cSVFormat0.INFORMIX_UNLOAD_CSV.printRecord(printWriter0, objectArray1);
      Character character0 = new Character('Z');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withQuote('F');
      cSVFormat5.POSTGRESQL_TEXT.withTrim(false);
      CSVFormat cSVFormat6 = cSVFormat5.withDelimiter('Z');
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat8 = cSVFormat6.withQuote('\'');
      cSVFormat3.getEscapeCharacter();
      cSVFormat7.getIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        cSVFormat8.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('Z')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.print((Appendable) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      Character character0 = new Character('I');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u2029");
      cSVFormat5.POSTGRESQL_CSV.print((Appendable) mockPrintStream0);
      cSVFormat1.MYSQL.printer();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat6 = cSVFormat4.withTrailingDelimiter(false);
      cSVFormat6.TDF.withDelimiter('Z');
      CSVFormat cSVFormat7 = cSVFormat4.withTrim(false);
      cSVFormat7.getRecordSeparator();
      cSVFormat2.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('d');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Default", "Default");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = null;
      objectArray0[1] = (Object) mockPrintStream0;
      CSVFormat cSVFormat2 = cSVFormat0.EXCEL.withSkipHeaderRecord();
      cSVFormat2.TDF.toString();
      Character character1 = new Character('5');
      cSVFormat1.INFORMIX_UNLOAD.withCommentMarker(character1);
      CSVFormat cSVFormat3 = cSVFormat2.POSTGRESQL_CSV.withAutoFlush(true);
      objectArray0[2] = (Object) cSVFormat1;
      PrintStream printStream0 = mockPrintStream0.printf("Default", objectArray0);
      cSVFormat3.POSTGRESQL_CSV.withAllowMissingColumnNames();
      cSVFormat1.INFORMIX_UNLOAD.print((Object) null, (Appendable) printStream0, false);
      CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker(character0);
      cSVFormat4.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces();
      cSVFormat1.toString();
      cSVFormat3.getIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r
         // > EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat2.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('h');
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('h');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('h')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(';');
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker(';');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same (';')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.printer();
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      cSVFormat2.MYSQL.withNullString("");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat4.getSkipHeaderRecord();
      // Undeclared exception!
      try { 
        cSVFormat3.withCommentMarker('a');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('a')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      char char0 = '1';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      cSVFormat0.getTrim();
      cSVFormat0.hashCode();
      cSVFormat0.getDelimiter();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat1 = cSVFormat_Predefined0.getFormat();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class0);
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("inputStream");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.inputStream
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      String string0 = null;
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
      char char0 = 'j';
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('j');
      cSVFormat3.withIgnoreHeaderCase();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        CSVFormat.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withHeaderComments(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat3.withSkipHeaderRecord(true);
      boolean boolean0 = true;
      try { 
        rowSetMetaDataImpl0.isSigned(92);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid column index :92
         //
         verifyException("javax.sql.rowset.RowSetMetaDataImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.getNullString();
      cSVFormat0.getIgnoreSurroundingSpaces();
      cSVFormat1.withIgnoreHeaderCase(true);
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat0.withTrim();
      cSVFormat0.EXCEL.withCommentMarker((Character) null);
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat0.DEFAULT.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.INFORMIX_UNLOAD.withDelimiter(')');
      Object object1 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("x+XU[|uZ#a&d", "org.apache.commons.csv.CSVFormat@0000000004,java.lang.Object@0000000005,org.apache.commons.csv.CSVFormat@0000000004,org.apache.commons.csv.CSVFormat@0000000004,org.apache.commons.csv.CSVFormat@0000000004,org.apache.commons.csv.CSVFormat@0000000004");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.csv.CSVFormat@0000000004,java.lang.Object@0000000005,org.apache.commons.csv.CSVFormat@0000000004,org.apache.commons.csv.CSVFormat@0000000004,org.apache.commons.csv.CSVFormat@0000000004,org.apache.commons.csv.CSVFormat@0000000004
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.withTrim();
      boolean boolean0 = true;
      String string0 = "";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('R');
      cSVFormat1.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CSVFormat.valueOf("Default");
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withEscape((Character) null);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('(');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.TDF.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.RFC4180.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withRecordSeparator("");
      CSVFormat cSVFormat4 = cSVFormat2.INFORMIX_UNLOAD.withTrim();
      cSVFormat4.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      PipedReader pipedReader0 = new PipedReader(3733);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 3733);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
      cSVFormat1.POSTGRESQL_CSV.withTrailingDelimiter();
      cSVFormat0.MYSQL.withTrailingDelimiter(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.EXCEL.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat2.MYSQL.printer();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      CSVFormat cSVFormat5 = cSVFormat0.TDF.withQuote('&');
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreEmptyLines();
      CSVFormat cSVFormat7 = cSVFormat6.RFC4180.withNullString("=~'l:jNlb*blV'");
      cSVFormat7.POSTGRESQL_CSV.withAllowMissingColumnNames(true);
      cSVFormat5.EXCEL.withRecordSeparator('&');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat6.MYSQL.withHeader(class0);
      cSVFormat2.getHeader();
      cSVFormat0.withRecordSeparator('e');
      cSVFormat2.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat8 = cSVFormat5.withIgnoreSurroundingSpaces(false);
      cSVFormat8.POSTGRESQL_TEXT.withIgnoreHeaderCase(true);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1068));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object object0 = new Object();
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "(%";
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) " recordNqumber=";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.MYSQL.withIgnoreHeaderCase(false);
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLText;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines();
      cSVFormat3.DEFAULT.withRecordSeparator((String) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat_Predefined0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) quoteMode0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat_Predefined0;
      objectArray0[7] = (Object) cSVFormat3;
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.format(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.format(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat0.RFC4180.format(cSVFormat_PredefinedArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      String string0 = "";
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("");
      PipedReader pipedReader0 = new PipedReader(3466);
      cSVFormat3.DEFAULT.parse(pipedReader0);
      cSVFormat3.withAllowMissingColumnNames(false);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withNullString("ALL_NON_NULL");
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      Character character0 = Character.valueOf('.');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      Character character1 = Character.valueOf('.');
      cSVFormat1.RFC4180.withNullString(".=/Ax@9YLf5hj1||");
      cSVFormat1.EXCEL.withQuote(character1);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(false);
      cSVFormat3.RFC4180.withAllowMissingColumnNames(true);
      cSVFormat5.MYSQL.withNullString("8I7x!L#RfFL~H^");
      cSVFormat5.getTrailingDelimiter();
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("8I7x!L#RfFL~H^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.8I7x!L#RfFL~H^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      String string0 = "";
      cSVFormat0.INFORMIX_UNLOAD_CSV.printer();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.printer();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withHeader((ResultSetMetaData) null);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withAutoFlush(true);
      cSVFormat2.POSTGRESQL_TEXT.hashCode();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Character character0 = Character.valueOf('a');
      cSVFormat0.EXCEL.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character character1 = Character.valueOf('0');
      cSVFormat1.withCommentMarker(character1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat4 = cSVFormat1.withHeader((ResultSet) null);
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      cSVFormat5.withAutoFlush(false);
      cSVFormat3.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) character1;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) cSVFormat4;
      CSVFormat cSVFormat6 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat0.getRecordSeparator();
      cSVFormat6.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('$');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat3.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat4.getAllowMissingColumnNames();
      MockFile mockFile0 = new MockFile((String) null, "");
      Path path0 = mockFile0.toPath();
      mockFile0.getCanonicalFile();
      // Undeclared exception!
      try { 
        cSVFormat4.print(path0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat0.print((Path) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.TDF.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      boolean boolean0 = false;
      cSVFormat2.withTrim(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.DEFAULT.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.POSTGRESQL_TEXT.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat2.getIgnoreSurroundingSpaces();
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('8');
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[0];
      cSVFormat2.format(objectArray0);
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      char char0 = '/';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('/');
      cSVFormat0.INFORMIX_UNLOAD_CSV.toString();
      cSVFormat0.hashCode();
      cSVFormat0.getHeaderComments();
      char char1 = 'Z';
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.TDF.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false", "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Delimiter=<,> QuoteChar=<\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\u000B');
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withDelimiter('`');
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.TDF.withTrailingDelimiter();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat2.POSTGRESQL_CSV.withSkipHeaderRecord(true);
      cSVFormat4.TDF.withTrim(true);
      Character character0 = new Character('o');
      cSVFormat1.RFC4180.withQuote(character0);
      StringWriter stringWriter0 = new StringWriter(2218);
      cSVFormat3.POSTGRESQL_CSV.withDelimiter('#');
      CSVFormat cSVFormat5 = cSVFormat3.RFC4180.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat6 = cSVFormat5.POSTGRESQL_TEXT.withSkipHeaderRecord();
      cSVFormat6.MYSQL.withEscape(character0);
      CSVFormat cSVFormat7 = cSVFormat3.withAutoFlush(true);
      cSVFormat7.DEFAULT.withFirstRecordAsHeader();
      cSVFormat1.EXCEL.withHeaderComments(stringArray0);
      StringWriter stringWriter1 = stringWriter0.append('\\');
      cSVFormat3.EXCEL.printRecord(stringWriter1, stringArray0);
      cSVFormat0.toString();
      CSVFormat cSVFormat8 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat9 = CSVFormat.newFormat('\\');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat8.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat9.getDelimiter();
      cSVFormat0.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('n');
      assertEquals('n', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      
      // Undeclared exception!
      try { 
        cSVFormat1.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withTrailingDelimiter();
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat3.POSTGRESQL_CSV.withSkipHeaderRecord(true);
      cSVFormat5.TDF.withTrim(true);
      Character character0 = new Character('o');
      cSVFormat2.RFC4180.withQuote(character0);
      StringWriter stringWriter0 = new StringWriter(2218);
      cSVFormat4.POSTGRESQL_CSV.withDelimiter('#');
      CSVFormat cSVFormat6 = cSVFormat4.RFC4180.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat7 = cSVFormat6.POSTGRESQL_TEXT.withSkipHeaderRecord();
      cSVFormat7.MYSQL.withEscape(character0);
      CSVFormat cSVFormat8 = cSVFormat4.withAutoFlush(true);
      cSVFormat8.DEFAULT.withFirstRecordAsHeader();
      cSVFormat2.EXCEL.withHeaderComments(stringArray0);
      cSVFormat5.withRecordSeparator("z");
      cSVFormat1.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      CSVFormat.newFormat('g');
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      char char0 = '4';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cSVFormat0.MYSQL.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) null, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('0');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      Character character0 = new Character('+');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      cSVFormat4.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Character character0 = new Character('D');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator((String) null);
      cSVFormat4.withHeader(class0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.toString();
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withRecordSeparator('v');
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.format(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[1];
      cSVFormat0.format(objectArray0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.setColumnCount(1);
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = new Character('N');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.RFC4180.toString();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD.withHeaderComments(objectArray0);
      cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat4.POSTGRESQL_TEXT.withAutoFlush(true);
      CSVFormat cSVFormat6 = cSVFormat1.withTrim(true);
      cSVFormat3.withTrim();
      cSVFormat6.RFC4180.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat7 = cSVFormat6.withTrim();
      CSVFormat cSVFormat8 = cSVFormat3.withRecordSeparator('!');
      cSVFormat6.withIgnoreHeaderCase(true);
      cSVFormat8.getDelimiter();
      CSVFormat cSVFormat9 = cSVFormat5.withRecordSeparator('|');
      CSVFormat cSVFormat10 = cSVFormat9.DEFAULT.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat11 = cSVFormat7.withHeaderComments(objectArray0);
      cSVFormat4.getHeaderComments();
      cSVFormat3.getTrim();
      CSVFormat cSVFormat12 = cSVFormat11.withAutoFlush(true);
      cSVFormat12.DEFAULT.withRecordSeparator('\\');
      cSVFormat12.getNullString();
      // Undeclared exception!
      try { 
        cSVFormat10.print((Object) cSVFormat7, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('U');
      Character character0 = Character.valueOf('U');
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('U')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      StringReader stringReader0 = new StringReader("MY");
      cSVFormat1.parse(stringReader0);
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("\\N", cSVFormat1.getNullString());
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('K', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withAutoFlush(false);
      cSVFormat1.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces(false);
      cSVFormat0.TDF.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_CSV.withCommentMarker(';');
      cSVFormat2.POSTGRESQL_TEXT.withQuote(';');
      cSVFormat0.getNullString();
      cSVFormat1.toString();
      String string0 = "";
      cSVFormat0.withRecordSeparator("");
      String string1 = "";
      try { 
        MockURI.URI("C)l~", "LL", "~5x]\"^", "UxU9T=(c0P=o");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: C)l~://LL~5x%5D%22%5E#UxU9T=(c0P=o
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.TDF.hashCode();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withTrim();
      assertTrue(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getAutoFlush());
      
      boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      String string0 = cSVFormat0.getRecordSeparator();
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "url");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "EOF whilst processing escape sequence");
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('T');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        cSVFormat2.withQuote('T');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('T')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<,> Escape=<\"> QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
      
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withIgnoreHeaderCase(false);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(class0);
      cSVFormat0.getRecordSeparator();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat3.withQuoteMode(quoteMode0);
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("UrZr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.UrZr
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.valueOf(")1.Gf>p<+#YMiE6~ 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.)1.Gf>p<+#YMiE6~ 0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = cSVFormat0.getHeaderComments();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('');
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character(',');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals(',', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      
      cSVFormat0.getHeaderComments();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
  }
}
