/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 06:34:58 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char char0 = '6';
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(65534);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charArrayWriter1;
      objectArray0[1] = (Object) charArrayWriter1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) charArrayWriter1;
      objectArray0[4] = (Object) charBuffer0;
      objectArray0[5] = (Object) charArrayWriter0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      // Undeclared exception!
      cSVFormat0.EXCEL.printRecord(charArrayWriter1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      char[] charArray0 = new char[3];
      charArray0[2] = '!';
      CharBuffer.wrap(charArray0);
      CharBuffer charBuffer0 = CharBuffer.allocate(65534);
      // Undeclared exception!
      cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('5');
      CSVFormat.Predefined.values();
      cSVFormat1.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('0');
      cSVFormat1.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = 'p';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
      cSVFormat1.getQuoteCharacter();
      cSVFormat0.withTrim();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.TDF.println(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Character character0 = Character.valueOf('T');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('r');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character character1 = Character.valueOf('W');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker(character1);
      CSVFormat cSVFormat6 = cSVFormat2.withDelimiter('W');
      cSVFormat6.POSTGRESQL_CSV.withAutoFlush(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat7 = cSVFormat6.POSTGRESQL_CSV.withHeader(class0);
      cSVFormat6.MYSQL.withEscape('/');
      cSVFormat0.getQuoteCharacter();
      Character.valueOf('W');
      cSVFormat2.equals(cSVFormat0);
      cSVFormat7.withAllowMissingColumnNames();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      outputStreamWriter0.getEncoding();
      cSVFormat5.print((Object) cSVFormat2, (Appendable) outputStreamWriter0, false);
      cSVFormat1.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat1.getQuoteCharacter();
      char char0 = 't';
      Character character0 = Character.valueOf('t');
      cSVFormat2.withEscape(character0);
      cSVFormat2.equals(character0);
      StringWriter stringWriter0 = new StringWriter(1627);
      stringWriter0.append('0');
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null, (-2147), (-2147));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('T');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Character character0 = Character.valueOf('T');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('r');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character character1 = Character.valueOf('W');
      cSVFormat5.withCommentMarker(character1);
      CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('W');
      cSVFormat6.POSTGRESQL_CSV.withAutoFlush(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat7 = cSVFormat6.POSTGRESQL_CSV.withHeader(class0);
      cSVFormat0.getQuoteCharacter();
      Character.valueOf('W');
      cSVFormat3.equals(cSVFormat1);
      cSVFormat7.withAllowMissingColumnNames();
      cSVFormat5.withQuote('r');
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('g');
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(' ');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      cSVFormat2.MYSQL.withQuote('[');
      cSVFormat4.POSTGRESQL_CSV.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat4.POSTGRESQL_CSV.withAllowMissingColumnNames();
      cSVFormat5.TDF.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat6 = cSVFormat4.withAllowMissingColumnNames(true);
      cSVFormat6.getCommentMarker();
      cSVFormat0.withAutoFlush(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.INFORMIX_UNLOAD.withHeader(resultSet0);
      String string0 = "\r\n";
      try { 
        MockURI.URI("\r\n");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 0: \r
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('&');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      boolean boolean0 = true;
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        cSVFormat3.withDelimiter('&');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('&')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat5.withHeader(resultSet0);
      String string0 = "string";
      File file0 = MockFile.createTempFile("MINIMAL", "string");
      MockFile mockFile0 = new MockFile(file0, "\n");
      try { 
        MockFile.createTempFile("EmKw Uf$dl", "", (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('2');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat5.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[6];
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat.valueOf("TDF");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('n');
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      Object[] objectArray0 = new Object[2];
      cSVFormat0.RFC4180.hashCode();
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      cSVFormat2.equals(cSVFormat0);
      cSVFormat0.withAutoFlush(false);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withTrim();
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = 'r';
      charArray0[2] = 'a';
      charArray0[3] = '|';
      charArray0[4] = 'F';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer1, (Appendable) charBuffer1, true);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char char0 = ' ';
      CSVFormat cSVFormat0 = CSVFormat.newFormat(' ');
      cSVFormat0.POSTGRESQL_CSV.withFirstRecordAsHeader();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat1.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withSkipHeaderRecord();
      cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat0.getRecordSeparator();
      Long long0 = new Long((-1L));
      URI uRI0 = MockURI.aHttpURI;
      cSVFormat1.POSTGRESQL_TEXT.withIgnoreEmptyLines();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      Character character0 = new Character('}');
      CSVFormat cSVFormat3 = cSVFormat2.POSTGRESQL_TEXT.withQuote(character0);
      cSVFormat3.withEscape('}');
      CSVFormat cSVFormat4 = cSVFormat1.withEscape('9');
      cSVFormat4.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat4 = cSVFormat0.DEFAULT.withQuoteMode(quoteMode0);
      cSVFormat4.POSTGRESQL_CSV.withAutoFlush(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      cSVFormat2.withDelimiter('S');
      cSVFormat1.printer();
      cSVFormat3.POSTGRESQL_CSV.hashCode();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1828));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('5');
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      cSVFormat5.withIgnoreSurroundingSpaces(false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withTrim();
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charBuffer0;
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      Byte byte0 = new Byte((byte) (-17));
      char[] charArray0 = new char[20];
      charArray0[0] = '-';
      charArray0[1] = '\u0013';
      charArray0[2] = '!';
      charArray0[3] = '-';
      Short short0 = new Short((short)34);
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat3.print((Object) short0, (Appendable) stringWriter0, false);
      cSVFormat3.print((Appendable) stringWriter0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\u2028");
      cSVFormat0.print((Object) "\u2028", (Appendable) mockPrintWriter0, true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withAutoFlush(true);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Long long0 = new Long(0L);
      cSVFormat0.equals(long0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
      cSVFormat1.DEFAULT.withQuote('9');
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('L');
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(5);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        cSVFormat1.RFC4180.printRecord(charBuffer1, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('V');
      cSVFormat1.MYSQL.hashCode();
      cSVFormat1.getQuoteCharacter();
      cSVFormat0.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('y');
      cSVFormat1.getCommentMarker();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ", mapping=";
      stringArray0[1] = "out";
      stringArray0[2] = "H~h";
      stringArray0[3] = "$`#m5?mxy|f";
      stringArray0[4] = "%q)$9rC6Q*L?;A";
      stringArray0[5] = "The comment start and the escape character cannot be the same ('";
      cSVFormat1.withHeader(stringArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("@~U0H'vHDFUTi}i}c");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat4.format(objectArray0);
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      char[] charArray0 = new char[15];
      charArray0[0] = '!';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      char[] charArray0 = new char[8];
      charArray0[0] = '!';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = '%';
      charArray0[4] = '!';
      charArray0[5] = '%';
      charArray0[6] = ';';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      char[] charArray0 = new char[8];
      charArray0[0] = '!';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = '%';
      charArray0[4] = '!';
      charArray0[5] = '%';
      charArray0[6] = ';';
      charArray0[7] = 'y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      char[] charArray0 = new char[8];
      charArray0[5] = '!';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = '%';
      charArray0[4] = '!';
      charArray0[5] = '%';
      charArray0[6] = ';';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, false);
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      char[] charArray0 = new char[1];
      charArray0[0] = '\u001D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.POSTGRESQL_CSV.withIgnoreEmptyLines(true);
      cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, false);
      cSVFormat1.print((Appendable) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.equals(cSVFormat1);
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      cSVFormat0.RFC4180.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      Byte byte0 = new Byte((byte)8);
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = '%';
      charArray0[2] = '!';
      charArray0[3] = '\\';
      charArray0[4] = 'E';
      charArray0[5] = ';';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat3.print((Object) byte0, (Appendable) charBuffer0, true);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Long long0 = new Long((-1536L));
      Long long1 = Long.getLong("!QZae}3>>zP>sK", long0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('v');
      cSVFormat1.print((Object) long1, (Appendable) charArrayWriter1, true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) quoteMode0;
      objectArray0[2] = (Object) quoteMode0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat2;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('z');
      cSVFormat0.equals(cSVFormat1);
      cSVFormat1.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('L');
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.RFC4180.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Character character0 = new Character('L');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
      cSVFormat4.toString();
      cSVFormat0.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat.valueOf("Excel");
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = new Object[8];
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(true);
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord();
      Character character0 = new Character('E');
      cSVFormat6.withQuote(character0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('/');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("InformixUnloadCsv");
      boolean boolean0 = true;
      cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments((Object[]) null);
      Character character0 = new Character('o');
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat4 = CSVFormat.newFormat('/');
      cSVFormat4.withDelimiter('o');
      cSVFormat0.getQuoteCharacter();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      cSVFormat5.withNullString("InformixUnloadCsv");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", ".{HrMu");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[1];
      cSVFormat0.withHeaderComments(objectArray0);
      Character character0 = new Character('W');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.POSTGRESQL_TEXT.hashCode();
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("!QZae}3>>zP>sK");
      CSVFormat cSVFormat2 = CSVFormat.newFormat('0');
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat1.withCommentMarker('0');
      cSVFormat2.hashCode();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      
      CSVFormat cSVFormat2 = CSVFormat.newFormat('J');
      cSVFormat2.hashCode();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\'');
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      String[] stringArray0 = new String[9];
      stringArray0[1] = "CRB7+R6S<S";
      stringArray0[2] = "CRB7+R6S<S";
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('v');
      cSVFormat1.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[5];
      cSVFormat0.format(objectArray0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) ",,,,";
      cSVFormat0.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('v');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator((String) null);
      CSVFormat.newFormat('?');
      cSVFormat4.format(objectArray0);
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat7 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      cSVFormat7.withCommentMarker('N');
      CSVFormat cSVFormat8 = CSVFormat.TDF;
      cSVFormat4.withFirstRecordAsHeader();
      cSVFormat6.format(objectArray0);
      cSVFormat1.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat0.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "H~";
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("!QZae}3>>zP>sK");
      CSVFormat cSVFormat2 = CSVFormat.newFormat('_');
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CSVFormat cSVFormat5 = cSVFormat1.withCommentMarker('_');
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      CSVFormat cSVFormat7 = cSVFormat3.withFirstRecordAsHeader();
      Object[] objectArray1 = new Object[8];
      objectArray1[1] = (Object) cSVFormat5;
      objectArray1[2] = (Object) "N\tN\torg.apache.commons.csv.CSVFormat@0000000004\tN\tN\tN\tN\tN!QZae}3>>zP>sK";
      objectArray1[3] = (Object) cSVFormat2;
      cSVFormat3.DEFAULT.withRecordSeparator("[zId/BI:_Jn '}(F?");
      CSVFormat cSVFormat8 = cSVFormat7.withEscape('_');
      cSVFormat8.format(objectArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.csv.CSVFormat@0000000004";
      stringArray0[1] = "[zId/BI:_Jn '}(F?";
      stringArray0[2] = "org.apache.commons.csv.CSVFormat@0000000004";
      stringArray0[3] = "[zId/BI:_Jn '}(F?";
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'org.apache.commons.csv.CSVFormat@0000000004' in [org.apache.commons.csv.CSVFormat@0000000004, [zId/BI:_Jn '}(F?, org.apache.commons.csv.CSVFormat@0000000004, [zId/BI:_Jn '}(F?]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf(']');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.withAutoFlush(true);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character(';');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator(':');
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter(':');
      cSVFormat5.withDelimiter('*');
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('w');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(true);
      cSVFormat5.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('`');
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat6 = cSVFormat5.withHeaderComments(objectArray0);
      cSVFormat3.withTrim();
      cSVFormat4.withRecordSeparator("YxFBuAQt9UtoX");
      Character character0 = Character.valueOf('I');
      cSVFormat4.withQuote(character0);
      cSVFormat6.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(':');
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      String[] stringArray0 = new String[11];
      objectArray0[5] = (Object) "C+B7+R6S<S";
      stringArray0[2] = "|~LS8K@rg";
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = CSVFormat.newFormat('D');
      cSVFormat1.format(objectArray0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      charArray0[4] = 'D';
      charArray0[5] = 'D';
      charArray0[6] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat2.println(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("!QZae}3>>zP>sK");
      CSVFormat cSVFormat2 = CSVFormat.newFormat('_');
      CSVFormat cSVFormat3 = CSVFormat.POSTGRESQL_TEXT;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "!QZae}3>>zP>sK";
      objectArray0[1] = (Object) "\n";
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[3] = objectArray0[0];
      cSVFormat1.format(objectArray0);
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("vN\"{iXu|7~J7t|$l");
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat3 = CSVFormat.POSTGRESQL_TEXT;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      CSVFormat cSVFormat6 = cSVFormat1.withCommentMarker('`');
      CSVFormat cSVFormat7 = cSVFormat6.withSkipHeaderRecord();
      cSVFormat6.withHeaderComments(objectArray0);
      cSVFormat7.withTrim();
      cSVFormat5.withRecordSeparator("\"org.apache.commons.csv.CSVFormat@0000000003\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\t\"org.apache.commons.csv.CSVFormat@0000000003\"\t\"org.apache.commons.csv.CSVFormat@0000000003\"");
      Character character0 = Character.valueOf('I');
      cSVFormat4.withQuote(character0);
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      String[] stringArray0 = new String[11];
      stringArray0[1] = "C+B7+R6S<S";
      stringArray0[2] = "|~LS8K@rg";
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.format(objectArray0);
      CSVFormat.newFormat('D');
      cSVFormat0.withRecordSeparator("C+B7+R6S<S");
      Character.valueOf('I');
      Character character0 = new Character('I');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character0);
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withQuote('E');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      cSVFormat4.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "U$3";
      cSVFormat0.format(objectArray0);
      CSVFormat.newFormat('h');
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('M');
      cSVFormat6.EXCEL.printRecord(stringWriter1, objectArray0);
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat1.withHeader(class0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) "6(iu0#!V%Fk,b;T\"";
      cSVFormat1.format(objectArray0);
      cSVFormat1.getEscapeCharacter();
      cSVFormat2.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(']');
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class1);
      CSVFormat cSVFormat6 = cSVFormat3.withTrailingDelimiter();
      cSVFormat6.POSTGRESQL_CSV.withSkipHeaderRecord(false);
      cSVFormat2.withAutoFlush(true);
      cSVFormat5.getHeaderComments();
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreSurroundingSpaces(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat7.getTrailingDelimiter();
      cSVFormat7.printer();
      Character character0 = Character.valueOf('{');
      cSVFormat0.withQuote(character0);
      CSVFormat.newFormat('{');
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat1.getAutoFlush());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      File file0 = MockFile.createTempFile("v8(Bgs;[blw", "v8(Bgs;[blw");
      MockFile mockFile0 = new MockFile(file0, "");
      CSVFormat cSVFormat3 = cSVFormat1.INFORMIX_UNLOAD.withSkipHeaderRecord(true);
      Charset charset0 = Charset.defaultCharset();
      cSVFormat2.POSTGRESQL_TEXT.print((File) mockFile0, charset0);
      CSVFormat cSVFormat4 = cSVFormat0.withAutoFlush(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat4.RFC4180.withTrim(true);
      CSVFormat cSVFormat5 = cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord();
      cSVFormat4.EXCEL.withEscape('[');
      CSVFormat cSVFormat7 = cSVFormat4.POSTGRESQL_TEXT.withDelimiter('[');
      CSVFormat.newFormat('?');
      CSVFormat cSVFormat8 = cSVFormat6.TDF.withIgnoreSurroundingSpaces();
      cSVFormat8.RFC4180.withFirstRecordAsHeader();
      cSVFormat3.withTrim();
      cSVFormat5.withAutoFlush(true);
      Character character0 = Character.valueOf('');
      CSVFormat cSVFormat9 = cSVFormat0.withCommentMarker(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.getCommentMarker();
      cSVFormat7.getQuoteCharacter();
      cSVFormat3.getQuoteCharacter();
      cSVFormat9.withRecordSeparator("");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('&');
      Character character0 = new Character('&');
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('&')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat3.format(objectArray0);
      cSVFormat2.format(objectArray0);
      cSVFormat3.withNullString("org.apache.commons.csv.CSVParser$2");
      cSVFormat3.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withAutoFlush(true);
      cSVFormat1.withTrailingDelimiter(true);
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat0.printer();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat1.withQuote((Character) null);
      cSVFormat3.equals(cSVFormat2);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('|');
      cSVFormat0.equals(cSVFormat1);
      cSVFormat0.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat1.withCommentMarker('7');
      MockFile.createTempFile("$VALUES", "org.apache.commons.csv.Assertions");
      // Undeclared exception!
      try { 
        Charset.forName("The comment start character and the quoteChar cannot be the same ('");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("=f?7(7&");
      CSVFormat cSVFormat4 = CSVFormat.newFormat('u');
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_TEXT;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[1] = object2;
      objectArray0[2] = (Object) cSVFormat3;
      cSVFormat2.format(objectArray0);
      cSVFormat4.withTrailingDelimiter();
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      CSVFormat cSVFormat7 = cSVFormat3.withEscape('\"');
      cSVFormat7.withFirstRecordAsHeader();
      CSVFormat cSVFormat8 = CSVFormat.DEFAULT;
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[2] = (Object) "";
      cSVFormat0.format(objectArray0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) "\"\",,,,,,";
      cSVFormat0.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("!QZae}3>>zP>sK");
      CSVFormat.newFormat('_');
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "!QZae}3>>zP>sK";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CSVFormat cSVFormat5 = cSVFormat1.withCommentMarker('{');
      CSVFormat cSVFormat6 = CSVFormat.DEFAULT;
      cSVFormat6.withHeaderComments(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat4.withTrim();
      cSVFormat7.withFirstRecordAsHeader();
      cSVFormat0.format(objectArray0);
      cSVFormat5.withAllowMissingColumnNames(false);
      cSVFormat3.withAllowMissingColumnNames(false);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("Unexpected Quote value: ");
      CSVFormat cSVFormat3 = CSVFormat.newFormat('L');
      CSVFormat cSVFormat4 = CSVFormat.POSTGRESQL_TEXT;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) "Unexpected Quote value: ";
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      CSVFormat cSVFormat6 = CSVFormat.EXCEL;
      CSVFormat cSVFormat7 = cSVFormat6.withCommentMarker('o');
      CSVFormat cSVFormat8 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat9 = cSVFormat7.withRecordSeparator('_');
      cSVFormat9.withHeaderComments(objectArray0);
      cSVFormat3.withTrim();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat10 = cSVFormat0.withHeader(resultSet0);
      cSVFormat10.withRecordSeparator("InformixUnload");
      Character character0 = Character.valueOf('u');
      cSVFormat4.withQuote(character0);
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(1804);
      cSVFormat0.print((Object) "(startline ", (Appendable) charBuffer0, false);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("!QZae}3>>zP>sK");
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "!QZae}3>>zP>sK";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CSVFormat cSVFormat5 = cSVFormat1.withCommentMarker('{');
      CSVFormat cSVFormat6 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat7 = cSVFormat6.withHeaderComments(objectArray0);
      CSVFormat cSVFormat8 = cSVFormat7.withTrim();
      CSVFormat cSVFormat9 = cSVFormat5.withRecordSeparator("\n");
      Character character0 = Character.valueOf('I');
      cSVFormat4.withQuote(character0);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) cSVFormat5;
      objectArray1[1] = (Object) cSVFormat5;
      objectArray1[2] = (Object) cSVFormat5;
      cSVFormat9.withIgnoreEmptyLines(false);
      objectArray1[3] = (Object) "!QZae}3>>zP>sK\tjava.lang.Object@0000000003\torg.apache.commons.csv.CSVFormat@0000000004\tN\tN\tN\tN\tN!QZae}3>>zP>sK";
      objectArray1[4] = (Object) cSVFormat8;
      objectArray1[5] = (Object) cSVFormat7;
      cSVFormat9.format(objectArray1);
      cSVFormat5.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.print((Object) quoteMode0, (Appendable) pipedWriter0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withDelimiter('q');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(" [");
      CSVFormat.newFormat('q');
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) "!QZae}3>>zP>sK";
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) "!QZae}3>>zP>sK";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "!QZae}3>>zP>sK";
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      cSVFormat1.withCommentMarker('_');
      cSVFormat3.POSTGRESQL_CSV.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat5 = CSVFormat.DEFAULT;
      cSVFormat5.DEFAULT.withFirstRecordAsHeader();
      cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat1.withTrim();
      cSVFormat1.withRecordSeparator("");
      Character.valueOf('<');
      Character character0 = Character.valueOf('H');
      CSVFormat cSVFormat6 = cSVFormat2.withQuote(character0);
      cSVFormat6.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(false);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      Class<QuoteMode> class1 = QuoteMode.class;
      cSVFormat1.withHeader(class1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat1.withAutoFlush(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat5;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) rowSetMetaDataImpl0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVFormat5.withHeaderComments(objectArray0);
      cSVFormat3.equals(objectArray0[5]);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\'');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat2.withNullString("g 4{~y60XMaC");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("!QZae}3>>zP>sK");
      CSVFormat.newFormat('_');
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "!QZae}3>>zP>sK";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CSVFormat cSVFormat5 = cSVFormat1.withCommentMarker('{');
      CSVFormat cSVFormat6 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat7 = cSVFormat6.withHeaderComments(objectArray0);
      CSVFormat cSVFormat8 = cSVFormat7.withTrim();
      CSVFormat cSVFormat9 = cSVFormat5.withRecordSeparator("\n");
      Character character0 = Character.valueOf('I');
      cSVFormat4.withQuote(character0);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) cSVFormat5;
      objectArray1[1] = (Object) cSVFormat5;
      objectArray1[2] = (Object) cSVFormat5;
      objectArray1[3] = (Object) "!QZae}3>>zP>sK\tjava.lang.Object@0000000004\torg.apache.commons.csv.CSVFormat@0000000005\tN\tN\tN\tN\tN!QZae}3>>zP>sK";
      objectArray1[4] = (Object) cSVFormat8;
      objectArray1[5] = (Object) cSVFormat7;
      cSVFormat9.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("$VALUES");
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat6 = cSVFormat4.withRecordSeparator('e');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat5;
      cSVFormat6.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("N$3");
      cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "N$3";
      cSVFormat0.format(objectArray0);
      CSVFormat.newFormat('h');
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat7 = cSVFormat3.withRecordSeparator("N$3,");
      cSVFormat7.format(objectArray0);
      cSVFormat2.withNullString("N$3");
      cSVFormat5.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) quoteMode0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      cSVFormat3.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(true);
      cSVFormat0.getEscapeCharacter();
      CSVFormat cSVFormat6 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat6.printer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      cSVFormat4.withSkipHeaderRecord(true);
      CSVFormat cSVFormat7 = cSVFormat2.withTrim();
      cSVFormat7.INFORMIX_UNLOAD_CSV.withIgnoreHeaderCase();
      cSVFormat5.withRecordSeparator("hbn6)k?1#'.");
      Character character0 = Character.valueOf('v');
      CSVFormat cSVFormat8 = cSVFormat6.withQuote(character0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) "hbn6)k?1#'.";
      objectArray0[2] = (Object) class0;
      cSVFormat1.format(objectArray0);
      cSVFormat8.withTrailingDelimiter(true);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker('^');
      cSVFormat4.withIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        cSVFormat3.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.getSkipHeaderRecord();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat3.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat0.withNullString("Ho{I/XK-:A");
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = CSVFormat.RFC4180;
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreSurroundingSpaces();
      cSVFormat5.equals(cSVFormat7);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        pipedWriter0.write("X>H:L*k");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("(dgo>l&dmgBR)Y@<QT/");
      cSVFormat2.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      Character character0 = new Character('c');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat4.INFORMIX_UNLOAD_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[8];
      cSVFormat0.format(objectArray0);
      Object[] objectArray1 = new Object[8];
      objectArray1[6] = (Object) "N\tN\tN\tN\tN\tN\tN\tN";
      cSVFormat0.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.apache.commons.csv.Token");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 64);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) bufferedWriter0;
      cSVFormat0.printRecord(bufferedWriter0, objectArray0);
      cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('C');
      // Undeclared exception!
      try { 
        cSVFormat2.withCommentMarker('C');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('C')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("=U$3");
      Character character0 = Character.valueOf('_');
      CSVFormat cSVFormat4 = cSVFormat1.withQuote(character0);
      cSVFormat4.withRecordSeparator("");
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[0];
      cSVFormat3.format(objectArray0);
      CSVFormat.newFormat('!');
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat7 = cSVFormat4.withHeader(class0);
      cSVFormat5.withRecordSeparator((String) null);
      cSVFormat7.format(objectArray0);
      cSVFormat2.withNullString("#?9<]Pd*s6lw ");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.INFORMIX_UNLOAD.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('x');
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator("~");
      Character.valueOf('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat4.withHeader(class0);
      cSVFormat0.withRecordSeparator("~");
      cSVFormat5.format(objectArray0);
      cSVFormat1.withNullString("QuoteChar=<");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.INFORMIX_UNLOAD.printRecord(stringWriter0, objectArray0);
      cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('x');
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      cSVFormat2.withRecordSeparator("~");
      Character.valueOf('Z');
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(true);
      cSVFormat5.withTrim();
      CSVFormat cSVFormat6 = cSVFormat3.withRecordSeparator("~");
      Character character0 = new Character('s');
      cSVFormat0.withQuote(character0);
      cSVFormat4.format(objectArray0);
      cSVFormat6.withRecordSeparator('.');
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat1.DEFAULT.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.POSTGRESQL_TEXT.withHeader(class1);
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat5.getEscapeCharacter();
      cSVFormat5.printer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "hbn6)k?1#'.";
      stringArray0[1] = "";
      stringArray0[2] = "EOF whilst processing escape sequence";
      stringArray0[3] = "(%zs|;PtTWn";
      cSVFormat2.format(stringArray0);
      CSVFormat cSVFormat6 = CSVFormat.TDF;
      CSVFormat cSVFormat7 = cSVFormat5.withSkipHeaderRecord(false);
      cSVFormat4.withTrim();
      cSVFormat3.withRecordSeparator("");
      Character character0 = Character.valueOf('*');
      CSVFormat cSVFormat8 = cSVFormat7.withEscape(character0);
      Character character1 = Character.valueOf('S');
      cSVFormat8.withQuote(character1);
      CSVFormat cSVFormat9 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat10 = cSVFormat9.withQuote('e');
      cSVFormat10.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('x');
      boolean boolean0 = false;
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      cSVFormat2.getEscapeCharacter();
      cSVFormat3.printer();
      String string0 = "(%zs|;PtTWn";
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = null;
      String string1 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      cSVFormat0.print((Object) "\n", (Appendable) mockPrintWriter0, false);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\r\n");
      cSVFormat0.print((Object) "\r\n", (Appendable) mockPrintWriter0, true);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.TDF.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat2.POSTGRESQL_TEXT.withHeader(class1);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat3.getEscapeCharacter();
      cSVFormat3.printer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "hbn6)k?1#'.";
      stringArray0[1] = "";
      stringArray0[2] = "EOF whilst processing escape sequence";
      stringArray0[3] = "(%zs|;PtTWn";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat4.withTrim();
      CSVFormat cSVFormat5 = cSVFormat1.withRecordSeparator("j[ZTg=3?m7!xp");
      cSVFormat0.withQuote((Character) null);
      cSVFormat5.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Character character0 = Character.valueOf('=');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      cSVFormat0.DEFAULT.withRecordSeparator(" yc+Smt8}SR2ZH|");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat4.INFORMIX_UNLOAD.withHeader(resultSet0);
      cSVFormat5.POSTGRESQL_CSV.withCommentMarker('=');
      CSVFormat cSVFormat6 = CSVFormat.newFormat('=');
      cSVFormat6.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      cSVFormat4.withTrailingDelimiter();
      cSVFormat5.withIgnoreEmptyLines();
      MockFile mockFile0 = new MockFile(" yc+Smt8}SR2ZH|");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        cSVFormat6.print(path0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.TDF.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat2.POSTGRESQL_TEXT.withHeader(class1);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat3.getEscapeCharacter();
      cSVFormat3.printer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "hbn6)k?1#'.";
      stringArray0[1] = "";
      stringArray0[2] = "EOF whilst processing escape sequence";
      stringArray0[3] = "(%zs|;PtTWn";
      stringArray0[4] = "s&TKI_Alx|N";
      stringArray0[5] = "VYUI&s8^SjPYrRu9!Ne";
      cSVFormat3.withHeader(stringArray0);
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      cSVFormat4.hashCode();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat6 = cSVFormat5.withCommentMarker('T');
      cSVFormat6.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat7 = CSVFormat.EXCEL;
      cSVFormat3.format(stringArray0);
      cSVFormat6.getIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat2.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat1.withHeader(class1);
      cSVFormat5.withIgnoreSurroundingSpaces(true);
      cSVFormat5.getEscapeCharacter();
      cSVFormat4.printer();
      cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat6 = cSVFormat4.withTrim();
      CSVFormat cSVFormat7 = CSVFormat.RFC4180;
      cSVFormat6.hashCode();
      cSVFormat0.withIgnoreHeaderCase();
      cSVFormat4.withCommentMarker('T');
      cSVFormat3.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat8 = CSVFormat.EXCEL;
      cSVFormat5.withDelimiter('C');
      cSVFormat8.printer();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat0.RFC4180.withRecordSeparator('}');
      cSVFormat0.withHeader((ResultSet) null);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Short short0 = new Short((short)105);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.println(charArrayWriter0);
      cSVFormat1.getQuoteMode();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      String[] stringArray0 = new String[3];
      stringArray0[1] = "C+B7+R6S<S";
      stringArray0[2] = "|~LS8K@rg";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('D');
      Object[] objectArray1 = new Object[2];
      cSVFormat1.format(objectArray1);
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat5.MYSQL.withCommentMarker('D');
      cSVFormat1.withTrim();
      CSVFormat cSVFormat6 = cSVFormat3.withRecordSeparator("C+B7+R6S<S");
      CSVFormat cSVFormat7 = cSVFormat2.withAutoFlush(true);
      cSVFormat7.withSkipHeaderRecord(false);
      CSVFormat cSVFormat8 = cSVFormat6.withTrim();
      cSVFormat1.withRecordSeparator(",C+B7+R6S<S,|~LS8K@rg\n,");
      Character character0 = Character.valueOf('u');
      cSVFormat1.withQuote(character0);
      cSVFormat8.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.hashCode();
      cSVFormat1.getRecordSeparator();
      cSVFormat2.withRecordSeparator("=U$3");
      cSVFormat1.withQuote('_');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "=U$3";
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat4 = CSVFormat.newFormat('l');
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat6 = cSVFormat1.withHeader(class0);
      cSVFormat0.withTrim();
      cSVFormat6.withRecordSeparator("\r\n");
      Character.valueOf('v');
      cSVFormat3.withQuote((Character) null);
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.hashCode();
      cSVFormat0.getRecordSeparator();
      cSVFormat1.DEFAULT.hashCode();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("!QZae}3>>zP>sK");
      CSVFormat cSVFormat3 = CSVFormat.newFormat('_');
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "=U$3";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) "\n";
      objectArray0[6] = (Object) "!QZae}3>>zP>sK";
      objectArray0[7] = (Object) cSVFormat3;
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat5 = CSVFormat.newFormat('D');
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat6 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat5.withSkipHeaderRecord(true);
      CSVFormat cSVFormat7 = cSVFormat4.withRecordSeparator(";L");
      cSVFormat0.format(objectArray0);
      cSVFormat0.withNullString("Delimiter=<");
      cSVFormat7.withAutoFlush(true);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        cSVFormat0.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = new Character('j');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The escape character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" SurroundingSpaces:ignored");
      cSVFormat5.println(mockPrintStream0);
      cSVFormat0.withTrim();
      // Undeclared exception!
      try { 
        cSVFormat3.withCommentMarker('j');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('j')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('G');
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat0.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames();
      cSVFormat3.TDF.printer();
      Character character0 = Character.valueOf('&');
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker(character0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte) (-37);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat5 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
      cSVFormat5.INFORMIX_UNLOAD_CSV.toString();
      CSVFormat cSVFormat6 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat7 = cSVFormat6.withTrim(true);
      CSVFormat cSVFormat8 = cSVFormat7.withTrim(true);
      cSVFormat8.getAllowMissingColumnNames();
      cSVFormat1.withCommentMarker('&');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.hashCode();
      cSVFormat1.getRecordSeparator();
      cSVFormat2.withRecordSeparator("=U$3");
      cSVFormat1.withQuote('_');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "=U$3";
      objectArray0[1] = (Object) "=U$3";
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(true);
      cSVFormat4.withHeader((ResultSet) null);
      cSVFormat2.withFirstRecordAsHeader();
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) quoteMode0;
      objectArray1[1] = (Object) null;
      objectArray1[2] = (Object) null;
      objectArray1[3] = (Object) quoteMode0;
      objectArray1[4] = (Object) quoteMode0;
      objectArray1[5] = (Object) "\n";
      cSVFormat1.withHeaderComments(objectArray1);
      Short short0 = new Short((short) (-2350));
      MockFile mockFile0 = new MockFile("=U$3");
      MockFile mockFile1 = new MockFile(mockFile0, "=U$3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      cSVFormat4.println(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
      Character character0 = new Character(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
      Character character1 = new Character('x');
      cSVFormat2.withQuote(character1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.hashCode();
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("!QZae}3>>zP>sK");
      CSVFormat cSVFormat3 = cSVFormat1.withQuote('_');
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "=U$3";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) "\n";
      objectArray0[6] = (Object) "!QZae}3>>zP>sK";
      objectArray0[7] = (Object) cSVFormat3;
      cSVFormat2.format(objectArray0);
      CSVFormat.newFormat('D');
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      CSVFormat cSVFormat6 = CSVFormat.EXCEL;
      cSVFormat3.withNullString("=U$3");
      CSVFormat cSVFormat7 = cSVFormat4.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat8 = cSVFormat7.withTrailingDelimiter();
      CSVFormat cSVFormat9 = cSVFormat8.withNullString("=U$3\tjava.lang.Object@0000000006\torg.apache.commons.csv.CSVFormat@0000000002\torg.apache.commons.csv.CSVFormat@0000000003\t\n\t\n\t!QZae}3>>zP>sK\torg.apache.commons.csv.CSVFormat@0000000003!QZae}3>>zP>sK");
      cSVFormat9.toString();
      Object object1 = new Object();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      cSVFormat1.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat3.toString();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.MYSQL.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.hashCode();
      cSVFormat1.getRecordSeparator();
      cSVFormat2.withRecordSeparator("=U$3");
      CSVFormat cSVFormat3 = cSVFormat1.withQuote('_');
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase();
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat4.hashCode();
      Float float0 = new Float(0.0F);
      cSVFormat3.print((Object) float0, (Appendable) stringWriter0, false);
      cSVFormat1.withAllowMissingColumnNames(false);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat2.hashCode();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "t2r";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "t2r";
      stringArray0[5] = "t2r";
      stringArray0[6] = "t2r";
      stringArray0[7] = "";
      stringArray0[8] = "t2r";
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      boolean boolean0 = true;
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat2.format(stringArray0);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, t2r, , , t2r, t2r, t2r, , t2r]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = true;
      String string0 = "InformixUnload";
      CSVFormat.valueOf("InformixUnload");
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      boolean boolean1 = false;
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withTrim(false);
      cSVFormat2.MYSQL.withIgnoreHeaderCase();
      PipedReader pipedReader0 = new PipedReader(30);
      cSVFormat1.INFORMIX_UNLOAD_CSV.parse(pipedReader0);
      cSVFormat2.hashCode();
      cSVFormat2.getDelimiter();
      cSVFormat3.printer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        cSVFormat2.withQuote(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat2.DEFAULT.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat4.POSTGRESQL_TEXT.withHeader(class1);
      cSVFormat1.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(false);
      cSVFormat2.getEscapeCharacter();
      cSVFormat1.printer();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(stringArray0);
      cSVFormat6.MYSQL.hashCode();
      cSVFormat6.MYSQL.withIgnoreHeaderCase();
      CSVFormat cSVFormat7 = CSVFormat.EXCEL;
      cSVFormat4.withDelimiter('=');
      cSVFormat3.withAutoFlush(false);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      // Undeclared exception!
      try { 
        cSVFormat0.INFORMIX_UNLOAD_CSV.println(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat2.TDF.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.POSTGRESQL_TEXT.withHeader(class0);
      cSVFormat1.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(false);
      cSVFormat2.getEscapeCharacter();
      cSVFormat1.printer();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(stringArray0);
      cSVFormat5.MYSQL.hashCode();
      CSVFormat cSVFormat6 = cSVFormat5.MYSQL.withIgnoreHeaderCase();
      cSVFormat6.withTrim();
      CSVFormat cSVFormat7 = CSVFormat.EXCEL;
      CSVFormat cSVFormat8 = cSVFormat3.withDelimiter('=');
      cSVFormat0.getSkipHeaderRecord();
      cSVFormat8.printer();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('f');
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat2.hashCode();
      cSVFormat1.getRecordSeparator();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
      CSVFormat cSVFormat4 = cSVFormat2.withQuote('C');
      cSVFormat4.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat3.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = cSVFormat1.withTrim(false);
      CSVFormat cSVFormat7 = cSVFormat6.withFirstRecordAsHeader();
      cSVFormat7.withIgnoreSurroundingSpaces(true);
      cSVFormat5.getSkipHeaderRecord();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      cSVFormat3.format(objectArray0);
      cSVFormat2.withHeaderComments((Object[]) null);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat3.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.hashCode();
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("Escape=<");
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('C');
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
      cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat5.withIgnoreSurroundingSpaces(true);
      cSVFormat1.getSkipHeaderRecord();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat6;
      objectArray0[4] = (Object) cSVFormat6;
      objectArray0[5] = (Object) null;
      cSVFormat5.format(objectArray0);
      cSVFormat2.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat3.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.getSkipHeaderRecord();
      cSVFormat1.hashCode();
      cSVFormat0.getRecordSeparator();
      String string0 = null;
      cSVFormat0.withRecordSeparator((String) null);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat6.withIgnoreSurroundingSpaces(false);
      cSVFormat5.getSkipHeaderRecord();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVFormat3.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      File file0 = MockFile.createTempFile("Escape=<", "Escape=<");
      MockFile mockFile0 = new MockFile(file0, "Escape=<");
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat0.INFORMIX_UNLOAD.print((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.getSkipHeaderRecord();
      cSVFormat1.hashCode();
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator((String) null);
      CSVFormat cSVFormat3 = cSVFormat1.withQuote('C');
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat3.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat5.getSkipHeaderRecord();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "\n";
      cSVFormat0.format(objectArray0);
      cSVFormat5.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat4.withQuoteMode(quoteMode0);
      CSVFormat.newFormat('C');
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.getRecordSeparator();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "\n";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat6 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat4.withIgnoreSurroundingSpaces(false);
      cSVFormat5.getSkipHeaderRecord();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat6;
      objectArray0[5] = (Object) cSVFormat6;
      objectArray0[6] = (Object) cSVFormat3;
      cSVFormat1.format(objectArray0);
      cSVFormat4.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat4.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreEmptyLines();
      Object object0 = new Object();
      cSVFormat1.withHeaderComments((Object[]) null);
      cSVFormat4.withFirstRecordAsHeader();
      Object object1 = new Object();
      cSVFormat1.equals(object1);
      cSVFormat3.toString();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Nf\"", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false", 13, 13);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      cSVFormat2.print((Object) null, (Appendable) printStream0, false);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('c');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.csv.CSVFormat";
      stringArray0[1] = "V=4><ta%l";
      stringArray0[2] = "RecordSeparator=<";
      stringArray0[3] = "The quoteChar cannot be a line break";
      stringArray0[4] = "The comment start marker character cannot be a line break";
      stringArray0[5] = "Ft4>ljm";
      stringArray0[6] = "!Jew@t-UwNx";
      stringArray0[7] = "";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      cSVFormat3.getDelimiter();
      cSVFormat0.getCommentMarker();
      CSVFormat.Predefined.values();
      cSVFormat3.getAutoFlush();
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter();
      cSVFormat4.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withCommentMarker('*');
      Character character0 = new Character('*');
      cSVFormat1.printer();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.withNullString("");
      cSVFormat2.toString();
      Object object0 = new Object();
      cSVFormat2.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat2.withIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.getSkipHeaderRecord();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat0.POSTGRESQL_TEXT.withHeader(resultSet0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('G');
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase();
      cSVFormat5.INFORMIX_UNLOAD_CSV.withIgnoreEmptyLines();
      cSVFormat5.getSkipHeaderRecord();
      cSVFormat2.printer();
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.hashCode();
      cSVFormat1.getRecordSeparator();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("=U$3");
      CSVFormat cSVFormat4 = cSVFormat1.withQuote('_');
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat6 = cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat6.getSkipHeaderRecord();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[4] = object1;
      cSVFormat3.format(objectArray0);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) quoteMode0;
      objectArray1[1] = (Object) cSVFormat7;
      objectArray1[2] = (Object) cSVFormat1;
      objectArray1[3] = (Object) cSVFormat6;
      objectArray1[4] = (Object) cSVFormat3;
      cSVFormat5.withHeaderComments(objectArray1);
      QuoteMode quoteMode1 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat2.withQuoteMode(quoteMode1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Class<QuoteMode> class0 = QuoteMode.class;
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3850);
      stringWriter1.getBuffer();
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("AdcRI");
      Character.valueOf('B');
      cSVFormat1.withQuote((Character) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) class0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat4.withQuote('D');
      cSVFormat5.withRecordSeparator("$;t](!Sy");
      cSVFormat1.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat2.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[8];
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Object object0 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
      cSVFormat0.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      Object object0 = new Object();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      cSVFormat1.printer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ">5k>{'fMHBBm";
      stringArray0[1] = "F?";
      stringArray0[2] = "TTZ[?XykE@2jBF";
      stringArray0[3] = "";
      stringArray0[4] = "=Vhj|nAuu=@Rp\rV1f";
      cSVFormat3.withHeader(stringArray0);
      cSVFormat1.hashCode();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      cSVFormat2.withDelimiter('=');
      CSVFormat cSVFormat6 = cSVFormat4.withNullString("TDF");
      cSVFormat6.getSkipHeaderRecord();
      CSVFormat cSVFormat7 = cSVFormat3.withHeader(stringArray0);
      cSVFormat7.printer();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat1.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape('G');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('G')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) null;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat4.getSkipHeaderRecord();
      Object object0 = new Object();
      CSVFormat cSVFormat5 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withRecordSeparator('q');
      cSVFormat2.withTrim();
      CSVFormat cSVFormat6 = cSVFormat2.withRecordSeparator("org.apache.commons.csv.CSVFormat@0000000001|org.apache.commons.csv.CSVFormat@0000000003|");
      CSVFormat cSVFormat7 = cSVFormat6.withQuote((Character) null);
      cSVFormat7.format(objectArray0);
      cSVFormat2.withRecordSeparator("org.apache.commons.csv.CSVFormat@0000000001|org.apache.commons.csv.CSVFormat@0000000003|");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ALL_NON_NULL");
      CSVFormat cSVFormat8 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat8.getHeaderComments();
      cSVFormat5.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) null;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat4.getSkipHeaderRecord();
      Object object0 = new Object();
      cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withRecordSeparator('q');
      cSVFormat2.withTrim();
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_TEXT;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('N');
      cSVFormat2.print((Object) "org.apache.commons.csv.CSVFormat@0000000001|org.apache.commons.csv.CSVFormat@0000000003|", (Appendable) stringWriter1, false);
      cSVFormat2.withAllowMissingColumnNames(false);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withCommentMarker('*');
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote('*');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('*')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) rowSetMetaDataImpl0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) resultSet0;
      objectArray0[8] = (Object) resultSet0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
      cSVFormat2.INFORMIX_UNLOAD_CSV.withRecordSeparator("javax.sql.rowset.RowSetMetaDataImpl@0000000003Gorg.apache.commons.csv.CSVFormat@0000000001Gorg.apache.commons.csv.CSVFormat@0000000001GGGjavax.sql.rowset.RowSetMetaDataImpl@0000000003GGorg.evosuite.shaded.org.mockito.codegen.ResultSet$MockitoMock$1937039309@0000000004Gorg.evosuite.shaded.org.mockito.codegen.ResultSet$MockitoMock$1937039309@0000000004");
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat3.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.newFormat('i');
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('2');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      cSVFormat3.withCommentMarker('C');
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      cSVFormat1.withAutoFlush(false);
      cSVFormat0.getSkipHeaderRecord();
      cSVFormat2.getQuoteCharacter();
      cSVFormat2.printer();
      cSVFormat1.toString();
      PipedReader pipedReader0 = new PipedReader();
      Character character0 = new Character('C');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker(character0);
      try { 
        cSVFormat5.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat2.TDF.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.POSTGRESQL_TEXT.withHeader(class1);
      cSVFormat1.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(false);
      cSVFormat2.getEscapeCharacter();
      cSVFormat1.printer();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(stringArray0);
      cSVFormat5.MYSQL.withIgnoreHeaderCase();
      CSVFormat cSVFormat6 = cSVFormat1.RFC4180.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat7 = CSVFormat.EXCEL;
      cSVFormat3.withDelimiter('=');
      cSVFormat6.getTrim();
      cSVFormat0.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat8 = cSVFormat2.withNullString((String) null);
      cSVFormat8.withDelimiter('X');
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      Object object0 = new Object();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) resultSet0;
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = object0;
      CSVFormat cSVFormat4 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat5.equals((Object) null);
      cSVFormat5.toString();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("$VALUES", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      cSVFormat4.print(objectArray0[5], (Appendable) mockPrintStream0, false);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      cSVFormat2.EXCEL.withTrim(false);
      cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat0.getCommentMarker();
      Float float0 = new Float((double) (byte) (-59));
      StringWriter stringWriter0 = new StringWriter((byte)50);
      cSVFormat1.print((Object) float0, (Appendable) stringWriter0, false);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('T');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Character character0 = Character.valueOf('T');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('r');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character character1 = Character.valueOf('W');
      cSVFormat5.withCommentMarker(character1);
      CSVFormat cSVFormat6 = cSVFormat3.withDelimiter('W');
      boolean boolean0 = false;
      cSVFormat6.POSTGRESQL_CSV.withAutoFlush(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat6.POSTGRESQL_CSV.withHeader(class0);
      cSVFormat0.getQuoteCharacter();
      Character character2 = Character.valueOf('W');
      cSVFormat2.withEscape(character2);
      cSVFormat3.equals(cSVFormat1);
      int int0 = 1627;
      StringWriter stringWriter0 = new StringWriter(1627);
      stringWriter0.append('\'');
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null, 1627, 1627);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withHeader((ResultSet) null);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      char char0 = 'e';
      cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat1 = CSVFormat.newFormat('e');
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      Character character0 = new Character('u');
      cSVFormat3.EXCEL.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        cSVFormat2.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) null;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat4.getSkipHeaderRecord();
      Object object0 = new Object();
      cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withRecordSeparator('q');
      cSVFormat2.withTrim();
      CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator("org.apache.commons.csv.CSVFormat@0000000001|org.apache.commons.csv.CSVFormat@0000000003|");
      CSVFormat cSVFormat6 = cSVFormat5.withQuote((Character) null);
      cSVFormat6.format(objectArray0);
      cSVFormat2.withRecordSeparator("org.apache.commons.csv.CSVFormat@0000000001|org.apache.commons.csv.CSVFormat@0000000003|");
      cSVFormat1.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat5.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) null;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat4.getSkipHeaderRecord();
      Object object0 = new Object();
      cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withRecordSeparator('e');
      cSVFormat2.withTrim();
      CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator("org.apache.commons.csv.CSVFormat@0000000001|org.apache.commons.csv.CSVFormat@0000000001|");
      CSVFormat cSVFormat6 = cSVFormat5.withQuote((Character) null);
      cSVFormat6.format(objectArray0);
      cSVFormat2.withRecordSeparator("org.apache.commons.csv.CSVFormat@0000000001|org.apache.commons.csv.CSVFormat@0000000001|");
      CSVFormat cSVFormat7 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat7.withRecordSeparator('r');
      cSVFormat2.getNullString();
      Character character0 = new Character('r');
      cSVFormat3.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat4.getSkipHeaderRecord();
      Object object0 = new Object();
      CSVFormat cSVFormat5 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.format(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat1.withTrailingDelimiter(false);
      cSVFormat6.withCommentMarker('_');
      CSVFormat cSVFormat7 = CSVFormat.DEFAULT;
      cSVFormat6.getTrim();
      cSVFormat3.getIgnoreSurroundingSpaces();
      cSVFormat1.withDelimiter('q');
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) null;
      cSVFormat1.format(objectArray0);
      cSVFormat3.withIgnoreEmptyLines();
      Character character0 = Character.valueOf('L');
      cSVFormat2.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat2.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat1.getSkipHeaderRecord();
      Object object0 = new Object();
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) stringWriter0;
      objectArray1[1] = (Object) stringWriter0;
      objectArray1[2] = (Object) cSVFormat0;
      objectArray1[3] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray1);
      cSVFormat2.withHeaderComments(objectArray1);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat2.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.printer();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.INFORMIX_UNLOAD_CSV.hashCode();
      cSVFormat0.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames();
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withQuote('C');
      CSVFormat cSVFormat3 = cSVFormat1.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      cSVFormat2.DEFAULT.withFirstRecordAsHeader();
      cSVFormat0.getSkipHeaderRecord();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\r\n";
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat0.RFC4180.withHeader(class0);
      objectArray0[2] = (Object) "\r\n";
      Object object0 = new Object();
      cSVFormat2.format(objectArray0);
      cSVFormat2.withHeaderComments((Object[]) null);
      cSVFormat3.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.TDF.withQuote('5');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) null;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat4.getSkipHeaderRecord();
      Object object0 = new Object();
      CSVFormat cSVFormat5 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withRecordSeparator('e');
      cSVFormat2.withTrim();
      CSVFormat cSVFormat6 = cSVFormat2.withRecordSeparator("\"org.apache.commons.csv.CSVFormat@0000000001\"\t\"org.apache.commons.csv.CSVFormat@0000000001\"\tN");
      CSVFormat cSVFormat7 = cSVFormat6.withQuote((Character) null);
      cSVFormat3.withCommentMarker('_');
      cSVFormat7.withIgnoreSurroundingSpaces();
      cSVFormat5.equals(cSVFormat1);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mww<";
      cSVFormat0.format(stringArray0);
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.getSkipHeaderRecord();
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator("mww<\tN");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character.valueOf('F');
      CSVFormat cSVFormat6 = cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat0.format(stringArray0);
      CSVFormat cSVFormat7 = cSVFormat6.withRecordSeparator("mww<\tN");
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreHeaderCase(true);
      cSVFormat5.withRecordSeparator('*');
      cSVFormat8.getNullString();
      Character character0 = new Character('F');
      cSVFormat4.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat0.withTrim(true);
      Class<QuoteMode> class1 = QuoteMode.class;
      cSVFormat1.POSTGRESQL_CSV.withHeader(class1);
      cSVFormat2.withHeader(class0);
      Character character0 = Character.valueOf('m');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat2.withTrim();
      Character character1 = Character.valueOf('m');
      cSVFormat4.withQuote(character1);
      cSVFormat0.withTrim();
      cSVFormat3.toString();
      Class<Token.Type> class2 = Token.Type.class;
      cSVFormat3.withHeader(class2);
      CSVFormat cSVFormat5 = CSVFormat.newFormat('m');
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Delimiter=<\t> Escape=<m> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      stringArray0[1] = "&T>p](Ly_xtb>Iqrw:`";
      stringArray0[2] = "Delimiter=<\t> Escape=<m> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      stringArray0[3] = "Delimiter=<\t> Escape=<m> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      stringArray0[4] = "Oz?fP!TU<).Wg.e;";
      stringArray0[5] = "Delimiter=<\t> Escape=<m> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      stringArray0[6] = "Delimiter=<\t> Escape=<m> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      // Undeclared exception!
      try { 
        cSVFormat5.INFORMIX_UNLOAD.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'Delimiter=<\t> Escape=<m> NullString=<N> RecordSeparator=<
         // > SkipHeaderRecord:false' in [Delimiter=<\t> Escape=<m> NullString=<N> RecordSeparator=<
         // > SkipHeaderRecord:false, &T>p](Ly_xtb>Iqrw:`, Delimiter=<\t> Escape=<m> NullString=<N> RecordSeparator=<
         // > SkipHeaderRecord:false, Delimiter=<\t> Escape=<m> NullString=<N> RecordSeparator=<
         // > SkipHeaderRecord:false, Oz?fP!TU<).Wg.e;, Delimiter=<\t> Escape=<m> NullString=<N> RecordSeparator=<
         // > SkipHeaderRecord:false, Delimiter=<\t> Escape=<m> NullString=<N> RecordSeparator=<
         // > SkipHeaderRecord:false]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " [");
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) " [", (Appendable) charBuffer0, true);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) null;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat3.getSkipHeaderRecord();
      Object object0 = new Object();
      cSVFormat2.withIgnoreEmptyLines(true);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.apache.commons.csv.CSVFormat@0000000001|org.apache.commons.csv.CSVFormat@0000000001|");
      String string0 = ")pVWo~Mw";
      cSVFormat2.POSTGRESQL_TEXT.withRecordSeparator(")pVWo~Mw");
      // Undeclared exception!
      try { 
        cSVFormat2.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.INFORMIX_UNLOAD_CSV.hashCode();
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withQuote('C');
      CSVFormat cSVFormat3 = cSVFormat1.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat2.DEFAULT.withFirstRecordAsHeader();
      cSVFormat0.getSkipHeaderRecord();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\r\n";
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      cSVFormat2.format(objectArray0);
      cSVFormat4.getQuoteCharacter();
      char char0 = 'B';
      Character character0 = new Character('e');
      Character character1 = Character.valueOf('6');
      cSVFormat4.withQuote(character1);
      cSVFormat2.printer();
      cSVFormat0.toString();
      Character character2 = Character.valueOf('S');
      cSVFormat3.withCommentMarker(character2);
      cSVFormat4.getNullString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\r\n";
      stringArray0[1] = "\r\n";
      stringArray0[2] = "\r\n";
      stringArray0[3] = null;
      stringArray0[4] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false";
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '\r
         // ' in [\r
         // , \r
         // , \r
         // , null, Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r
         // > EmptyLines:ignored SkipHeaderRecord:false]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String string0 = "$VALUES";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((String[]) null);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ") invalid parse sequence";
      objectArray0[1] = (Object) cSVFormat5;
      cSVFormat2.format(objectArray0);
      cSVFormat0.getQuoteCharacter();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat2.withIgnoreEmptyLines(false);
      boolean boolean0 = false;
      cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat5.withIgnoreEmptyLines(false);
      char char0 = 'l';
      cSVFormat4.withEscape('l');
      cSVFormat1.equals(cSVFormat0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("path", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.INFORMIX_UNLOAD.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      cSVFormat1.print((Object) cSVFormat0, (Appendable) stringWriter0, true);
      cSVFormat0.equals(cSVFormat0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("path", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.INFORMIX_UNLOAD_CSV.hashCode();
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withQuote('C');
      CSVFormat cSVFormat3 = cSVFormat1.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat2.DEFAULT.withFirstRecordAsHeader();
      cSVFormat0.getSkipHeaderRecord();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\r\n";
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      objectArray0[2] = (Object) "\r\n";
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat0.withRecordSeparator("$mX[V}D");
      Character character0 = new Character('C');
      cSVFormat2.withQuote(character0);
      cSVFormat3.format(objectArray0);
      cSVFormat1.withRecordSeparator("$mX[V}D");
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreEmptyLines(false);
      Character character1 = Character.valueOf('');
      CSVFormat cSVFormat7 = cSVFormat6.withCommentMarker(character1);
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreSurroundingSpaces();
      cSVFormat8.withIgnoreHeaderCase(true);
      cSVFormat1.withRecordSeparator('e');
      CSVFormat cSVFormat9 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat9.getNullString();
      Character character2 = new Character('C');
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mww<";
      stringArray0[1] = "2yV";
      Character character0 = new Character('w');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.MYSQL.withIgnoreHeaderCase();
      cSVFormat0.format(stringArray0);
      cSVFormat4.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat6 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.withCommentMarker('_');
      CSVFormat cSVFormat7 = CSVFormat.DEFAULT;
      cSVFormat4.getTrim();
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat0.withDelimiter('S');
      cSVFormat6.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.INFORMIX_UNLOAD_CSV.hashCode();
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withQuote('C');
      CSVFormat cSVFormat3 = cSVFormat1.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat2.DEFAULT.withFirstRecordAsHeader();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat4.withHeader(class0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) "\r\n";
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) stringBuffer0;
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) cSVFormat2;
      cSVFormat4.MYSQL.withRecordSeparator("p");
      cSVFormat3.printRecord(stringBuffer0, objectArray0);
      cSVFormat4.withAllowMissingColumnNames(false);
      boolean boolean0 = true;
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_TEXT;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('n');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      Class<Token.Type> class1 = Token.Type.class;
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(class1);
      Class<CSVFormat.Predefined> class2 = CSVFormat.Predefined.class;
      cSVFormat3.withHeader(class2);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) cSVFormat6;
      cSVFormat4.printRecord(stringBuffer0, objectArray0);
      cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat7 = CSVFormat.POSTGRESQL_TEXT;
      Float float0 = new Float((-1.0F));
      cSVFormat5.print((Object) float0, (Appendable) stringBuffer0, true);
      cSVFormat6.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat4.getSkipHeaderRecord();
      Object object0 = new Object();
      cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.withRecordSeparator('e');
      CSVFormat cSVFormat5 = cSVFormat2.withCommentMarker('-');
      cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat2.equals(cSVFormat1);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("path", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
      Class<QuoteMode> class1 = QuoteMode.class;
      cSVFormat0.withHeader(class1);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat5.printer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = " EmptyLines:ignored";
      stringArray0[1] = "b7 JlSaXglE}mN";
      stringArray0[2] = "b7 JlSaXglE}mN";
      stringArray0[3] = "!Ci33Z~d/=jv";
      // Undeclared exception!
      try { 
        cSVFormat4.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'b7 JlSaXglE}mN' in [ EmptyLines:ignored, b7 JlSaXglE}mN, b7 JlSaXglE}mN, !Ci33Z~d/=jv]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "QuoteChar=<");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = new Character('e');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      cSVFormat0.EXCEL.withSkipHeaderRecord(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.INFORMIX_UNLOAD_CSV.hashCode();
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
      cSVFormat1.INFORMIX_UNLOAD_CSV.withQuote('C');
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator('C');
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(false);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.withHeader(class0);
      cSVFormat5.withTrim(false);
      cSVFormat4.printer();
      cSVFormat3.getIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat1.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat1.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat3.withHeader(class1);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord(false);
      cSVFormat6.getEscapeCharacter();
      cSVFormat2.printer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%P!2Z6{CyiFyt<*";
      stringArray0[1] = "<k";
      stringArray0[2] = "";
      CSVFormat cSVFormat7 = cSVFormat1.withHeader(stringArray0);
      cSVFormat4.hashCode();
      cSVFormat7.withIgnoreHeaderCase();
      cSVFormat6.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat8 = CSVFormat.EXCEL;
      cSVFormat5.withDelimiter(']');
      cSVFormat8.getSkipHeaderRecord();
      cSVFormat1.printer();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      Character character0 = null;
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(resultSet0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      cSVFormat5.INFORMIX_UNLOAD.withQuote('<');
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, , , , ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.INFORMIX_UNLOAD_CSV.hashCode();
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
      cSVFormat1.INFORMIX_UNLOAD_CSV.withQuote('C');
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator('C');
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      cSVFormat2.withIgnoreEmptyLines(false);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat1.withHeader(class0);
      cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat4.printer();
      cSVFormat3.getIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat1.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) null;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat0.withTrim();
      CSVFormat cSVFormat6 = cSVFormat2.withIgnoreEmptyLines(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat7 = cSVFormat6.withHeader(class0);
      boolean boolean0 = false;
      cSVFormat7.withIgnoreHeaderCase(false);
      cSVFormat6.printer();
      cSVFormat6.getIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat1.MYSQL.withQuoteMode(quoteMode0);
      cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat5.withIgnoreEmptyLines(true);
      cSVFormat6.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat8 = cSVFormat7.withEscape('w');
      cSVFormat0.equals(cSVFormat8);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000001\tN", "path");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // path
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) null;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker((Character) null);
      CSVFormat cSVFormat5 = cSVFormat0.withTrim();
      CSVFormat cSVFormat6 = cSVFormat2.withIgnoreEmptyLines(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat7 = cSVFormat6.withHeader(class0);
      cSVFormat7.withIgnoreHeaderCase(false);
      cSVFormat6.printer();
      cSVFormat6.getIgnoreEmptyLines();
      cSVFormat7.withSkipHeaderRecord(false);
      cSVFormat3.withRecordSeparator('e');
      cSVFormat4.withTrim();
      cSVFormat5.format(objectArray0);
      CSVFormat cSVFormat8 = CSVFormat.EXCEL;
      cSVFormat8.withRecordSeparator("org.apache.commons.csv.CSVFormat@0000000001|org.apache.commons.csv.CSVFormat@0000000001|");
      cSVFormat1.withRecordSeparator('r');
      cSVFormat4.getNullString();
      Character.valueOf('r');
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      cSVFormat0.withFirstRecordAsHeader();
      String string0 = "$VALUES";
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mww<";
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withEscape((Character) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      cSVFormat2.withTrailingDelimiter(false);
      cSVFormat2.isQuoteCharacterSet();
      Character character0 = new Character('`');
      cSVFormat0.withCommentMarker((Character) null);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ") invalid parse squenc";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lJBWjizC";
      stringArray0[1] = "o_${)U";
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat2.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(class0);
      cSVFormat4.withIgnoreSurroundingSpaces(true);
      cSVFormat2.getEscapeCharacter();
      cSVFormat3.printer();
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [lJBWjizC, o_${)U, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) null;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat0.withTrim();
      CSVFormat cSVFormat6 = cSVFormat2.withIgnoreEmptyLines(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat7 = cSVFormat6.withHeader(class0);
      cSVFormat7.withIgnoreHeaderCase(false);
      cSVFormat6.printer();
      cSVFormat6.getIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat1.MYSQL.withQuoteMode(quoteMode0);
      cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat5.withIgnoreEmptyLines(true);
      cSVFormat6.withIgnoreEmptyLines(true);
      cSVFormat7.withEscape('w');
      cSVFormat2.withAllowMissingColumnNames(false);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat3.DEFAULT.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat6 = cSVFormat5.POSTGRESQL_TEXT.withHeader(class1);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class1;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) stringBuffer0;
      objectArray0[6] = (Object) stringBuffer0;
      cSVFormat2.printRecord(stringBuffer0, objectArray0);
      cSVFormat6.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat7 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat7.print((Object) null, (Appendable) stringWriter0, true);
      cSVFormat6.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lJBWjizC";
      stringArray0[1] = "o_${)U";
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withFirstRecordAsHeader();
      stringArray0[2] = "!!";
      stringArray0[3] = "$VALUES";
      stringArray0[4] = ") invalid parse sequence";
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('e');
      cSVFormat2.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.format(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord();
      cSVFormat5.withTrailingDelimiter(true);
      cSVFormat5.withCommentMarker('i');
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat5.withDelimiter('e');
      cSVFormat2.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');
      Character character0 = Character.valueOf('W');
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('W')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lJBWjizC";
      stringArray0[1] = "o_${)U";
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)80;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      PipedReader pipedReader0 = new PipedReader(35);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat0.EXCEL.print((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      cSVFormat3.TDF.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.DEFAULT.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat4.POSTGRESQL_TEXT.withHeader(class1);
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat3.getEscapeCharacter();
      cSVFormat2.printer();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(stringArray0);
      cSVFormat6.MYSQL.hashCode();
      cSVFormat6.MYSQL.withIgnoreHeaderCase();
      CSVFormat cSVFormat7 = cSVFormat2.RFC4180.withIgnoreHeaderCase(false);
      File file0 = MockFile.createTempFile("g+.<x6+", "k0)N:26P8DE");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat7.EXCEL.print(file0, charset0);
      CSVFormat cSVFormat8 = CSVFormat.EXCEL;
      CSVFormat cSVFormat9 = cSVFormat4.withDelimiter('=');
      cSVFormat0.getSkipHeaderRecord();
      cSVFormat9.printer();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.withEscape((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl1).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat0.withQuote('#');
      cSVFormat4.DEFAULT.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator("org.apache.commons.csv.QuoteMode");
      cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      cSVFormat5.getHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl2 = new RowSetMetaDataImpl();
      RowSetMetaDataImpl rowSetMetaDataImpl3 = new RowSetMetaDataImpl();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl3).when(resultSet1).getMetaData();
      CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet1);
      cSVFormat6.withQuote('#');
      cSVFormat2.withRecordSeparator("Mh|1S8G");
      CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('(');
      cSVFormat7.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces();
      cSVFormat0.getNullString();
      Character character0 = new Character('W');
      cSVFormat3.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.equals(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lJBWjizC";
      String string0 = "o_${)U";
      stringArray0[1] = "o_${)U";
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withFirstRecordAsHeader();
      stringArray0[2] = "!!";
      stringArray0[3] = "$VALUES";
      stringArray0[4] = ") invalid parse sequence";
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      cSVFormat2.RFC4180.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("o_${)U");
      CSVFormat cSVFormat4 = cSVFormat3.POSTGRESQL_CSV.withIgnoreEmptyLines();
      cSVFormat1.format(stringArray0);
      cSVFormat2.getQuoteCharacter();
      Character character0 = new Character('B');
      cSVFormat4.withQuote(character0);
      cSVFormat1.printer();
      CSVFormat cSVFormat5 = cSVFormat3.withAutoFlush(true);
      cSVFormat5.withIgnoreEmptyLines(true);
      cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat3.withEscape('w');
      CSVFormat cSVFormat6 = cSVFormat1.withTrim(true);
      cSVFormat6.equals("$VALUES");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("path", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) null;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat0.withTrim();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(class0);
      cSVFormat6.withIgnoreHeaderCase(false);
      cSVFormat5.printer();
      cSVFormat5.getIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat1.MYSQL.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat7 = cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat5.toString();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat2.getNullString();
      CSVFormat cSVFormat8 = CSVFormat.EXCEL;
      cSVFormat8.withHeader((String[]) null);
      CSVFormat cSVFormat9 = cSVFormat7.withCommentMarker((Character) null);
      cSVFormat9.withCommentMarker('');
      cSVFormat5.getHeader();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.csv.CSVFormat@0000000001|org.apache.commons.csv.CSVFormat@0000000001|");
      CSVFormat cSVFormat10 = cSVFormat6.withHeader(resultSet0);
      cSVFormat10.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      cSVFormat0.withHeaderComments(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.withEscape((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl1).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat0.withQuote('#');
      cSVFormat4.DEFAULT.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator("org.apache.commons.csv.QuoteMode");
      cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter();
      cSVFormat5.getHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl2 = new RowSetMetaDataImpl();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      CSVFormat cSVFormat6 = cSVFormat3.withHeader(resultSet1);
      cSVFormat6.withQuote('#');
      cSVFormat2.withRecordSeparator("Mh|1S8G");
      cSVFormat5.withRecordSeparator('(');
      cSVFormat0.getNullString();
      Character character0 = new Character('W');
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) null, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.INFORMIX_UNLOAD.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) cSVFormat1;
      objectArray1[1] = (Object) cSVFormat1;
      objectArray1[2] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray1[3] = object0;
      objectArray1[4] = (Object) cSVFormat1;
      objectArray1[5] = (Object) null;
      objectArray1[6] = (Object) null;
      cSVFormat1.withHeaderComments(objectArray1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode((QuoteMode) null);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      Object object0 = null;
      cSVFormat2.equals(cSVFormat3);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mww<";
      stringArray0[1] = "2yV";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = CSVFormat.newFormat('e');
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.format(stringArray0);
      CSVFormat cSVFormat7 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat4.withTrailingDelimiter(true);
      cSVFormat6.withCommentMarker('_');
      CSVFormat cSVFormat8 = CSVFormat.DEFAULT;
      cSVFormat3.getTrim();
      cSVFormat7.getIgnoreSurroundingSpaces();
      cSVFormat2.withDelimiter('_');
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat0.MYSQL.withQuoteMode(quoteMode0);
      objectArray0[2] = (Object) null;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat0.withTrim();
      CSVFormat cSVFormat6 = cSVFormat2.withIgnoreEmptyLines(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat7 = cSVFormat6.withHeader(class0);
      cSVFormat7.withIgnoreHeaderCase(false);
      cSVFormat6.printer();
      cSVFormat6.getIgnoreEmptyLines();
      CSVFormat.valueOf("MySQL");
      QuoteMode quoteMode1 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat8 = cSVFormat1.MYSQL.withQuoteMode(quoteMode1);
      cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat5.withIgnoreEmptyLines(true);
      cSVFormat6.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat9 = cSVFormat7.withEscape('w');
      cSVFormat0.equals(cSVFormat9);
      CSVFormat cSVFormat10 = cSVFormat6.withIgnoreSurroundingSpaces();
      cSVFormat10.withDelimiter('w');
      cSVFormat2.withNullString("\"[x&");
      cSVFormat8.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(true);
      cSVFormat5.isQuoteCharacterSet();
      Character character0 = new Character('7');
      cSVFormat5.withCommentMarker('_');
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat0.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl1).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(resultSet0);
      cSVFormat0.withQuote('#');
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("org.apache.commons.csv.QuoteMode");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.csv.QuoteMode";
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(stringArray0);
      cSVFormat6.hashCode();
      cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat7 = cSVFormat4.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat8 = cSVFormat1.withDelimiter('#');
      cSVFormat4.withHeader(stringArray0);
      cSVFormat8.withDelimiter('#');
      cSVFormat6.getSkipHeaderRecord();
      cSVFormat0.printer();
      RowSetMetaDataImpl rowSetMetaDataImpl2 = new RowSetMetaDataImpl();
      cSVFormat7.withHeader((ResultSetMetaData) rowSetMetaDataImpl2);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      cSVFormat3.TDF.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.DEFAULT.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      cSVFormat4.POSTGRESQL_TEXT.withHeader(class1);
      CSVFormat cSVFormat5 = cSVFormat2.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(false);
      Character character0 = cSVFormat3.getEscapeCharacter();
      cSVFormat2.printer();
      String[] stringArray0 = cSVFormat4.getHeader();
      CSVFormat cSVFormat6 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat7 = cSVFormat6.withTrailingDelimiter(true);
      CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator('*');
      cSVFormat5.getNullString();
      CSVFormat cSVFormat9 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat10 = cSVFormat5.withHeader(stringArray0);
      cSVFormat8.withCommentMarker('B');
      cSVFormat10.getTrim();
      cSVFormat7.getIgnoreSurroundingSpaces();
      cSVFormat3.withDelimiter('-');
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mww<";
      stringArray0[1] = "2yV";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat2.withRecordSeparator('e');
      CSVFormat cSVFormat3 = CSVFormat.newFormat('e');
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat3.withTrailingDelimiter(true);
      CSVFormat cSVFormat6 = cSVFormat0.withRecordSeparator('#');
      cSVFormat0.getNullString();
      CSVFormat cSVFormat7 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat5.withHeader(stringArray0);
      cSVFormat4.withCommentMarker('\\');
      cSVFormat0.getTrim();
      cSVFormat6.getIgnoreSurroundingSpaces();
      cSVFormat1.withDelimiter('B');
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat2.withEscape((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat0.withQuote('#');
      cSVFormat3.withCommentMarker('~');
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      cSVFormat3.getIgnoreEmptyLines();
      cSVFormat3.withEscape((Character) null);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("RFC4180");
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat0.withNullString(" SurroundingSpaces:ignored");
      StringWriter stringWriter0 = new StringWriter(1677);
      StringWriter stringWriter1 = stringWriter0.append(']');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      cSVFormat2.RFC4180.println(stringBuffer0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat3 = cSVFormat1.RFC4180.withQuote('#');
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter(true);
      cSVFormat4.DEFAULT.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat0.withCommentMarker('#');
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat3.withFirstRecordAsHeader();
      cSVFormat5.getQuoteMode();
      cSVFormat5.withTrim();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.INFORMIX_UNLOAD_CSV.hashCode();
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withQuote('C');
      CSVFormat cSVFormat3 = cSVFormat1.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat2.DEFAULT.withFirstRecordAsHeader();
      cSVFormat0.getSkipHeaderRecord();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\r\n";
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      objectArray0[2] = (Object) "\r\n";
      Object object0 = new Object();
      objectArray0[3] = object0;
      CSVFormat cSVFormat5 = cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat0.withRecordSeparator('e');
      cSVFormat0.withTrim();
      cSVFormat2.format(objectArray0);
      cSVFormat2.withRecordSeparator("C\r\nC,Corg.apache.commons.csv.CCSVFormat$Predefined@0000000010C,C\r\nC,java.lang.Object@0000000011,,,,");
      cSVFormat4.withRecordSeparator('r');
      cSVFormat5.getNullString();
      Character character0 = new Character('e');
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.EXCEL.withRecordSeparator("N#[uA");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("The escape character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withIgnoreHeaderCase(false);
      cSVFormat1.getEscapeCharacter();
      cSVFormat3.withCommentMarker('K');
      cSVFormat2.getIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mww<";
      stringArray0[1] = "2yV";
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat4 = cSVFormat0.withAutoFlush(true);
      Character character0 = new Character('y');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      cSVFormat5.getSkipHeaderRecord();
      Object object0 = new Object();
      cSVFormat4.format(stringArray0);
      CSVFormat cSVFormat6 = CSVFormat.newFormat('y');
      cSVFormat6.getQuoteCharacter();
      CSVFormat cSVFormat7 = cSVFormat4.withQuote(character0);
      cSVFormat5.printer();
      cSVFormat7.toString();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.getNullString();
      CSVFormat cSVFormat8 = cSVFormat5.withHeader(stringArray0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat8.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
      cSVFormat0.withCommentMarker('y');
      cSVFormat1.getHeader();
      cSVFormat3.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lJBWjizC";
      stringArray0[1] = "o_${)U";
      cSVFormat0.EXCEL.withFirstRecordAsHeader();
      stringArray0[2] = "!!";
      stringArray0[3] = "$VALUES";
      stringArray0[4] = ") invalid parse sequence";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.RFC4180.hashCode();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("o_${)U");
      CSVFormat cSVFormat3 = cSVFormat2.POSTGRESQL_CSV.withIgnoreEmptyLines();
      cSVFormat3.EXCEL.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator('e');
      CSVFormat cSVFormat5 = cSVFormat2.DEFAULT.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.RFC4180.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.format(stringArray0);
      CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord();
      CSVFormat cSVFormat7 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat0.withCommentMarker('e');
      cSVFormat6.getIgnoreEmptyLines();
      cSVFormat2.withDelimiter('e');
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat7.withHeaderComments(stringArray0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lJBWj~izC";
      stringArray0[1] = "o_${)U";
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withFirstRecordAsHeader();
      stringArray0[2] = "!!";
      stringArray0[3] = "$VALUES";
      stringArray0[4] = ") invalid parse sequence";
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "o_${)U";
      cSVFormat0.format(objectArray0);
      Character character0 = cSVFormat1.getQuoteCharacter();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      cSVFormat1.printer();
      cSVFormat1.toString();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.getNullString();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((String[]) null);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('1');
      cSVFormat4.EXCEL.withFirstRecordAsHeader();
      cSVFormat1.getHeader();
      cSVFormat0.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.INFORMIX_UNLOAD_CSV.hashCode();
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withQuote('C');
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      cSVFormat1.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.DEFAULT.withFirstRecordAsHeader();
      cSVFormat3.DEFAULT.withAutoFlush(false);
      cSVFormat0.getSkipHeaderRecord();
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat6 = cSVFormat5.withHeader((String[]) null);
      cSVFormat6.hashCode();
      CSVFormat cSVFormat7 = cSVFormat0.withRecordSeparator("");
      cSVFormat4.withIgnoreEmptyLines();
      CSVFormat cSVFormat8 = cSVFormat7.withSkipHeaderRecord(false);
      CSVFormat cSVFormat9 = cSVFormat2.withRecordSeparator('C');
      CSVFormat cSVFormat10 = cSVFormat2.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat10.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[0];
      cSVFormat9.format(objectArray0);
      cSVFormat4.withSkipHeaderRecord();
      CSVFormat cSVFormat11 = cSVFormat8.withTrailingDelimiter(false);
      cSVFormat11.withCommentMarker('e');
      cSVFormat8.getIgnoreEmptyLines();
      cSVFormat8.withDelimiter('u');
      cSVFormat2.withFirstRecordAsHeader();
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('G');
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat0.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames();
      cSVFormat3.TDF.printer();
      Character character0 = Character.valueOf('&');
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat5 = cSVFormat0.DEFAULT.withSkipHeaderRecord(true);
      cSVFormat5.INFORMIX_UNLOAD_CSV.toString();
      CSVFormat cSVFormat6 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat7 = cSVFormat6.withTrim(true);
      CSVFormat cSVFormat8 = cSVFormat7.withTrim(true);
      cSVFormat8.getAllowMissingColumnNames();
      cSVFormat1.withCommentMarker('&');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mww<";
      Character character0 = new Character('<');
      cSVFormat0.withCommentMarker(character0);
      stringArray0[1] = "2yV";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('e');
      CSVFormat cSVFormat4 = CSVFormat.newFormat('e');
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.format(stringArray0);
      cSVFormat4.withSkipHeaderRecord();
      cSVFormat4.withTrailingDelimiter(true);
      CSVFormat cSVFormat7 = cSVFormat6.withCommentMarker('_');
      CSVFormat cSVFormat8 = CSVFormat.DEFAULT;
      cSVFormat8.getIgnoreEmptyLines();
      cSVFormat4.withDelimiter('Y');
      cSVFormat8.withNullString("2yV");
      cSVFormat3.withDelimiter('v');
      cSVFormat7.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Mapping for %s not found, expected one of %s");
      cSVFormat0.print((Object) "Mapping for %s not found, expected one of %s", (Appendable) mockPrintWriter0, true);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.INFORMIX_UNLOAD_CSV.hashCode();
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withQuote('C');
      CSVFormat cSVFormat3 = cSVFormat1.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat2.DEFAULT.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat0.DEFAULT.withAutoFlush(false);
      cSVFormat0.getSkipHeaderRecord();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\r\n";
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      objectArray0[2] = (Object) "\r\n";
      Object object0 = new Object();
      objectArray0[3] = object0;
      cSVFormat5.withSkipHeaderRecord(false);
      cSVFormat0.withRecordSeparator('e');
      cSVFormat5.withTrim();
      cSVFormat2.format(objectArray0);
      cSVFormat2.withSkipHeaderRecord();
      cSVFormat4.withTrailingDelimiter(true);
      cSVFormat1.withCommentMarker('e');
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat3.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vN\"{iXu|7~J7t|$l");
      cSVFormat0.print((Object) "vN\"{iXu|7~J7t|$l", (Appendable) mockPrintWriter0, false);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lJBWjizC";
      stringArray0[1] = "o_${)U";
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withFirstRecordAsHeader();
      stringArray0[2] = "!!";
      stringArray0[3] = "$VALUES";
      stringArray0[4] = ") invalid parse sequence";
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      cSVFormat2.RFC4180.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("o_${)U");
      CSVFormat cSVFormat4 = cSVFormat3.POSTGRESQL_CSV.withIgnoreEmptyLines();
      cSVFormat1.format(stringArray0);
      cSVFormat2.getQuoteCharacter();
      Character character0 = new Character('B');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      cSVFormat1.printer();
      cSVFormat2.toString();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat5.getNullString();
      cSVFormat3.withHeader((String[]) null);
      cSVFormat5.withCommentMarker('~');
      cSVFormat4.getHeader();
      cSVFormat2.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.INFORMIX_UNLOAD_CSV.hashCode();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat0.TDF.withCommentMarker('C');
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      cSVFormat3.println(stringBuffer0);
      cSVFormat0.getCommentMarker();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(resultSet0);
      cSVFormat2.withQuote('H');
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = cSVFormat5.withRecordSeparator("}4,%#Gmg@2hH-qAISb");
      String[] stringArray0 = cSVFormat6.getHeader();
      cSVFormat0.withRecordSeparator('/');
      cSVFormat6.getNullString();
      CSVFormat cSVFormat7 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat8 = cSVFormat0.withCommentMarker('C');
      cSVFormat7.getTrim();
      Character character0 = new Character('4');
      CSVFormat cSVFormat9 = cSVFormat8.withCommentMarker(character0);
      cSVFormat9.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl1).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat0.withQuote('#');
      CSVFormat cSVFormat6 = cSVFormat4.withRecordSeparator("org.apache.commons.csv.QuoteMode");
      String[] stringArray0 = cSVFormat6.getHeader();
      cSVFormat4.DEFAULT.withTrailingDelimiter(false);
      cSVFormat5.withRecordSeparator('B');
      cSVFormat3.getNullString();
      CSVFormat cSVFormat7 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat7.withHeader(stringArray0);
      cSVFormat7.withCommentMarker('i');
      cSVFormat4.getTrim();
      cSVFormat5.getIgnoreSurroundingSpaces();
      cSVFormat0.withDelimiter('`');
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('J');
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.INFORMIX_UNLOAD.printRecord(stringWriter0, objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      cSVFormat1.print((Object) cSVFormat0, (Appendable) stringWriter0, true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat2.equals(cSVFormat0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("path", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) null;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat0.withTrim();
      CSVFormat cSVFormat6 = cSVFormat2.withIgnoreEmptyLines(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat7 = cSVFormat6.withHeader(class0);
      boolean boolean0 = false;
      cSVFormat7.withIgnoreHeaderCase(false);
      cSVFormat6.printer();
      cSVFormat6.getIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat1.MYSQL.withQuoteMode(quoteMode0);
      cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat5.withIgnoreEmptyLines(true);
      cSVFormat6.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat8 = cSVFormat7.withEscape('w');
      cSVFormat0.equals(cSVFormat8);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat@0000000001|org.apache.commons.csv.CSVFormat@0000000001|", "path");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // path
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.INFORMIX_UNLOAD_CSV.hashCode();
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withQuote('C');
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat1.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      cSVFormat3.DEFAULT.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat3.DEFAULT.withAutoFlush(false);
      cSVFormat0.getSkipHeaderRecord();
      Object[] objectArray0 = new Object[24];
      objectArray0[0] = (Object) "\r\n";
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      objectArray0[0] = (Object) "\r\n";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat5;
      objectArray0[7] = (Object) "\r\n";
      cSVFormat4.INFORMIX_UNLOAD.format(objectArray0);
      Character character0 = cSVFormat0.getQuoteCharacter();
      cSVFormat1.withQuote(character0);
      cSVFormat0.printer();
      cSVFormat5.toString();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.getNullString();
      cSVFormat5.withHeader((String[]) null);
      CSVFormat cSVFormat6 = cSVFormat4.withCommentMarker('C');
      cSVFormat2.getHeader();
      cSVFormat6.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[1];
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(true);
      cSVFormat5.isQuoteCharacterSet();
      CSVFormat cSVFormat6 = cSVFormat2.withCommentMarker('4');
      cSVFormat6.getTrim();
      cSVFormat6.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lJBWjizC";
      stringArray0[1] = "o_${)U";
      cSVFormat0.EXCEL.withFirstRecordAsHeader();
      stringArray0[2] = "!!";
      stringArray0[3] = "$VALUES";
      stringArray0[4] = ") invalid parse sequence";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.RFC4180.hashCode();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("o_${)U");
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat2.POSTGRESQL_CSV.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat4.EXCEL.withSkipHeaderRecord(false);
      CSVFormat cSVFormat6 = cSVFormat2.withRecordSeparator('e');
      CSVFormat cSVFormat7 = cSVFormat2.DEFAULT.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat8 = cSVFormat7.RFC4180.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat6.format(stringArray0);
      CSVFormat cSVFormat9 = cSVFormat6.withSkipHeaderRecord();
      cSVFormat0.withTrailingDelimiter(true);
      cSVFormat0.withCommentMarker('e');
      cSVFormat9.getIgnoreEmptyLines();
      cSVFormat2.withDelimiter('e');
      cSVFormat5.withFirstRecordAsHeader();
      cSVFormat8.withIgnoreSurroundingSpaces(false);
      cSVFormat3.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat1.INFORMIX_UNLOAD.withHeaderComments(objectArray0);
      cSVFormat1.getTrim();
      cSVFormat0.withEscape('r');
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mww<";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.hashCode();
      cSVFormat0.withRecordSeparator("!!");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat0.withRecordSeparator("mww<");
      cSVFormat4.format(stringArray0);
      cSVFormat3.getQuoteCharacter();
      Character character0 = Character.valueOf('L');
      cSVFormat2.withQuote(character0);
      cSVFormat2.printer();
      cSVFormat3.toString();
      cSVFormat1.getNullString();
      cSVFormat4.withHeader(stringArray0);
      cSVFormat4.withCommentMarker('~');
      CSVFormat cSVFormat5 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreEmptyLines();
      cSVFormat6.getHeader();
      cSVFormat2.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lJBWjizC";
      stringArray0[1] = "o_${)U";
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withFirstRecordAsHeader();
      stringArray0[2] = "!!";
      stringArray0[3] = "$VALUES";
      stringArray0[4] = ") invalid parse sequence";
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      cSVFormat2.RFC4180.hashCode();
      CSVFormat cSVFormat3 = cSVFormat1.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(false);
      cSVFormat0.getSkipHeaderRecord();
      cSVFormat2.getQuoteCharacter();
      cSVFormat3.INFORMIX_UNLOAD.withRecordSeparator("");
      Character character0 = Character.valueOf('B');
      CSVFormat cSVFormat5 = cSVFormat0.withQuote(character0);
      CharBuffer charBuffer0 = CharBuffer.allocate(1183);
      cSVFormat5.POSTGRESQL_CSV.printRecord(charBuffer0, stringArray0);
      cSVFormat0.printer();
      cSVFormat0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o_${)U");
      PipedReader pipedReader0 = new PipedReader();
      try { 
        cSVFormat4.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String[] stringArray0 = new String[5];
      String string0 = "lJBWjizC";
      stringArray0[0] = "lJBWjizC";
      stringArray0[1] = "o_${)U";
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withFirstRecordAsHeader();
      stringArray0[2] = "!!";
      stringArray0[3] = "$VALUES";
      stringArray0[4] = ") invalid parse sequence";
      cSVFormat0.withHeader(stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("o_${)U");
      Locale locale0 = Locale.GERMAN;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "InformixUnloadCsv", (Object[]) stringArray0);
      Float float0 = new Float((-3820.1F));
      cSVFormat1.print((Object) float0, (Appendable) printWriter0, true);
      String string1 = "r=`Db,zr49O(x_cb";
      cSVFormat1.withHeader(stringArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "k6Y";
      stringArray0[1] = " -/`J)zg.;cX\"41H_.";
      Byte byte0 = new Byte((byte) (-19));
      Locale locale0 = Locale.GERMAN;
      stringArray0[2] = "org.apache.commons.csv.CSVFormat$Predefined";
      stringArray0[3] = "1<>s#G]w";
      stringArray0[4] = "The comment start character and the delimiter cannot be the same ('";
      stringArray0[5] = "r=`Db,zr49O(x_cb";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.hashCode();
      Character character0 = new Character('>');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      cSVFormat3.isEscapeCharacterSet();
      cSVFormat3.isNullStringSet();
      cSVFormat2.withTrailingDelimiter(true);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("RFC4180");
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat0.withNullString(" SurroundingSpaces:ignored");
      StringWriter stringWriter0 = new StringWriter(1677);
      StringWriter stringWriter1 = stringWriter0.append(']');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) " SurroundingSpaces:ignored");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      cSVFormat2.RFC4180.println(stringBuffer0);
      cSVFormat1.getCommentMarker();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(resultSet0);
      cSVFormat3.RFC4180.withQuote('#');
      cSVFormat2.INFORMIX_UNLOAD_CSV.withRecordSeparator("}4,%#Gmg@2hH-qAISb");
      cSVFormat1.getIgnoreHeaderCase();
      cSVFormat1.getHeader();
      CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator(']');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1677);
      cSVFormat4.parse(pipedReader0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat_Predefined0.getFormat();
      cSVFormat4.withQuote((Character) null);
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("Parameter '");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) " [";
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) " [";
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) "Parameter '";
      objectArray0[5] = (Object) "!QZae}3>>zP>sK";
      objectArray0[6] = (Object) "!QZae}3>>zP>sK";
      cSVFormat1.format(objectArray0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) "\" [\",org.apache.commons.csv.CSVFormat@0000000002,\" [\",org.apache.commons.csv.CSVFormat@0000000002,Parameter ',\"!QZae}3>>zP>sK\",\"!QZae}3>>zP>sK\"";
      objectArray1[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[3] = (Object) "Parameter '";
      objectArray1[4] = (Object) cSVFormat1;
      objectArray1[5] = (Object) "Parameter '";
      objectArray1[6] = (Object) "Parameter '";
      objectArray1[7] = (Object) cSVFormat2;
      cSVFormat2.format(objectArray1);
      cSVFormat2.withNullString("org.apache.commons.csv.Constants");
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat3.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.INFORMIX_UNLOAD_CSV.hashCode();
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\r\n");
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withQuote('C');
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat1.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      cSVFormat3.DEFAULT.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat3.DEFAULT.withAutoFlush(false);
      cSVFormat0.getSkipHeaderRecord();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\r\n";
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      objectArray0[2] = (Object) "\r\n";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat5;
      objectArray0[7] = (Object) "\r\n";
      cSVFormat4.INFORMIX_UNLOAD.format(objectArray0);
      Character character0 = cSVFormat0.getQuoteCharacter();
      cSVFormat1.withQuote(character0);
      cSVFormat0.printer();
      cSVFormat5.toString();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.getNullString();
      cSVFormat5.withHeader((String[]) null);
      CSVFormat cSVFormat6 = cSVFormat4.withCommentMarker('C');
      cSVFormat2.getHeader();
      cSVFormat6.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.getRecordSeparator();
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) "\n";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mww<";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.hashCode();
      cSVFormat0.withRecordSeparator("!!");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator('e');
      cSVFormat2.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.format(stringArray0);
      cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat6 = cSVFormat5.withTrailingDelimiter(true);
      cSVFormat6.withCommentMarker('E');
      cSVFormat4.getIgnoreEmptyLines();
      cSVFormat5.withDelimiter('e');
      cSVFormat5.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      cSVFormat2.toString();
      MockFile mockFile0 = new MockFile("\n", "#5u;8P]u");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      cSVFormat1.print((Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", (Appendable) mockPrintWriter0, false);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mww<";
      stringArray0[1] = "2yV";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('e');
      CSVFormat cSVFormat4 = CSVFormat.newFormat('e');
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat6 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.format(stringArray0);
      cSVFormat4.withSkipHeaderRecord();
      cSVFormat4.withTrailingDelimiter(true);
      cSVFormat6.withCommentMarker('_');
      CSVFormat cSVFormat7 = CSVFormat.DEFAULT;
      cSVFormat7.getIgnoreEmptyLines();
      cSVFormat4.withDelimiter('Y');
      cSVFormat7.withNullString("2yV");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("RFC4180");
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.isCommentMarkerSet();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(stringArray0);
      cSVFormat2.hashCode();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("$VALUES");
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat6 = cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat1.withRecordSeparator('e');
      CSVFormat cSVFormat7 = cSVFormat5.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat8 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.format(stringArray0);
      cSVFormat8.withSkipHeaderRecord();
      cSVFormat6.withTrailingDelimiter(false);
      CSVFormat cSVFormat9 = cSVFormat0.withCommentMarker('e');
      cSVFormat4.getIgnoreEmptyLines();
      cSVFormat9.withDelimiter('9');
      cSVFormat7.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mww<";
      stringArray0[1] = "2yV";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withAllowMissingColumnNames(false);
      cSVFormat3.withEscape('w');
      cSVFormat2.equals((Object) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "2yV");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 2yV
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_CSV.withTrailingDelimiter();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      Object object0 = new Object();
      cSVFormat1.MYSQL.withIgnoreEmptyLines();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      cSVFormat2.DEFAULT.withIgnoreSurroundingSpaces();
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat1;
      cSVFormat2.RFC4180.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat3.EXCEL.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat6 = cSVFormat4.withHeader(class0);
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase(true);
      cSVFormat7.printer();
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat5.withIgnoreEmptyLines(true);
      cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat2.hashCode();
      cSVFormat4.isEscapeCharacterSet();
      cSVFormat1.isNullStringSet();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.getSkipHeaderRecord();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      StringWriter stringWriter0 = new StringWriter(1677);
      stringWriter0.append('y');
      stringWriter0.append((CharSequence) "");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      cSVFormat0.println(stringBuffer0);
      cSVFormat0.getCommentMarker();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat1.withQuote('y');
      cSVFormat1.withRecordSeparator("");
      cSVFormat3.getIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat4.getHeader();
      cSVFormat1.withRecordSeparator('A');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat5 = cSVFormat_Predefined0.getFormat();
      cSVFormat5.getNullString();
      cSVFormat0.withHeader((String[]) null);
      cSVFormat0.withCommentMarker('#');
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("RFC4180");
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "RFC4180";
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) " SurroundingSpaces:ignored";
      objectArray0[3] = (Object) "RFC4180";
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat1.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.INFORMIX_UNLOAD_CSV.hashCode();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat0.TDF.withCommentMarker('C');
      cSVFormat1.getRecordSeparator();
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("\r\n");
      cSVFormat3.INFORMIX_UNLOAD_CSV.withQuote('C');
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(class0);
      cSVFormat3.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat4.DEFAULT.withFirstRecordAsHeader();
      boolean boolean0 = true;
      CSVFormat cSVFormat6 = cSVFormat4.DEFAULT.withAutoFlush(true);
      cSVFormat1.getSkipHeaderRecord();
      cSVFormat6.RFC4180.withTrailingDelimiter();
      Character character0 = cSVFormat1.getQuoteCharacter();
      cSVFormat3.withQuote(character0);
      cSVFormat2.printer();
      cSVFormat6.toString();
      PipedReader pipedReader0 = new PipedReader();
      try { 
        cSVFormat5.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      StringReader stringReader0 = new StringReader("EOF");
      cSVFormat2.parse(stringReader0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("RFC4180");
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat0.withNullString(" SurroundingSpaces:ignored");
      StringWriter stringWriter0 = new StringWriter(1677);
      StringWriter stringWriter1 = stringWriter0.append(']');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      cSVFormat2.RFC4180.println(stringBuffer0);
      cSVFormat1.getCommentMarker();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(resultSet0);
      cSVFormat3.RFC4180.withQuote('#');
      CSVFormat cSVFormat4 = cSVFormat2.INFORMIX_UNLOAD_CSV.withRecordSeparator("}4,%#Gmg@2hH-qAISb");
      cSVFormat1.getHeader();
      cSVFormat2.withRecordSeparator(']');
      cSVFormat2.getNullString();
      cSVFormat2.withHeader((String[]) null);
      cSVFormat0.withCommentMarker('4');
      cSVFormat1.getTrim();
      cSVFormat4.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      cSVFormat3.TDF.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.DEFAULT.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat4.POSTGRESQL_TEXT.withHeader(class1);
      cSVFormat2.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(false);
      cSVFormat3.getEscapeCharacter();
      cSVFormat2.printer();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(stringArray0);
      cSVFormat4.POSTGRESQL_TEXT.withIgnoreEmptyLines();
      cSVFormat3.hashCode();
      cSVFormat6.MYSQL.withIgnoreHeaderCase();
      cSVFormat2.RFC4180.withIgnoreHeaderCase(false);
      cSVFormat6.EXCEL.withDelimiter('p');
      cSVFormat4.withHeader(stringArray0);
      CSVFormat cSVFormat7 = cSVFormat4.withDelimiter('=');
      cSVFormat0.getSkipHeaderRecord();
      cSVFormat7.printer();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("x4mBA:wEBv&yI7mD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.x4mBA:wEBv&yI7mD
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.INFORMIX_UNLOAD.withCommentMarker('*');
      CSVFormat.newFormat('*');
      cSVFormat0.getQuoteCharacter();
      cSVFormat0.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = 'c';
      charArray0[2] = '`';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat0.withIgnoreEmptyLines(true);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[5];
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lJBWjizC";
      stringArray0[1] = "o_${)U";
      cSVFormat0.EXCEL.withFirstRecordAsHeader();
      stringArray0[2] = "!!";
      stringArray0[3] = "$VALUES";
      stringArray0[4] = ") invalid parse sequence";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.RFC4180.hashCode();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("o_${)U");
      CSVFormat cSVFormat3 = cSVFormat2.POSTGRESQL_CSV.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.EXCEL.withSkipHeaderRecord(false);
      CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator('e');
      CSVFormat cSVFormat6 = cSVFormat2.DEFAULT.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat6.RFC4180.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.format(stringArray0);
      CSVFormat cSVFormat7 = cSVFormat5.withSkipHeaderRecord();
      cSVFormat0.withTrailingDelimiter(true);
      cSVFormat0.withCommentMarker('e');
      cSVFormat7.getIgnoreEmptyLines();
      cSVFormat2.withDelimiter('e');
      cSVFormat4.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.getTrim();
      char char0 = '%';
      CSVFormat cSVFormat3 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreEmptyLines(false);
      cSVFormat3.DEFAULT.withTrailingDelimiter();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1448));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Object[] objectArray0 = new Object[2];
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat0.POSTGRESQL_CSV.withTrailingDelimiter();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      Object object0 = new Object();
      cSVFormat1.MYSQL.withIgnoreEmptyLines();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      cSVFormat2.DEFAULT.withIgnoreSurroundingSpaces();
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat1;
      cSVFormat2.RFC4180.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat3.EXCEL.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat6 = cSVFormat4.withHeader(class0);
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase(true);
      cSVFormat7.printer();
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat5.withIgnoreEmptyLines(true);
      cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat4.withEscape('w');
      cSVFormat2.equals(cSVFormat3);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat@0000000006,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000002,java.lang.Object@0000000007,java.lang.Object@0000000008,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000001", "org.apache.commons.csv.CSVFormat@0000000006,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000002,java.lang.Object@0000000007,java.lang.Object@0000000008,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000001");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.csv.CSVFormat@0000000006,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000002,java.lang.Object@0000000007,java.lang.Object@0000000008,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000002,org.apache.commons.csv.CSVFormat@0000000001
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('M');
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVFormat$Predefined");
      Character character0 = Character.valueOf('`');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      cSVFormat2.INFORMIX_UNLOAD_CSV.printer();
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
      cSVFormat5.getSkipHeaderRecord();
      cSVFormat0.RFC4180.withCommentMarker(character0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat3.isNullStringSet();
      cSVFormat5.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(class0);
      cSVFormat1.MYSQL.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('A');
      cSVFormat2.RFC4180.withEscape('A');
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat2.getDelimiter();
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 13, 30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MINIMAL";
      stringArray0[1] = "d#7TMYy<x_pScSKS";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines();
      cSVFormat5.withRecordSeparator('2');
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
          CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
          RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
          CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
          boolean boolean0 = false;
          CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
          CSVFormat cSVFormat4 = cSVFormat1.INFORMIX_UNLOAD.withTrailingDelimiter();
          cSVFormat4.EXCEL.withTrailingDelimiter();
          String string0 = "f4:6";
          String string1 = "N[>9A()~";
          File file0 = MockFile.createTempFile("f4:6", "N[>9A()~", (File) null);
          MockFile mockFile0 = new MockFile(file0, "N[>9A()~");
          Path path0 = mockFile0.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat3.RFC4180.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/f4:60N[>9A()~/N[>9A()~\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('T');
      cSVFormat3.withRecordSeparator('T');
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.getSkipHeaderRecord();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat2.isCommentMarkerSet();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('M');
      cSVFormat3.DEFAULT.withEscape('M');
      cSVFormat2.EXCEL.withAllowMissingColumnNames();
      String string0 = "/~jcY+0O";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/~jcY+0O";
      stringArray0[1] = "/~jcY+0O";
      stringArray0[2] = "/~jcY+0O";
      stringArray0[3] = "/~jcY+0O";
      stringArray0[4] = "/~jcY+0O";
      stringArray0[5] = "/~jcY+0O";
      cSVFormat0.DEFAULT.withSkipHeaderRecord();
      stringArray0[6] = "/~jcY+0O";
      // Undeclared exception!
      try { 
        cSVFormat2.INFORMIX_UNLOAD.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '/~jcY+0O' in [/~jcY+0O, /~jcY+0O, /~jcY+0O, /~jcY+0O, /~jcY+0O, /~jcY+0O, /~jcY+0O]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        cSVFormat1.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.getSkipHeaderRecord();
      cSVFormat1.hashCode();
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator((String) null);
      String[] stringArray0 = new String[0];
      cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat0.withIgnoreEmptyLines();
      cSVFormat2.format(stringArray0);
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.withIgnoreEmptyLines();
      cSVFormat5.withNullString("");
      cSVFormat3.toString();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("RFC4180");
      cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" SurroundingSpaces:ignored");
      StringWriter stringWriter0 = new StringWriter(1677);
      StringWriter stringWriter1 = stringWriter0.append(']');
      stringWriter1.getBuffer();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat0.withAutoFlush(false);
      cSVFormat0.getSkipHeaderRecord();
      cSVFormat2.getQuoteCharacter();
      cSVFormat1.printer();
      cSVFormat2.toString();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat3.parse(pipedReader0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      cSVFormat_Predefined0.getFormat();
      cSVFormat2.withQuote((Character) null);
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.INFORMIX_UNLOAD_CSV.hashCode();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat0.TDF.withCommentMarker('C');
      cSVFormat1.getRecordSeparator();
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("\r\n");
      cSVFormat3.INFORMIX_UNLOAD_CSV.withQuote('C');
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(class0);
      cSVFormat3.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat4.DEFAULT.withFirstRecordAsHeader();
      CSVFormat cSVFormat6 = cSVFormat4.DEFAULT.withAutoFlush(false);
      cSVFormat1.getSkipHeaderRecord();
      Character character0 = cSVFormat1.getQuoteCharacter();
      cSVFormat3.withQuote(character0);
      cSVFormat2.printer();
      cSVFormat6.toString();
      PipedReader pipedReader0 = new PipedReader();
      try { 
        cSVFormat5.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('?');
      Character character0 = Character.valueOf('?');
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('?')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String[] stringArray0 = null;
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat2.hashCode();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat3.withIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        cSVFormat3.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("QZ.fVtb58@ 9t@]jl[");
      Character character0 = Character.valueOf('G');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat3.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withAutoFlush(true);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = CSVFormat.newFormat('G');
      cSVFormat2.withTrim();
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat4.RFC4180.withHeader((String[]) null);
      cSVFormat4.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat0.MYSQL.withQuote('G');
      CSVFormat cSVFormat6 = cSVFormat5.RFC4180.withIgnoreEmptyLines(true);
      StringReader stringReader0 = new StringReader("'V");
      cSVFormat6.DEFAULT.parse(stringReader0);
      cSVFormat4.getTrim();
      cSVFormat4.getTrailingDelimiter();
      cSVFormat1.printer();
      cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat3.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "k6Y";
      stringArray0[1] = " -/`J)zg.;cX\"41H_.";
      Byte byte0 = new Byte((byte) (-19));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("k6Y");
      Locale locale0 = Locale.GERMAN;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "n1RP\"[d", objectArray0);
      cSVFormat1.EXCEL.print((Object) byte0, (Appendable) printWriter0, true);
      stringArray0[2] = "org.apache.commons.csv.CSVFormat$Predefined";
      stringArray0[3] = "1<>s#G]w";
      String string0 = "The comment start character and the delimiter cannot be the same ('";
      stringArray0[4] = "The comment start character and the delimiter cannot be the same ('";
      stringArray0[5] = "r=`Db,zr49O(x_cb";
      cSVFormat1.withHeader(stringArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      boolean boolean0 = true;
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withIgnoreSurroundingSpaces(true);
      cSVFormat2.MYSQL.withIgnoreHeaderCase();
      cSVFormat1.withSkipHeaderRecord();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("+)f)=Ov9j\"@\"hJ4zG5b", "+)f)=Ov9j\"@\"hJ4zG5b");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // +)f)=Ov9j\"@\"hJ4zG5b
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(true);
      cSVFormat5.isQuoteCharacterSet();
      Character character0 = new Character('7');
      cSVFormat3.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lJBWjizC";
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(stringArray0);
      Byte byte0 = new Byte((byte) (-19));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lJBWjizC");
      Locale locale0 = Locale.GERMAN;
      mockPrintWriter0.format(locale0, "n1RP\"[d", (Object[]) stringArray0);
      boolean boolean0 = true;
      cSVFormat0.print((Object) byte0, (Appendable) mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [lJBWjizC, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[1];
      cSVFormat0.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "KDU{+q=_oeu<%QO_$";
      stringArray0[3] = "";
      stringArray0[4] = "c";
      stringArray0[5] = ">r8;nW";
      stringArray0[6] = ";nvYUypEhqCq\u0002WQ*";
      cSVFormat0.INFORMIX_UNLOAD_CSV.withQuote('a');
      stringArray0[7] = "RFC4180";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, , KDU{+q=_oeu<%QO_$, , c, >r8;nW, ;nvYUypEhqCq\u0002WQ*, RFC4180, ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.INFORMIX_UNLOAD.printer();
      CSVFormat cSVFormat2 = cSVFormat0.TDF.withDelimiter('2');
      cSVFormat2.POSTGRESQL_CSV.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('w');
      cSVFormat2.POSTGRESQL_TEXT.withIgnoreHeaderCase(false);
      cSVFormat3.getSkipHeaderRecord();
      String string0 = "H8*8]{#K-z .SEX3";
      cSVFormat1.EXCEL.withDelimiter('w');
      cSVFormat1.withRecordSeparator("H8*8]{#K-z .SEX3");
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-1199));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1199
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String string0 = "|~LS8K@rg";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|~LS8K@rg";
      stringArray0[1] = "|~LS8K@rg";
      // Undeclared exception!
      try { 
        cSVFormat0.RFC4180.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '|~LS8K@rg' in [|~LS8K@rg, |~LS8K@rg]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('G');
      cSVFormat0.DEFAULT.withRecordSeparator("74GaZ&)<0)");
      File file0 = MockFile.createTempFile("74GaZ&)<0)", "74GaZ&)<0)");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      cSVFormat0.INFORMIX_UNLOAD.print((Appendable) mockFileWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withRecordSeparator('N');
      Character character0 = new Character('G');
      cSVFormat2.INFORMIX_UNLOAD.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat1.INFORMIX_UNLOAD.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreHeaderCase(false);
      Character character1 = new Character('N');
      cSVFormat0.INFORMIX_UNLOAD.withEscape(character1);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(resultSet0);
      cSVFormat5.withIgnoreEmptyLines();
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord();
      cSVFormat6.getQuoteMode();
      cSVFormat3.getQuoteCharacter();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "74GaZ&)<0)";
      stringArray0[1] = "74GaZ&)<0)";
      stringArray0[2] = "74GaZ&)<0)";
      stringArray0[3] = "74GaZ&)<0)";
      stringArray0[4] = "74GaZ&)<0)";
      stringArray0[5] = "74GaZ&)<0)";
      stringArray0[6] = "74GaZ&)<0)";
      stringArray0[7] = "74GaZ&)<0)";
      stringArray0[8] = "74GaZ&)<0)";
      // Undeclared exception!
      try { 
        cSVFormat3.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '74GaZ&)<0)' in [74GaZ&)<0), 74GaZ&)<0), 74GaZ&)<0), 74GaZ&)<0), 74GaZ&)<0), 74GaZ&)<0), 74GaZ&)<0), 74GaZ&)<0), 74GaZ&)<0)]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      boolean boolean0 = true;
      File file0 = null;
      boolean boolean1 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat1.EXCEL.withRecordSeparator('H');
      Charset.defaultCharset();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.csv.CSVFormat$Predefined", "org.apache.commons.csv.CSVFormat$Predefined");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.csv.CSVFormat$Predefined
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Character character0 = Character.valueOf('[');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat2.withQuote('S');
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withRecordSeparator((String) null);
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withQuote('z');
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat0.print((Path) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
          Character character0 = Character.valueOf('d');
          MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVFormat$1", "format");
          MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
          cSVFormat0.RFC4180.print((Object) character0, (Appendable) mockPrintStream0, true);
          CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
          cSVFormat1.MYSQL.withIgnoreSurroundingSpaces();
          CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(true);
          CSVFormat cSVFormat3 = cSVFormat0.withQuote('O');
          CSVFormat cSVFormat4 = cSVFormat3.POSTGRESQL_TEXT.withFirstRecordAsHeader();
          cSVFormat4.INFORMIX_UNLOAD_CSV.withTrim();
          boolean boolean0 = false;
          cSVFormat4.RFC4180.withIgnoreSurroundingSpaces(false);
          PipedWriter pipedWriter0 = new PipedWriter();
          PipedReader pipedReader0 = new PipedReader(pipedWriter0, 44);
          cSVFormat3.DEFAULT.parse(pipedReader0);
          CSVFormat cSVFormat5 = cSVFormat4.DEFAULT.withAllowMissingColumnNames();
          QuoteMode quoteMode0 = QuoteMode.ALL;
          cSVFormat5.POSTGRESQL_TEXT.withQuoteMode(quoteMode0);
          CSVFormat cSVFormat6 = cSVFormat2.withIgnoreSurroundingSpaces();
          cSVFormat6.POSTGRESQL_CSV.withIgnoreEmptyLines();
          cSVFormat6.withSkipHeaderRecord(false);
          Path path0 = mockFile0.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat2.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/experiment/org.apache.commons.csv.CSVFormat$1/format\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) " [";
      objectArray0[2] = (Object) " [";
      objectArray0[4] = (Object) "Parameter '";
      objectArray0[3] = (Object) "!QZae}3>>zP>sK";
      objectArray0[6] = (Object) " [";
      cSVFormat1.format(objectArray0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) ",,\" [\",\"!QZae}3>>zP>sK\",Parameter ',,\" [\"";
      cSVFormat1.format(objectArray1);
      cSVFormat1.withNullString(",,\" [\",\"!QZae}3>>zP>sK\",Parameter ',,\" [\"");
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat3.withRecordSeparator("H~");
      Character character0 = Character.valueOf('Z');
      CSVFormat cSVFormat4 = cSVFormat2.withQuote(character0);
      Object[] objectArray0 = new Object[4];
      cSVFormat1.INFORMIX_UNLOAD_CSV.toString();
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      cSVFormat4.print((Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false", (Appendable) stringWriter0, true);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((String[]) null);
      cSVFormat1.hashCode();
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ") invalid parse sequence";
      objectArray0[1] = (Object) cSVFormat4;
      cSVFormat2.format(objectArray0);
      cSVFormat0.getQuoteCharacter();
      Character character0 = new Character('Z');
      CSVFormat cSVFormat5 = cSVFormat1.withQuote((Character) null);
      cSVFormat0.printer();
      cSVFormat1.toString();
      CSVFormat cSVFormat6 = cSVFormat3.withCommentMarker(character0);
      cSVFormat6.getNullString();
      CSVFormat cSVFormat7 = cSVFormat5.withHeader((String[]) null);
      cSVFormat1.withCommentMarker('B');
      cSVFormat7.getHeader();
      cSVFormat0.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat3 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      cSVFormat2.withHeader((Class<? extends Enum<?>>) null);
      Byte byte0 = new Byte((byte) (-17));
      CSVFormat cSVFormat4 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat4.withHeaderComments(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
      Byte byte1 = new Byte((byte)1);
      cSVFormat5.equals(byte1);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.printRecord(stringWriter0, objectArray0);
      cSVFormat1.withAllowMissingColumnNames(true);
      Double double0 = new Double(0.0);
      cSVFormat0.print((Object) double0, (Appendable) stringWriter0, true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat2.equals(double0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("path", "d^DV<<?P");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // d^DV<<?P
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.printer();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat0.getRecordSeparator();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("!QZae}3>>zP>sK");
      CSVFormat.newFormat('_');
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('_');
      CSVFormat cSVFormat4 = CSVFormat.TDF;
      CSVFormat cSVFormat5 = cSVFormat1.withFirstRecordAsHeader();
      Object[] objectArray1 = new Object[8];
      objectArray1[1] = (Object) cSVFormat3;
      cSVFormat3.hashCode();
      cSVFormat2.printer();
      cSVFormat5.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mww<";
      stringArray0[1] = "2yV";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.DEFAULT.withAllowMissingColumnNames(false);
      cSVFormat2.INFORMIX_UNLOAD_CSV.hashCode();
      cSVFormat2.isEscapeCharacterSet();
      cSVFormat1.isNullStringSet();
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.printer();
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      cSVFormat3.TDF.withIgnoreEmptyLines();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat4 = cSVFormat3.DEFAULT.withHeader(class0);
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat4.POSTGRESQL_TEXT.withHeader(class1);
      cSVFormat2.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(false);
      cSVFormat3.getEscapeCharacter();
      cSVFormat2.printer();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(stringArray0);
      cSVFormat6.MYSQL.hashCode();
      cSVFormat6.MYSQL.withIgnoreHeaderCase();
      cSVFormat2.RFC4180.withIgnoreHeaderCase(false);
      cSVFormat6.EXCEL.withDelimiter('p');
      cSVFormat4.withHeader(stringArray0);
      CSVFormat cSVFormat7 = cSVFormat4.withDelimiter('=');
      cSVFormat0.getSkipHeaderRecord();
      cSVFormat7.printer();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("org.apache.commons.csv.CSVParser");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      cSVFormat3.withCommentMarker('p');
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.println(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withRecordSeparator('c');
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('W');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('W', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('r');
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('W', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('W', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("r", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('W', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('W', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("r", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals("r", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals('W', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat3);
      
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('W', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('W', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("r", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals("r", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals('W', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getNullString());
      assertEquals('W', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals("r", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getAutoFlush());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertNotNull(cSVFormat4);
      
      CSVFormat cSVFormat5 = cSVFormat4.withNullString((String) null);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('W', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('W', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("r", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals("r", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals('W', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getNullString());
      assertEquals('W', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals("r", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getAutoFlush());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAutoFlush());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertEquals('W', (char)cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getTrim());
      assertEquals("r", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getQuoteMode());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat5);
      
      boolean boolean0 = cSVFormat5.isNullStringSet();
      assertFalse(boolean0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('W', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('W', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("r", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals("r", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals('W', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getNullString());
      assertEquals('W', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals("r", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getAutoFlush());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAutoFlush());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertEquals('W', (char)cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getTrim());
      assertEquals("r", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getQuoteMode());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertTrue(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      
      boolean boolean1 = cSVFormat5.getIgnoreHeaderCase();
      assertFalse(boolean1);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('W', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('W', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("r", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals("r", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals('W', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getNullString());
      assertEquals('W', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals("r", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getAutoFlush());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAutoFlush());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertEquals('W', (char)cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getTrim());
      assertEquals("r", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getQuoteMode());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertTrue(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = cSVFormat2.getTrailingDelimiter();
      assertFalse(boolean2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('W', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('W', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("r", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreHeaderCase(false);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat6);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat6);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('W', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('W', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertEquals("r", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isNullStringSet());
      assertNull(cSVFormat2.getNullString());
      assertEquals("r", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertEquals('W', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getNullString());
      assertEquals('W', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getQuoteMode());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertEquals("r", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getAutoFlush());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAutoFlush());
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertEquals('W', (char)cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getTrim());
      assertEquals("r", cSVFormat5.getRecordSeparator());
      assertNull(cSVFormat5.getQuoteMode());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertNull(cSVFormat6.getCommentMarker());
      assertNull(cSVFormat6.getNullString());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getAutoFlush());
      assertEquals("r", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.isNullStringSet());
      assertTrue(cSVFormat6.isEscapeCharacterSet());
      assertNull(cSVFormat6.getQuoteMode());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertEquals('W', (char)cSVFormat6.getEscapeCharacter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertTrue(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertTrue(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertTrue(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat6);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("hawOz");
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals("hawOz", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("BCCX=k=J)xO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.BCCX=k=J)xO
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = "oZ)~xnat%wdAYU=f";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("oZ)~xnat%wdAYU=f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.oZ)~xnat%wdAYU=f
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('M');
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals('M', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrim());
      assertEquals("", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAutoFlush());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAutoFlush());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('`');
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAutoFlush());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getAutoFlush());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals('`', (char)cSVFormat3.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat3);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAutoFlush());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getAutoFlush());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals('`', (char)cSVFormat3.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isNullStringSet());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getAutoFlush());
      assertTrue(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertEquals('`', (char)cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertNotNull(cSVFormat4);
      
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('u');
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat5);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAutoFlush());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertNull(cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertTrue(cSVFormat3.getTrim());
      assertNull(cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getAutoFlush());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat3.getNullString());
      assertEquals('`', (char)cSVFormat3.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isNullStringSet());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals("\r\n", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.getTrim());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getAutoFlush());
      assertTrue(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertEquals('`', (char)cSVFormat4.getEscapeCharacter());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getAutoFlush());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertTrue(cSVFormat5.getTrim());
      assertNull(cSVFormat5.getQuoteMode());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertEquals('u', (char)cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.isNullStringSet());
      assertNull(cSVFormat5.getNullString());
      assertEquals('`', (char)cSVFormat5.getEscapeCharacter());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat5);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNotNull(cSVFormat0);
      
      Object[] objectArray0 = new Object[2];
      String string0 = cSVFormat0.format(objectArray0);
      assertEquals("\\N\t\\N", string0);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNotNull(cSVFormat0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mww<";
      stringArray0[1] = "2yV";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertEquals(2, stringArray0.length);
      
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat2.isNullStringSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.getAutoFlush());
      assertEquals("\\N", cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertEquals(2, stringArray0.length);
      
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((ResultSet) null);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat3);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = cSVFormat3.getTrim();
      assertFalse(boolean0);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isNullStringSet());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertEquals("\\N", cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat3.getQuoteMode());
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNotNull(cSVFormat0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNotNull(cSVFormat0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      
      boolean boolean0 = cSVFormat1.getTrim();
      assertFalse(boolean0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertNotNull(cSVFormat0);
      
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(QuoteMode.MINIMAL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLText;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNotNull(cSVFormat0);
      
      char char0 = cSVFormat0.getDelimiter();
      assertEquals('\t', char0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNotNull(cSVFormat0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "$VALUES";
      stringArray0[1] = "')";
      stringArray0[2] = "\r\n";
      stringArray0[3] = "";
      stringArray0[4] = "_Fly?Q|,/!%";
      stringArray0[5] = "d8BxT[eN:Is0_";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertEquals(6, stringArray0.length);
      
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertEquals(6, stringArray0.length);
      
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertNull(cSVFormat1.getNullString());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertNull(cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('|', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getNullString());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAutoFlush());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertTrue(cSVFormat3.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat3);
      assertEquals(6, stringArray0.length);
      
      char char0 = 'w';
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNotNull(cSVFormat0);
      
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNotNull(cSVFormat0);
      
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withTrim(true);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      rowSetMetaDataImpl0.setColumnCount(92);
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNotNull(cSVFormat0);
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      assertNotNull(rowSetMetaDataImpl0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAutoFlush());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNotNull(cSVFormat0);
      
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals('|', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAutoFlush());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNotNull(cSVFormat0);
      
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lJBWjizC";
      stringArray0[1] = "o_${)U";
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withFirstRecordAsHeader();
      stringArray0[2] = "!!";
      stringArray0[3] = "$VALUES";
      stringArray0[4] = ") invalid parse sequence";
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      cSVFormat2.RFC4180.hashCode();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("o_${)U");
      CSVFormat cSVFormat4 = cSVFormat3.POSTGRESQL_CSV.withIgnoreEmptyLines();
      cSVFormat1.format(stringArray0);
      Character character0 = cSVFormat2.getQuoteCharacter();
      Character character1 = new Character('B');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character1);
      cSVFormat2.toString();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat5.getNullString();
      cSVFormat3.withHeader((String[]) null);
      cSVFormat5.withCommentMarker('~');
      cSVFormat4.getHeader();
      cSVFormat2.withAllowMissingColumnNames();
      // Undeclared exception!
      try { 
        cSVFormat4.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('l');
      Character character0 = new Character('l');
      cSVFormat0.MYSQL.withEscape(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      boolean boolean0 = true;
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withDelimiter('Q');
      cSVFormat2.TDF.withTrim();
      Object[] objectArray0 = new Object[5];
      cSVFormat3.RFC4180.withIgnoreSurroundingSpaces();
      objectArray0[0] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat3;
      cSVFormat1.TDF.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat4.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);
      cSVFormat4.getIgnoreEmptyLines();
      Character character1 = new Character('l');
      // Undeclared exception!
      try { 
        cSVFormat2.withCommentMarker(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('l')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      boolean boolean0 = true;
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines(true);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase(true);
      cSVFormat4.printer();
      cSVFormat0.getIgnoreEmptyLines();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat6 = cSVFormat5.withQuoteMode(quoteMode0);
      cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreEmptyLines(false);
      // Undeclared exception!
      try { 
        cSVFormat7.withEscape(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("RFC4180");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(" SurroundingSpaces:ignored");
      StringWriter stringWriter0 = new StringWriter(1677);
      StringWriter stringWriter1 = new StringWriter(1677);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      cSVFormat1.RFC4180.println(stringBuffer0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.RFC4180.withQuote('#');
      cSVFormat1.INFORMIX_UNLOAD_CSV.withRecordSeparator("RFC4180");
      cSVFormat1.withRecordSeparator(']');
      cSVFormat1.getNullString();
      // Undeclared exception!
      try { 
        cSVFormat3.withDelimiter('#');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('#')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.MYSQL;
          CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
          RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
          cSVFormat1.POSTGRESQL_CSV.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
          cSVFormat1.isCommentMarkerSet();
          String string0 = "pxbKdhZPU";
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileWriter mockFileWriter0 = null;
          try {
            mockFileWriter0 = new MockFileWriter(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // java.io.FileWriter.<init>(FileWriter.java:116)
             // org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
             // sun.reflect.GeneratedConstructorAccessor69.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Character character0 = null;
      char char0 = 'W';
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat1.TDF.withDelimiter('W');
      cSVFormat0.INFORMIX_UNLOAD.withCommentMarker('W');
      cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker((Character) null);
      char char1 = 'T';
      cSVFormat0.POSTGRESQL_CSV.withEscape((Character) null);
      cSVFormat0.MYSQL.withCommentMarker('T');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      try { 
        rowSetMetaDataImpl0.getColumnClassName(10);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Invalid column index :10
         //
         verifyException("javax.sql.rowset.RowSetMetaDataImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('u');
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('u', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('*');
      assertEquals('*', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAutoFlush());
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withCommentMarker('P');
      String string0 = "8,Bu[4";
      String string1 = ".1qj'gf1N";
      String string2 = "`F|M@}e";
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('c');
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertEquals('c', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
  }
}
