/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 06:26:24 GMT 2020
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat.valueOf("PostgreSQLText");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      Class<Token.Type> class0 = Token.Type.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "AofK>DId;jC0Bnz [!");
      cSVFormat2.withHeader(class0);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        cSVFormat2.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      CSVFormat cSVFormat0 = CSVFormat.newFormat('n');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      Character character0 = Character.valueOf('0');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      CSVFormat.newFormat('n');
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(true);
      cSVFormat5.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat1.withAllowMissingColumnNames(true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) " .kipHeder6ecxrb:";
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat4.withHeader(class0);
      cSVFormat3.withTrailingDelimiter();
      cSVFormat2.getAutoFlush();
      // Undeclared exception!
      try { 
        cSVFormat1.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker('k');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      Object[] objectArray0 = new Object[9];
      cSVFormat0.withSkipHeaderRecord(false);
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) rowSetMetaDataImpl0;
      Object object2 = new Object();
      objectArray0[8] = object2;
      cSVFormat1.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.getCommentMarker();
      cSVFormat1.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker('k');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(false);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat5.withTrim();
      CSVFormat cSVFormat7 = cSVFormat6.withSkipHeaderRecord(false);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet1).getMetaData();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) resultSet0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVFormat7.INFORMIX_UNLOAD.format(objectArray0);
      cSVFormat4.withHeader(resultSet1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat8 = CSVFormat.TDF;
      cSVFormat8.equals(cSVFormat3);
      cSVFormat8.withSkipHeaderRecord();
      cSVFormat2.withEscape('0');
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('.');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withRecordSeparator("H");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.DEFAULT.println(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('A');
      cSVFormat1.INFORMIX_UNLOAD_CSV.withRecordSeparator('A');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(':');
      cSVFormat0.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("^P#;5Q}.E&4n$9iN~f");
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(true);
      cSVFormat5.withRecordSeparator("^P#;5Q}.E&4n$9iN~f");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("]:+6SDt|X,!Jc:gJsX");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      Character character0 = new Character('`');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      Character character1 = Character.valueOf('$');
      cSVFormat4.INFORMIX_UNLOAD_CSV.withCommentMarker(character1);
      Character character2 = Character.valueOf('<');
      cSVFormat4.DEFAULT.withEscape(character2);
      cSVFormat4.withCommentMarker('b');
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer.allocate(12);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader(12);
      cSVFormat0.parse(pipedReader0);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      cSVFormat2.POSTGRESQL_TEXT.hashCode();
      cSVFormat2.withCommentMarker('~');
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character('c');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(true);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("1:Z2$4?\"Z]Fs");
      CSVFormat cSVFormat6 = cSVFormat5.withRecordSeparator("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[6] = object0;
      cSVFormat6.format(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat2.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.withEscape('I');
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "The header contains a duplicate entry: '";
      stringArray0[1] = "O$d`Wba&I.Mrj";
      stringArray0[2] = "";
      stringArray0[3] = "eq:Sk}/&FGo@Rv`.Y8C";
      stringArray0[4] = "t6_}a#P:";
      stringArray0[5] = "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      cSVFormat3.withQuote('N');
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T\">[R");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat2.TDF.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('4');
      cSVFormat3.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat2.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("]:+6SDt|X,!Jc:gJsX");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      Character character0 = new Character('E');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('E');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat2;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) cSVFormat2;
      cSVFormat0.INFORMIX_UNLOAD.format(objectArray0);
      cSVFormat3.INFORMIX_UNLOAD.withSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.withHeaderComments((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      Object[] objectArray0 = new Object[0];
      cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('c');
      Character character0 = new Character('Q');
      cSVFormat1.INFORMIX_UNLOAD_CSV.withQuote(character0);
      cSVFormat1.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('G');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Unexpected Quote value: ");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      // Undeclared exception!
      try { 
        cSVFormat3.withQuote('G');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('G')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      cSVFormat2.withQuote('c');
      cSVFormat1.getTrim();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      Short short0 = new Short((short)32);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) " SkipHeaderRecord:";
      Object object1 = new Object();
      PipedReader pipedReader0 = new PipedReader();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat1.POSTGRESQL_TEXT.withQuoteMode(quoteMode0);
      cSVFormat1.parse(pipedReader0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('l');
      cSVFormat2.format(objectArray0);
      cSVFormat0.format(objectArray0);
      cSVFormat1.withDelimiter('.');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('^');
      cSVFormat0.INFORMIX_UNLOAD.withQuote(character0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(line ");
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CharBuffer charBuffer0 = CharBuffer.allocate(17);
      CSVFormat cSVFormat2 = cSVFormat0.withTrim(true);
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat2.POSTGRESQL_TEXT.parse(pipedReader0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\r\n";
      objectArray0[1] = (Object) charBuffer0;
      cSVFormat2.format(objectArray0);
      cSVFormat1.format(objectArray0);
      cSVFormat1.withDelimiter('U');
      cSVFormat2.println(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(line ");
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CharBuffer charBuffer0 = CharBuffer.allocate(17);
      CSVFormat cSVFormat2 = cSVFormat0.withTrim(true);
      Object object0 = new Object();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) null;
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.toString();
      Object[] objectArray0 = new Object[18];
      objectArray0[0] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      cSVFormat1.withCommentMarker('i');
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) resultSet0;
      objectArray0[3] = (Object) resultSet0;
      objectArray0[4] = (Object) quoteMode0;
      objectArray0[5] = (Object) quoteMode0;
      objectArray0[6] = (Object) resultSet0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) resultSet0;
      cSVFormat2.format(objectArray0);
      cSVFormat0.withRecordSeparator('o');
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "0s4 9";
      objectArray0[1] = (Object) quoteMode0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) quoteMode0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat1.withIgnoreHeaderCase();
      String[] stringArray0 = new String[2];
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat3.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(true);
      cSVFormat5.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "W4553D";
      stringArray0[1] = "CommentStart=<";
      stringArray0[2] = "\r\n";
      stringArray0[3] = "byjU#c>zz";
      stringArray0[4] = ".y(qBC@SP[";
      stringArray0[5] = "org.apache.commons.csv.CSVFormat$1";
      stringArray0[6] = "TOKEN";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("\r\n");
      cSVFormat5.withSkipHeaderRecord(true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("]:+6SDt|X,!Jc:gJsX");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('5');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "]:+6SDt|X,!Jc:gJsX";
      objectArray0[2] = (Object) "]:+6SDt|X,!Jc:gJsX";
      objectArray0[3] = (Object) "]:+6SDt|X,!Jc:gJsX";
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.EXCEL.withHeader(resultSet0);
      objectArray0[6] = (Object) cSVFormat2;
      cSVFormat1.format(objectArray0);
      cSVFormat0.withRecordSeparator('5');
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      cSVFormat0.print((Object) "", (Appendable) pipedWriter0, false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      Character character0 = new Character('\'');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(resultSet0);
      cSVFormat5.withTrailingDelimiter(true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('d');
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat0.POSTGRESQL_TEXT.withRecordSeparator('/');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD.withTrailingDelimiter(true);
      cSVFormat3.POSTGRESQL_CSV.withIgnoreSurroundingSpaces();
      cSVFormat2.withTrim();
      cSVFormat3.toString();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false", 219, 12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(line ");
      cSVFormat0.withTrailingDelimiter(true);
      CharBuffer.allocate(17);
      cSVFormat0.POSTGRESQL_TEXT.withAllowMissingColumnNames();
      cSVFormat0.withTrim(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "(line ";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "0s4 ";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      
      cSVFormat1.toString();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.EXCEL.withIgnoreHeaderCase();
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.toString();
      Object[] objectArray0 = new Object[18];
      objectArray0[0] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat1.print(object0, (Appendable) stringWriter0, true);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withAllowMissingColumnNames();
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat2.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat3.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.toString();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat1.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString(" ");
      cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat3.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat2.withRecordSeparator("\r\n");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "]:+6SDt|X,!Jc:gJsX";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat4;
      cSVFormat3.format(objectArray0);
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-47);
      cSVFormat0.EXCEL.withTrailingDelimiter();
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');
      cSVFormat1.withDelimiter('B');
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withCommentMarker('u');
      Short short0 = new Short((short) (-3742));
      cSVFormat1.withQuote('6');
      cSVFormat0.withDelimiter('u');
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Header:", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(line ");
      cSVFormat0.withTrailingDelimiter(true);
      CharBuffer.allocate(17);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.POSTGRESQL_TEXT.parse(pipedReader0);
      Character character0 = new Character(' ');
      Character character1 = Character.valueOf(' ');
      cSVFormat1.withEscape(character1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.RFC4180.withNullString("9?n*cU");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.INFORMIX_UNLOAD_CSV.withNullString("|");
      cSVFormat4.INFORMIX_UNLOAD.withQuote('Y');
      cSVFormat0.RFC4180.withRecordSeparator('9');
      cSVFormat3.POSTGRESQL_CSV.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator("quURu<#?yQ6)>LO");
      cSVFormat5.withAllowMissingColumnNames();
      cSVFormat2.getRecordSeparator();
      cSVFormat2.getRecordSeparator();
      cSVFormat0.printer();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withTrim();
      cSVFormat0.withCommentMarker(';');
      cSVFormat1.withRecordSeparator(';');
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(',');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);
      Character character0 = new Character(',');
      // Undeclared exception!
      try { 
        cSVFormat3.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat0 = CSVFormat.newFormat('h');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Character character0 = Character.valueOf('k');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("");
      Character character1 = Character.valueOf('1');
      cSVFormat2.RFC4180.withQuote(character1);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\r\n";
      stringArray0[1] = "]";
      stringArray0[2] = " ";
      stringArray0[3] = "\r\n";
      stringArray0[4] = "org.apache.commons.csv.Assertions";
      // Undeclared exception!
      try { 
        cSVFormat3.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '\r
         // ' in [\r
         // , ],  , \r
         // , org.apache.commons.csv.Assertions]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "#";
      stringArray0[1] = "Header:";
      stringArray0[2] = "\r\n";
      stringArray0[3] = "gB:tY[";
      stringArray0[4] = " ";
      stringArray0[5] = "Ir";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.format(stringArray0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLText;
      cSVFormat1.equals(cSVFormat_Predefined0);
      cSVFormat1.withAllowMissingColumnNames();
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('f');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat3.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('-');
      cSVFormat2.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      stringArray0[1] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      cSVFormat2.format(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat0.withAutoFlush(true);
      cSVFormat3.equals(cSVFormat4);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat3.MYSQL.printer();
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat4.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("0s4 9");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat2.equals(cSVFormat0);
      cSVFormat0.withTrim();
      Character character0 = new Character(']');
      cSVFormat2.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(line ");
      cSVFormat0.withTrailingDelimiter(true);
      CharBuffer charBuffer0 = CharBuffer.allocate(22);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.POSTGRESQL_TEXT.parse(pipedReader0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "yxsyV@U+t#";
      objectArray0[1] = (Object) charBuffer0;
      cSVFormat1.format(objectArray0);
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.allocate(12);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[2] = (Object) charBuffer0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('M');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0);
      Short short0 = new Short((short)234);
      cSVFormat2.print((Object) short0, (Appendable) mockPrintStream0, true);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((Class<? extends Enum<?>>) null);
      cSVFormat2.format(objectArray0);
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.allocate(12);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Short short0 = new Short((short) (-3742));
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = new String[1];
      stringArray0[0] = " SkipHeaderRecord:";
      Character character0 = Character.valueOf('X');
      cSVFormat0.RFC4180.withQuote(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CharBuffer charBuffer0 = CharBuffer.allocate(114);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Short short0 = new Short((short) (-3742));
      MockPrintStream mockPrintStream0 = new MockPrintStream("k.'T");
      Integer integer0 = new Integer((short) (-3742));
      mockPrintStream0.print((Object) integer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "k.'T";
      PrintStream printStream0 = mockPrintStream0.printf("\r\n", objectArray0);
      boolean boolean0 = true;
      cSVFormat0.INFORMIX_UNLOAD_CSV.print((Object) short0, (Appendable) printStream0, true);
      String[] stringArray0 = new String[1];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) "\r\n";
      cSVFormat0.DEFAULT.format(objectArray1);
      stringArray0[0] = " SkipHeaderRecord:";
      Character character0 = Character.valueOf('X');
      cSVFormat0.RFC4180.withQuote(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat1.withIgnoreHeaderCase();
      Character character0 = Character.valueOf('{');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      // Undeclared exception!
      try { 
        cSVFormat2.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      stringArray0[1] = " SkipHeaderRecord:";
      cSVFormat2.withHeader(stringArray0);
      cSVFormat0.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat0.equals(cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('B');
      cSVFormat0.hashCode();
      cSVFormat2.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      cSVFormat2.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("The escape character and the delimiter cannot be the same ('");
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat2.POSTGRESQL_TEXT.withRecordSeparator("The escape character and the delimiter cannot be the same ('");
      cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('k');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(resultSet0);
      cSVFormat5.withNullString("k9oTrm4e");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      cSVFormat0.withAllowMissingColumnNames();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "y";
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('e');
      cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat3.equals(cSVFormat2);
      MockFile mockFile0 = new MockFile("\r\n", "\r\n");
      MockFile mockFile1 = new MockFile(mockFile0, "\r\n");
      // Undeclared exception!
      try { 
        Charset.forName(" ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('+');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat5 = cSVFormat4.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
      CSVFormat cSVFormat6 = cSVFormat2.withAllowMissingColumnNames();
      Object object0 = new Object();
      CSVFormat cSVFormat7 = cSVFormat3.withEscape('_');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) quoteMode0;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) "y";
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) cSVFormat6;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat1;
      cSVFormat7.format(objectArray0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat7.withTrim();
      cSVFormat7.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) quoteMode0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('y');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.RFC4180.toString();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withFirstRecordAsHeader();
      Character character0 = new Character('@');
      cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat0.withTrailingDelimiter();
      cSVFormat4.getAutoFlush();
      QuoteMode quoteMode1 = QuoteMode.MINIMAL;
      cSVFormat2.withQuoteMode(quoteMode1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('V');
      cSVFormat3.withSkipHeaderRecord(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      cSVFormat1.withRecordSeparator("y");
      Object[] objectArray0 = new Object[0];
      cSVFormat3.format(objectArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat0.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      Object object1 = new Object();
      Object object2 = new Object();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat0.withTrim();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      Character character0 = Character.valueOf('`');
      cSVFormat2.withEscape(character0);
      cSVFormat2.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat0.equals("");
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat0.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) "";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker('k');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('?');
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator('h');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat1.withTrailingDelimiter(false);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("");
      cSVFormat1.withAllowMissingColumnNames();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      Object object2 = new Object();
      objectArray0[1] = object2;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = object1;
      objectArray0[4] = (Object) quoteMode0;
      objectArray0[5] = (Object) cSVFormat1;
      Object object3 = new Object();
      objectArray0[6] = object3;
      objectArray0[7] = (Object) cSVFormat2;
      cSVFormat3.format(objectArray0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat0.withTrim();
      QuoteMode quoteMode1 = QuoteMode.ALL_NON_NULL;
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      MockPrintStream mockPrintStream0 = new MockPrintStream("{Y3.9 aYXzQ3+cM[f,T");
      cSVFormat0.println(mockPrintStream0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{Y3.9 aYXzQ3+cM[f,T";
      stringArray0[1] = "{Y3.9 aYXzQ3+cM[f,T";
      stringArray0[2] = "{Y3.9 aYXzQ3+cM[f,T";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '{Y3.9 aYXzQ3+cM[f,T' in [{Y3.9 aYXzQ3+cM[f,T, {Y3.9 aYXzQ3+cM[f,T, {Y3.9 aYXzQ3+cM[f,T]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
      cSVFormat2.POSTGRESQL_CSV.withTrim(false);
      cSVFormat1.getHeader();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[1] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[4] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      Object object1 = new Object();
      objectArray0[5] = object1;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = object3;
      objectArray0[2] = (Object) cSVFormat2;
      cSVFormat1.format(objectArray0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLCsv;
      Character character0 = new Character('@');
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      Character character1 = new Character('l');
      cSVFormat3.withQuote(character1);
      Object object4 = new Object();
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      cSVFormat0.equals(cSVFormat_Predefined0);
      cSVFormat1.getIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.MYSQL.withCommentMarker('k');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('?');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat2.withNullString("y");
      cSVFormat5.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat4.withTrim();
      CSVFormat cSVFormat7 = cSVFormat6.withSkipHeaderRecord(false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat6;
      objectArray0[1] = (Object) "y";
      Object object1 = new Object();
      Object object2 = new Object();
      cSVFormat3.format(objectArray0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat1.withTrim();
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreEmptyLines();
      QuoteMode quoteMode1 = QuoteMode.ALL_NON_NULL;
      cSVFormat8.equals(quoteMode1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "(line";
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Ja&C!,mR_[Gmg/'");
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat1.withHeader((String[]) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("4GBovaL.}x, eO+-g");
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat3;
      objectArray0[6] = object3;
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) cSVFormat3;
      cSVFormat3.format(objectArray0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLCsv;
      Character character0 = new Character('H');
      cSVFormat2.withQuote(character0);
      Object object4 = new Object();
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.toString();
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.MYSQL.withCommentMarker('k');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      cSVFormat5.withIgnoreHeaderCase(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) " .kipHeader6ecxrd:";
      cSVFormat0.format(objectArray0);
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) "\" .kipHeader6ecxrd:\"";
      objectArray1[1] = (Object) " .kipHeader6ecxrd:";
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[3] = (Object) " .kipHeader6ecxrd:";
      objectArray1[4] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker('k');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(' ');
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat5.withTrim();
      CSVFormat cSVFormat7 = cSVFormat6.withSkipHeaderRecord(true);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[1] = object0;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat8 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat7.equals(cSVFormat8);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      cSVFormat0.withRecordSeparator('!');
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat2.withTrim(false);
      cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat6 = cSVFormat5.withTrim();
      CSVFormat cSVFormat7 = cSVFormat6.withSkipHeaderRecord(false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat6;
      objectArray0[1] = (Object) cSVFormat2;
      cSVFormat4.format(objectArray0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreSurroundingSpaces(true);
      cSVFormat2.equals(cSVFormat8);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.withSkipHeaderRecord();
      objectArray0[1] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      objectArray0[4] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      cSVFormat0.format(objectArray0);
      cSVFormat0.getCommentMarker();
      cSVFormat0.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.apache.commons.csv.CSVFormat@0000000003,,java.lang.Object@0000000004,java.lang.Object@0000000005,org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000001");
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("Excel");
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Excel");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('h');
      Character character0 = Character.valueOf('h');
      // Undeclared exception!
      try { 
        cSVFormat4.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('h')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      cSVFormat0.format(objectArray0);
      cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat1.getDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      char char0 = '\u0086';
      Character.valueOf('\u0086');
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat0.withRecordSeparator("^PWFK]g(");
      Object object1 = new Object();
      Object object2 = new Object();
      cSVFormat1.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object3 = new Object();
      cSVFormat2.withIgnoreEmptyLines();
      try { 
        cSVFormat2.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.withRecordSeparator('<');
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker((Character) null);
      boolean boolean0 = true;
      cSVFormat4.withTrailingDelimiter(true);
      String string0 = null;
      // Undeclared exception!
      try { 
        QuoteMode.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.RFC4180;
          CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('7');
          cSVFormat1.getCommentMarker();
          cSVFormat1.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);
          MockFile mockFile0 = new MockFile("U0AX0  JHLy?%mzy");
          cSVFormat1.TDF.withCommentMarker('T');
          byte[] byteArray0 = new byte[4];
          byteArray0[0] = (byte)31;
          byteArray0[1] = (byte)12;
          byteArray0[2] = (byte) (-78);
          byteArray0[3] = (byte)72;
          FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
          Path path0 = mockFile0.toPath();
          FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat1.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"U0AX0  JHLy?%mzy\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker('k');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(' ');
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat5.withTrim();
      cSVFormat6.withSkipHeaderRecord(true);
      CSVFormat cSVFormat7 = cSVFormat6.withRecordSeparator("");
      cSVFormat7.withTrim(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat6;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(')');
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat1.withSkipHeaderRecord(true);
      String string0 = "$VALUES";
      cSVFormat2.withRecordSeparator("The header contains a duplicate name: \"");
      Object object0 = new Object();
      Object object1 = new Object();
      CSVFormat cSVFormat3 = cSVFormat0.withFirstRecordAsHeader();
      // Undeclared exception!
      try { 
        cSVFormat3.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character.valueOf('u');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('x');
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat3.withRecordSeparator("HeaderComments:");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat3;
      cSVFormat2.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object2 = new Object();
      cSVFormat4.withIgnoreEmptyLines();
      try { 
        cSVFormat4.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker('k');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(' ');
      boolean boolean0 = false;
      cSVFormat2.withTrailingDelimiter(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[0];
      cSVFormat2.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        cSVFormat1.INFORMIX_UNLOAD.withCommentMarker('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat1.withRecordSeparator("$VALUES");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      cSVFormat1.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object2 = new Object();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      try { 
        cSVFormat4.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
      cSVFormat1.POSTGRESQL_CSV.withDelimiter('z');
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Character.valueOf('u');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('t');
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) quoteMode0;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class0);
      Character character0 = Character.valueOf('u');
      cSVFormat5.withCommentMarker(character0);
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreHeaderCase();
      Character character1 = Character.valueOf('f');
      cSVFormat6.POSTGRESQL_CSV.withQuote(character1);
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('t');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".BG#FY.s4Vz8nxe");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
      cSVFormat2.getRecordSeparator();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      cSVFormat0.INFORMIX_UNLOAD.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      Character character0 = Character.valueOf('a');
      cSVFormat1.withEscape(character0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      Character character0 = Character.valueOf('a');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat1.withAllowMissingColumnNames();
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) character0;
      cSVFormat1.format(objectArray0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat1.equals(character0);
      cSVFormat0.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker('k');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(' ');
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      cSVFormat5.withTrim();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) resultSet0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVFormat3.INFORMIX_UNLOAD.format(objectArray0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.POSTGRESQL_TEXT.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat1.MYSQL.format(objectArray0);
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat3;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte) (-11);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat4.INFORMIX_UNLOAD_CSV.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(false);
      cSVFormat5.getHeader();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat1.MYSQL.format(objectArray0);
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat3;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte) (-11);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat4.INFORMIX_UNLOAD_CSV.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(false);
      cSVFormat5.getHeader();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('Q');
      CSVFormat.newFormat('K');
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("KqM]+f+Y67 ");
      cSVFormat5.withAutoFlush(true);
      cSVFormat2.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker('k');
      cSVFormat1.withRecordSeparator('k');
      cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat1.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker('k');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      cSVFormat0.withSkipHeaderRecord(false);
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat2;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) rowSetMetaDataImpl0;
      Object object3 = new Object();
      objectArray0[8] = object3;
      cSVFormat2.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character.valueOf('$');
      Character.valueOf('u');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat1.equals(cSVFormat3);
      cSVFormat2.printer();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) null, (Appendable) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('U');
      Character character0 = Character.valueOf('d');
      cSVFormat3.POSTGRESQL_TEXT.withQuote(character0);
      cSVFormat2.getEscapeCharacter();
      cSVFormat2.isQuoteCharacterSet();
      MockFile mockFile0 = new MockFile(">B=(L\"%", ">B=(L\"%");
      // Undeclared exception!
      try { 
        cSVFormat1.print((File) mockFile0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("java.io.OutputStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("N2meNb5SoPa*Fz");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('t');
      cSVFormat5.withCommentMarker(character0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("N2meNb5SoPa*Fz");
      cSVFormat2.println(mockPrintStream1);
      cSVFormat1.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat1.equals(objectArray0[0]);
      cSVFormat2.withDelimiter('l');
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      // Undeclared exception!
      try { 
        cSVFormat1.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character.valueOf('$');
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.getCommentMarker();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat2.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.MYSQL.withCommentMarker('k');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord(true);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) resultSet0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVFormat6.INFORMIX_UNLOAD.format(objectArray0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat0.equals(cSVFormat6);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFile mockFile0 = new MockFile("", "");
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat0.TDF.print((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat0.format(objectArray0);
      cSVFormat2.POSTGRESQL_TEXT.withTrim(true);
      cSVFormat3.getNullString();
      cSVFormat3.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(resultSet0);
      cSVFormat4.format(objectArray0);
      cSVFormat2.withIgnoreSurroundingSpaces();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("\"Delimiter=<|> Escape=<> QuoteChar=<\"\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.\"Delimiter=<|> Escape=<> QuoteChar=<\"\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false\"
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker('k');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat5.withTrim();
      CSVFormat cSVFormat7 = cSVFormat6.withSkipHeaderRecord(true);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet1).getMetaData();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) resultSet0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVFormat7.INFORMIX_UNLOAD.format(objectArray0);
      cSVFormat4.withHeader(resultSet1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat8 = CSVFormat.TDF;
      cSVFormat8.equals(cSVFormat3);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character.valueOf('$');
      Character character0 = Character.valueOf('u');
      cSVFormat0.withEscape(character0);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.getDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('u');
      cSVFormat2.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.POSTGRESQL_CSV.withHeaderComments((Object[]) null);
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat1.equals(cSVFormat0);
      cSVFormat2.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat2.format(objectArray0);
      cSVFormat2.getNullString();
      cSVFormat2.withIgnoreHeaderCase();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat2.withHeader(resultSet0);
      cSVFormat3.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("Amlw~3|:y&apmGgI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.Amlw~3|:y&apmGgI
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('U');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      cSVFormat1.getDelimiter();
      cSVFormat2.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      cSVFormat0.format(objectArray0);
      cSVFormat0.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Character.valueOf('a');
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      cSVFormat5.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("N2meNb5SoPa*Fz");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      cSVFormat0.getEscapeCharacter();
      cSVFormat0.isQuoteCharacterSet();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('0');
      cSVFormat3.withCommentMarker('a');
      cSVFormat3.getDelimiter();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "|ThV$$W4%{hq7:";
      stringArray0[1] = "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      stringArray0[2] = "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      stringArray0[3] = "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      stringArray0[4] = "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      stringArray0[5] = "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      stringArray0[6] = "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      stringArray0[7] = "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      // Undeclared exception!
      try { 
        cSVFormat1.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false' in [|ThV$$W4%{hq7:, Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false, Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false, Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false, Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false, Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false, Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false, Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('?');
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);
      cSVFormat0.withDelimiter('q');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 35);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      cSVFormat0.INFORMIX_UNLOAD.println(mockPrintStream0);
      cSVFormat1.getDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString((String) null);
      cSVFormat3.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.MYSQL.withCommentMarker('k');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord(true);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet1).getMetaData();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) resultSet0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVFormat6.INFORMIX_UNLOAD.format(objectArray0);
      cSVFormat3.withHeader(resultSet1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat7 = CSVFormat.TDF;
      cSVFormat7.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      String string0 = null;
      cSVFormat1.withNullString((String) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      cSVFormat0.POSTGRESQL_TEXT.withDelimiter('a');
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withCommentMarker('=');
      cSVFormat0.getDelimiter();
      cSVFormat2.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      Long long0 = new Long(874L);
      cSVFormat3.equals(long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat0.format(objectArray0);
      cSVFormat3.getNullString();
      cSVFormat3.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(resultSet0);
      cSVFormat4.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Character character0 = new Character('S');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker(character0);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat5.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.getNullString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) "\"org.apache.commons.csv.CSVFormat@0000000002\",\"org.apache.commons.csv.CSVFormat@0000000002\",";
      objectArray1[1] = (Object) cSVFormat3;
      objectArray1[2] = (Object) null;
      objectArray1[3] = (Object) "\"org.apache.commons.csv.CSVFormat@0000000002\",\"org.apache.commons.csv.CSVFormat@0000000002\",";
      cSVFormat1.format(objectArray1);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("\"\"\"org.apache.commons.csv.CSVFormat@0000000002\"\",\"\"org.apache.commons.csv.CSVFormat@0000000002\"\",\",\"org.apache.commons.csv.CSVFormat@0000000005\",,\"\"\"org.apache.commons.csv.CSVFormat@0000000002\"\",\"\"org.apache.commons.csv.CSVFormat@0000000002\"\",\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.\"\"\"org.apache.commons.csv.CSVFormat@0000000002\"\",\"\"org.apache.commons.csv.CSVFormat@0000000002\"\",\",\"org.apache.commons.csv.CSVFormat@0000000005\",,\"\"\"org.apache.commons.csv.CSVFormat@0000000002\"\",\"\"org.apache.commons.csv.CSVFormat@0000000002\"\",\"
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer.allocate(588);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat1.equals(cSVFormat_Predefined0);
      cSVFormat0.withRecordSeparator("url");
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker('k');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(' ');
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      cSVFormat5.withTrim();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      cSVFormat1.withTrim(true);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withDelimiter(' ');
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object object0 = new Object();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedReader pipedReader0 = new PipedReader(4);
      cSVFormat0.RFC4180.parse(pipedReader0);
      cSVFormat0.withRecordSeparator("\"X,.f!h!jhsH%3I?-");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Q?]$x34u`|WM";
      cSVFormat5.RFC4180.withTrim(true);
      stringArray0[1] = "";
      stringArray0[2] = "|";
      stringArray0[3] = "k?VMr?A=Y@_+a}zyb";
      stringArray0[4] = "2j Iw,";
      stringArray0[5] = "i1,hEE(9";
      stringArray0[6] = "";
      stringArray0[7] = "org.apache.commons.csv.CSVParser";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        cSVFormat5.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [Q?]$x34u`|WM, , |, k?VMr?A=Y@_+a}zyb, 2j Iw,, i1,hEE(9, , org.apache.commons.csv.CSVParser, ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('s');
      Object object0 = new Object();
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)116;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object object1 = new Object();
      cSVFormat1.getNullString();
      cSVFormat0.withIgnoreHeaderCase();
      char[] charArray0 = new char[8];
      charArray0[7] = 's';
      charArray0[1] = 's';
      Byte byte0 = new Byte((byte) (-43));
      File file0 = MockFile.createTempFile("W0y", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      cSVFormat2.INFORMIX_UNLOAD_CSV.print((Object) byte0, (Appendable) mockFileWriter0, false);
      charArray0[2] = ' ';
      charArray0[3] = 's';
      charArray0[4] = 's';
      charArray0[5] = 's';
      charArray0[6] = 's';
      charArray0[7] = 's';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      cSVFormat2.print((Object) charBuffer0, (Appendable) charBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      cSVFormat0.withEscape('\"');
      Object object0 = new Object();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Object object1 = new Object();
      cSVFormat1.getNullString();
      cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      // Undeclared exception!
      try { 
        cSVFormat2.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('s');
      Object object0 = new Object();
      Object object1 = new Object();
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = object1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = object1;
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withTrim(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(559);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"org.apache.commons.csv.CSVFormat@0000000004\",\"org.apache.commons.csv.CSVFormat@0000000002\",\"org.apache.commons.csv.CSVFormat@0000000001\",\"java.lang.Object@0000000005\",\"org.apache.commons.csv.CSVFormat@0000000001\",\"org.apache.commons.csv.CSVFormat@0000000001\",\"org.apache.commons.csv.CSVFormat@0000000004\",\"java.lang.Object@0000000005\",\"org.apache.commons.csv.CSVFormat@0000000004\",");
      stringWriter1.append('i');
      cSVFormat3.printRecord(stringWriter0, objectArray0);
      cSVFormat3.withIgnoreSurroundingSpaces(true);
      cSVFormat0.printer();
      cSVFormat0.printRecord(stringWriter1, objectArray0);
      cSVFormat1.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      Float float0 = new Float(2661.869F);
      cSVFormat1.equals(float0);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf(" [");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined. [
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker('k');
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(' ');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      cSVFormat5.withSkipHeaderRecord(true);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      Character.valueOf(' ');
      Character character0 = Character.valueOf('v');
      cSVFormat1.withEscape(character0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat6 = cSVFormat2.withTrailingDelimiter();
      try { 
        cSVFormat6.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      CSVFormat cSVFormat1 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreEmptyLines();
      cSVFormat5.withTrim();
      CSVFormat cSVFormat6 = cSVFormat2.withSkipHeaderRecord(false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      cSVFormat1.format(objectArray0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      CSVFormat cSVFormat7 = cSVFormat4.withHeader(resultSet1);
      Character character0 = new Character('.');
      cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat8 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat9 = cSVFormat8.withRecordSeparator("");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 538);
      cSVFormat6.printRecord(bufferedWriter0, objectArray0);
      cSVFormat9.withTrim(false);
      cSVFormat7.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withTrim(false);
      QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
      cSVFormat2.withDelimiter(' ');
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('s');
      Object object0 = new Object();
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat1.getNullString();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase();
      MockPrintStream mockPrintStream0 = new MockPrintStream(") invalid parse sequence");
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ") invalid parse sequence";
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = object0;
      cSVFormat2.printRecord(mockPrintStream0, objectArray0);
      cSVFormat3.withCommentMarker('s');
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.MYSQL.withCommentMarker('k');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord(true);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet1).getMetaData();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) resultSet0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVFormat6.INFORMIX_UNLOAD.format(objectArray0);
      cSVFormat3.withHeader(resultSet1);
      Character character0 = new Character('-');
      CSVFormat cSVFormat7 = cSVFormat4.withCommentMarker(character0);
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreHeaderCase();
      cSVFormat2.withRecordSeparator("ns");
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) cSVFormat1;
      objectArray1[1] = (Object) cSVFormat4;
      objectArray1[2] = (Object) character0;
      objectArray1[3] = (Object) cSVFormat8;
      objectArray1[4] = (Object) cSVFormat6;
      objectArray1[5] = (Object) cSVFormat7;
      try { 
        cSVFormat1.printRecord(pipedWriter0, objectArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\"');
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('\"');
      cSVFormat1.format(objectArray0);
      cSVFormat2.getNullString();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      cSVFormat3.withIgnoreHeaderCase();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      cSVFormat0.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat0.format(objectArray0);
      cSVFormat3.getNullString();
      cSVFormat3.withIgnoreHeaderCase();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) null);
      cSVFormat4.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("\"Delimiter=<|> Escape=<> QuoteChar=<\"\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false\",,,,,,,,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.\"Delimiter=<|> Escape=<> QuoteChar=<\"\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false\",,,,,,,,
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteMode(quoteMode0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.POSTGRESQL_CSV.withHeader(resultSet0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      cSVFormat2.getCommentMarker();
      cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat1.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character character0 = new Character('F');
      cSVFormat1.INFORMIX_UNLOAD_CSV.withEscape(character0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat2.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat0.format(objectArray0);
      cSVFormat3.getNullString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      cSVFormat3.withTrim();
      cSVFormat0.withTrim(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(6);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      stringWriter0.append('.');
      cSVFormat0.printRecord(stringWriter1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(false);
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(true);
      cSVFormat5.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = CSVFormat.newFormat(')');
      Short short0 = new Short((short)1379);
      MockFileWriter mockFileWriter0 = new MockFileWriter("QaqxF;K5:FG:hLO\"| %");
      mockFileWriter0.append(')');
      cSVFormat0.POSTGRESQL_CSV.print((Object) short0, (Appendable) mockFileWriter0, false);
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withQuote('W');
      cSVFormat2.withAutoFlush(false);
      cSVFormat0.TDF.printer();
      cSVFormat0.getIgnoreHeaderCase();
      cSVFormat0.getTrailingDelimiter();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte)51;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      cSVFormat0.getIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat1.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.toString();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) cSVFormat2;
      cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat0.format(objectArray0);
      cSVFormat3.getNullString();
      cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = CSVFormat.newFormat('T');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat4.withHeader(resultSet0);
      cSVFormat3.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000001,java.lang.Object@0000000004,java.lang.Object@0000000005,org.apache.commons.csv.CSVFormat@0000000002");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.org.apache.commons.csv.CSVFormat@0000000001,org.apache.commons.csv.CSVFormat@0000000001,java.lang.Object@0000000004,java.lang.Object@0000000005,org.apache.commons.csv.CSVFormat@0000000002
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[10];
      cSVFormat0.withHeaderComments(objectArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("string");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      Character character0 = Character.valueOf('\u0086');
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object2 = new Object();
      try { 
        cSVFormat0.print((Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", (Appendable) pipedWriter0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char char0 = '?';
      CharBuffer charBuffer0 = CharBuffer.allocate(588);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charBuffer0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVFormat0.MYSQL.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\"');
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object1;
      cSVFormat1.format(objectArray0);
      cSVFormat1.getNullString();
      cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(3515);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "java.lang.Object@0000000004");
      StringWriter stringWriter2 = stringWriter1.append('M');
      cSVFormat2.printRecord(stringWriter2, objectArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[15];
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      cSVFormat0.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      cSVFormat0.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      Character character0 = new Character('/');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      cSVFormat2.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('s');
      Object object0 = new Object();
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      Object object1 = new Object();
      cSVFormat1.getNullString();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('s');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) "";
      objectArray0[6] = object1;
      objectArray0[7] = object0;
      objectArray0[8] = (Object) "";
      cSVFormat4.EXCEL.withHeaderComments(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("u'phs}5|w");
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat4 = cSVFormat2.withTrailingDelimiter(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat0.getTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat1.withQuote('I');
      cSVFormat5.RFC4180.withRecordSeparator('5');
      cSVFormat4.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object1;
      cSVFormat1.format(objectArray0);
      cSVFormat1.getNullString();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = object1;
      objectArray1[1] = object0;
      objectArray1[2] = (Object) cSVFormat1;
      cSVFormat2.format(objectArray1);
      StringWriter stringWriter0 = new StringWriter();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
      cSVFormat1.printRecord(stringWriter0, objectArray0);
      cSVFormat1.withCommentMarker('/');
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Character character0 = Character.valueOf('<');
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('x');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('9');
      CSVFormat cSVFormat3 = cSVFormat0.EXCEL.withNullString("r0\t0Urq,W0}_5jZ!XK");
      cSVFormat2.withCommentMarker((Character) null);
      cSVFormat1.withEscape('3');
      Object object0 = new Object();
      Object object1 = new Object();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(true);
      cSVFormat3.withAllowMissingColumnNames(false);
      Short short0 = new Short((short)83);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat4.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat1.toString();
      cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator("$VALUES");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "$VALUES";
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat2;
      cSVFormat2.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Object object2 = new Object();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "(line";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Short short0 = new Short((short) (-3742));
      MockPrintStream mockPrintStream0 = new MockPrintStream("k.'T");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "k.'T";
      PrintStream printStream0 = mockPrintStream0.printf("\r\n", objectArray0);
      cSVFormat0.INFORMIX_UNLOAD_CSV.print((Object) short0, (Appendable) printStream0, true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = " SkipHeaderRecord:";
      Character character0 = Character.valueOf('X');
      cSVFormat0.RFC4180.withQuote(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(32);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      cSVFormat0.println(charBuffer0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat.valueOf("TDF");
      Character character0 = new Character('\u0085');
      Character character1 = new Character('\u0085');
      cSVFormat1.withCommentMarker(character0);
      cSVFormat1.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat1.withTrailingDelimiter(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat2.getTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('9');
      cSVFormat2.withCommentMarker((Character) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(5);
      Charset.defaultCharset();
      ByteBuffer.allocate(5);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
      Short short0 = new Short((short)5);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat4;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVFormat3;
      objectArray0[7] = (Object) cSVFormat4;
      objectArray0[8] = (Object) cSVFormat1;
      cSVFormat2.format(objectArray0);
      cSVFormat2.withDelimiter('1');
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\"');
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object1;
      cSVFormat1.getQuoteCharacter();
      cSVFormat1.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[8] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("Unexpected Token type: ");
      cSVFormat1.getTrim();
      cSVFormat0.getAllowMissingColumnNames();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat1.withQuote('A');
      cSVFormat2.withEscape('%');
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000001,\"Delimiter=<|> Escape=<> QuoteChar=<\"\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false\",org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000003,org.apache.commons.csv.CSVFormat@0000000003,\"Delimiter=<|> Escape=<> QuoteChar=<\"\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false\",org.apache.commons.csv.CSVFormat@0000000001", (String) null);
      Charset charset0 = Charset.defaultCharset();
      cSVFormat4.INFORMIX_UNLOAD_CSV.print(file0, charset0);
      CSVFormat cSVFormat5 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat5.isCommentMarkerSet();
      cSVFormat0.hashCode();
      cSVFormat1.withTrailingDelimiter();
      cSVFormat4.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('U');
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      cSVFormat2.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) "\"Delimiter=<|> Escape=<> QuoteChar=<\"\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false\",\"org.apache.commons.csv.CSVFormat@0000000001\",\"org.apache.commons.csv.CSVFormat@0000000003\",\"org.apache.commons.csv.CSVFormat@0000000001\",\"Delimiter=<|> Escape=<> QuoteChar=<\"\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false\"";
      objectArray1[1] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray1[2] = (Object) pipedWriter0;
      objectArray1[3] = (Object) cSVFormat2;
      objectArray1[4] = (Object) pipedWriter0;
      try { 
        cSVFormat0.printRecord(pipedWriter0, objectArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLCsv;
      Character character0 = new Character('V');
      Character character1 = Character.valueOf('T');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character1);
      Object object1 = new Object();
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat0.format(objectArray0);
      cSVFormat3.getNullString();
      cSVFormat3.withIgnoreHeaderCase();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat1.withHeader(resultSet0);
      cSVFormat4.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("\"Delimiter=<|> Escape=<> QuoteChar=<\"\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.\"Delimiter=<|> Escape=<> QuoteChar=<\"\"> RecordSeparator=<
         // > EmptyLines:ignored SkipHeaderRecord:false\"
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
      Object[] objectArray0 = new Object[18];
      objectArray0[0] = (Object) "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("]:+6SDt|X,!Jy:gJsX");
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.print((Object) "]:+6SDt|X,!Jy:gJsX", (Appendable) mockFileWriter0, true);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ".\"kipHeder6ecxrb/:";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('9');
      CSVFormat cSVFormat3 = cSVFormat0.EXCEL.withNullString("r0\t0Urq,W0}_5jZ!XK");
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker((Character) null);
      CSVFormat cSVFormat5 = cSVFormat1.withEscape('3');
      Object object0 = new Object();
      cSVFormat1.withTrim();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      cSVFormat0.POSTGRESQL_CSV.withHeaderComments(objectArray0);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) cSVFormat4;
      objectArray1[1] = (Object) cSVFormat2;
      cSVFormat4.format(objectArray1);
      cSVFormat1.getNullString();
      CSVFormat cSVFormat6 = cSVFormat1.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat7 = cSVFormat0.withHeader(resultSet0);
      Object[] objectArray2 = new Object[6];
      objectArray2[0] = (Object) cSVFormat5;
      objectArray2[1] = (Object) cSVFormat6;
      objectArray2[2] = (Object) resultSet0;
      objectArray2[3] = (Object) cSVFormat6;
      objectArray2[4] = (Object) cSVFormat7;
      objectArray2[5] = (Object) null;
      cSVFormat7.format(objectArray2);
      PipedWriter pipedWriter0 = new PipedWriter();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.EXCEL.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat3.INFORMIX_UNLOAD_CSV.withQuote('p');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote((Character) null);
      cSVFormat4.withDelimiter('x');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.withTrim();
      Short short0 = new Short((short) (-2));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.MYSQL.withTrailingDelimiter(true);
      Object object0 = new Object();
      cSVFormat0.withIgnoreHeaderCase();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      cSVFormat1.withRecordSeparator("\"X,.f!h!jhsH%3I?-");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('x');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat0.isCommentMarkerSet();
      cSVFormat0.hashCode();
      cSVFormat1.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\"');
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object1;
      cSVFormat1.format(objectArray0);
      cSVFormat1.getNullString();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.EXCEL.withNullString("PostgreSQLText");
      cSVFormat0.format(objectArray0);
      cSVFormat1.withDelimiter('U');
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) quoteMode0;
      cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat2.getQuoteMode();
      cSVFormat0.withDelimiter(' ');
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      cSVFormat1.INFORMIX_UNLOAD.withSkipHeaderRecord(false);
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("u'phs}5|w");
      mockFile0.toPath();
      CSVFormat.Predefined.values();
      cSVFormat2.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = new Character('R');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      cSVFormat2.withAllowMissingColumnNames(true);
      cSVFormat0.POSTGRESQL_TEXT.withIgnoreHeaderCase(true);
      cSVFormat1.withCommentMarker(character0);
      Short short0 = new Short((short)5);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      Object object0 = new Object();
      Long long0 = new Long((short)5);
      cSVFormat2.equals(long0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('x');
      Character character0 = Character.valueOf('U');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(resultSet0);
      // Undeclared exception!
      try { 
        cSVFormat5.withDelimiter('U');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('U')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('x');
      CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('=');
      cSVFormat4.format(objectArray0);
      cSVFormat4.getHeaderComments();
      cSVFormat3.toString();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('9');
      CSVFormat cSVFormat3 = cSVFormat0.EXCEL.withNullString("r0\t0Urq,W0}_5jZ!XK");
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker((Character) null);
      CSVFormat cSVFormat5 = cSVFormat1.withEscape('3');
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      cSVFormat0.POSTGRESQL_CSV.withHeaderComments(objectArray0);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) cSVFormat4;
      objectArray1[1] = (Object) cSVFormat2;
      cSVFormat4.format(objectArray1);
      cSVFormat1.getNullString();
      CSVFormat cSVFormat6 = cSVFormat1.withIgnoreHeaderCase();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat7 = cSVFormat0.withHeader(resultSet0);
      Object[] objectArray2 = new Object[6];
      objectArray2[0] = (Object) cSVFormat5;
      objectArray2[1] = (Object) cSVFormat6;
      objectArray2[2] = (Object) resultSet0;
      objectArray2[3] = (Object) cSVFormat6;
      objectArray2[4] = (Object) cSVFormat7;
      objectArray2[5] = (Object) null;
      cSVFormat7.format(objectArray2);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.printRecord(pipedWriter0, objectArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker('k');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat2.equals(cSVFormat3);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('P');
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[3] = (Object) character0;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat3.withAllowMissingColumnNames(true);
      Short short0 = new Short((short)5);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat2.equals(cSVFormat3);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.printer();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('9');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(5);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) null;
      Object object2 = new Object();
      objectArray0[5] = object2;
      Object object3 = new Object();
      objectArray0[6] = object3;
      cSVFormat0.format(objectArray0);
      cSVFormat3.getNullString();
      cSVFormat2.withIgnoreHeaderCase();
      cSVFormat1.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat0.printRecord(charArrayWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat2;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('t');
      QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat6 = cSVFormat5.withQuoteMode(quoteMode1);
      CSVFormat cSVFormat7 = cSVFormat6.withHeaderComments(objectArray0);
      Character character0 = Character.valueOf('t');
      CSVFormat cSVFormat8 = cSVFormat7.withQuote(character0);
      cSVFormat8.withTrim(true);
      cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat4.getQuoteMode();
      // Undeclared exception!
      try { 
        cSVFormat8.withDelimiter('t');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('t')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLCsv;
      cSVFormat_Predefined0.getFormat();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat_Predefined0;
      cSVFormat0.format(objectArray0);
      Character character0 = new Character('D');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      cSVFormat1.getTrim();
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      cSVFormat3.getAllowMissingColumnNames();
      cSVFormat1.withIgnoreHeaderCase(false);
      // Undeclared exception!
      try { 
        cSVFormat2.withQuote('D');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('D')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      CSVFormat cSVFormat6 = cSVFormat5.withSkipHeaderRecord(true);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      cSVFormat3.withHeader(resultSet1);
      Character character0 = new Character('-');
      CSVFormat cSVFormat7 = cSVFormat4.withCommentMarker(character0);
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreHeaderCase();
      cSVFormat2.withRecordSeparator("ns");
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat8;
      objectArray0[4] = (Object) cSVFormat6;
      objectArray0[5] = (Object) cSVFormat7;
      try { 
        cSVFormat1.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Token type: ");
      cSVFormat1.TDF.withQuote('C');
      cSVFormat1.getTrim();
      cSVFormat1.getAllowMissingColumnNames();
      Character character0 = Character.valueOf('V');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character0);
      cSVFormat2.withIgnoreHeaderCase();
      cSVFormat2.withRecordSeparator("");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-1252));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      Character character0 = new Character('t');
      Character character1 = new Character('i');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character1);
      cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("ns");
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.INFORMIX_UNLOAD_CSV.withHeader(class0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat2.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
      String[] stringArray0 = new String[6];
      stringArray0[0] = ",`+GY&t\u0002q>";
      stringArray0[1] = "\u0085";
      stringArray0[2] = "";
      stringArray0[3] = "I5\"dD-aFeclm{UTzjas";
      stringArray0[4] = "The header contains a duplicate entry: '";
      stringArray0[5] = "')";
      cSVFormat0.POSTGRESQL_TEXT.withHeader(stringArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('4');
      cSVFormat2.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) quoteMode0;
      cSVFormat0.withSkipHeaderRecord();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('H');
      CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('9');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat3.DEFAULT.withHeader(class0);
      cSVFormat4.format(objectArray0);
      cSVFormat3.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat1.getQuoteMode();
      cSVFormat1.withDelimiter(' ');
      cSVFormat0.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Character character0 = Character.valueOf('t');
      Character character1 = new Character('t');
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) character0;
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat2.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Charset charset0 = Charset.defaultCharset();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) charset0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) pipedWriter0;
      objectArray0[5] = (Object) rowSetMetaDataImpl0;
      objectArray0[6] = (Object) cSVFormat0;
      try { 
        cSVFormat2.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\"');
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object1;
      cSVFormat1.format(objectArray0);
      cSVFormat1.getNullString();
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat1.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('8');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) cSVFormat_Predefined0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('c');
      Class<CSVFormat.Predefined> class1 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(class1);
      cSVFormat5.withNullString("qh_Ai>ZVv;U");
      cSVFormat0.withTrim();
      Short short0 = new Short((short) (-2));
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat1.hashCode();
      cSVFormat1.withAutoFlush(false);
      cSVFormat0.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      Character character0 = new Character('p');
      cSVFormat2.withQuote(character0);
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) rowSetMetaDataImpl0;
      objectArray0[3] = (Object) rowSetMetaDataImpl0;
      objectArray0[4] = (Object) rowSetMetaDataImpl0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVFormat1.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase();
      try { 
        cSVFormat3.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat1.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("u'phs}5|w");
      mockFile0.toPath();
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat0.INFORMIX_UNLOAD.print((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat1.TDF.print((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Token type: ");
      cSVFormat1.getTrim();
      cSVFormat1.getAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('%');
      cSVFormat3.withEscape('.');
      CSVFormat cSVFormat4 = cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat4.isCommentMarkerSet();
      cSVFormat4.hashCode();
      cSVFormat4.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.withCommentMarker((Character) null);
      cSVFormat1.withAllowMissingColumnNames(false);
      Short short0 = new Short((short)5);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      Object object0 = new Object();
      cSVFormat1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withEscape('x');
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD.withDelimiter('=');
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines(true);
      cSVFormat4.hashCode();
      cSVFormat3.getQuoteCharacter();
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat_Predefined0;
      objectArray0[4] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat1;
      Object object1 = new Object();
      objectArray0[7] = object1;
      cSVFormat1.format(objectArray0);
      cSVFormat0.getHeaderComments();
      cSVFormat0.withRecordSeparator('/');
      cSVFormat0.withHeaderComments((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      Short short0 = new Short((short)2524);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat3.equals("Delimiter=<|> Escape=<> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "W\"9KzWG?UB9";
      stringArray0[1] = "inputStream";
      stringArray0[2] = "i";
      stringArray0[3] = "8|OWCW((oR%+rN7sbD";
      stringArray0[4] = ".(&RL[BIvIz";
      stringArray0[5] = "7M";
      stringArray0[6] = "P:>\\j/";
      stringArray0[7] = "";
      stringArray0[8] = "C3:pEjI+<q^8T";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat2.withIgnoreHeaderCase();
      cSVFormat3.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.RFC4180.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      String string0 = "The comment start character and the quoteChar cannot be the same ('";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat3.MYSQL.withNullString("The comment start character and the quoteChar cannot be the same ('");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat6 = cSVFormat5.DEFAULT.withNullString(" EmptyLines:ignored");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat6.INFORMIX_UNLOAD.withHeader(resultSet0);
      try { 
        MockURI.URI("", " EmptyLines:ignored", "HeaderComments:", 59, "HeaderComments:", "", " EmptyLines:ignored");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://%20EmptyLines:ignored@[HeaderComments:]:59HeaderComments:?#%20EmptyLines:ignored
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat0.withEscape((Character) null);
      Charset.defaultCharset();
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/!,|<+{pM:N`]4");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat1.getNullString();
      cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("org.apache.commons.csv.CSVParser");
      Character.valueOf('');
      Character character0 = new Character('t');
      cSVFormat1.withCommentMarker(character0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) null;
      objectArray1[1] = (Object) "\"org.apache.commons.csv.CSVFormat@0000000001\",\"org.apache.commons.csv.CSVFormat@0000000001\",\"org.apache.commons.csv.CSVFormat@0000000002\",\"java.lang.Object@0000000004\",,\"org.evosuite.runtime.mock.java.io.MockPrintWriter@0000000005\",\"org.apache.commons.csv.CSVFormat@0000000006\"";
      objectArray1[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray1[3] = object1;
      objectArray1[4] = (Object) "\"org.apache.commons.csv.CSVFormat@0000000001\",\"org.apache.commons.csv.CSVFormat@0000000001\",\"org.apache.commons.csv.CSVFormat@0000000002\",\"java.lang.Object@0000000004\",,\"org.evosuite.runtime.mock.java.io.MockPrintWriter@0000000005\",\"org.apache.commons.csv.CSVFormat@0000000006\"";
      objectArray1[5] = (Object) cSVFormat3;
      try { 
        cSVFormat1.printRecord(pipedWriter0, objectArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.getTrim();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[6] = object2;
      Object object3 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('6');
      cSVFormat0.print(object3, (Appendable) stringWriter1, true);
      Character character0 = new Character('0');
      cSVFormat0.hashCode();
      Character character1 = Character.valueOf('6');
      cSVFormat0.withEscape(character1);
      Charset.defaultCharset();
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
      Character character0 = new Character(')');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(')');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape('[');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) resultSet0;
      objectArray0[2] = (Object) cSVFormat4;
      CSVFormat cSVFormat5 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat5.withRecordSeparator('1');
      cSVFormat6.isCommentMarkerSet();
      cSVFormat2.hashCode();
      cSVFormat2.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      Character character0 = Character.valueOf(')');
      cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat3.hashCode();
      Character character1 = new Character('~');
      cSVFormat2.withEscape(character1);
      // Undeclared exception!
      try { 
        Charset.forName("om~q;.)}-GwuO");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // om~q;.)}-GwuO
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("MINIMAL");
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat0.print((Object) quoteMode0, (Appendable) mockPrintWriter0, false);
      Character character0 = new Character('@');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.withRecordSeparator("MINIMAL");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(mockPrintWriter0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\"');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('\"');
      Character character0 = new Character('@');
      cSVFormat0.hashCode();
      Character character1 = new Character('');
      cSVFormat2.withEscape(character1);
      String string0 = "~!vaam2+~o[H\"Kb";
      // Undeclared exception!
      try { 
        Charset.forName("~!vaam2+~o[H\"Kb");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ~!vaam2+~o[H\"Kb
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\"');
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat2.hashCode();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.EXCEL.withIgnoreHeaderCase(true);
      cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat3.RFC4180.withTrim();
      cSVFormat3.TDF.withEscape('9');
      Object[] objectArray0 = new Object[0];
      cSVFormat3.format(objectArray0);
      cSVFormat2.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[4];
      CSVFormat cSVFormat1 = CSVFormat.newFormat('P');
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\"');
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object1;
      cSVFormat1.format(objectArray0);
      cSVFormat1.getNullString();
      cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("F]qZ");
      Character character0 = Character.valueOf('<');
      // Undeclared exception!
      try { 
        cSVFormat2.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('<')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("MINIMAL");
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat0.print((Object) quoteMode0, (Appendable) mockPrintWriter0, false);
      Character character0 = new Character('@');
      cSVFormat0.hashCode();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat1.EXCEL.withTrailingDelimiter(false);
      Character character1 = Character.valueOf('?');
      cSVFormat1.withQuote(character1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.getTrim();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.getNullString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("java.lang.Object@0000000002\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003\tjava.lang.Object@0000000004\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003\tjava.lang.Object@0000000005\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003");
      Character character0 = Character.valueOf('t');
      cSVFormat2.POSTGRESQL_CSV.withCommentMarker(character0);
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat1.getHeaderComments();
      cSVFormat1.withQuote('t');
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat2.withHeader((String[]) null);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      cSVFormat4.withHeaderComments((Object[]) null);
      cSVFormat3.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
      cSVFormat1.getNullString();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("");
      Character character0 = Character.valueOf('-');
      cSVFormat3.withCommentMarker(character0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat2.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.getTrim();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments((Object[]) null);
      cSVFormat1.getHeaderComments();
      cSVFormat2.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat2.POSTGRESQL_TEXT.withAllowMissingColumnNames(false);
      Short short0 = new Short((short)5);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      cSVFormat1.equals(cSVFormat_Predefined0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      Character character0 = Character.valueOf('<');
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('<')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat4.withRecordSeparator("ns");
      cSVFormat1.withHeader((String[]) null);
      cSVFormat4.withHeaderComments((Object[]) null);
      cSVFormat3.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('M');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      cSVFormat4.withHeaderComments((Object[]) null);
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("inputStream");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      cSVFormat2.printer();
      cSVFormat2.withSkipHeaderRecord();
      cSVFormat2.withAutoFlush(false);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) resultSet0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat0.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character.valueOf('@');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      PipedWriter pipedWriter0 = new PipedWriter();
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat2.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('P');
      cSVFormat0.MYSQL.withEscape(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      cSVFormat1.isNullStringSet();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat2;
      cSVFormat0.DEFAULT.withHeader((String[]) null);
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat3.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) quoteMode0;
      cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat2.getQuoteMode();
      cSVFormat0.withDelimiter(' ');
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat2.isEscapeCharacterSet();
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat1.getDelimiter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      cSVFormat0.print((Appendable) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = object1;
      objectArray0[4] = object1;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = object1;
      objectArray0[8] = object1;
      cSVFormat0.format(objectArray0);
      cSVFormat0.getNullString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("");
      Character character0 = Character.valueOf('x');
      cSVFormat2.withCommentMarker(character0);
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "='");
      mockFile1.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("6ZxWz");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 6ZxWz
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.getTrim();
      Object object0 = new Object();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("<s2?6nkPG");
      cSVFormat2.withRecordSeparator('%');
      cSVFormat0.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat0.getEscapeCharacter();
      cSVFormat0.printer();
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withTrim(false);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat3.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('z');
      cSVFormat2.withQuote(character0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.toString();
      Character character0 = Character.valueOf('I');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      Character character1 = Character.valueOf('I');
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('I')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.TDF.withNullString(" .kipHeader6ecxrd:");
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      Character character0 = new Character(';');
      Character character1 = new Character(';');
      cSVFormat1.withEscape(character1);
      cSVFormat2.withTrim();
      Short short0 = new Short((short)5);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat3.equals(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat0.withRecordSeparator("url");
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[3] = (Object) rowSetMetaDataImpl0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) rowSetMetaDataImpl0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat4.withHeaderComments(objectArray0);
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat3.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      char[] charArray0 = new char[0];
      CharBuffer.wrap(charArray0);
      cSVFormat0.printer();
      cSVFormat0.withNullString("k'x[Pl");
      cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      cSVFormat2.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "s4 9";
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("qh_Ai>ZVv;U");
      cSVFormat3.withRecordSeparator('\'');
      cSVFormat1.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withRecordSeparator('D');
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      cSVFormat0.getIgnoreEmptyLines();
      cSVFormat1.withHeader((ResultSet) null);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.isEscapeCharacterSet();
      Object[] objectArray0 = new Object[6];
      cSVFormat0.TDF.toString();
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "O&6}r^H2Ma");
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      Character character0 = Character.valueOf('I');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.print((Object) character0, (Appendable) stringWriter0, true);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      cSVFormat0.withDelimiter('H');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charBuffer0;
      cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat2.getSkipHeaderRecord();
      Character character1 = new Character('h');
      cSVFormat0.withCommentMarker(character1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Character character0 = new Character('2');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character0);
      boolean boolean0 = false;
      cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat2.getDelimiter();
      CSVFormat cSVFormat3 = cSVFormat1.withTrim();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "-JDoilB'";
      stringArray0[3] = "-JDoilB'";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        cSVFormat3.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [, , -JDoilB', -JDoilB', ]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines();
      boolean boolean0 = true;
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat2.INFORMIX_UNLOAD.withTrailingDelimiter(true);
      Character character0 = new Character('/');
      CSVFormat cSVFormat3 = cSVFormat1.withQuote(character0);
      Appendable appendable0 = null;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) character0;
      cSVFormat3.RFC4180.withTrailingDelimiter(true);
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat1;
      // Undeclared exception!
      try { 
        cSVFormat0.EXCEL.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('s');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("qh_Ai>ZVv;U");
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('\'');
      cSVFormat3.withTrim(true);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      String string0 = "";
      cSVFormat1.withNullString("");
      String string1 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      MockPrintStream mockPrintStream0 = new MockPrintStream("{Y3.9 aYXzQ3+cM[f,T");
      cSVFormat0.println(mockPrintStream0);
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "q4B^! ]!hlU";
      String string0 = "v2V\"r%/Q5ib!OJ^";
      stringArray0[1] = "v2V\"r%/Q5ib!OJ^";
      stringArray0[2] = "";
      stringArray0[3] = "";
      cSVFormat0.DEFAULT.withDelimiter('r');
      stringArray0[4] = "`vrOu *q5 *t=j>";
      stringArray0[5] = "Lu,};%";
      stringArray0[6] = "(BVM)iM3F";
      String string1 = "sROUU\\!FG:";
      stringArray0[7] = "sROUU!FG:";
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: '' in [q4B^! ]!hlU, v2V\"r%/Q5ib!OJ^, , , `vrOu *q5 *t=j>, Lu,};%, (BVM)iM3F, sROUU!FG:]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CharBuffer charBuffer0 = CharBuffer.allocate(22);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) cSVFormat0, (Appendable) charBuffer0, false);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.RFC4180.print((Object) cSVFormat0, (Appendable) charBuffer0, true);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      cSVFormat0.MYSQL.withTrim(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord();
      CSVFormat cSVFormat6 = cSVFormat5.withTrim(false);
      cSVFormat6.withRecordSeparator("SY~?W+");
      cSVFormat2.getAutoFlush();
      CSVFormat.newFormat('I');
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.isEscapeCharacterSet();
      cSVFormat0.getIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.getAutoFlush();
      cSVFormat0.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('C');
      cSVFormat1.hashCode();
      Character character0 = Character.valueOf('C');
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('C')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      char char0 = '<';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      Character character0 = Character.valueOf('<');
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('<')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape('|');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('|')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('K');
      Character character0 = new Character('K');
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('K')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withRecordSeparator('T');
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      char char0 = '9';
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('9');
      Character character0 = null;
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(5);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(5);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) charBuffer0, 5, 5);
      cSVFormat3.MYSQL.println(charArrayWriter1);
      cSVFormat2.withRecordSeparator('9');
      Character character1 = new Character('9');
      // Undeclared exception!
      try { 
        cSVFormat3.withCommentMarker(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('9')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat1.getNullString();
      String string0 = "t$MI";
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('(');
      cSVFormat0.getAllowMissingColumnNames();
      cSVFormat0.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      char char0 = 'c';
      Character character0 = new Character('c');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      cSVFormat2.withAllowMissingColumnNames();
      boolean boolean0 = false;
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withAllowMissingColumnNames(false);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.toString();
      Character character0 = new Character('t');
      cSVFormat0.POSTGRESQL_CSV.withEscape(character0);
      Character character1 = new Character('t');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character1);
      cSVFormat1.RFC4180.withQuote('}');
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat0.print((Path) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('?');
      cSVFormat2.withQuote(character0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('s');
      Object object0 = new Object();
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      Object object1 = new Object();
      cSVFormat1.getNullString();
      cSVFormat0.withIgnoreHeaderCase();
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character.valueOf('$');
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) fileSystemHandling0;
      cSVFormat1.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat1.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.getNullString();
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withQuote((Character) null);
      cSVFormat0.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('z');
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('!');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(false);
      Character character1 = Character.valueOf('[');
      cSVFormat5.withCommentMarker(character1);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('2');
      cSVFormat0.TDF.withEscape(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.withAllowMissingColumnNames();
      cSVFormat0.withTrim();
      CSVFormat.Predefined.values();
      MockFile mockFile0 = new MockFile("H\"$96UX!<~CSO$n", "nRfD");
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("H\"$96UX!<~CSO$n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // H\"$96UX!<~CSO$n
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      
      cSVFormat0.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      Character character0 = Character.valueOf('k');
      cSVFormat1.INFORMIX_UNLOAD.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withHeader(resultSet0);
      cSVFormat0.RFC4180.withAllowMissingColumnNames(false);
      cSVFormat2.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      // Undeclared exception!
      try { 
        cSVFormat4.POSTGRESQL_TEXT.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withEscape(')');
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat0.equals(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('s');
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\"');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('\"');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      Character character0 = new Character('\"');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      Short short0 = new Short((short)5);
      cSVFormat5.equals(short0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withCommentMarker('{');
      cSVFormat2.INFORMIX_UNLOAD.withIgnoreEmptyLines(true);
      cSVFormat0.getRecordSeparator();
      cSVFormat2.getTrailingDelimiter();
      Character character0 = new Character('{');
      cSVFormat1.withCommentMarker(character0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      cSVFormat0.withHeaderComments(cSVFormat_PredefinedArray0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker('g');
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('g', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      
      cSVFormat1.withHeader((ResultSet) null);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
      cSVFormat2.withCommentMarker('u');
      File file0 = MockFile.createTempFile("6K=&TS7\"s-|T:", "6K=&TS7\"s-|T:");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "FQKNr!p0w*=uL_");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // FQKNr!p0w*=uL_
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("]:+6SDt|X,!Jc:gJsX");
      mockFileWriter0.close();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      try { 
        cSVFormat0.print((Object) "]:+6SDt|X,!Jc:gJsX", (Appendable) mockFileWriter0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Path path0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/!,|<+{pM:N`]4");
      cSVFormat2.MYSQL.print((Object) null, (Appendable) mockPrintWriter0, true);
      Character character0 = new Character(';');
      cSVFormat1.DEFAULT.hashCode();
      cSVFormat1.POSTGRESQL_CSV.withEscape(character0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat2.print((Path) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      char char0 = 'L';
      cSVFormat1.MYSQL.withQuote('L');
      Character character0 = Character.valueOf('L');
      cSVFormat1.withCommentMarker(character0);
      cSVFormat1.isNullStringSet();
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 13;
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withNullString((String) null);
      try { 
        cSVFormat2.TDF.print((Object) null, (Appendable) pipedWriter0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      Object[] objectArray0 = new Object[0];
      cSVFormat0.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_CSV.withIgnoreEmptyLines(true);
      cSVFormat2.RFC4180.format(objectArray0);
      cSVFormat1.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[4];
      cSVFormat0.format(objectArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) cSVFormat1;
      objectArray1[1] = (Object) class0;
      objectArray1[2] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray1[3] = object0;
      objectArray1[4] = (Object) class0;
      objectArray1[5] = (Object) "";
      objectArray1[6] = (Object) cSVFormat2;
      cSVFormat1.format(objectArray1);
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Path path0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("MINIMAL");
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat0.print((Object) quoteMode0, (Appendable) mockPrintWriter0, false);
      Character character0 = new Character('@');
      cSVFormat0.hashCode();
      Character character1 = new Character('~');
      cSVFormat0.withEscape(character1);
      // Undeclared exception!
      try { 
        Charset.forName("MINIMAL");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // MINIMAL
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.getTrim();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.getNullString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("java.lang.Object@0000000002\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003\tjava.lang.Object@0000000004\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003\tjava.lang.Object@0000000005\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003");
      Character character0 = Character.valueOf('t');
      cSVFormat2.POSTGRESQL_CSV.withCommentMarker(character0);
      MockFile mockFile0 = new MockFile("TDF", "Sa9bR5-CakG");
      MockFile mockFile1 = new MockFile(mockFile0, "Sa9bR5-CakG");
      mockFile1.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("java.lang.Object@0000000002\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003\tjava.lang.Object@0000000004\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003\tjava.lang.Object@0000000005\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // java.lang.Object@0000000002\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003\tjava.lang.Object@0000000004\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003\tjava.lang.Object@0000000005\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000003
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[17];
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withHeader((ResultSetMetaData) null);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('^');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("ns");
      PipedWriter pipedWriter0 = new PipedWriter();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) character0;
      try { 
        cSVFormat5.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.getQuoteCharacter();
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.POSTGRESQL_TEXT.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat5 = cSVFormat1.withTrim(false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) rowSetMetaDataImpl0;
      objectArray0[2] = (Object) cSVFormat4;
      cSVFormat5.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat2.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("inputStream");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "inputStream";
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) "inputStream";
      objectArray0[3] = (Object) "inputStream";
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) "inputStream";
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSet) null);
      cSVFormat4.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.INFORMIX_UNLOAD.toString();
      Character character0 = Character.valueOf('I');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withCommentMarker(character0);
      cSVFormat0.RFC4180.withSkipHeaderRecord(false);
      cSVFormat1.getDelimiter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-JDoilB'";
      cSVFormat2.INFORMIX_UNLOAD.withTrim();
      stringArray0[1] = "";
      cSVFormat2.withHeader(stringArray0);
      cSVFormat2.getEscapeCharacter();
      cSVFormat1.printer();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat0.withTrim(false);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      Long long0 = new Long(3990L);
      cSVFormat1.equals(long0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('l');
      cSVFormat1.toString();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) cSVFormat1;
      cSVFormat0.format(objectArray0);
      cSVFormat0.withAllowMissingColumnNames(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withAutoFlush(true);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withTrailingDelimiter();
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withHeaderComments((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[1];
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[5];
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        cSVFormat0.MYSQL.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      cSVFormat0.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[2];
      cSVFormat0.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.printer();
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      Character character0 = Character.valueOf('s');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Object[] objectArray0 = new Object[0];
      cSVFormat1.DEFAULT.printRecord(charArrayWriter0, objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("!\"WpX]mI(6/-");
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);
      CSVFormat cSVFormat4 = cSVFormat3.POSTGRESQL_CSV.withTrailingDelimiter();
      assertTrue(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getAutoFlush());
      
      CSVFormat cSVFormat5 = cSVFormat1.withAllowMissingColumnNames();
      cSVFormat5.DEFAULT.print((Appendable) charArrayWriter0);
      cSVFormat5.TDF.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat6 = cSVFormat5.DEFAULT.withIgnoreEmptyLines(false);
      cSVFormat5.POSTGRESQL_CSV.withAutoFlush(false);
      cSVFormat5.POSTGRESQL_CSV.withQuote(character0);
      CSVFormat cSVFormat7 = cSVFormat6.EXCEL.withDelimiter('E');
      CSVFormat cSVFormat8 = CSVFormat.newFormat('d');
      CSVFormat cSVFormat9 = cSVFormat8.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces();
      CSVFormat.valueOf("InformixUnload");
      CSVFormat cSVFormat10 = cSVFormat9.INFORMIX_UNLOAD.withHeaderComments(objectArray0);
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertFalse(cSVFormat10.equals((Object)cSVFormat9));
      
      CSVFormat cSVFormat11 = cSVFormat8.withTrim(false);
      CSVFormat cSVFormat12 = cSVFormat11.INFORMIX_UNLOAD_CSV.withAllowMissingColumnNames(false);
      assertFalse(cSVFormat11.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat11.getSkipHeaderRecord());
      
      cSVFormat0.getQuoteMode();
      cSVFormat_Predefined0.getFormat();
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      
      cSVFormat7.getTrim();
      assertEquals('E', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getAutoFlush());
      
      cSVFormat0.getQuoteMode();
      assertTrue(cSVFormat0.equals((Object)cSVFormat12));
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote((Character) null);
      char char0 = cSVFormat3.getDelimiter();
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getTrim());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getAutoFlush());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals(',', char0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('n');
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('n', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('[');
      // Undeclared exception!
      try { 
        cSVFormat1.withDelimiter('[');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('[')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('7');
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('7', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.EXCEL.withNullString("aaCVLsU3vK!IN(8");
      Class<QuoteMode> class0 = QuoteMode.class;
      MockFile mockFile0 = new MockFile("C|j]GV$~zMd~EoQRA8g");
      // Undeclared exception!
      try { 
        Charset.forName(" x^oD+UXl:;3z!Zx");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  x^oD+UXl:;3z!Zx
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("\u2028");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.\u2028
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = "AY92chl|.jG8H/x";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("AY92chl|.jG8H/x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.AY92chl|.jG8H/x
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('}');
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('}', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withDelimiter('}');
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "The quoteChar cannot be a line break";
      stringArray0[2] = "Unexpected Quote value: ";
      stringArray0[3] = "NON_NUMERIC";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      cSVFormat5.getCommentMarker();
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.getTrim());
      assertFalse(cSVFormat5.getAutoFlush());
      assertTrue(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertEquals("\\N", cSVFormat5.getNullString());
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertEquals('\t', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getTrailingDelimiter());
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[8];
      stringArray0[0] = " ";
      stringArray0[1] = "epi]-XC\"w@5j@=|^5;>";
      stringArray0[2] = "_oQm+m<";
      stringArray0[3] = "?";
      stringArray0[4] = "";
      stringArray0[5] = "n";
      cSVFormat0.RFC4180.withSkipHeaderRecord(true);
      stringArray0[6] = "Parameter '";
      stringArray0[7] = "n\bwhMnue";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('(');
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(stringArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat5.EXCEL.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('<');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\"');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('\"');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      Character character0 = new Character('\"');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      cSVFormat4.withTrim();
      Character.valueOf('<');
      Character character1 = Character.valueOf('<');
      // Undeclared exception!
      try { 
        cSVFormat2.withQuote(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('<')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('f');
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('f');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('f')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.setColumnCount(8);
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null, null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("path");
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(" SkipHeaderRecord:");
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(" SkipHeaderRecord:", cSVFormat1.getNullString());
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      String string0 = "QKm%x1k&kt[TJcq%~N";
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("QKm%x1k&kt[TJcq%~N");
      cSVFormat2.TDF.withRecordSeparator(" IgnoreHeaderCase:ignored");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      MockFile mockFile0 = new MockFile("QKm%x1k&kt[TJcq%~N", "QKm%x1k&kt[TJcq%~N");
      cSVFormat1.withAllowMissingColumnNames();
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 13, 129);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
}
