/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 06:34:41 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.apache.commons.csv.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withHeader(class0);
      // Undeclared exception!
      try { 
        cSVFormat1.RFC4180.println(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat.valueOf("MySQL");
      PipedReader pipedReader0 = new PipedReader(3621);
      try { 
        cSVFormat1.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.INFORMIX_UNLOAD.withHeaderComments(objectArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      cSVFormat0.TDF.withEscape(' ');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('v');
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      cSVFormat3.getAutoFlush();
      cSVFormat1.getAutoFlush();
      Character character0 = new Character('+');
      cSVFormat3.withQuote(character0);
      cSVFormat3.printer();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      cSVFormat2.POSTGRESQL_CSV.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(':');
      QuoteMode quoteMode1 = QuoteMode.ALL_NON_NULL;
      cSVFormat3.INFORMIX_UNLOAD.withQuoteMode(quoteMode1);
      cSVFormat4.format(objectArray0);
      cSVFormat4.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[22];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat1;
      cSVFormat1.POSTGRESQL_CSV.withRecordSeparator('Q');
      objectArray0[2] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('@');
      cSVFormat1.getCommentMarker();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("org.apache.commons.csv.Lexer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.org.apache.commons.csv.Lexer
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      cSVFormat2.equals(cSVFormat0);
      cSVFormat2.withEscape('(');
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat2.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " _");
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) " _");
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) charBuffer1, (Appendable) charBuffer0, false);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      Character character0 = Character.valueOf(';');
      CSVFormat cSVFormat2 = cSVFormat0.EXCEL.withQuote(character0);
      cSVFormat2.INFORMIX_UNLOAD_CSV.hashCode();
      CSVFormat cSVFormat3 = cSVFormat0.withQuote('.');
      cSVFormat2.withTrim(false);
      cSVFormat3.POSTGRESQL_CSV.withIgnoreHeaderCase();
      cSVFormat1.DEFAULT.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ",,,,,,,,,");
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.allocate(48);
      cSVFormat1.withIgnoreHeaderCase(true);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      cSVFormat1.print((Object) charBuffer1, (Appendable) charBuffer0, false);
      cSVFormat1.withEscape('N');
      cSVFormat0.withEscape('e');
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat0.withQuote('.');
      cSVFormat2.POSTGRESQL_CSV.withIgnoreHeaderCase();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ",,,,,,,,,");
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '1';
      charArray0[3] = '#';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\n");
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) "\n", (Appendable) charBuffer0, true);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('q');
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The delimiter cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object[] objectArray0 = new Object[15];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "+,o[<F4C1+D{BDX)<";
      stringArray0[1] = "*";
      stringArray0[2] = "Sg ;~f-";
      stringArray0[3] = "`7L<@J0iKv}S%#Lw[";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('4');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat1.POSTGRESQL_CSV.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withTrailingDelimiter(true);
      Object[] objectArray1 = new Object[0];
      cSVFormat0.format(objectArray1);
      // Undeclared exception!
      try { 
        cSVFormat3.print((Object) "\"org.apache.commons.csv.CSVFormat@0000000001\",\"org.apache.commons.csv.CSVFormat@0000000001\",\"org.apache.commons.csv.CSVFormat@0000000003\",\"org.apache.commons.csv.CSVFormat@0000000003\"", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.POSTGRESQL_CSV.format(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) "\"org.apache.commons.csv.CSVFormat@0000000002\",,,", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);
      Character character0 = new Character('4');
      cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.withEscape(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.getHeaderComments();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "9";
      stringArray0[1] = "{\"Apiz&";
      stringArray0[2] = "org.apache.commons.csv.CSVFormat$1";
      stringArray0[3] = "";
      stringArray0[4] = "[$-q`io}d/8";
      stringArray0[5] = "FrhAq";
      stringArray0[6] = "E";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('i');
      cSVFormat3.withAllowMissingColumnNames();
      cSVFormat3.format(stringArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat1.format(objectArray0);
      PipedReader pipedReader0 = new PipedReader(40);
      // Undeclared exception!
      try { 
        cSVFormat2.parse(pipedReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat1.withQuote('B');
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-3403)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(resultSet0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[3];
      Character character0 = new Character('3');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.getCommentMarker();
      cSVFormat0.withDelimiter('H');
      MockFile mockFile0 = new MockFile("1C~N6");
      MockFile mockFile1 = new MockFile(mockFile0, "1C~N6");
      mockFile1.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("*");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // *
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("Gy]17{C");
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat5.withDelimiter(' ');
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        cSVFormat1.parse(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('[');
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withHeader((String[]) null);
      Character character0 = new Character('[');
      CSVFormat cSVFormat3 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat4.withHeaderComments((Object[]) null);
      cSVFormat2.withNullString("");
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(true);
      cSVFormat1.withTrim();
      CSVFormat cSVFormat6 = cSVFormat1.withRecordSeparator("org.apache.commons.csv.CSVFormat$1");
      cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat0.withEscape('1');
      cSVFormat6.printer();
      cSVFormat5.withIgnoreSurroundingSpaces(true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.format(objectArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
      // Undeclared exception!
      try { 
        cSVFormat0.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      CSVFormat cSVFormat0 = CSVFormat.valueOf("Excel");
      Character character0 = new Character('=');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.withHeader((ResultSetMetaData) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character.valueOf('4');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("z/ze:l");
      cSVFormat2.equals(cSVFormat0);
      cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat2.print((Object) cSVFormat_Predefined0, (Appendable) stringWriter0, false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object[] objectArray0 = new Object[12];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("/ZzJ,3");
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      cSVFormat4.equals(cSVFormat2);
      cSVFormat1.withSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('J');
      boolean boolean0 = true;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      String[] stringArray0 = new String[3];
      String string0 = "is|~";
      stringArray0[0] = "is|~";
      stringArray0[1] = "(startline ";
      stringArray0[2] = "\n";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      cSVFormat0.MYSQL.withDelimiter('J');
      cSVFormat4.withSkipHeaderRecord(true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "inputStream");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // inputStream
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_TEXT.withAutoFlush(true);
      cSVFormat1.withDelimiter('q');
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat2.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('S');
      cSVFormat3.RFC4180.withTrim();
      cSVFormat3.POSTGRESQL_CSV.withAllowMissingColumnNames();
      cSVFormat2.INFORMIX_UNLOAD.printer();
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(' ');
      cSVFormat3.EXCEL.withEscape(' ');
      cSVFormat4.getIgnoreHeaderCase();
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat5 = cSVFormat3.withQuote('p');
      cSVFormat5.POSTGRESQL_TEXT.withSkipHeaderRecord(false);
      cSVFormat2.getCommentMarker();
      cSVFormat4.withEscape('&');
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.printRecord(pipedWriter0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('5');
      cSVFormat2.withDelimiter(']');
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('i');
      cSVFormat0.INFORMIX_UNLOAD.withQuote(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.POSTGRESQL_TEXT.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withDelimiter('7');
      MockFile.createTempFile("u:'%p+LW&%S0uM Ni", "u:'%p+LW&%S0uM Ni");
      // Undeclared exception!
      try { 
        Charset.forName("u:'%p+LW&%S0uM Ni");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // u:'%p+LW&%S0uM Ni
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = Character.valueOf('4');
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) character0;
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      Character character1 = new Character('4');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character1);
      cSVFormat3.withHeaderComments(objectArray0);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf(" EmptyLines:ignored");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined. EmptyLines:ignored
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('@');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The escape character and the delimiter cannot be the same ('";
      stringArray0[1] = "gRR=7";
      stringArray0[2] = "\u0085";
      stringArray0[3] = "\u2028";
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
      cSVFormat4.withTrailingDelimiter();
      cSVFormat3.equals(cSVFormat4);
      cSVFormat2.withIgnoreHeaderCase();
      cSVFormat2.getAutoFlush();
      cSVFormat4.format(stringArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      cSVFormat1.format(objectArray0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat2.INFORMIX_UNLOAD_CSV.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('~');
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat3;
      objectArray0[5] = (Object) cSVFormat0;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      boolean boolean0 = false;
      cSVFormat3.RFC4180.withSkipHeaderRecord(false);
      cSVFormat4.withTrim(false);
      int int0 = 118;
      StringWriter stringWriter0 = new StringWriter(118);
      MockFile.createTempFile("ytJI", "L");
      // Undeclared exception!
      try { 
        Charset.forName("L");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // L
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = CSVFormat.valueOf("PostgreSQLCsv");
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('X');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) "PostgreSQLCsv";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[8] = object0;
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      cSVFormat1.format(objectArray0);
      Object[] objectArray1 = new Object[26];
      objectArray1[0] = (Object) "||||||||";
      cSVFormat1.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "B";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      cSVFormat3.format(stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B");
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat5 = cSVFormat4.withHeader(stringArray0);
      cSVFormat5.getIgnoreHeaderCase();
      MockFile mockFile0 = new MockFile("\r\n", "tg%=U`r7/1Q");
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('p');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      CSVFormat cSVFormat4 = cSVFormat3.withFirstRecordAsHeader();
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(false);
      cSVFormat5.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat2.withTrim();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.format(objectArray0);
      Object[] objectArray1 = new Object[31];
      objectArray1[0] = (Object) ",,,,,,,,";
      cSVFormat0.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('*');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[1];
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      cSVFormat3.hashCode();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('*');
      cSVFormat2.equals(cSVFormat0);
      Object[] objectArray0 = new Object[1];
      cSVFormat2.format(objectArray0);
      cSVFormat0.getEscapeCharacter();
      cSVFormat2.withCommentMarker((Character) null);
      cSVFormat1.withRecordSeparator("*");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('O');
      cSVFormat2.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.TDF.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      Character character0 = cSVFormat3.getEscapeCharacter();
      // Undeclared exception!
      try { 
        cSVFormat2.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('0')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      Character character0 = Character.valueOf('1');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("4");
      CSVFormat cSVFormat6 = cSVFormat5.withCommentMarker('1');
      CSVFormat.newFormat('0');
      cSVFormat3.isCommentMarkerSet();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      cSVFormat6.POSTGRESQL_TEXT.withHeader(resultSet1);
      cSVFormat6.withAllowMissingColumnNames(true);
      cSVFormat3.printer();
      cSVFormat6.withFirstRecordAsHeader();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat5.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\"');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('E');
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat2.withFirstRecordAsHeader();
      cSVFormat0.equals(cSVFormat1);
      cSVFormat0.format(objectArray0);
      cSVFormat0.getHeaderComments();
      CharBuffer charBuffer0 = CharBuffer.allocate(1571);
      Long long0 = new Long(1571);
      Integer integer0 = new Integer(1571);
      cSVFormat1.print((Object) cSVFormat0, (Appendable) charBuffer0, true);
      cSVFormat2.withRecordSeparator('\"');
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('_');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('E');
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) "9";
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat2;
      cSVFormat5.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat1.withDelimiter(';');
      cSVFormat6.INFORMIX_UNLOAD_CSV.withCommentMarker('-');
      CSVFormat cSVFormat7 = cSVFormat5.EXCEL.withIgnoreEmptyLines(false);
      cSVFormat7.DEFAULT.hashCode();
      CSVFormat cSVFormat8 = cSVFormat4.EXCEL.withAutoFlush(true);
      cSVFormat5.withDelimiter('B');
      cSVFormat8.withTrailingDelimiter(true);
      Character character0 = new Character('B');
      cSVFormat8.withEscape(character0);
      Character character1 = Character.valueOf(';');
      cSVFormat3.withCommentMarker(character1);
      cSVFormat5.withQuote(character1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.getTrim();
      cSVFormat0.getAllowMissingColumnNames();
      Character.valueOf('4');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gR8e,");
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("gR8e,");
      cSVFormat3.toString();
      Object[] objectArray0 = new Object[16];
      objectArray0[0] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<gR8e,> SkipHeaderRecord:true";
      cSVFormat3.format(objectArray0);
      cSVFormat3.format(objectArray0);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<gR8e,> SkipHeaderRecord:true";
      objectArray1[1] = (Object) "Delimiter=<\t> Escape=<\\> NullString=<\\N> RecordSeparator=<gR8e,> SkipHeaderRecord:true\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tN\tNgR8e,";
      cSVFormat3.format(objectArray1);
      cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat2.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.POSTGRESQL_TEXT.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xV}dqJagKT");
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      cSVFormat3.toString();
      Character character0 = new Character('?');
      CSVFormat cSVFormat4 = cSVFormat3.withQuote(character0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVFormat4.format(objectArray0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) cSVFormat3;
      objectArray1[1] = (Object) cSVFormat1;
      objectArray1[2] = (Object) cSVFormat0;
      objectArray1[3] = (Object) character0;
      objectArray1[4] = (Object) cSVFormat4;
      objectArray1[5] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<Delimiter=<\t> Escape=<\"> QuoteChar=<\"> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false> IgnoreHeaderCase:ignored SkipHeaderRecord:false";
      objectArray1[6] = (Object) character0;
      Object object0 = new Object();
      objectArray1[7] = object0;
      cSVFormat4.format(objectArray1);
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();
      cSVFormat5.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.RFC4180.println(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CharBuffer charBuffer0 = CharBuffer.allocate(44);
      Long long0 = new Long((-139L));
      CSVFormat.newFormat('S');
      Integer integer0 = new Integer((-178));
      cSVFormat1.print((Object) integer0, (Appendable) charBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)50;
      byteArray0[8] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('H');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      char char0 = '\'';
      Character character0 = Character.valueOf('\'');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      boolean boolean1 = true;
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator('\'');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) fileSystemHandling0;
      objectArray0[6] = (Object) null;
      cSVFormat3.DEFAULT.format(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat5.withAllowMissingColumnNames();
      cSVFormat4.withQuote('\'');
      // Undeclared exception!
      try { 
        cSVFormat6.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same (''')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('/');
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      cSVFormat1.withQuote(':');
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat3.withTrim();
      cSVFormat2.format(objectArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat3.withIgnoreHeaderCase(true);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.getTrim();
      cSVFormat0.getAllowMissingColumnNames();
      Character.valueOf('=');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = new Character('_');
      cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('_');
      cSVFormat2.withRecordSeparator("0j~a6][v)_9.RMb^9oa");
      cSVFormat1.getHeaderComments();
      CharBuffer charBuffer0 = CharBuffer.allocate(20);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(20);
      Float float0 = new Float((float) 1788);
      // Undeclared exception!
      try { 
        cSVFormat2.print((Object) float0, (Appendable) charBuffer0, false);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(false);
      cSVFormat5.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat5 = cSVFormat4.EXCEL.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[2] = (Object) cSVFormat4;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) null;
      cSVFormat1.INFORMIX_UNLOAD_CSV.format(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat0.withCommentMarker('_');
      cSVFormat4.getHeader();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat6.withQuoteMode(quoteMode0);
      cSVFormat3.getAutoFlush();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("9");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      cSVFormat0.print((Object) cSVFormat_Predefined0, (Appendable) mockPrintWriter0, false);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[1];
      cSVFormat1.INFORMIX_UNLOAD_CSV.withIgnoreHeaderCase();
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat0.print((Object) "' must not be null!", (Appendable) pipedWriter0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Character character0 = Character.valueOf('I');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) null;
      cSVFormat2.INFORMIX_UNLOAD.withHeaderComments(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat6 = cSVFormat5.EXCEL.withIgnoreEmptyLines();
      Object object0 = new Object();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat6.INFORMIX_UNLOAD.print(object0, (Appendable) pipedWriter0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat2;
      Character character0 = Character.valueOf('e');
      cSVFormat2.POSTGRESQL_TEXT.withCommentMarker(character0);
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat2;
      cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat0.printer();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAutoFlush(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('`');
      CSVFormat cSVFormat3 = cSVFormat0.MYSQL.withCommentMarker('`');
      Character character0 = new Character('`');
      CSVFormat cSVFormat4 = cSVFormat2.INFORMIX_UNLOAD_CSV.withQuote(character0);
      CSVFormat cSVFormat5 = cSVFormat2.MYSQL.withTrim(false);
      CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat4;
      cSVFormat2.MYSQL.toString();
      cSVFormat6.format(objectArray0);
      objectArray0[3] = (Object) cSVFormat6;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) cSVFormat4;
      cSVFormat4.format(objectArray0);
      Long long0 = new Long((-707L));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(516);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0, charsetEncoder0);
      cSVFormat1.print((Object) long0, (Appendable) outputStreamWriter0, false);
      CSVFormat cSVFormat7 = cSVFormat6.withRecordSeparator('`');
      cSVFormat7.getHeader();
      cSVFormat6.print((Object) byteArrayOutputStream0, (Appendable) outputStreamWriter0, true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.getTrim();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character.valueOf(')');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Character character0 = Character.valueOf('.');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      cSVFormat1.withRecordSeparator("RR8|,");
      cSVFormat0.getHeaderComments();
      CharBuffer charBuffer0 = CharBuffer.allocate(34);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(1788);
      cSVFormat2.print((Object) charBuffer0, (Appendable) charBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat0.withEscape('`');
      cSVFormat1.withCommentMarker('`');
      Character character0 = new Character('B');
      Character.valueOf('B');
      try { 
        MockURI.URI("QC+JS[v&jk>. 35", "QC+JS[v&jk>. 35", "QC+JS[v&jk>. 35", "QC+JS[v&jk>. 35", "QC+JS[v&jk>. 35");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: QC+JS[v&jk>. 35://QC+JS[v&jk%3E.%2035QC+JS%5Bv&jk%3E.%2035?QC+JS[v&jk%3E.%2035#QC+JS[v&jk%3E.%2035
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames();
      Object object0 = new Object();
      cSVFormat1.format(objectArray0);
      Object[] objectArray1 = new Object[22];
      objectArray1[0] = (Object) "||||||||";
      objectArray1[1] = (Object) "||||||||";
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      QuoteMode quoteMode1 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode1);
      Object[] objectArray2 = new Object[4];
      objectArray2[0] = (Object) quoteMode0;
      objectArray2[1] = (Object) cSVFormat2;
      objectArray2[2] = object0;
      objectArray2[3] = (Object) "||||||||";
      cSVFormat2.format(objectArray2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      char char0 = '\'';
      Character character0 = Character.valueOf('\'');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      boolean boolean1 = false;
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      cSVFormat0.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('\'');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames();
      cSVFormat5.INFORMIX_UNLOAD.withIgnoreHeaderCase();
      // Undeclared exception!
      try { 
        cSVFormat5.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same (''')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat0.TDF.withTrailingDelimiter(true);
      cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.withEscape('9');
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
      cSVFormat3.getTrim();
      cSVFormat0.getAllowMissingColumnNames();
      Character character0 = new Character('9');
      Character character1 = new Character('3');
      CSVFormat cSVFormat5 = cSVFormat2.withEscape('N');
      CSVFormat cSVFormat6 = cSVFormat5.withQuote(character0);
      cSVFormat4.withRecordSeparator('3');
      cSVFormat6.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat3.withTrim();
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat0.withTrailingDelimiter();
      cSVFormat2.format(objectArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.POSTGRESQL_TEXT.toString();
      cSVFormat0.INFORMIX_UNLOAD.withAutoFlush(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('`');
      cSVFormat0.MYSQL.withCommentMarker('t');
      Character character0 = new Character('`');
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withQuote(character0);
      cSVFormat2.MYSQL.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat3;
      cSVFormat2.MYSQL.toString();
      cSVFormat5.format(objectArray0);
      objectArray0[2] = (Object) "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[3] = (Object) cSVFormat5;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) cSVFormat3;
      cSVFormat3.format(objectArray0);
      cSVFormat3.getCommentMarker();
      cSVFormat0.withQuote('`');
      cSVFormat3.getHeaderComments();
      cSVFormat3.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.POSTGRESQL_TEXT.toString();
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAutoFlush(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('`');
      CSVFormat cSVFormat3 = cSVFormat0.MYSQL.withCommentMarker('t');
      Character character0 = new Character('`');
      CSVFormat cSVFormat4 = cSVFormat2.INFORMIX_UNLOAD_CSV.withQuote(character0);
      CSVFormat cSVFormat5 = cSVFormat2.MYSQL.withTrim(false);
      CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord(true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat2.MYSQL.toString();
      cSVFormat6.format(objectArray0);
      objectArray0[2] = (Object) "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      objectArray0[3] = (Object) cSVFormat6;
      objectArray0[4] = (Object) cSVFormat5;
      objectArray0[5] = (Object) cSVFormat4;
      cSVFormat4.format(objectArray0);
      cSVFormat4.getCommentMarker();
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat0.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false";
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat0.print((File) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat.valueOf("RFC4180");
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat2.equals(cSVFormat0);
      cSVFormat0.withTrailingDelimiter(false);
      cSVFormat1.withEscape('9');
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
      cSVFormat0.getAllowMissingColumnNames();
      Character character0 = new Character('9');
      CSVFormat cSVFormat5 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat2.withEscape(character0);
      cSVFormat4.toString();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat4;
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<9> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat5;
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat2.equals(cSVFormat0);
      CSVFormat cSVFormat4 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat1.withEscape('9');
      CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter();
      cSVFormat4.getTrim();
      cSVFormat0.getAllowMissingColumnNames();
      Character character0 = new Character('9');
      CSVFormat cSVFormat6 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat2.withEscape(character0);
      cSVFormat5.toString();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat5;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat5.withQuoteMode(quoteMode0);
      objectArray0[1] = (Object) "Delimiter=<,> QuoteChar=<9> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat6;
      cSVFormat3.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.getTrim();
      cSVFormat0.getAllowMissingColumnNames();
      Character character0 = new Character('4');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("gR8e,");
      cSVFormat2.getHeaderComments();
      CharBuffer charBuffer0 = CharBuffer.allocate(63);
      cSVFormat3.withRecordSeparator("");
      CSVFormat cSVFormat4 = cSVFormat1.withTrim(true);
      cSVFormat4.getHeaderComments();
      CharBuffer.allocate(63);
      Long long0 = new Long(4223L);
      Integer integer0 = new Integer(63);
      cSVFormat2.print((Object) integer0, (Appendable) charBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e_,[{mfx/<^,:~bXb");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "?CFz6U|RW;!s6\"";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "e_,[{mfx/<^,:~bXb";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) cSVFormat1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "?CFz6U|RW;!s6\"", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      cSVFormat1.print((Appendable) mockPrintWriter1);
      cSVFormat0.DEFAULT.hashCode();
      CSVFormat cSVFormat2 = CSVFormat.newFormat('9');
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat4.withQuote('9');
      CSVFormat cSVFormat5 = cSVFormat2.withDelimiter('9');
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = object0;
      objectArray1[1] = (Object) cSVFormat2;
      Object object2 = new Object();
      objectArray1[2] = object2;
      cSVFormat5.format(objectArray1);
      cSVFormat3.format(objectArray1);
      CSVFormat cSVFormat6 = cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat6.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("R.ZC[~`");
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat4.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat2.equals(cSVFormat0);
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat1.withEscape('9');
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
      cSVFormat3.getTrim();
      cSVFormat0.getAllowMissingColumnNames();
      Character character0 = new Character('9');
      CSVFormat cSVFormat5 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat6 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat7 = cSVFormat4.withRecordSeparator("");
      cSVFormat5.getHeaderComments();
      CharBuffer charBuffer0 = CharBuffer.allocate(63);
      Long long0 = new Long(63);
      cSVFormat5.print((Object) "", (Appendable) charBuffer0, false);
      cSVFormat6.withAllowMissingColumnNames(false);
      cSVFormat5.withIgnoreHeaderCase(true);
      cSVFormat7.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.TDF.withRecordSeparator("M}%B>'");
      Character character0 = Character.valueOf('v');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat2.withSkipHeaderRecord(false);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("45B~^S");
      cSVFormat0.getAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat.newFormat('8');
      cSVFormat1.withRecordSeparator("");
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      cSVFormat4.getHeaderComments();
      CharBuffer charBuffer0 = CharBuffer.allocate(92);
      Long long0 = new Long((-4492L));
      Long long1 = new Long(1L);
      cSVFormat2.print((Object) long1, (Appendable) charBuffer0, false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      cSVFormat0.getTrim();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat1.equals(quoteMode0);
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("NullString=<");
      cSVFormat5.getHeaderComments();
      CharBuffer charBuffer0 = CharBuffer.allocate(39);
      Long long0 = new Long(39);
      // Undeclared exception!
      try { 
        cSVFormat5.print((Object) cSVFormat3, (Appendable) charBuffer0, false);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      Character character0 = new Character('[');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat3.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(':');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withIgnoreHeaderCase();
      cSVFormat2.POSTGRESQL_CSV.withHeader(resultSet0);
      cSVFormat1.equals(cSVFormat2);
      File file0 = MockFile.createTempFile("8A]gRIWGrH>", "8A]gRIWGrH>");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat2.print(file0, charset0);
      cSVFormat3.withIgnoreEmptyLines(true);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withIgnoreEmptyLines();
      cSVFormat0.getNullString();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat2.println(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('G');
      cSVFormat0.RFC4180.withSkipHeaderRecord(true);
      Character character0 = new Character('=');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat2 = cSVFormat0.RFC4180.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
      CSVFormat.newFormat('B');
      Character character1 = new Character('.');
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character1);
      cSVFormat5.EXCEL.withTrim();
      cSVFormat5.getHeaderComments();
      cSVFormat2.withTrailingDelimiter(true);
      cSVFormat2.withSkipHeaderRecord(true);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      cSVFormat5.equals(cSVFormat0);
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = cSVFormat4.withEscape('O');
      cSVFormat7.withTrailingDelimiter();
      cSVFormat6.getTrim();
      cSVFormat2.equals(cSVFormat4);
      cSVFormat4.getAllowMissingColumnNames();
      cSVFormat5.withSkipHeaderRecord();
      cSVFormat5.withRecordSeparator("");
      cSVFormat3.getHeaderComments();
      Long long0 = new Long(1115);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('/');
      cSVFormat0.equals(cSVFormat1);
      cSVFormat0.printer();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('c');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
      CSVFormat cSVFormat6 = cSVFormat5.withCommentMarker('|');
      CSVFormat cSVFormat7 = cSVFormat6.withTrim();
      Byte.valueOf((byte) (-73));
      cSVFormat3.equals(cSVFormat7);
      cSVFormat0.withTrailingDelimiter(true);
      cSVFormat6.withEscape('g');
      cSVFormat7.toString();
      CSVFormat cSVFormat8 = cSVFormat4.withQuote('s');
      cSVFormat8.getTrim();
      cSVFormat6.withIgnoreEmptyLines();
      Double double0 = new Double((byte) (-73));
      CSVFormat cSVFormat9 = cSVFormat5.withIgnoreHeaderCase();
      cSVFormat9.getTrailingDelimiter();
      cSVFormat4.getNullString();
      MockFile mockFile0 = new MockFile("");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = 'w';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) '9';
      // Undeclared exception!
      try { 
        cSVFormat0.POSTGRESQL_TEXT.printRecord(charBuffer0, objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[7] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.withSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat4 = cSVFormat2.withTrim();
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreSurroundingSpaces();
      Object object0 = new Object();
      cSVFormat0.toString();
      Object object1 = new Object();
      cSVFormat4.format(objectArray0);
      cSVFormat5.hashCode();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat2.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CEX";
      stringArray0[1] = "^ZKQ[6{)\"GO*&v  k_";
      stringArray0[2] = "";
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withHeader(stringArray0);
      cSVFormat0.TDF.hashCode();
      cSVFormat1.TDF.withTrailingDelimiter(false);
      cSVFormat0.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.getHeader();
      cSVFormat0.withTrailingDelimiter();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat2.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('d');
      Character character0 = Character.valueOf('d');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      // Undeclared exception!
      try { 
        cSVFormat4.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('d')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat3.equals(cSVFormat0);
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.withEscape('9');
      CSVFormat cSVFormat5 = cSVFormat2.withTrailingDelimiter();
      cSVFormat4.getTrim();
      cSVFormat0.equals((Object) null);
      cSVFormat1.getAllowMissingColumnNames();
      Character character0 = new Character('9');
      CSVFormat cSVFormat6 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator("");
      cSVFormat6.getHeaderComments();
      CharBuffer charBuffer0 = CharBuffer.allocate(63);
      Long long0 = new Long(63);
      cSVFormat6.print((Object) "", (Appendable) charBuffer0, false);
      cSVFormat7.withIgnoreSurroundingSpaces(false);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(true);
      cSVFormat1.POSTGRESQL_CSV.withEscape('B');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "26=J*(/.qQNK5r^v$P+");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      rowSetMetaDataImpl0.setColumnCount(1146);
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat1.withQuote('B');
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(87).when(resultSetMetaData0).getColumnCount();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSetMetaData0).getColumnLabel(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      // Undeclared exception!
      try { 
        cSVFormat2.withHeader(resultSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.valueOf("TDF");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("TDF");
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) quoteMode0;
      objectArray0[1] = (Object) cSVFormat0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) quoteMode0;
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat4.withAllowMissingColumnNames();
      cSVFormat2.toString();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char char0 = 'L';
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('L');
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker('L');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('L')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('9');
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat1.withAllowMissingColumnNames(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat6 = cSVFormat0.withEscape('9');
      cSVFormat6.EXCEL.withEscape('9');
      cSVFormat6.equals(cSVFormat5);
      CSVFormat cSVFormat7 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat4.withEscape('9');
      cSVFormat3.withTrailingDelimiter();
      cSVFormat0.withCommentMarker('i');
      cSVFormat0.getTrim();
      Float float0 = new Float(0.0);
      cSVFormat4.toString();
      Object object0 = new Object();
      cSVFormat4.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat.newFormat('c');
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat2.RFC4180.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat0.withTrim();
      Character character0 = Character.valueOf('S');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('9');
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(false);
      cSVFormat5.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat3.equals(cSVFormat0);
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.withEscape('9');
      CSVFormat cSVFormat5 = cSVFormat2.withTrailingDelimiter();
      cSVFormat4.getTrim();
      cSVFormat0.equals((Object) null);
      cSVFormat1.getAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat6.withTrailingDelimiter();
      cSVFormat5.withRecordSeparator("");
      cSVFormat6.getHeaderComments();
      CharBuffer charBuffer0 = CharBuffer.allocate(63);
      Long long0 = new Long(63);
      cSVFormat6.print((Object) "", (Appendable) charBuffer0, false);
      cSVFormat2.withIgnoreHeaderCase();
      cSVFormat4.withHeader((String[]) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.csv.Assertions");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.toString();
      cSVFormat3.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withIgnoreEmptyLines(true);
      String string0 = "Of";
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("Of");
      cSVFormat0.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat4.TDF.withIgnoreHeaderCase();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat2.EXCEL.parse(pipedReader0);
      cSVFormat3.withRecordSeparator('s');
      CSVFormat cSVFormat5 = cSVFormat4.withTrim(false);
      cSVFormat1.DEFAULT.withAllowMissingColumnNames(true);
      cSVFormat5.INFORMIX_UNLOAD_CSV.withRecordSeparator("Parameter '");
      cSVFormat0.withTrailingDelimiter(true);
      cSVFormat3.withIgnoreEmptyLines();
      cSVFormat2.withCommentMarker('s');
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("DbD8{wC];2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.DbD8{wC];2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat1.withIgnoreHeaderCase(false);
      Character.valueOf('_');
      cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('_');
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = CSVFormat.valueOf("InformixUnload");
      cSVFormat2.withNullString("U1MW0XA&.yJ");
      cSVFormat3.withEscape('A');
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat3 = cSVFormat1.withEscape('<');
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
      cSVFormat0.getTrim();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreHeaderCase(false);
      cSVFormat4.equals(cSVFormat5);
      CSVFormat cSVFormat6 = cSVFormat4.withEscape('N');
      cSVFormat6.getAllowMissingColumnNames();
      cSVFormat4.withSkipHeaderRecord();
      CSVFormat cSVFormat7 = cSVFormat3.withDelimiter('b');
      cSVFormat7.withTrailingDelimiter();
      cSVFormat3.withRecordSeparator("");
      CSVFormat cSVFormat8 = cSVFormat6.withFirstRecordAsHeader();
      cSVFormat8.getHeaderComments();
      int int0 = (-1308);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1308));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      Character character0 = Character.valueOf('B');
      cSVFormat2.RFC4180.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      Byte.valueOf((byte) (-73));
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter(' ');
      cSVFormat0.toString();
      Object object0 = new Object();
      cSVFormat4.format(objectArray0);
      cSVFormat3.hashCode();
      cSVFormat5.withSkipHeaderRecord(false);
      cSVFormat3.getIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.withQuote('B');
      cSVFormat0.withTrim();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      Byte byte0 = new Byte((byte) (-73));
      cSVFormat2.withDelimiter(' ');
      cSVFormat0.toString();
      Object object0 = new Object();
      cSVFormat2.format(objectArray0);
      cSVFormat1.hashCode();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      cSVFormat2.withIgnoreSurroundingSpaces();
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter", "qp3qpAh");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append(':');
      cSVFormat2.toString();
      Object object0 = new Object();
      cSVFormat0.printRecord(printStream0, objectArray0);
      Character character0 = new Character(':');
      cSVFormat2.withQuote('z');
      cSVFormat2.isNullStringSet();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('w');
      Character character0 = Character.valueOf('w');
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withCommentMarker(character0);
      MockFile mockFile0 = new MockFile("y40r?/*}=Z!v*n7", "y40r?/*}=Z!v*n7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('`');
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat4.toString();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) printStream0;
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) "Delimiter=<,> Escape=<\"> QuoteChar=<\"> NullString=<> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false";
      objectArray0[7] = (Object) mockPrintStream0;
      cSVFormat3.printRecord(mockPrintStream0, objectArray0);
      cSVFormat2.withQuote('@');
      cSVFormat1.isNullStringSet();
      cSVFormat1.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.toString();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('_');
      cSVFormat1.withEscape(character0);
      cSVFormat1.withAllowMissingColumnNames(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withIgnoreHeaderCase(true);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      Byte.valueOf((byte)106);
      Object object0 = new Object();
      cSVFormat3.hashCode();
      MockFile mockFile0 = new MockFile("8Ax&@pJ_|M ;");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.RFC4180.print((File) mockFile0, charset0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat2.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      Short short0 = new Short((short)239);
      cSVFormat3.equals(short0);
      cSVFormat3.equals(short0);
      cSVFormat2.withTrailingDelimiter(false);
      CSVFormat cSVFormat4 = cSVFormat1.withEscape('1');
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
      cSVFormat0.getTrim();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(stringArray0);
      cSVFormat6.equals(cSVFormat0);
      CSVFormat cSVFormat7 = cSVFormat6.withEscape('4');
      cSVFormat7.getAllowMissingColumnNames();
      CSVFormat cSVFormat8 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat9 = cSVFormat5.withTrailingDelimiter();
      cSVFormat5.withRecordSeparator("");
      cSVFormat2.getHeaderComments();
      CharBuffer charBuffer0 = CharBuffer.allocate(110);
      Long long0 = new Long(110);
      CSVFormat cSVFormat10 = cSVFormat9.withQuote('4');
      cSVFormat10.print((Object) cSVFormat3, (Appendable) charBuffer0, false);
      cSVFormat8.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.RFC4180.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
      Character character0 = Character.valueOf('w');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withCommentMarker(character0);
      MockFile mockFile0 = new MockFile("y40r?/*}=Z!v*n7", "y40r?/*}=Z!v*n7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append('9');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) "y40r?/*}=Z!v*n7";
      objectArray0[2] = (Object) mockFile0;
      Object object0 = new Object();
      cSVFormat1.format(objectArray0);
      cSVFormat2.withIgnoreHeaderCase(false);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      cSVFormat1.print((Appendable) mockPrintStream0);
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = cSVFormat1.withHeaderComments(objectArray1);
      cSVFormat1.toString();
      Object object0 = new Object();
      cSVFormat0.format(objectArray0);
      cSVFormat1.hashCode();
      cSVFormat3.getIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      cSVFormat1.withIgnoreSurroundingSpaces();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      Long long0 = new Long(1508L);
      cSVFormat2.equals(long0);
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("1RTj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.1RTj
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = CSVFormat.POSTGRESQL_TEXT;
      Character character0 = new Character('9');
      cSVFormat3.withCommentMarker(character0);
      MockFile mockFile0 = new MockFile(".ADwN@P[eG", ".ADwN@P[eG");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("y<?&}~sMHVC&k7:@3M");
      PrintStream printStream0 = mockPrintStream1.append(']');
      Object object0 = new Object();
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) printStream0;
      cSVFormat1.printRecord(mockPrintStream2, objectArray0);
      Character character1 = new Character('Z');
      Character character2 = Character.valueOf('q');
      cSVFormat1.withEscape(character2);
      cSVFormat3.isNullStringSet();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.RFC4180.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
      Character character0 = Character.valueOf('w');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withCommentMarker(character0);
      cSVFormat2.withTrailingDelimiter();
      cSVFormat1.getTrim();
      String string0 = "Da";
      try { 
        Long.valueOf("Da", (-1145));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1145 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "R%U|!L@:k7");
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.toString();
      cSVFormat0.withFirstRecordAsHeader();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false";
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getTrailingDelimiter());
      
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Byte.valueOf((byte)2);
      Long long0 = new Long((byte)2);
      cSVFormat1.equals(long0);
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('5');
      boolean boolean0 = false;
      cSVFormat3.withTrailingDelimiter(false);
      cSVFormat0.withEscape('5');
      cSVFormat2.toString();
      cSVFormat2.withTrailingDelimiter();
      cSVFormat2.getTrim();
      CSVFormat cSVFormat4 = cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat4.withIgnoreEmptyLines();
      Double double0 = new Double(0.0);
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat5.getTrailingDelimiter();
      cSVFormat4.getNullString();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('8');
      cSVFormat0.withTrim();
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat3 = cSVFormat0.withHeader((String[]) null);
      cSVFormat3.withHeader(class0);
      cSVFormat2.getQuoteCharacter();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((byte) (-73));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat3.equals(cSVFormat0);
      CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.withEscape('9');
      CSVFormat cSVFormat6 = cSVFormat2.withTrailingDelimiter();
      cSVFormat5.getTrim();
      cSVFormat0.equals((Object) null);
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat4.getQuoteCharacter();
      CSVFormat cSVFormat7 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat7.withTrailingDelimiter();
      cSVFormat3.withEscape((Character) null);
      cSVFormat6.withRecordSeparator("");
      cSVFormat7.getHeaderComments();
      CharBuffer charBuffer0 = CharBuffer.allocate(63);
      Long long0 = new Long(63);
      cSVFormat7.print((Object) "", (Appendable) charBuffer0, false);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.format(objectArray0);
      Object[] objectArray1 = new Object[4];
      objectArray1[3] = (Object) "";
      cSVFormat0.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.RFC4180.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
      Character.valueOf('w');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat4.equals(cSVFormat3);
      CSVFormat cSVFormat5 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat6 = CSVFormat.INFORMIX_UNLOAD_CSV;
      // Undeclared exception!
      try { 
        cSVFormat2.withEscape('w');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('w')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('B');
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat4.withTrailingDelimiter(false);
      CSVFormat cSVFormat5 = cSVFormat4.withEscape('I');
      cSVFormat3.withTrailingDelimiter();
      cSVFormat5.getTrim();
      Integer integer0 = new Integer(1068);
      cSVFormat3.equals(integer0);
      cSVFormat2.getAllowMissingColumnNames();
      Character character0 = cSVFormat2.getQuoteCharacter();
      CSVFormat cSVFormat6 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat3.withTrailingDelimiter();
      cSVFormat6.withEscape(character0);
      cSVFormat6.withRecordSeparator("");
      cSVFormat2.getHeaderComments();
      CharBuffer charBuffer0 = CharBuffer.allocate(1068);
      Long long0 = new Long(1068);
      cSVFormat2.print((Object) long0, (Appendable) charBuffer0, false);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[7] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat1.withQuote('B');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(resultSet0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat5 = cSVFormat3.withTrim();
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreSurroundingSpaces();
      Object object0 = new Object();
      cSVFormat3.toString();
      cSVFormat5.format(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat6.withIgnoreHeaderCase();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('w');
      Character character0 = Character.valueOf('w');
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withCommentMarker(character0);
      MockFile mockFile0 = new MockFile("y40r?/*}=Z!v*n7", "y40r?/*}=Z!v*n7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('9');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) "y40r?/*}=Z!v*n7";
      objectArray0[2] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat2.INFORMIX_UNLOAD.printRecord(printStream0, objectArray0);
      Character character1 = new Character('w');
      cSVFormat2.DEFAULT.withEscape(character1);
      cSVFormat0.isNullStringSet();
      cSVFormat1.withNullString("y40r?/*}=Z!v*n7");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.withTrim();
      Byte.valueOf((byte) (-73));
      Byte byte0 = new Byte((byte) (-73));
      cSVFormat3.equals(byte0);
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(false);
      cSVFormat2.withEscape('L');
      cSVFormat4.withTrailingDelimiter();
      cSVFormat5.getTrim();
      CSVFormat cSVFormat6 = CSVFormat.newFormat('I');
      cSVFormat6.withIgnoreEmptyLines();
      Double double0 = new Double((byte) (-73));
      cSVFormat5.equals(objectArray0[0]);
      cSVFormat1.getTrailingDelimiter();
      cSVFormat6.getNullString();
      MockFile mockFile0 = new MockFile("[>yT ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CharBuffer.allocate(23);
      cSVFormat5.print((Object) null, (Appendable) mockPrintStream0, true);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat3.equals(cSVFormat0);
      CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.withEscape('9');
      cSVFormat2.withTrailingDelimiter();
      cSVFormat5.getTrim();
      cSVFormat0.equals((Object) null);
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat4.getQuoteCharacter();
      cSVFormat3.toString();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) cSVFormat2;
      cSVFormat5.EXCEL.withCommentMarker((Character) null);
      objectArray0[3] = (Object) null;
      Object object1 = new Object();
      objectArray0[4] = object1;
      cSVFormat3.format(objectArray0);
      cSVFormat1.hashCode();
      CSVFormat cSVFormat6 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat6.getIgnoreEmptyLines();
      cSVFormat5.withAllowMissingColumnNames(true);
      cSVFormat4.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('w');
      Character character0 = Character.valueOf('w');
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter(' ');
      cSVFormat0.toString();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) quoteMode0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat4;
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter();
      cSVFormat5.hashCode();
      CSVFormat cSVFormat6 = cSVFormat1.withAutoFlush(true);
      cSVFormat6.getIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat1.withTrim();
      cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat0.equals(cSVFormat2);
      CSVFormat cSVFormat4 = CSVFormat.newFormat('R');
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(true);
      CSVFormat cSVFormat6 = cSVFormat5.withEscape('9');
      CSVFormat cSVFormat7 = cSVFormat1.withTrailingDelimiter();
      cSVFormat5.getTrim();
      cSVFormat7.equals(cSVFormat6);
      CSVFormat cSVFormat8 = cSVFormat1.withSkipHeaderRecord(false);
      cSVFormat8.getAllowMissingColumnNames();
      cSVFormat0.getQuoteCharacter();
      cSVFormat0.withSkipHeaderRecord();
      cSVFormat0.withTrailingDelimiter();
      Character character0 = new Character('4');
      cSVFormat0.withEscape(character0);
      String string0 = "";
      cSVFormat2.withRecordSeparator("'W\"]\"Dx_CC82{7$g'");
      cSVFormat0.getHeaderComments();
      int int0 = 63;
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-3003));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('&');
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\"e&'==6]y=S;", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      cSVFormat0.println(mockPrintStream0);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("\"e&'==6]y=S;");
      QuoteMode quoteMode0 = cSVFormat1.getQuoteMode();
      cSVFormat0.getCommentMarker();
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) quoteMode0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "' in ";
      objectArray0[4] = (Object) mockFileOutputStream0;
      objectArray0[5] = (Object) quoteMode0;
      objectArray0[6] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      cSVFormat1.TDF.format(objectArray0);
      cSVFormat1.withIgnoreHeaderCase(false);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) "z19W/n7R5K9:g5, ", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      cSVFormat0.withQuote('W');
      cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat4 = cSVFormat2.withQuote('W');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat3.withHeader(resultSet0);
      CSVFormat cSVFormat6 = cSVFormat2.withTrim();
      cSVFormat3.withIgnoreSurroundingSpaces();
      Object object0 = new Object();
      CSVFormat cSVFormat7 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat7.toString();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat4;
      Object object2 = new Object();
      objectArray0[1] = object2;
      objectArray0[2] = (Object) cSVFormat6;
      Object object3 = new Object();
      objectArray0[3] = object3;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) resultSet0;
      objectArray0[6] = (Object) cSVFormat5;
      objectArray0[7] = (Object) cSVFormat3;
      CSVFormat cSVFormat8 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat8.format(objectArray0);
      cSVFormat5.hashCode();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat5.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      assertNull(cSVFormat0.getNullString());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "_k*Onp[4a";
      stringArray0[2] = "nZaczav";
      stringArray0[3] = "$AJ~";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      cSVFormat2.POSTGRESQL_TEXT.withFirstRecordAsHeader();
      cSVFormat2.INFORMIX_UNLOAD.withIgnoreEmptyLines();
      cSVFormat2.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat2.getQuoteCharacter();
      cSVFormat3.DEFAULT.withIgnoreEmptyLines();
      cSVFormat3.withRecordSeparator('7');
      CSVFormat cSVFormat4 = cSVFormat2.INFORMIX_UNLOAD.withIgnoreHeaderCase();
      cSVFormat4.MYSQL.withAllowMissingColumnNames(true);
      cSVFormat2.hashCode();
      cSVFormat2.DEFAULT.withTrim(true);
      cSVFormat2.withAutoFlush(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$AJ~");
      cSVFormat2.withIgnoreHeaderCase(true);
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf("?23fPRMLSk-X;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.?23fPRMLSk-X;
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('r');
      cSVFormat1.INFORMIX_UNLOAD_CSV.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = CSVFormat.newFormat(')');
      cSVFormat5.EXCEL.toString();
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat6.INFORMIX_UNLOAD.hashCode();
      Character character0 = cSVFormat6.getCommentMarker();
      Character character1 = cSVFormat2.getEscapeCharacter();
      cSVFormat3.withAllowMissingColumnNames(false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat5;
      objectArray0[1] = (Object) cSVFormat4;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) character1;
      objectArray0[5] = (Object) cSVFormat5;
      objectArray0[6] = (Object) character0;
      objectArray0[7] = (Object) cSVFormat3;
      cSVFormat4.withHeaderComments(objectArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat0.withTrim();
      Byte.valueOf((byte) (-73));
      Object object0 = new Object();
      cSVFormat0.equals(object0);
      CSVFormat cSVFormat3 = cSVFormat1.withTrim();
      cSVFormat0.withTrailingDelimiter(true);
      cSVFormat2.withTrailingDelimiter();
      cSVFormat3.withIgnoreEmptyLines();
      Double double0 = new Double(2020.449753984);
      cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat4.withSkipHeaderRecord();
      cSVFormat3.withTrailingDelimiter();
      cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat5.withNullString("]");
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-281));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      Byte byte0 = Byte.valueOf((byte) (-73));
      cSVFormat4.equals(byte0);
      cSVFormat2.withTrailingDelimiter(true);
      cSVFormat0.withEscape('L');
      CSVFormat cSVFormat5 = cSVFormat3.withTrailingDelimiter();
      cSVFormat0.getTrim();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreEmptyLines();
      Double double0 = new Double((byte) (-73));
      cSVFormat4.withRecordSeparator("*B:JA![^K");
      cSVFormat6.equals(double0);
      cSVFormat6.getTrailingDelimiter();
      cSVFormat4.getNullString();
      MockFile mockFile0 = new MockFile("5K.12i9.FBIX{?~=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CharBuffer charBuffer0 = CharBuffer.allocate('B');
      cSVFormat1.print((Object) charBuffer0, (Appendable) mockPrintStream0, true);
      cSVFormat5.withQuote('V');
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat0.withTrim();
      Byte.valueOf((byte)9);
      CSVFormat cSVFormat4 = cSVFormat2.withSkipHeaderRecord(true);
      Short short0 = new Short((short) (-1203));
      cSVFormat4.equals(short0);
      cSVFormat2.withTrailingDelimiter(false);
      CSVFormat cSVFormat5 = cSVFormat3.withEscape('X');
      CSVFormat cSVFormat6 = cSVFormat5.withTrailingDelimiter();
      cSVFormat0.getTrim();
      cSVFormat0.withIgnoreEmptyLines();
      Double double0 = new Double((short) (-1203));
      cSVFormat6.equals(objectArray0[0]);
      CSVFormat cSVFormat7 = cSVFormat5.withQuote('L');
      cSVFormat7.getTrailingDelimiter();
      cSVFormat6.getNullString();
      MockFile mockFile0 = new MockFile("");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[7] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat1.withQuote('B');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat5 = cSVFormat3.withTrim();
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreSurroundingSpaces();
      Object object0 = new Object();
      cSVFormat3.toString();
      Object object1 = new Object();
      cSVFormat5.format(objectArray0);
      cSVFormat6.hashCode();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat2.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat0.withEscape('_');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat2.equals(cSVFormat1);
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat5 = cSVFormat3.withEscape('_');
      CSVFormat cSVFormat6 = cSVFormat4.withTrailingDelimiter();
      CSVFormat cSVFormat7 = cSVFormat3.withCommentMarker('i');
      cSVFormat7.getTrim();
      Float float0 = new Float(973.5);
      cSVFormat5.equals(float0);
      cSVFormat6.getNullString();
      try { 
        MockFile.createTempFile((String) null, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CharBuffer charBuffer0 = CharBuffer.allocate(100);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      cSVFormat4.equals(cSVFormat1);
      CSVFormat cSVFormat5 = cSVFormat3.withTrailingDelimiter(false);
      CSVFormat cSVFormat6 = cSVFormat5.withEscape('9');
      CSVFormat cSVFormat7 = cSVFormat3.withTrailingDelimiter();
      cSVFormat3.getTrim();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.equals(quoteMode0);
      cSVFormat4.getAllowMissingColumnNames();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 31);
      cSVFormat4.RFC4180.parse(pipedReader0);
      cSVFormat2.getQuoteCharacter();
      cSVFormat6.withSkipHeaderRecord();
      cSVFormat6.withTrailingDelimiter();
      CSVFormat cSVFormat8 = CSVFormat.newFormat('-');
      Character character0 = Character.valueOf('M');
      CSVFormat cSVFormat9 = cSVFormat8.withEscape(character0);
      CSVFormat cSVFormat10 = cSVFormat7.withRecordSeparator("");
      cSVFormat9.getHeaderComments();
      CharBuffer charBuffer0 = CharBuffer.allocate(63);
      Long long0 = new Long(63);
      Integer integer0 = new Integer(63);
      cSVFormat10.print((Object) integer0, (Appendable) charBuffer0, false);
      cSVFormat10.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat2.withTrim();
      cSVFormat2.withTrailingDelimiter();
      cSVFormat0.getTrim();
      cSVFormat2.withIgnoreEmptyLines();
      Double double0 = new Double(1842.4279286819271);
      cSVFormat1.equals(cSVFormat0);
      Character character0 = new Character('_');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      cSVFormat4.getTrailingDelimiter();
      cSVFormat3.getNullString();
      MockFile mockFile0 = new MockFile("[>yT ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CharBuffer charBuffer0 = CharBuffer.allocate(5);
      cSVFormat0.print((Object) null, (Appendable) charBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      char char0 = 'b';
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord();
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVFormat cSVFormat5 = CSVFormat.RFC4180;
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat1.equals(cSVFormat0);
      cSVFormat5.withTrailingDelimiter(false);
      CSVFormat cSVFormat7 = cSVFormat1.withEscape('9');
      cSVFormat6.withTrailingDelimiter();
      cSVFormat3.getTrim();
      Byte byte0 = new Byte((byte) (-120));
      cSVFormat6.equals(byte0);
      CSVFormat cSVFormat8 = cSVFormat3.withTrailingDelimiter(false);
      cSVFormat8.getAllowMissingColumnNames();
      cSVFormat2.getQuoteCharacter();
      cSVFormat8.withSkipHeaderRecord();
      cSVFormat7.withTrailingDelimiter();
      Character character0 = new Character('b');
      cSVFormat6.withEscape(character0);
      String string0 = "8l,WqA";
      cSVFormat0.withRecordSeparator("8l,WqA");
      cSVFormat4.getHeaderComments();
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-742));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.EXCEL.withQuote('=');
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(true);
      cSVFormat2.withTrim();
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat0.withTrailingDelimiter();
      cSVFormat3.getTrim();
      CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines();
      Double double0 = new Double(1790.0);
      CSVFormat cSVFormat6 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat5.withSkipHeaderRecord();
      cSVFormat4.withTrailingDelimiter();
      cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat0.withSkipHeaderRecord(false);
      CharBuffer charBuffer0 = CharBuffer.allocate(35);
      Long long0 = new Long(35);
      Character character0 = new Character('=');
      CSVFormat cSVFormat7 = cSVFormat6.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) cSVFormat7, (Appendable) charBuffer0, false);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      Byte byte0 = Byte.valueOf((byte) (-73));
      cSVFormat4.equals(byte0);
      cSVFormat2.withTrailingDelimiter(true);
      cSVFormat2.withEscape('9');
      cSVFormat4.withTrailingDelimiter();
      cSVFormat3.getTrim();
      cSVFormat0.withIgnoreEmptyLines();
      Double double0 = new Double((byte) (-73));
      CSVFormat cSVFormat5 = CSVFormat.newFormat('{');
      cSVFormat5.equals("");
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat3.withIgnoreHeaderCase(true);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      Byte.valueOf((byte) (-79));
      Double double0 = new Double(1074.0);
      cSVFormat2.equals(double0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat0.withTrailingDelimiter(true);
      cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat5 = cSVFormat3.withTrailingDelimiter(true);
      cSVFormat5.getTrim();
      CSVFormat cSVFormat6 = cSVFormat0.withIgnoreEmptyLines();
      Double double1 = new Double(4126.461121566927);
      CSVFormat cSVFormat7 = cSVFormat4.withAllowMissingColumnNames();
      cSVFormat7.withSkipHeaderRecord();
      cSVFormat3.withTrailingDelimiter();
      cSVFormat2.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat8 = cSVFormat6.withIgnoreSurroundingSpaces();
      String string0 = "RecordSeparator=<";
      cSVFormat8.withRecordSeparator("RecordSeparator=<");
      // Undeclared exception!
      try { 
        CharBuffer.allocate((byte) (-79));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat0.withTrim();
      cSVFormat2.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat0.withEscape('L');
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      CSVFormat.newFormat('B');
      cSVFormat0.equals(cSVFormat3);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat6 = cSVFormat5.withFirstRecordAsHeader();
      cSVFormat6.getTrailingDelimiter();
      cSVFormat4.getNullString();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat0.withNullString("out");
      cSVFormat0.equals(cSVFormat2);
      CSVFormat.Predefined.values();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      Byte.valueOf((byte) (-73));
      cSVFormat4.equals(cSVFormat3);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat6 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat7 = cSVFormat6.withTrim();
      cSVFormat7.withIgnoreSurroundingSpaces();
      Float float0 = new Float((-1.0));
      cSVFormat7.equals(float0);
      cSVFormat5.withTrailingDelimiter(false);
      CSVFormat cSVFormat8 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat9 = cSVFormat5.withEscape('\'');
      CSVFormat cSVFormat10 = cSVFormat9.withTrailingDelimiter();
      cSVFormat3.getTrim();
      cSVFormat5.equals(cSVFormat10);
      cSVFormat4.getNullString();
      File file0 = MockFile.createTempFile("}7F|~~_3+", "N");
      MockFile mockFile0 = new MockFile(file0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      try { 
        Short.valueOf("N", (int) (byte) (-73));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -73 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, false);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat1.withQuote('B');
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat6 = cSVFormat4.withTrim();
      CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat0.equals(cSVFormat7);
      cSVFormat3.withTrailingDelimiter(false);
      CSVFormat cSVFormat8 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat8.withEscape('d');
      cSVFormat8.withTrailingDelimiter();
      cSVFormat6.getTrim();
      cSVFormat6.equals(cSVFormat1);
      cSVFormat1.getNullString();
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.equals(cSVFormat2);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat3.equals(cSVFormat0);
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(false);
      CSVFormat cSVFormat5 = cSVFormat2.withEscape('9');
      MockFile mockFile0 = new MockFile((String) null, "YaT/H6Y&k;DT=4c=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append('k');
      Object object0 = new Object();
      CSVFormat cSVFormat6 = cSVFormat5.withAutoFlush(false);
      Object[] objectArray0 = new Object[3];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) mockFile0;
      cSVFormat6.printRecord(mockPrintStream0, objectArray0);
      cSVFormat0.DEFAULT.withAutoFlush(false);
      Character character0 = new Character('9');
      Character character1 = new Character('{');
      cSVFormat4.withEscape(character1);
      cSVFormat4.isNullStringSet();
      cSVFormat5.withAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      Character character0 = Character.valueOf('V');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      boolean boolean0 = true;
      cSVFormat0.RFC4180.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
      Character character0 = Character.valueOf('w');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withCommentMarker(character0);
      cSVFormat1.getQuoteCharacter();
      cSVFormat2.withSkipHeaderRecord();
      cSVFormat1.withTrailingDelimiter();
      Character character1 = Character.valueOf('w');
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('w')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      Byte.valueOf((byte) (-73));
      cSVFormat4.equals(cSVFormat3);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      CSVFormat cSVFormat6 = CSVFormat.EXCEL;
      cSVFormat0.withTrailingDelimiter();
      cSVFormat3.getTrim();
      CSVFormat cSVFormat7 = cSVFormat5.withIgnoreEmptyLines();
      Double double0 = new Double((byte) (-73));
      CSVFormat cSVFormat8 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat9 = cSVFormat8.withSkipHeaderRecord();
      cSVFormat8.withTrailingDelimiter();
      cSVFormat5.equals(cSVFormat7);
      cSVFormat7.getTrailingDelimiter();
      cSVFormat9.getNullString();
      MockFile mockFile0 = new MockFile("!");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((byte) (-73));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      byte byte0 = (byte) (-73);
      Byte byte1 = Byte.valueOf((byte) (-73));
      cSVFormat4.equals(byte1);
      cSVFormat2.withTrailingDelimiter(true);
      cSVFormat0.withEscape('L');
      CSVFormat cSVFormat5 = cSVFormat3.withTrailingDelimiter();
      cSVFormat0.getTrim();
      cSVFormat5.withIgnoreEmptyLines();
      Double double0 = new Double((byte) (-73));
      CSVFormat cSVFormat6 = cSVFormat2.withAllowMissingColumnNames(false);
      cSVFormat6.withFirstRecordAsHeader();
      // Undeclared exception!
      try { 
        CharBuffer.allocate((byte) (-73));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('_');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      cSVFormat2.TDF.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat5.withRecordSeparator((String) null);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat4.equals((Object) null);
      CSVFormat cSVFormat6 = cSVFormat5.withTrailingDelimiter(true);
      cSVFormat3.withEscape('s');
      CSVFormat cSVFormat7 = CSVFormat.EXCEL;
      cSVFormat6.getTrim();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      cSVFormat0.equals(cSVFormat_Predefined0);
      cSVFormat4.getTrailingDelimiter();
      cSVFormat7.getNullString();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "nsop_0X`'*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat2.hashCode();
      CSVFormat cSVFormat4 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase(false);
      cSVFormat3.withEscape('9');
      CSVFormat cSVFormat6 = cSVFormat1.withTrailingDelimiter();
      cSVFormat6.getTrim();
      cSVFormat2.equals(cSVFormat5);
      cSVFormat6.getAllowMissingColumnNames();
      cSVFormat4.getQuoteCharacter();
      CSVFormat cSVFormat7 = cSVFormat6.withSkipHeaderRecord();
      CSVFormat cSVFormat8 = cSVFormat7.withTrailingDelimiter();
      cSVFormat8.withEscape((Character) null);
      cSVFormat2.withRecordSeparator("v72xzH,#A n");
      cSVFormat5.getHeaderComments();
      CharBuffer charBuffer0 = CharBuffer.allocate(63);
      Long long0 = new Long((-2944L));
      Integer integer0 = new Integer(63);
      cSVFormat4.print((Object) integer0, (Appendable) charBuffer0, false);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withQuote('9');
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      Byte.valueOf((byte) (-73));
      Long long0 = new Long((byte) (-73));
      cSVFormat3.equals(long0);
      boolean boolean0 = false;
      cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat4 = cSVFormat3.withEscape('9');
      CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter();
      cSVFormat5.getTrim();
      cSVFormat1.withIgnoreEmptyLines();
      Double double0 = new Double(56.92);
      CSVFormat cSVFormat6 = cSVFormat4.withIgnoreHeaderCase();
      cSVFormat6.equals((Object) null);
      cSVFormat0.getTrailingDelimiter();
      CSVFormat cSVFormat7 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat7.getNullString();
      MockFile mockFile0 = new MockFile("N");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((byte) (-73));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('B');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.withQuote('V');
      CSVFormat cSVFormat4 = cSVFormat0.withDelimiter('{');
      cSVFormat2.toString();
      Object object0 = new Object();
      cSVFormat4.format(objectArray0);
      cSVFormat4.withQuote('D');
      cSVFormat3.hashCode();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withIgnoreHeaderCase();
      assertTrue(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat3.equals(cSVFormat0);
      CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.withEscape('9');
      CSVFormat cSVFormat6 = cSVFormat2.withTrailingDelimiter();
      cSVFormat5.getTrim();
      cSVFormat0.equals((Object) null);
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat4.getQuoteCharacter();
      CSVFormat cSVFormat7 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat7.withTrailingDelimiter();
      cSVFormat3.withEscape((Character) null);
      cSVFormat6.withRecordSeparator("");
      cSVFormat7.getHeaderComments();
      CharBuffer.allocate(63);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat1.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('B');
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreSurroundingSpaces();
      Byte byte0 = new Byte((byte)16);
      cSVFormat5.equals(byte0);
      CSVFormat cSVFormat6 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat6.withEscape('B');
      CSVFormat cSVFormat7 = cSVFormat6.withTrailingDelimiter();
      cSVFormat0.INFORMIX_UNLOAD.format(objectArray0);
      cSVFormat7.getTrim();
      cSVFormat2.equals(cSVFormat4);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = new Character(':');
      Character character1 = new Character('H');
      Character character2 = new Character('0');
      // Undeclared exception!
      try { 
        cSVFormat1.withDelimiter('B');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('B')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat3.equals(cSVFormat0);
      CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.withEscape('9');
      CSVFormat cSVFormat6 = cSVFormat2.withTrailingDelimiter();
      cSVFormat5.getTrim();
      cSVFormat0.equals((Object) null);
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat4.getQuoteCharacter();
      cSVFormat0.withSkipHeaderRecord();
      cSVFormat6.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = cSVFormat0.withTrim(false);
      cSVFormat7.withCommentMarker('9');
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVFormat1.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      byte byte0 = (byte) (-73);
      Byte.valueOf((byte) (-73));
      cSVFormat4.equals(cSVFormat3);
      CSVFormat cSVFormat5 = cSVFormat4.withTrim();
      cSVFormat5.withTrailingDelimiter(false);
      cSVFormat0.withTrailingDelimiter();
      cSVFormat3.getTrim();
      cSVFormat5.withIgnoreEmptyLines();
      Double double0 = new Double((byte) (-73));
      CSVFormat cSVFormat6 = cSVFormat2.withAllowMissingColumnNames();
      cSVFormat6.withSkipHeaderRecord();
      cSVFormat6.withTrailingDelimiter();
      CSVFormat cSVFormat7 = cSVFormat2.withAllowMissingColumnNames(false);
      cSVFormat7.withRecordSeparator("yL?*!");
      // Undeclared exception!
      try { 
        CharBuffer.allocate((byte) (-73));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat3.equals(cSVFormat0);
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.withEscape('9');
      Character.valueOf('9');
      Character character0 = new Character('');
      CSVFormat cSVFormat5 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat6 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat6.withAllowMissingColumnNames(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.withIgnoreHeaderCase(false);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      Character.valueOf('_');
      CSVFormat cSVFormat3 = cSVFormat0.withEscape('_');
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat3;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat2;
      objectArray0[6] = (Object) cSVFormat4;
      objectArray0[7] = (Object) cSVFormat3;
      cSVFormat1.format(objectArray0);
      cSVFormat3.getTrim();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreHeaderCase(false);
      StringWriter stringWriter0 = new StringWriter(92);
      cSVFormat5.println(stringWriter0);
      cSVFormat3.getQuoteMode();
      cSVFormat4.println(stringWriter0);
      cSVFormat2.getCommentMarker();
      cSVFormat0.withNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('+');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('W');
      cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat1.withAllowMissingColumnNames(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat5.RFC4180.withTrailingDelimiter();
      Class<QuoteMode> class0 = QuoteMode.class;
      cSVFormat3.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      Character.valueOf(')');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(')');
      Character character0 = new Character(')');
      // Undeclared exception!
      try { 
        cSVFormat2.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same (')')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat1 = CSVFormat.newFormat('9');
      cSVFormat1.EXCEL.withIgnoreEmptyLines();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase(false);
      cSVFormat2.withQuote('9');
      cSVFormat1.withDelimiter('9');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('9');
      cSVFormat3.getTrim();
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-417));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('z');
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      Byte.valueOf((byte)124);
      cSVFormat0.equals(cSVFormat2);
      cSVFormat2.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat0.withEscape('z');
      cSVFormat0.withTrailingDelimiter();
      cSVFormat2.getTrim();
      cSVFormat2.withIgnoreEmptyLines();
      Double double0 = new Double((byte)124);
      cSVFormat0.equals(cSVFormat0);
      CSVFormat cSVFormat4 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat4.getTrailingDelimiter();
      cSVFormat3.getNullString();
      MockFile mockFile0 = new MockFile("[>yT ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CharBuffer.allocate(4728);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat1.withQuote('B');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat2.withHeader(resultSet0);
      CSVFormat cSVFormat6 = cSVFormat4.withTrim();
      CSVFormat cSVFormat7 = cSVFormat5.withIgnoreSurroundingSpaces();
      cSVFormat0.equals(cSVFormat7);
      cSVFormat3.withTrailingDelimiter(false);
      CSVFormat cSVFormat8 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat8.withEscape('d');
      cSVFormat8.withTrailingDelimiter();
      cSVFormat6.getTrim();
      cSVFormat6.equals(cSVFormat1);
      cSVFormat1.getNullString();
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat0.withTrim();
      Byte.valueOf((byte) (-73));
      // Undeclared exception!
      try { 
        CSVFormat.Predefined.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat1.withIgnoreHeaderCase(false);
      Character.valueOf('_');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('_');
      CSVFormat cSVFormat3 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(true);
      CSVFormat cSVFormat5 = cSVFormat1.withEscape('u');
      CSVFormat cSVFormat6 = cSVFormat0.withTrailingDelimiter();
      cSVFormat4.getTrim();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      cSVFormat5.equals(cSVFormat_Predefined0);
      cSVFormat2.getAllowMissingColumnNames();
      cSVFormat0.getQuoteCharacter();
      CSVFormat cSVFormat7 = cSVFormat2.withSkipHeaderRecord();
      cSVFormat4.withTrailingDelimiter();
      Character character0 = new Character('(');
      cSVFormat6.withEscape(character0);
      cSVFormat7.withRecordSeparator("&,a>.9^{]vm7");
      cSVFormat5.getHeaderComments();
      CharBuffer charBuffer0 = CharBuffer.allocate(63);
      Long long0 = new Long(63);
      cSVFormat4.print((Object) cSVFormat5, (Appendable) charBuffer0, false);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      cSVFormat0.withTrim();
      cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreSurroundingSpaces();
      Byte byte0 = new Byte((byte)126);
      cSVFormat2.equals(cSVFormat5);
      CSVFormat cSVFormat6 = cSVFormat5.withTrailingDelimiter(false);
      CSVFormat cSVFormat7 = cSVFormat6.withEscape('\\');
      cSVFormat2.withTrailingDelimiter();
      cSVFormat1.format(objectArray0);
      cSVFormat2.getTrim();
      CSVFormat cSVFormat8 = cSVFormat7.withIgnoreEmptyLines();
      cSVFormat8.equals((Object) null);
      Character character0 = new Character('\\');
      Character character1 = new Character('L');
      Character character2 = new Character('O');
      cSVFormat0.withQuote(character0);
      cSVFormat4.withTrailingDelimiter(false);
      cSVFormat8.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreHeaderCase(true);
      char char0 = 'w';
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('w');
      Character character0 = Character.valueOf('w');
      cSVFormat2.EXCEL.withCommentMarker(character0);
      MockFile mockFile0 = new MockFile("y40r?/*}=Z!v*n7", "y40r?/*}=Z!v*n7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append('9');
      cSVFormat1.withAllowMissingColumnNames();
      cSVFormat2.withRecordSeparator("y40r?/*}=Z!v*n7");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char char1 = 'c';
      Character character1 = new Character('c');
      cSVFormat0.withCommentMarker(character0);
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("y40r?/*}=Z!v*n7");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // y40r?/*}=Z!v*n7
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat1.withTrim();
      Byte.valueOf((byte) (-73));
      cSVFormat0.equals(cSVFormat3);
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat5 = cSVFormat1.withEscape('L');
      CSVFormat cSVFormat6 = cSVFormat2.withTrailingDelimiter();
      cSVFormat5.TDF.withSkipHeaderRecord();
      cSVFormat0.getTrim();
      cSVFormat5.withIgnoreEmptyLines();
      Double.valueOf((double) 'L');
      cSVFormat3.equals(cSVFormat4);
      cSVFormat6.getTrailingDelimiter();
      cSVFormat1.getNullString();
      MockFile mockFile0 = new MockFile("5K.12i9.FBIX{?~=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CharBuffer.allocate(34);
      cSVFormat0.print((Object) cSVFormat6, (Appendable) mockPrintStream0, false);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat2.hashCode();
      Character character0 = Character.valueOf('9');
      cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      cSVFormat4.RFC4180.withRecordSeparator("org.apache.commons.csv.Constants");
      cSVFormat0.withTrim();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      char char0 = ')';
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withEscape(character0);
      cSVFormat0.TDF.withCommentMarker(')');
      cSVFormat3.getTrailingDelimiter();
      MockFileWriter mockFileWriter0 = new MockFileWriter("EORECORD");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      CSVFormat cSVFormat5 = cSVFormat0.withAllowMissingColumnNames();
      char char1 = 'v';
      CSVFormat cSVFormat6 = cSVFormat5.withRecordSeparator('v');
      cSVFormat6.withRecordSeparator("out");
      Character character1 = new Character(')');
      // Undeclared exception!
      try { 
        cSVFormat4.withCommentMarker(character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same (')')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = cSVFormat0.getEscapeCharacter();
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat3.equals(cSVFormat0);
      CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.withEscape('9');
      CSVFormat cSVFormat6 = cSVFormat2.withTrailingDelimiter();
      cSVFormat5.getTrim();
      cSVFormat0.equals((Object) null);
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat4.getQuoteCharacter();
      CSVFormat cSVFormat7 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat7.withTrailingDelimiter();
      cSVFormat3.withEscape((Character) null);
      cSVFormat6.withRecordSeparator("");
      cSVFormat7.getHeaderComments();
      CharBuffer charBuffer0 = CharBuffer.allocate(63);
      Long long0 = new Long(63);
      cSVFormat7.print((Object) "", (Appendable) charBuffer0, false);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      cSVFormat0.print((Object) "", (Appendable) charBuffer0, true);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "out");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withEscape(character0);
      cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
      cSVFormat0.TDF.withCommentMarker(')');
      cSVFormat3.getTrailingDelimiter();
      MockFileWriter mockFileWriter0 = new MockFileWriter("EORECORD");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter();
      cSVFormat2.withRecordSeparator("-O;cG_&X_%");
      CSVFormat cSVFormat6 = cSVFormat2.withEscape('=');
      cSVFormat6.getHeaderComments();
      cSVFormat4.isEscapeCharacterSet();
      Character.valueOf('=');
      Character character1 = new Character('h');
      cSVFormat0.withCommentMarker(character1);
      Character character2 = new Character('h');
      CSVFormat cSVFormat7 = cSVFormat4.withCommentMarker(character2);
      cSVFormat7.getIgnoreEmptyLines();
      cSVFormat5.getQuoteMode();
      cSVFormat3.getHeader();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('w');
      Character character0 = Character.valueOf('w');
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withCommentMarker(character0);
      Character.valueOf('.');
      CSVFormat cSVFormat4 = cSVFormat1.withAllowMissingColumnNames(true);
      Character character1 = new Character('w');
      CSVFormat cSVFormat5 = cSVFormat4.withEscape(character1);
      cSVFormat3.withAllowMissingColumnNames(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat5.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.withIgnoreHeaderCase(true);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "out");
      cSVFormat0.withAllowMissingColumnNames();
      Character.valueOf('M');
      Character character0 = Character.valueOf('m');
      cSVFormat0.withQuote(character0);
      Character character1 = Character.valueOf('9');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat3.withCommentMarker('m');
      cSVFormat1.getTrailingDelimiter();
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = CSVFormat.newFormat('z');
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('t');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat6 = cSVFormat5.withTrim();
      CSVFormat cSVFormat7 = cSVFormat4.withIgnoreSurroundingSpaces();
      cSVFormat7.equals(cSVFormat4);
      cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat8 = cSVFormat1.withEscape('z');
      cSVFormat5.withTrailingDelimiter();
      cSVFormat8.getTrim();
      cSVFormat1.equals(cSVFormat8);
      cSVFormat5.getTrailingDelimiter();
      cSVFormat6.getNullString();
      String string0 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('4');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      cSVFormat2.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      cSVFormat0.withTrim();
      cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withAutoFlush(true);
      Byte byte0 = Byte.valueOf((byte) (-73));
      cSVFormat2.equals(byte0);
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.withIgnoreHeaderCase(false);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      cSVFormat4.INFORMIX_UNLOAD_CSV.withAutoFlush(true);
      Byte byte0 = Byte.valueOf((byte) (-73));
      cSVFormat4.equals(byte0);
      CSVFormat cSVFormat5 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat3.withNullString("YP");
      cSVFormat0.withAutoFlush(true);
      cSVFormat5.format(objectArray0);
      Character character0 = new Character('.');
      CSVFormat cSVFormat7 = cSVFormat5.withQuote(character0);
      cSVFormat7.TDF.withIgnoreHeaderCase(true);
      cSVFormat1.getDelimiter();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat6.withAllowMissingColumnNames(true);
      cSVFormat5.withIgnoreSurroundingSpaces();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = CSVFormat.newFormat('9');
      cSVFormat2.EXCEL.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('9');
      cSVFormat2.withDelimiter('9');
      cSVFormat1.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:true";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) cSVFormat4;
      objectArray0[7] = (Object) cSVFormat4;
      objectArray0[8] = (Object) cSVFormat3;
      cSVFormat0.format(objectArray0);
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "_<haJ]9";
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(' ');
      cSVFormat1.toString();
      Object object0 = new Object();
      cSVFormat1.format(stringArray0);
      cSVFormat1.hashCode();
      cSVFormat0.getIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.TDF.withTrim();
      PipedReader pipedReader0 = new PipedReader(65534);
      cSVFormat2.POSTGRESQL_CSV.parse(pipedReader0);
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat3.toString();
      CSVFormat cSVFormat4 = cSVFormat0.withNullString("");
      cSVFormat3.getSkipHeaderRecord();
      cSVFormat4.getAutoFlush();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.EXCEL.withHeader(resultSet0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      char char0 = '~';
      Character character0 = new Character('~');
      cSVFormat1.RFC4180.withTrim(true);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.MYSQL.withFirstRecordAsHeader();
      // Undeclared exception!
      try { 
        cSVFormat3.POSTGRESQL_TEXT.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('.');
      Character character0 = new Character('.');
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('.')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat3.withCommentMarker(',');
      cSVFormat3.getTrailingDelimiter();
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.DEFAULT.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames();
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVFormat0.EXCEL.format(objectArray0);
      cSVFormat1.RFC4180.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat2.RFC4180.withTrailingDelimiter(true);
      CSVFormat cSVFormat5 = cSVFormat3.MYSQL.withAllowMissingColumnNames();
      CSVFormat cSVFormat6 = cSVFormat5.MYSQL.withTrailingDelimiter();
      cSVFormat6.DEFAULT.withIgnoreEmptyLines();
      cSVFormat2.TDF.withFirstRecordAsHeader();
      Character character0 = new Character('=');
      Character character1 = new Character('0');
      Character character2 = Character.valueOf('0');
      cSVFormat4.withQuote(character2);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      char char0 = 'U';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('U');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.MYSQL.withHeader((String[]) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter("EORECORD");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      Object object0 = new Object();
      cSVFormat2.print((Appendable) mockFileWriter0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('t');
      cSVFormat3.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("");
      mockFile0.toPath();
      // Undeclared exception!
      try { 
        Charset.forName("EORECORD");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // EORECORD
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('B');
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreSurroundingSpaces();
      Byte byte0 = new Byte((byte)16);
      cSVFormat5.equals(byte0);
      CSVFormat cSVFormat6 = cSVFormat2.withTrailingDelimiter(false);
      cSVFormat6.withEscape('B');
      CSVFormat cSVFormat7 = cSVFormat6.withTrailingDelimiter();
      cSVFormat0.INFORMIX_UNLOAD.format(objectArray0);
      cSVFormat7.getTrim();
      cSVFormat2.equals(cSVFormat4);
      cSVFormat1.getTrailingDelimiter();
      Character character0 = new Character(':');
      Character character1 = new Character('H');
      Character character2 = new Character('0');
      CSVFormat cSVFormat8 = cSVFormat6.withQuote(character2);
      cSVFormat8.withTrailingDelimiter(false);
      cSVFormat4.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('_');
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat1.equals(cSVFormat3);
      cSVFormat2.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat2.withEscape('_');
      CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat6 = cSVFormat4.withCommentMarker('Q');
      cSVFormat6.getTrim();
      Float float0 = new Float((-1970.5575523062655));
      cSVFormat4.equals(cSVFormat2);
      cSVFormat5.getNullString();
      try { 
        MockFile.createTempFile("", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      Byte byte0 = Byte.valueOf((byte) (-73));
      cSVFormat3.equals(cSVFormat2);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVFormat cSVFormat5 = cSVFormat4.withTrailingDelimiter(false);
      CSVFormat cSVFormat6 = cSVFormat2.withEscape('L');
      cSVFormat0.withTrailingDelimiter();
      cSVFormat2.getTrim();
      cSVFormat4.withIgnoreEmptyLines();
      Double double0 = new Double((byte) (-73));
      cSVFormat6.equals(byte0);
      cSVFormat5.getTrailingDelimiter();
      cSVFormat5.getNullString();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      String string0 = "out";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "out");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      Character.valueOf('N');
      Character character0 = new Character('V');
      cSVFormat0.withQuote(character0);
      Character character1 = Character.valueOf(')');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character1);
      cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat1.withCommentMarker(')');
      cSVFormat3.getTrailingDelimiter();
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('=');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('`');
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("");
      cSVFormat3.withDelimiter('X');
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker('X');
      cSVFormat4.toString();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('x');
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      Character character0 = new Character('Y');
      cSVFormat3.toString();
      cSVFormat3.getAllowMissingColumnNames();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreEmptyLines(true);
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.toString();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withIgnoreHeaderCase(true);
      char char0 = 'w';
      char char1 = 'K';
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('K');
      Character character0 = Character.valueOf('K');
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('K')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('[');
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withHeader((String[]) null);
      cSVFormat1.withEscape((Character) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat_Predefined0;
      objectArray0[1] = (Object) cSVFormat_Predefined0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) cSVFormat_Predefined0;
      objectArray0[7] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[8] = object0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat2.withNullString((String) null);
      cSVFormat4.POSTGRESQL_TEXT.withRecordSeparator((String) null);
      cSVFormat3.withAutoFlush(true);
      CSVFormat cSVFormat5 = cSVFormat1.withTrim();
      cSVFormat5.withRecordSeparator((String) null);
      cSVFormat0.withSkipHeaderRecord(true);
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape('[');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('[')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "out");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      cSVFormat3.TDF.withEscape(character0);
      cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat0.TDF.withCommentMarker(')');
      cSVFormat3.getTrailingDelimiter();
      MockFileWriter mockFileWriter0 = new MockFileWriter("EORECORD");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "";
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat1;
      cSVFormat4.println(mockFileWriter0);
      cSVFormat4.getQuoteMode();
      cSVFormat4.println(mockFileWriter0);
      cSVFormat1.getCommentMarker();
      cSVFormat2.withNullString("Header:");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) null, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Character character0 = new Character('/');
      CSVFormat cSVFormat0 = CSVFormat.newFormat('/');
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('/')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      char char0 = 'N';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('N');
      Character character0 = Character.valueOf('N');
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('N')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      cSVFormat4.INFORMIX_UNLOAD_CSV.withAutoFlush(true);
      Byte byte0 = Byte.valueOf((byte) (-73));
      cSVFormat4.equals(byte0);
      CSVFormat cSVFormat5 = cSVFormat2.withHeaderComments(objectArray0);
      cSVFormat3.withNullString("YP");
      cSVFormat0.withAutoFlush(true);
      cSVFormat5.format(objectArray0);
      Character character0 = new Character('.');
      cSVFormat5.withQuote(character0);
      cSVFormat1.getDelimiter();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat3.withQuoteMode(quoteMode0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('N');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = object0;
      objectArray0[7] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      Character.valueOf('N');
      cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter();
      cSVFormat3.withIgnoreEmptyLines();
      CSVFormat cSVFormat5 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat5.isQuoteCharacterSet();
      cSVFormat4.getCommentMarker();
      cSVFormat3.getRecordSeparator();
      cSVFormat3.getIgnoreHeaderCase();
      CSVFormat cSVFormat6 = cSVFormat2.withTrailingDelimiter(true);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat6.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = Character.valueOf('B');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('3');
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat0.POSTGRESQL_CSV.withAllowMissingColumnNames();
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withTrim();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat0.INFORMIX_UNLOAD.withHeader(resultSet0);
      cSVFormat0.withCommentMarker('Q');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('Q');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat3.hashCode();
      cSVFormat2.withEscape('w');
      cSVFormat2.withAllowMissingColumnNames();
      cSVFormat3.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) "\fQIvH<\u0012^=V", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) "\n", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      cSVFormat0.print((Object) "\fQIvH<\u0012^=V", (Appendable) charArrayWriter0, true);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[9];
      cSVFormat0.format(objectArray0);
      Object[] objectArray1 = new Object[3];
      objectArray1[1] = (Object) "N\tN\tN\tN\tN\tN\tN\tN\tN";
      cSVFormat0.format(objectArray1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      cSVFormat4.INFORMIX_UNLOAD_CSV.hashCode();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat2;
      CSVFormat cSVFormat5 = cSVFormat3.MYSQL.withAutoFlush(true);
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat4;
      CSVFormat cSVFormat6 = cSVFormat1.RFC4180.withIgnoreHeaderCase(true);
      cSVFormat6.EXCEL.format(objectArray0);
      Object object0 = new Object();
      objectArray0[6] = object0;
      cSVFormat4.format(objectArray0);
      CSVFormat cSVFormat7 = cSVFormat4.POSTGRESQL_CSV.withTrailingDelimiter();
      CSVFormat cSVFormat8 = cSVFormat3.EXCEL.withAllowMissingColumnNames();
      CSVFormat cSVFormat9 = cSVFormat6.withRecordSeparator("f8+9)}_3_%(lRn+=OgT");
      cSVFormat8.withRecordSeparator("The comment start character and the delimiter cannot be the same ('");
      cSVFormat5.getHeaderComments();
      cSVFormat9.isEscapeCharacterSet();
      Character.valueOf('K');
      Character character0 = Character.valueOf('K');
      cSVFormat9.withCommentMarker(character0);
      cSVFormat7.getIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        QuoteMode.valueOf("The comment start character and the delimiter cannot be the same ('");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.QuoteMode.The comment start character and the delimiter cannot be the same ('
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('=');
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('_');
      Character character0 = new Character('F');
      Character character1 = new Character('\\');
      CSVFormat cSVFormat4 = cSVFormat1.withQuote(character1);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('0');
      CSVFormat cSVFormat6 = cSVFormat4.withEscape('\\');
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat6.withHeader(resultSet0);
      cSVFormat5.getDelimiter();
      cSVFormat2.withTrailingDelimiter(false);
      cSVFormat2.withIgnoreSurroundingSpaces();
      cSVFormat3.withIgnoreEmptyLines(true);
      cSVFormat5.withAllowMissingColumnNames(false);
      cSVFormat1.isNullStringSet();
      Character character2 = Character.valueOf('[');
      cSVFormat5.withEscape(character2);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.getTrim();
      cSVFormat0.getAllowMissingColumnNames();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.withRecordSeparator("gR8e,");
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat3.equals(cSVFormat0);
      CSVFormat cSVFormat5 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.withEscape('9');
      CSVFormat cSVFormat6 = cSVFormat2.withTrailingDelimiter();
      cSVFormat5.getTrim();
      cSVFormat0.equals((Object) null);
      cSVFormat1.getAllowMissingColumnNames();
      cSVFormat4.getQuoteCharacter();
      CSVFormat cSVFormat7 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat7.withTrailingDelimiter();
      cSVFormat3.withEscape((Character) null);
      CSVFormat cSVFormat8 = cSVFormat6.withRecordSeparator("");
      cSVFormat7.getHeaderComments();
      cSVFormat3.isEscapeCharacterSet();
      Character character0 = Character.valueOf('9');
      CSVFormat cSVFormat9 = cSVFormat1.withCommentMarker(character0);
      cSVFormat9.getIgnoreEmptyLines();
      cSVFormat1.getQuoteMode();
      cSVFormat8.getHeader();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat3.equals(cSVFormat0);
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.withEscape('9');
      cSVFormat2.withTrailingDelimiter();
      cSVFormat4.getTrim();
      cSVFormat0.equals((Object) null);
      cSVFormat1.getTrailingDelimiter();
      Character character0 = new Character(':');
      Character character1 = new Character('9');
      cSVFormat3.withQuote(character1);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
          CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
          CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('[');
          cSVFormat0.DEFAULT.withHeader((String[]) null);
          CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_CSV.withCommentMarker('F');
          Character character0 = new Character('F');
          CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withQuote(character0);
          RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
          ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
          doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
          cSVFormat1.TDF.withCommentMarker('F');
          cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
          cSVFormat1.getDelimiter();
          CSVFormat cSVFormat4 = cSVFormat3.TDF.withTrailingDelimiter(false);
          cSVFormat2.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces();
          boolean boolean0 = true;
          cSVFormat4.EXCEL.withIgnoreEmptyLines(true);
          cSVFormat0.withIgnoreSurroundingSpaces(false);
          URI uRI0 = MockURI.aFileURI;
          MockFile mockFile0 = new MockFile(uRI0);
          MockFile mockFile1 = new MockFile(mockFile0, "f\fL0R+qL jLB");
          cSVFormat4.withDelimiter('2');
          Path path0 = mockFile1.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat2.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/tmp/foo.bar/f\fL0R+qL jLB\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.GeneratedMethodAccessor275.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat0.POSTGRESQL_CSV.withAllowMissingColumnNames();
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withTrim();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.INFORMIX_UNLOAD.withHeader(resultSet0);
      cSVFormat2.INFORMIX_UNLOAD.withTrim(true);
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter();
      cSVFormat3.printer();
      CSVFormat cSVFormat4 = cSVFormat3.MYSQL.withTrim();
      cSVFormat3.getDelimiter();
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001", "org.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001");
      cSVFormat4.withAllowMissingColumnNames(true);
      cSVFormat1.isNullStringSet();
      Character character0 = Character.valueOf('n');
      cSVFormat2.withEscape(character0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "org.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreHeaderCase(true);
      cSVFormat2.hashCode();
      CSVFormat cSVFormat4 = cSVFormat1.withAutoFlush(true);
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreHeaderCase(false);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      cSVFormat0.format(objectArray0);
      Object object2 = new Object();
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat5.withTrailingDelimiter();
      cSVFormat1.withAllowMissingColumnNames();
      cSVFormat6.withRecordSeparator("java.lang.Object@0000000007\tjava.lang.Object@0000000008");
      Character character0 = new Character('W');
      cSVFormat6.withCommentMarker(character0);
      cSVFormat3.getTrim();
      Character character1 = new Character('W');
      Character character2 = Character.valueOf('W');
      CSVFormat cSVFormat7 = cSVFormat6.withCommentMarker(character2);
      cSVFormat0.getHeader();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat4.parse(pipedReader0);
      cSVFormat7.getRecordSeparator();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat4.equals((Object) null);
      CSVFormat cSVFormat6 = cSVFormat5.withTrailingDelimiter(true);
      cSVFormat3.withEscape('s');
      CSVFormat cSVFormat7 = cSVFormat1.withTrailingDelimiter();
      cSVFormat6.getTrim();
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      cSVFormat0.equals(cSVFormat_Predefined0);
      cSVFormat4.getTrailingDelimiter();
      cSVFormat7.getNullString();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "nsop_0X`'*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      cSVFormat0.POSTGRESQL_CSV.withCommentMarker('8');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("jm 2r`-'o]4~siGg%f");
      char char0 = 'd';
      Character character0 = new Character('d');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker(character0);
      CSVFormat cSVFormat6 = cSVFormat5.INFORMIX_UNLOAD.withDelimiter('d');
      cSVFormat6.POSTGRESQL_TEXT.withHeader((ResultSet) null);
      cSVFormat2.withHeader((ResultSet) null);
      cSVFormat2.isEscapeCharacterSet();
      cSVFormat4.getQuoteCharacter();
      MockFile mockFile0 = new MockFile("acNN2krPO:DL\"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat2.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("");
      cSVFormat1.withAutoFlush(true);
      cSVFormat1.withRecordSeparator("");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      cSVFormat3.withEscape('{');
      CSVFormat.newFormat('{');
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CharBuffer charBuffer0 = CharBuffer.allocate(113);
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat0.withTrim();
      Byte byte0 = Byte.valueOf((byte) (-73));
      cSVFormat4.equals(byte0);
      cSVFormat2.withTrailingDelimiter(true);
      cSVFormat0.withEscape('L');
      CSVFormat cSVFormat5 = cSVFormat3.withTrailingDelimiter();
      cSVFormat0.getTrim();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreEmptyLines();
      Double double0 = new Double((byte) (-73));
      cSVFormat6.equals(double0);
      cSVFormat6.getTrailingDelimiter();
      cSVFormat4.getNullString();
      File file0 = MockFile.createTempFile("[>yT ", "5K.12i9.FBIX{?~=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      CharBuffer charBuffer0 = CharBuffer.allocate('B');
      cSVFormat1.print((Object) charBuffer0, (Appendable) mockPrintStream0, true);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('U');
      cSVFormat0.TDF.withSkipHeaderRecord();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);
      Appendable appendable0 = null;
      Object[] objectArray0 = new Object[4];
      cSVFormat2.INFORMIX_UNLOAD_CSV.withIgnoreHeaderCase(true);
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.MYSQL.withHeader((String[]) null);
      objectArray0[3] = (Object) cSVFormat2;
      // Undeclared exception!
      try { 
        cSVFormat2.RFC4180.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start marker character cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD_CSV.withTrim();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.INFORMIX_UNLOAD.withHeader(resultSet0);
      cSVFormat3.INFORMIX_UNLOAD.withTrim(true);
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat0.withTrailingDelimiter();
      cSVFormat4.printer();
      cSVFormat4.MYSQL.withTrim();
      cSVFormat4.getDelimiter();
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001", "org.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001");
      cSVFormat3.MYSQL.withIgnoreSurroundingSpaces(true);
      MockFile mockFile1 = new MockFile(mockFile0, "f\fL0R+qL jLB");
      cSVFormat0.INFORMIX_UNLOAD_CSV.withDelimiter('s');
      mockFile1.toPath();
      Charset.defaultCharset();
      cSVFormat1.printer();
      CSVFormat cSVFormat5 = cSVFormat0.withAllowMissingColumnNames(true);
      cSVFormat5.INFORMIX_UNLOAD.printer();
      cSVFormat2.withIgnoreHeaderCase(true);
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('s');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('s')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withIgnoreEmptyLines();
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      String[] stringArray0 = new String[2];
      stringArray0[1] = stringArray0[0];
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('N');
      cSVFormat0.withQuote('`');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("_+;R.99,+3!qS");
      CSVFormat cSVFormat2 = cSVFormat0.withSkipHeaderRecord(true);
      Class<Token.Type> class0 = Token.Type.class;
      cSVFormat2.TDF.withHeader(class0);
      cSVFormat1.withEscape('`');
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat3.equals(cSVFormat0);
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.withEscape('9');
      cSVFormat2.withTrailingDelimiter(true);
      cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat4.withAllowMissingColumnNames(true);
      cSVFormat5.isNullStringSet();
      Character character0 = new Character('9');
      CSVFormat cSVFormat6 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "4-`<R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('[');
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withHeader((String[]) null);
      CSVFormat cSVFormat3 = cSVFormat1.POSTGRESQL_CSV.withCommentMarker('F');
      Character character0 = new Character('F');
      cSVFormat3.DEFAULT.withQuote(character0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      cSVFormat1.TDF.withCommentMarker('F');
      cSVFormat3.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
      cSVFormat1.getDelimiter();
      cSVFormat2.withTrailingDelimiter();
      cSVFormat3.getTrim();
      Object object0 = null;
      cSVFormat2.equals(",F;6ZXqL#8.);xF'u|");
      cSVFormat3.getTrailingDelimiter();
      cSVFormat1.getNullString();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('U');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat0.MYSQL.withHeader((String[]) null);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      String string0 = "";
      Object object0 = new Object();
      mockPrintWriter0.printf("", (Object[]) null);
      cSVFormat2.EXCEL.withRecordSeparator('U');
      // Undeclared exception!
      try { 
        cSVFormat1.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('[');
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withHeader((String[]) null);
      CSVFormat cSVFormat3 = cSVFormat1.withEscape((Character) null);
      cSVFormat3.withHeaderComments((Object[]) null);
      cSVFormat1.withNullString("&M1jst6m/n");
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
      CSVFormat cSVFormat5 = cSVFormat1.withTrim();
      cSVFormat5.withRecordSeparator("&M1jst6m/n");
      cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat4.withEscape('F');
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('X');
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      // Undeclared exception!
      try { 
        cSVFormat1.print((Object) cSVFormat0, (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat0.POSTGRESQL_CSV.withAllowMissingColumnNames();
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.INFORMIX_UNLOAD_CSV.withTrim();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.INFORMIX_UNLOAD.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.INFORMIX_UNLOAD.withTrim(true);
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat0.withTrailingDelimiter();
      cSVFormat4.printer();
      cSVFormat4.MYSQL.withTrim();
      cSVFormat4.getDelimiter();
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001", "org.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Long long0 = new Long(820L);
      cSVFormat3.print((Object) long0, (Appendable) mockPrintStream0, true);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      Object[] objectArray0 = new Object[12];
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
          CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('G');
          CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
          MockFile mockFile0 = new MockFile("acNN2krPO:DL\"");
          cSVFormat1.withIgnoreSurroundingSpaces(false);
          MockFile mockFile1 = new MockFile(mockFile0, " #fdG{`1nvmc}]@");
          cSVFormat2.withDelimiter('G');
          Path path0 = mockFile0.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat1.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"acNN2krPO:DL\"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.GeneratedMethodAccessor275.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      cSVFormat3.INFORMIX_UNLOAD_CSV.hashCode();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      cSVFormat2.MYSQL.withAutoFlush(true);
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat3;
      CSVFormat cSVFormat4 = cSVFormat1.RFC4180.withIgnoreHeaderCase(true);
      cSVFormat4.EXCEL.format(objectArray0);
      Object object0 = new Object();
      objectArray0[6] = object0;
      cSVFormat3.format(objectArray0);
      cSVFormat3.POSTGRESQL_CSV.withTrailingDelimiter();
      cSVFormat2.EXCEL.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("f8+9)}_3_%(lRn+=OgT");
      Character character0 = new Character('W');
      cSVFormat3.withCommentMarker(character0);
      cSVFormat5.getTrim();
      Character character1 = new Character('W');
      cSVFormat4.withCommentMarker(character1);
      cSVFormat0.getHeader();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.parse(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('3');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("");
      cSVFormat4.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      // Undeclared exception!
      try { 
        cSVFormat1.printRecord((Appendable) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("The comment start character and the delimiter cannot be the same ('");
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat1.EXCEL.withDelimiter('.');
      CSVFormat.newFormat('&');
      CSVFormat cSVFormat5 = cSVFormat3.withRecordSeparator("The comment start character and the delimiter cannot be the same ('");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat0;
      cSVFormat1.EXCEL.format(objectArray0);
      CSVFormat cSVFormat6 = cSVFormat5.withTrim(true);
      cSVFormat6.withEscape('G');
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      cSVFormat6.DEFAULT.parse(pipedReader0);
      cSVFormat0.TDF.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator("} a");
      cSVFormat6.withAutoFlush(true);
      CSVFormat.Predefined.values();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat7.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat4.isEscapeCharacterSet();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      MockFile mockFile0 = new MockFile("M1", "M1");
      mockFile0.mkdirs();
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat1.print((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      File file0 = MockFile.createTempFile("45B~^S", "45B~^S");
      Charset charset0 = Charset.defaultCharset();
      cSVFormat0.print(file0, charset0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withIgnoreHeaderCase();
      cSVFormat0.TDF.withTrailingDelimiter();
      cSVFormat0.isCommentMarkerSet();
      char char0 = '5';
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('5');
      MockFile mockFile0 = new MockFile("");
      Charset charset0 = Charset.defaultCharset();
      try { 
        cSVFormat2.INFORMIX_UNLOAD_CSV.print((File) mockFile0, charset0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.EXCEL.withQuote('=');
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withDelimiter('>');
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"e&'==6]y=S;");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(filterOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      cSVFormat0.TDF.println(mockPrintWriter0);
      cSVFormat1.POSTGRESQL_TEXT.withRecordSeparator("@-7m[g9d=W^<s~zz");
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("@-7m[g9d=W^<s~zz", "7.BiaW|x4Q.K,pIaO");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 7.BiaW|x4Q.K,pIaO
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat1.INFORMIX_UNLOAD.withQuoteMode(quoteMode0);
      cSVFormat4.POSTGRESQL_TEXT.withSkipHeaderRecord(true);
      cSVFormat3.POSTGRESQL_TEXT.toString();
      cSVFormat2.EXCEL.withIgnoreEmptyLines();
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat5 = cSVFormat3.RFC4180.withHeaderComments(objectArray0);
      cSVFormat3.getTrim();
      cSVFormat3.withQuote('J');
      cSVFormat2.withHeader((ResultSet) null);
      cSVFormat5.withCommentMarker('O');
      MockFile mockFile0 = new MockFile("9 ,", "9 ,");
      // Undeclared exception!
      try { 
        Charset.forName("9 ,");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 9 ,
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      boolean boolean0 = true;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
      boolean boolean1 = true;
      cSVFormat2.withAutoFlush(true);
      Integer integer0 = new Integer(2);
      // Undeclared exception!
      try { 
        MockURI.create(" SurroundingSpaces:ignored");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in scheme name at index 0:  SurroundingSpaces:ignored
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnload;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('[');
      cSVFormat0.DEFAULT.withHeader((String[]) null);
      CSVFormat cSVFormat2 = cSVFormat1.POSTGRESQL_CSV.withCommentMarker('F');
      Character character0 = new Character('F');
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withQuote(character0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat1.TDF.withCommentMarker('F');
      cSVFormat2.INFORMIX_UNLOAD_CSV.withHeader(resultSet0);
      cSVFormat1.getDelimiter();
      CSVFormat cSVFormat5 = cSVFormat3.TDF.withTrailingDelimiter(false);
      cSVFormat2.INFORMIX_UNLOAD.withIgnoreSurroundingSpaces();
      cSVFormat5.EXCEL.withIgnoreEmptyLines(true);
      cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat4.isNullStringSet();
      cSVFormat5.withEscape(character0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CSVFormat.Predefined.values();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      char char0 = '8';
      cSVFormat0.POSTGRESQL_CSV.withCommentMarker('8');
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("jm 2r`-'o]4~siGg%f");
      Character character0 = new Character('d');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker(character0);
      CSVFormat cSVFormat6 = cSVFormat5.INFORMIX_UNLOAD.withDelimiter('d');
      cSVFormat6.POSTGRESQL_TEXT.withHeader((ResultSet) null);
      cSVFormat2.withHeader((ResultSet) null);
      cSVFormat2.isEscapeCharacterSet();
      cSVFormat4.getQuoteCharacter();
      cSVFormat3.printer();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("jm 2r`-'o]4~siGg%f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.jm 2r`-'o]4~siGg%f
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.getSkipHeaderRecord();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('}');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('\"');
      cSVFormat0.RFC4180.withQuote(character0);
      cSVFormat2.getSkipHeaderRecord();
      cSVFormat0.getTrim();
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("YP");
      CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(true);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("_+;R.99,+3!qS");
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(true);
      cSVFormat5.withEscape('g');
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      boolean boolean0 = false;
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
      cSVFormat2.MYSQL.withHeader((String[]) null);
      cSVFormat2.withIgnoreSurroundingSpaces(false);
      char char0 = '^';
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_TEXT.withRecordSeparator('i');
      CSVFormat cSVFormat2 = cSVFormat1.EXCEL.withFirstRecordAsHeader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Zm}^x`NF";
      stringArray0[1] = "";
      stringArray0[2] = "InformixUnload";
      cSVFormat2.INFORMIX_UNLOAD.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines();
      cSVFormat3.DEFAULT.toString();
      cSVFormat3.POSTGRESQL_CSV.printer();
      cSVFormat0.getQuoteCharacter();
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat3.getQuoteMode();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("ALL_NON_NULL");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('1');
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.EXCEL.withTrim();
      Character character0 = Character.valueOf('1');
      cSVFormat5.INFORMIX_UNLOAD_CSV.withQuote(character0);
      CSVFormat cSVFormat6 = cSVFormat4.withCommentMarker('A');
      cSVFormat2.getCommentMarker();
      cSVFormat1.getQuoteMode();
      cSVFormat2.RFC4180.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat7 = cSVFormat6.withIgnoreHeaderCase();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat7;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withNullString("<Bv[[k");
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      boolean boolean0 = true;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      cSVFormat1.withQuote('?');
      String string0 = "";
      URI uRI0 = MockURI.create("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreEmptyLines(false);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
      Character character0 = Character.valueOf('_');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.withIgnoreHeaderCase(false);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('G');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      MockFile mockFile0 = new MockFile("acNN2krPO:DL\"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      cSVFormat2.print((Object) cSVFormat0, (Appendable) mockPrintStream0, true);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('k');
      Character character0 = Character.valueOf('k');
      CSVFormat cSVFormat4 = cSVFormat3.withEscape(character0);
      CSVFormat cSVFormat5 = cSVFormat4.withQuote(character0);
      cSVFormat5.getIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      cSVFormat3.TDF.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
      cSVFormat0.TDF.withCommentMarker(')');
      cSVFormat3.getTrailingDelimiter();
      MockFileWriter mockFileWriter0 = new MockFileWriter("EORECORD");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFileWriter0;
      objectArray0[1] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockFileWriter0;
      objectArray0[6] = (Object) cSVFormat2;
      objectArray0[7] = (Object) cSVFormat1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      cSVFormat4.POSTGRESQL_CSV.print((Appendable) printWriter0);
      cSVFormat0.withFirstRecordAsHeader();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        cSVFormat2.print(path0, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = CSVFormat.newFormat('9');
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('9');
      cSVFormat2.withDelimiter('9');
      cSVFormat1.toString();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Delimiter=<\t> Escape=<> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:true";
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat4;
      objectArray0[6] = (Object) cSVFormat4;
      objectArray0[7] = (Object) cSVFormat4;
      objectArray0[8] = (Object) cSVFormat3;
      cSVFormat0.format(objectArray0);
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('B');
      cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      Byte.valueOf((byte) (-73));
      cSVFormat3.withDelimiter(' ');
      cSVFormat0.toString();
      Object object0 = new Object();
      cSVFormat3.format(objectArray0);
      cSVFormat2.hashCode();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withCommentMarker('E');
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.getEscapeCharacter();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('C');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.MYSQL.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('C');
      cSVFormat2.INFORMIX_UNLOAD.withTrim(true);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(true);
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat1.TDF.printer();
      cSVFormat1.DEFAULT.withCommentMarker('k');
      CSVFormat cSVFormat6 = cSVFormat5.POSTGRESQL_TEXT.withCommentMarker('E');
      QuoteMode quoteMode0 = QuoteMode.NONE;
      cSVFormat6.MYSQL.withQuoteMode(quoteMode0);
      cSVFormat1.hashCode();
      cSVFormat1.withEscape('E');
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat1.getEscapeCharacter();
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "out");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      Character character0 = Character.valueOf(')');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withEscape(character0);
      cSVFormat0.RFC4180.withIgnoreSurroundingSpaces();
      cSVFormat0.TDF.withCommentMarker(')');
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        cSVFormat4.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.getCommentMarker();
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.DEFAULT.withSkipHeaderRecord(false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withAllowMissingColumnNames();
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      cSVFormat0.EXCEL.format(objectArray0);
      cSVFormat1.RFC4180.format(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withAutoFlush(false);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat2.RFC4180.withTrailingDelimiter(true);
      CSVFormat cSVFormat4 = cSVFormat3.MYSQL.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.MYSQL.withTrailingDelimiter();
      cSVFormat5.DEFAULT.withIgnoreEmptyLines();
      cSVFormat2.TDF.withFirstRecordAsHeader();
      cSVFormat0.isQuoteCharacterSet();
      cSVFormat1.getCommentMarker();
      cSVFormat1.getRecordSeparator();
      cSVFormat1.getIgnoreHeaderCase();
      cSVFormat1.withTrailingDelimiter(false);
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat1.withHeader(class0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withTrailingDelimiter(true);
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat1.getRecordSeparator();
      cSVFormat1.withFirstRecordAsHeader();
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat3.getRecordSeparator();
      cSVFormat2.isNullStringSet();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('4');
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('<');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      cSVFormat2.equals(cSVFormat1);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('5');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('5');
      cSVFormat2.equals(cSVFormat0);
      Object[] objectArray0 = new Object[8];
      cSVFormat2.format(objectArray0);
      cSVFormat1.getHeaderComments();
      CharBuffer charBuffer0 = CharBuffer.allocate(31);
      Long long0 = new Long(31);
      Integer integer0 = new Integer(31);
      cSVFormat1.print((Object) ",,,,,,,5", (Appendable) charBuffer0, true);
      cSVFormat2.withDelimiter('<');
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('5');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat2.equals(cSVFormat0);
      Object[] objectArray0 = new Object[1];
      cSVFormat2.format(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      cSVFormat3.print((Object) "", (Appendable) printStream0, true);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) "\u0085", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('_');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      cSVFormat1.equals(cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.getEscapeCharacter();
      cSVFormat0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.getNullString();
      // Undeclared exception!
      try { 
        CSVFormat.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      cSVFormat0.equals(class0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('B');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('B');
      cSVFormat2.equals(cSVFormat1);
      cSVFormat1.withHeaderComments(objectArray0);
      cSVFormat2.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.getIgnoreEmptyLines();
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.isCommentMarkerSet();
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('N');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('`');
      cSVFormat1.POSTGRESQL_TEXT.withDelimiter('X');
      cSVFormat1.toString();
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      Character character0 = new Character('Y');
      cSVFormat3.withQuote(character0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('*');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('*');
      cSVFormat2.equals(cSVFormat0);
      Object[] objectArray0 = new Object[1];
      cSVFormat2.format(objectArray0);
      cSVFormat1.getHeaderComments();
      CharBuffer charBuffer0 = CharBuffer.allocate(31);
      Long long0 = new Long(31);
      Integer integer0 = new Integer(31);
      cSVFormat1.print((Object) "*", (Appendable) charBuffer0, true);
      cSVFormat2.withRecordSeparator('6');
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        cSVFormat0.print((Object) " _", (Appendable) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.printer();
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      cSVFormat1.printer();
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('q');
      cSVFormat0.POSTGRESQL_TEXT.withCommentMarker(character0);
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The delimiter cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('9');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      cSVFormat0.MYSQL.withIgnoreSurroundingSpaces();
      cSVFormat3.equals(cSVFormat0);
      CSVFormat cSVFormat4 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat2.withEscape('9');
      CSVFormat cSVFormat5 = cSVFormat2.withTrailingDelimiter();
      cSVFormat4.getTrim();
      cSVFormat0.equals((Object) null);
      cSVFormat1.getTrailingDelimiter();
      cSVFormat4.getNullString();
      File file0 = MockFile.createTempFile("nsop_0X`'*", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      cSVFormat5.print((Object) cSVFormat1, (Appendable) mockPrintStream0, false);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      cSVFormat0.withDelimiter('#');
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.toString();
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.getDelimiter();
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.RFC4180.withIgnoreHeaderCase(true);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('w');
      Character character0 = Character.valueOf('w');
      CSVFormat cSVFormat3 = cSVFormat2.EXCEL.withCommentMarker(character0);
      MockFile mockFile0 = new MockFile("y40r?/*}=Z!v*n7", "y40r?/*}=Z!v*n7");
      MockFile mockFile1 = new MockFile(mockFile0, "y40r?/*}=Z!v*n7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('9');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat3;
      objectArray0[1] = (Object) "y40r?/*}=Z!v*n7";
      objectArray0[2] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat2.INFORMIX_UNLOAD.printRecord(printStream0, objectArray0);
      Character character1 = new Character('w');
      cSVFormat2.DEFAULT.withEscape(character1);
      cSVFormat1.isNullStringSet();
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('W', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getEscapeCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(' ');
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('W', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(' ', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('W', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(' ');
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('W', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(' ', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('W', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('W', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(' ', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(' ', (char)cSVFormat2.getQuoteCharacter());
      
      CSVFormat cSVFormat3 = cSVFormat0.EXCEL.withTrim(false);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('W', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentMarker());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getAutoFlush());
      assertNull(cSVFormat3.getNullString());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "NON_NUMERIC";
      stringArray0[1] = "1t8Hs@k)q";
      stringArray0[2] = "org.apache.commons.csv.Token$Type";
      stringArray0[3] = "org.apache.commons.csv.QuoteMode";
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(stringArray0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat4);
      assertEquals(4, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('W', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(' ', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('W', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('W', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(' ', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(' ', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals('W', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(' ', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getAutoFlush());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals(' ', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      
      CSVFormat cSVFormat5 = cSVFormat4.INFORMIX_UNLOAD.withTrailingDelimiter(false);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat5);
      assertEquals(4, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('W', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(' ', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('W', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('W', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(' ', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(' ', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals('W', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(' ', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getAutoFlush());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals(' ', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertNull(cSVFormat5.getNullString());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertEquals('|', cSVFormat5.getDelimiter());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getAutoFlush());
      assertFalse(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.isNullStringSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat5.getEscapeCharacter());
      assertNull(cSVFormat5.getQuoteMode());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      
      CSVFormat cSVFormat6 = cSVFormat4.TDF.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat6);
      assertEquals(4, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('W', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(' ', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('W', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('W', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(' ', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(' ', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals('W', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(' ', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getAutoFlush());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals(' ', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertEquals("\r\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getAutoFlush());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat6.getQuoteMode());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      
      CSVFormat cSVFormat7 = cSVFormat6.INFORMIX_UNLOAD.withQuote((Character) null);
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat2));
      assertFalse(cSVFormat7.equals((Object)cSVFormat0));
      assertFalse(cSVFormat7.equals((Object)cSVFormat3));
      assertFalse(cSVFormat7.equals((Object)cSVFormat4));
      assertFalse(cSVFormat7.equals((Object)cSVFormat6));
      assertFalse(cSVFormat7.equals((Object)cSVFormat1));
      assertFalse(cSVFormat7.equals((Object)cSVFormat5));
      assertNotNull(cSVFormat7);
      assertEquals(4, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat2);
      assertNotSame(cSVFormat7, cSVFormat0);
      assertNotSame(cSVFormat7, cSVFormat3);
      assertNotSame(cSVFormat7, cSVFormat4);
      assertNotSame(cSVFormat7, cSVFormat6);
      assertNotSame(cSVFormat7, cSVFormat1);
      assertNotSame(cSVFormat7, cSVFormat5);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('W', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(' ', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('W', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('W', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(' ', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(' ', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals('W', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(' ', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getAutoFlush());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals(' ', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertEquals("\r\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getAutoFlush());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat6.getQuoteMode());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
      assertTrue(cSVFormat7.isEscapeCharacterSet());
      assertNull(cSVFormat7.getCommentMarker());
      assertNull(cSVFormat7.getQuoteMode());
      assertNull(cSVFormat7.getNullString());
      assertEquals('\\', (char)cSVFormat7.getEscapeCharacter());
      assertFalse(cSVFormat7.getTrailingDelimiter());
      assertFalse(cSVFormat7.isNullStringSet());
      assertFalse(cSVFormat7.getAutoFlush());
      assertFalse(cSVFormat7.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat7.getTrim());
      assertFalse(cSVFormat7.isCommentMarkerSet());
      assertFalse(cSVFormat7.getIgnoreHeaderCase());
      assertEquals('|', cSVFormat7.getDelimiter());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertNull(cSVFormat7.getQuoteCharacter());
      assertFalse(cSVFormat7.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat7.getRecordSeparator());
      
      CSVFormat cSVFormat8 = cSVFormat6.DEFAULT.withSkipHeaderRecord();
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat6.equals((Object)cSVFormat4));
      assertFalse(cSVFormat6.equals((Object)cSVFormat7));
      assertFalse(cSVFormat6.equals((Object)cSVFormat5));
      assertFalse(cSVFormat6.equals((Object)cSVFormat1));
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
      assertFalse(cSVFormat6.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat4));
      assertFalse(cSVFormat8.equals((Object)cSVFormat5));
      assertFalse(cSVFormat8.equals((Object)cSVFormat1));
      assertFalse(cSVFormat8.equals((Object)cSVFormat6));
      assertFalse(cSVFormat8.equals((Object)cSVFormat7));
      assertFalse(cSVFormat8.equals((Object)cSVFormat3));
      assertFalse(cSVFormat8.equals((Object)cSVFormat0));
      assertFalse(cSVFormat8.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat8);
      assertEquals(4, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat3);
      assertNotSame(cSVFormat6, cSVFormat4);
      assertNotSame(cSVFormat6, cSVFormat7);
      assertNotSame(cSVFormat6, cSVFormat5);
      assertNotSame(cSVFormat6, cSVFormat1);
      assertNotSame(cSVFormat6, cSVFormat2);
      assertNotSame(cSVFormat6, cSVFormat0);
      assertNotSame(cSVFormat6, cSVFormat8);
      assertNotSame(cSVFormat8, cSVFormat4);
      assertNotSame(cSVFormat8, cSVFormat5);
      assertNotSame(cSVFormat8, cSVFormat1);
      assertNotSame(cSVFormat8, cSVFormat6);
      assertNotSame(cSVFormat8, cSVFormat7);
      assertNotSame(cSVFormat8, cSVFormat3);
      assertNotSame(cSVFormat8, cSVFormat0);
      assertNotSame(cSVFormat8, cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('W', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(' ', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('W', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('W', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(' ', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(' ', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals('W', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(' ', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getAutoFlush());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals(' ', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertNull(cSVFormat6.getCommentMarker());
      assertEquals('\t', cSVFormat6.getDelimiter());
      assertEquals("\r\n", cSVFormat6.getRecordSeparator());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat6.getAutoFlush());
      assertTrue(cSVFormat6.getIgnoreEmptyLines());
      assertNull(cSVFormat6.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat6.getTrim());
      assertFalse(cSVFormat6.isNullStringSet());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat6.getQuoteMode());
      assertNull(cSVFormat6.getNullString());
      assertFalse(cSVFormat6.getTrailingDelimiter());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getIgnoreHeaderCase());
      assertFalse(cSVFormat6.isCommentMarkerSet());
      assertNull(cSVFormat8.getNullString());
      assertFalse(cSVFormat8.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
      assertNull(cSVFormat8.getEscapeCharacter());
      assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat8.getTrim());
      assertFalse(cSVFormat8.isNullStringSet());
      assertNull(cSVFormat8.getQuoteMode());
      assertFalse(cSVFormat8.isEscapeCharacterSet());
      assertFalse(cSVFormat8.getAutoFlush());
      assertTrue(cSVFormat8.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat8.getDelimiter());
      assertFalse(cSVFormat8.getIgnoreHeaderCase());
      assertFalse(cSVFormat8.getAllowMissingColumnNames());
      assertTrue(cSVFormat8.isQuoteCharacterSet());
      assertTrue(cSVFormat8.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat8.getRecordSeparator());
      assertNull(cSVFormat8.getCommentMarker());
      assertFalse(cSVFormat8.isCommentMarkerSet());
      
      CSVFormat cSVFormat9 = cSVFormat4.withRecordSeparator("acJ ]/");
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat8));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat9);
      assertEquals(4, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat9);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('W', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(' ', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('W', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('W', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(' ', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(' ', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals('W', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(' ', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getAutoFlush());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals(' ', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertEquals(' ', (char)cSVFormat9.getQuoteCharacter());
      assertNull(cSVFormat9.getNullString());
      assertTrue(cSVFormat9.isEscapeCharacterSet());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertEquals('W', cSVFormat9.getDelimiter());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertNull(cSVFormat9.getQuoteMode());
      assertNull(cSVFormat9.getCommentMarker());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertFalse(cSVFormat9.getIgnoreEmptyLines());
      assertEquals(' ', (char)cSVFormat9.getEscapeCharacter());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat9.getTrim());
      assertFalse(cSVFormat9.isNullStringSet());
      assertEquals("acJ ]/", cSVFormat9.getRecordSeparator());
      assertFalse(cSVFormat9.getAutoFlush());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      
      CSVFormat cSVFormat10 = cSVFormat9.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat9));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat9));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat8));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertFalse(cSVFormat10.equals((Object)cSVFormat1));
      assertFalse(cSVFormat10.equals((Object)cSVFormat8));
      assertFalse(cSVFormat10.equals((Object)cSVFormat3));
      assertFalse(cSVFormat10.equals((Object)cSVFormat5));
      assertFalse(cSVFormat10.equals((Object)cSVFormat4));
      assertFalse(cSVFormat10.equals((Object)cSVFormat0));
      assertFalse(cSVFormat10.equals((Object)cSVFormat6));
      assertFalse(cSVFormat10.equals((Object)cSVFormat7));
      assertFalse(cSVFormat10.equals((Object)cSVFormat9));
      assertFalse(cSVFormat10.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat10);
      assertEquals(4, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat9);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat10);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat10);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertNotSame(cSVFormat10, cSVFormat1);
      assertNotSame(cSVFormat10, cSVFormat8);
      assertNotSame(cSVFormat10, cSVFormat3);
      assertNotSame(cSVFormat10, cSVFormat5);
      assertNotSame(cSVFormat10, cSVFormat4);
      assertNotSame(cSVFormat10, cSVFormat0);
      assertNotSame(cSVFormat10, cSVFormat6);
      assertNotSame(cSVFormat10, cSVFormat7);
      assertNotSame(cSVFormat10, cSVFormat9);
      assertNotSame(cSVFormat10, cSVFormat2);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('W', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(' ', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('W', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('W', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(' ', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(' ', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals('W', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(' ', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getAutoFlush());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals(' ', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertEquals(' ', (char)cSVFormat9.getQuoteCharacter());
      assertNull(cSVFormat9.getNullString());
      assertTrue(cSVFormat9.isEscapeCharacterSet());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertEquals('W', cSVFormat9.getDelimiter());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertNull(cSVFormat9.getQuoteMode());
      assertNull(cSVFormat9.getCommentMarker());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertFalse(cSVFormat9.getIgnoreEmptyLines());
      assertEquals(' ', (char)cSVFormat9.getEscapeCharacter());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat9.getTrim());
      assertFalse(cSVFormat9.isNullStringSet());
      assertEquals("acJ ]/", cSVFormat9.getRecordSeparator());
      assertFalse(cSVFormat9.getAutoFlush());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      assertEquals("acJ ]/", cSVFormat10.getRecordSeparator());
      assertFalse(cSVFormat10.getAutoFlush());
      assertNull(cSVFormat10.getCommentMarker());
      assertFalse(cSVFormat10.getSkipHeaderRecord());
      assertFalse(cSVFormat10.getAllowMissingColumnNames());
      assertFalse(cSVFormat10.getTrim());
      assertFalse(cSVFormat10.isNullStringSet());
      assertFalse(cSVFormat10.getIgnoreEmptyLines());
      assertTrue(cSVFormat10.getIgnoreSurroundingSpaces());
      assertEquals(' ', (char)cSVFormat10.getEscapeCharacter());
      assertNull(cSVFormat10.getQuoteMode());
      assertNull(cSVFormat10.getNullString());
      assertEquals('W', cSVFormat10.getDelimiter());
      assertFalse(cSVFormat10.isCommentMarkerSet());
      assertEquals(' ', (char)cSVFormat10.getQuoteCharacter());
      assertFalse(cSVFormat10.getTrailingDelimiter());
      assertFalse(cSVFormat10.getIgnoreHeaderCase());
      assertTrue(cSVFormat10.isQuoteCharacterSet());
      assertTrue(cSVFormat10.isEscapeCharacterSet());
      
      CSVFormat cSVFormat11 = CSVFormat.newFormat('w');
      assertFalse(cSVFormat11.equals((Object)cSVFormat1));
      assertFalse(cSVFormat11.equals((Object)cSVFormat6));
      assertFalse(cSVFormat11.equals((Object)cSVFormat7));
      assertFalse(cSVFormat11.equals((Object)cSVFormat9));
      assertFalse(cSVFormat11.equals((Object)cSVFormat2));
      assertFalse(cSVFormat11.equals((Object)cSVFormat5));
      assertFalse(cSVFormat11.equals((Object)cSVFormat0));
      assertFalse(cSVFormat11.equals((Object)cSVFormat8));
      assertFalse(cSVFormat11.equals((Object)cSVFormat3));
      assertFalse(cSVFormat11.equals((Object)cSVFormat10));
      assertFalse(cSVFormat11.equals((Object)cSVFormat4));
      assertNotNull(cSVFormat11);
      assertNotSame(cSVFormat11, cSVFormat1);
      assertNotSame(cSVFormat11, cSVFormat6);
      assertNotSame(cSVFormat11, cSVFormat7);
      assertNotSame(cSVFormat11, cSVFormat9);
      assertNotSame(cSVFormat11, cSVFormat2);
      assertNotSame(cSVFormat11, cSVFormat5);
      assertNotSame(cSVFormat11, cSVFormat0);
      assertNotSame(cSVFormat11, cSVFormat8);
      assertNotSame(cSVFormat11, cSVFormat3);
      assertNotSame(cSVFormat11, cSVFormat10);
      assertNotSame(cSVFormat11, cSVFormat4);
      assertFalse(cSVFormat11.getTrailingDelimiter());
      assertFalse(cSVFormat11.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat11.getNullString());
      assertEquals('w', cSVFormat11.getDelimiter());
      assertFalse(cSVFormat11.getIgnoreEmptyLines());
      assertNull(cSVFormat11.getQuoteCharacter());
      assertFalse(cSVFormat11.isQuoteCharacterSet());
      assertFalse(cSVFormat11.getSkipHeaderRecord());
      assertFalse(cSVFormat11.isEscapeCharacterSet());
      assertNull(cSVFormat11.getCommentMarker());
      assertNull(cSVFormat11.getRecordSeparator());
      assertFalse(cSVFormat11.getAutoFlush());
      assertNull(cSVFormat11.getQuoteMode());
      assertFalse(cSVFormat11.getAllowMissingColumnNames());
      assertFalse(cSVFormat11.getTrim());
      assertFalse(cSVFormat11.isNullStringSet());
      assertNull(cSVFormat11.getEscapeCharacter());
      assertFalse(cSVFormat11.getIgnoreHeaderCase());
      assertFalse(cSVFormat11.isCommentMarkerSet());
      
      CSVFormat cSVFormat12 = cSVFormat9.TDF.withRecordSeparator(' ');
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat0.equals((Object)cSVFormat9));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat11));
      assertFalse(cSVFormat0.equals((Object)cSVFormat10));
      assertFalse(cSVFormat0.equals((Object)cSVFormat8));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat6));
      assertFalse(cSVFormat0.equals((Object)cSVFormat7));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat12.equals((Object)cSVFormat3));
      assertFalse(cSVFormat12.equals((Object)cSVFormat4));
      assertFalse(cSVFormat12.equals((Object)cSVFormat0));
      assertFalse(cSVFormat12.equals((Object)cSVFormat11));
      assertFalse(cSVFormat12.equals((Object)cSVFormat5));
      assertFalse(cSVFormat12.equals((Object)cSVFormat10));
      assertFalse(cSVFormat12.equals((Object)cSVFormat8));
      assertFalse(cSVFormat12.equals((Object)cSVFormat2));
      assertFalse(cSVFormat12.equals((Object)cSVFormat9));
      assertFalse(cSVFormat12.equals((Object)cSVFormat1));
      assertFalse(cSVFormat12.equals((Object)cSVFormat7));
      assertFalse(cSVFormat12.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat9));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat11));
      assertFalse(cSVFormat1.equals((Object)cSVFormat10));
      assertFalse(cSVFormat1.equals((Object)cSVFormat8));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat6));
      assertFalse(cSVFormat1.equals((Object)cSVFormat7));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat11));
      assertFalse(cSVFormat2.equals((Object)cSVFormat9));
      assertFalse(cSVFormat2.equals((Object)cSVFormat6));
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
      assertFalse(cSVFormat2.equals((Object)cSVFormat10));
      assertFalse(cSVFormat2.equals((Object)cSVFormat8));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat6));
      assertFalse(cSVFormat4.equals((Object)cSVFormat7));
      assertFalse(cSVFormat4.equals((Object)cSVFormat11));
      assertFalse(cSVFormat4.equals((Object)cSVFormat9));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat10));
      assertFalse(cSVFormat4.equals((Object)cSVFormat8));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat9.equals((Object)cSVFormat3));
      assertFalse(cSVFormat9.equals((Object)cSVFormat4));
      assertFalse(cSVFormat9.equals((Object)cSVFormat0));
      assertFalse(cSVFormat9.equals((Object)cSVFormat6));
      assertFalse(cSVFormat9.equals((Object)cSVFormat7));
      assertFalse(cSVFormat9.equals((Object)cSVFormat11));
      assertFalse(cSVFormat9.equals((Object)cSVFormat5));
      assertFalse(cSVFormat9.equals((Object)cSVFormat10));
      assertFalse(cSVFormat9.equals((Object)cSVFormat8));
      assertFalse(cSVFormat9.equals((Object)cSVFormat2));
      assertFalse(cSVFormat9.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat12);
      assertEquals(4, stringArray0.length);
      assertNotSame(cSVFormat0, cSVFormat12);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat9);
      assertNotSame(cSVFormat0, cSVFormat11);
      assertNotSame(cSVFormat0, cSVFormat10);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat8);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat7);
      assertNotSame(cSVFormat0, cSVFormat6);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat12, cSVFormat3);
      assertNotSame(cSVFormat12, cSVFormat4);
      assertNotSame(cSVFormat12, cSVFormat0);
      assertNotSame(cSVFormat12, cSVFormat11);
      assertNotSame(cSVFormat12, cSVFormat5);
      assertNotSame(cSVFormat12, cSVFormat10);
      assertNotSame(cSVFormat12, cSVFormat8);
      assertNotSame(cSVFormat12, cSVFormat2);
      assertNotSame(cSVFormat12, cSVFormat9);
      assertNotSame(cSVFormat12, cSVFormat1);
      assertNotSame(cSVFormat12, cSVFormat7);
      assertNotSame(cSVFormat12, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat9);
      assertNotSame(cSVFormat1, cSVFormat12);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat11);
      assertNotSame(cSVFormat1, cSVFormat10);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat8);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat6);
      assertNotSame(cSVFormat1, cSVFormat7);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat11);
      assertNotSame(cSVFormat2, cSVFormat9);
      assertNotSame(cSVFormat2, cSVFormat7);
      assertNotSame(cSVFormat2, cSVFormat6);
      assertNotSame(cSVFormat2, cSVFormat12);
      assertNotSame(cSVFormat2, cSVFormat10);
      assertNotSame(cSVFormat2, cSVFormat8);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat7);
      assertNotSame(cSVFormat4, cSVFormat6);
      assertNotSame(cSVFormat4, cSVFormat11);
      assertNotSame(cSVFormat4, cSVFormat12);
      assertNotSame(cSVFormat4, cSVFormat9);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat10);
      assertNotSame(cSVFormat4, cSVFormat8);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat9, cSVFormat3);
      assertNotSame(cSVFormat9, cSVFormat4);
      assertNotSame(cSVFormat9, cSVFormat0);
      assertNotSame(cSVFormat9, cSVFormat6);
      assertNotSame(cSVFormat9, cSVFormat7);
      assertNotSame(cSVFormat9, cSVFormat11);
      assertNotSame(cSVFormat9, cSVFormat12);
      assertNotSame(cSVFormat9, cSVFormat5);
      assertNotSame(cSVFormat9, cSVFormat10);
      assertNotSame(cSVFormat9, cSVFormat8);
      assertNotSame(cSVFormat9, cSVFormat2);
      assertNotSame(cSVFormat9, cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getQuoteMode());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('W', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat12.getQuoteCharacter());
      assertFalse(cSVFormat12.getAllowMissingColumnNames());
      assertFalse(cSVFormat12.getTrailingDelimiter());
      assertEquals('\t', cSVFormat12.getDelimiter());
      assertNull(cSVFormat12.getEscapeCharacter());
      assertFalse(cSVFormat12.getTrim());
      assertFalse(cSVFormat12.isNullStringSet());
      assertFalse(cSVFormat12.getAutoFlush());
      assertNull(cSVFormat12.getNullString());
      assertTrue(cSVFormat12.getIgnoreEmptyLines());
      assertNull(cSVFormat12.getQuoteMode());
      assertTrue(cSVFormat12.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat12.getCommentMarker());
      assertEquals(" ", cSVFormat12.getRecordSeparator());
      assertFalse(cSVFormat12.getSkipHeaderRecord());
      assertFalse(cSVFormat12.getIgnoreHeaderCase());
      assertFalse(cSVFormat12.isCommentMarkerSet());
      assertFalse(cSVFormat12.isEscapeCharacterSet());
      assertTrue(cSVFormat12.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertNull(cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(' ', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('W', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertEquals('W', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals(' ', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getTrim());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(' ', (char)cSVFormat2.getQuoteCharacter());
      assertNull(cSVFormat4.getQuoteMode());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertEquals('W', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(' ', (char)cSVFormat4.getQuoteCharacter());
      assertNull(cSVFormat4.getNullString());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertFalse(cSVFormat4.getAutoFlush());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals(' ', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertEquals(' ', (char)cSVFormat9.getQuoteCharacter());
      assertNull(cSVFormat9.getNullString());
      assertTrue(cSVFormat9.isEscapeCharacterSet());
      assertTrue(cSVFormat9.isQuoteCharacterSet());
      assertEquals('W', cSVFormat9.getDelimiter());
      assertFalse(cSVFormat9.getSkipHeaderRecord());
      assertNull(cSVFormat9.getQuoteMode());
      assertNull(cSVFormat9.getCommentMarker());
      assertFalse(cSVFormat9.getIgnoreHeaderCase());
      assertFalse(cSVFormat9.getIgnoreEmptyLines());
      assertEquals(' ', (char)cSVFormat9.getEscapeCharacter());
      assertFalse(cSVFormat9.isCommentMarkerSet());
      assertFalse(cSVFormat9.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat9.getTrim());
      assertFalse(cSVFormat9.isNullStringSet());
      assertEquals("acJ ]/", cSVFormat9.getRecordSeparator());
      assertFalse(cSVFormat9.getAutoFlush());
      assertFalse(cSVFormat9.getAllowMissingColumnNames());
      assertFalse(cSVFormat9.getTrailingDelimiter());
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\\N", cSVFormat0.getNullString());
      
      // Undeclared exception!
      try { 
        cSVFormat0.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("cU<6");
      assertNotNull(mockPrintStream0);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print((Appendable) mockPrintStream0);
      assertNotNull(cSVPrinter0);
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(QuoteMode.ALL, cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(QuoteMode.ALL, cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getTrim());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL, cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat1.EXCEL.withHeader(resultSet0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(QuoteMode.ALL, cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getQuoteMode());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAutoFlush());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      
      CSVFormat cSVFormat4 = cSVFormat0.DEFAULT.withRecordSeparator(' ');
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertNotNull(cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
      assertFalse(cSVFormat4.isNullStringSet());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertEquals(" ", cSVFormat4.getRecordSeparator());
      assertNull(cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertNull(cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getAutoFlush());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertNull(cSVFormat4.getCommentMarker());
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      CSVFormat cSVFormat5 = cSVFormat2.POSTGRESQL_CSV.withHeader(resultSet1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertNotNull(cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat5);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(QuoteMode.ALL, cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertFalse(cSVFormat2.getAutoFlush());
      assertTrue(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.getTrim());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL, cSVFormat2.getQuoteMode());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertTrue(cSVFormat5.isNullStringSet());
      assertEquals('\"', (char)cSVFormat5.getQuoteCharacter());
      assertFalse(cSVFormat5.isCommentMarkerSet());
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertTrue(cSVFormat5.isQuoteCharacterSet());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertNull(cSVFormat5.getCommentMarker());
      assertFalse(cSVFormat5.getTrim());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat5.getQuoteMode());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat5.getEscapeCharacter());
      assertEquals("", cSVFormat5.getNullString());
      assertFalse(cSVFormat5.getAutoFlush());
      
      // Undeclared exception!
      try { 
        cSVFormat3.MYSQL.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();
      assertNotNull(cSVFormat_PredefinedArray0);
      assertEquals(9, cSVFormat_PredefinedArray0.length);
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('<');
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("<", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("<", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getTrim());
      assertNull(cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertNull(cSVFormat2.getCommentMarker());
      assertEquals("<", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      assertNull(cSVFormat2.getQuoteMode());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.getAutoFlush());
      
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertNull(cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getCommentMarker());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
      assertNull(cSVFormat3.getQuoteMode());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getTrim());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getAutoFlush());
      assertNull(cSVFormat3.getNullString());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "PVDUC|%";
      stringArray0[1] = "InformixUnload";
      stringArray0[2] = "Zm}^x`NF";
      stringArray0[3] = "Zm}^x`NF";
      // Undeclared exception!
      try { 
        cSVFormat3.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'Zm}^x`NF' in [PVDUC|%, InformixUnload, Zm}^x`NF, Zm}^x`NF]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      
      Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isNullStringSet());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withSkipHeaderRecord();
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      
      Class<Token.Type> class0 = Token.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals('|', cSVFormat1.getDelimiter());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuoteMode());
      assertNull(cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreHeaderCase());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertEquals('|', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.isCommentMarkerSet());
      assertFalse(cSVFormat2.getAutoFlush());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getTrailingDelimiter());
      
      objectArray0[1] = (Object) cSVFormat0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat3 = cSVFormat0.withHeaderComments(objectArray0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat3);
      assertEquals(9, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getTrim());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat3.getNullString());
      
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNotNull(cSVFormat4);
      assertEquals(9, objectArray0.length);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNull(cSVFormat4.getQuoteCharacter());
      assertTrue(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isCommentMarkerSet());
      assertTrue(cSVFormat4.isEscapeCharacterSet());
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertEquals("\\N", cSVFormat4.getNullString());
      assertNull(cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.getIgnoreHeaderCase());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat4.getQuoteMode());
      assertFalse(cSVFormat4.getTrailingDelimiter());
      assertFalse(cSVFormat4.getAutoFlush());
      assertEquals('\t', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getTrim());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getAutoFlush());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertTrue(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertNull(cSVFormat3.getQuoteCharacter());
      assertFalse(cSVFormat3.isCommentMarkerSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat3.getQuoteMode());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getTrailingDelimiter());
      assertFalse(cSVFormat3.getAutoFlush());
      assertFalse(cSVFormat3.getTrim());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertNull(cSVFormat3.getCommentMarker());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertFalse(cSVFormat3.getIgnoreHeaderCase());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertEquals("\\N", cSVFormat3.getNullString());
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.newFormat('s');
          assertNotNull(cSVFormat0);
          assertNull(cSVFormat0.getCommentMarker());
          assertFalse(cSVFormat0.getSkipHeaderRecord());
          assertNull(cSVFormat0.getQuoteMode());
          assertFalse(cSVFormat0.getAutoFlush());
          assertFalse(cSVFormat0.isEscapeCharacterSet());
          assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
          assertNull(cSVFormat0.getEscapeCharacter());
          assertFalse(cSVFormat0.getTrim());
          assertFalse(cSVFormat0.isNullStringSet());
          assertFalse(cSVFormat0.getIgnoreEmptyLines());
          assertNull(cSVFormat0.getNullString());
          assertNull(cSVFormat0.getQuoteCharacter());
          assertFalse(cSVFormat0.isQuoteCharacterSet());
          assertFalse(cSVFormat0.getTrailingDelimiter());
          assertEquals('s', cSVFormat0.getDelimiter());
          assertFalse(cSVFormat0.getAllowMissingColumnNames());
          assertNull(cSVFormat0.getRecordSeparator());
          assertFalse(cSVFormat0.isCommentMarkerSet());
          assertFalse(cSVFormat0.getIgnoreHeaderCase());
          
          Object[] objectArray0 = new Object[9];
          objectArray0[0] = (Object) cSVFormat0;
          objectArray0[1] = (Object) cSVFormat0;
          objectArray0[2] = (Object) cSVFormat0;
          objectArray0[3] = (Object) cSVFormat0;
          CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withAllowMissingColumnNames();
          assertFalse(cSVFormat1.equals((Object)cSVFormat0));
          assertNotNull(cSVFormat1);
          assertNotSame(cSVFormat0, cSVFormat1);
          assertNotSame(cSVFormat1, cSVFormat0);
          assertNull(cSVFormat0.getCommentMarker());
          assertFalse(cSVFormat0.getSkipHeaderRecord());
          assertNull(cSVFormat0.getQuoteMode());
          assertFalse(cSVFormat0.getAutoFlush());
          assertFalse(cSVFormat0.isEscapeCharacterSet());
          assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
          assertNull(cSVFormat0.getEscapeCharacter());
          assertFalse(cSVFormat0.getTrim());
          assertFalse(cSVFormat0.isNullStringSet());
          assertFalse(cSVFormat0.getIgnoreEmptyLines());
          assertNull(cSVFormat0.getNullString());
          assertNull(cSVFormat0.getQuoteCharacter());
          assertFalse(cSVFormat0.isQuoteCharacterSet());
          assertFalse(cSVFormat0.getTrailingDelimiter());
          assertEquals('s', cSVFormat0.getDelimiter());
          assertFalse(cSVFormat0.getAllowMissingColumnNames());
          assertNull(cSVFormat0.getRecordSeparator());
          assertFalse(cSVFormat0.isCommentMarkerSet());
          assertFalse(cSVFormat0.getIgnoreHeaderCase());
          assertTrue(cSVFormat1.getAllowMissingColumnNames());
          assertTrue(cSVFormat1.isNullStringSet());
          assertEquals("", cSVFormat1.getNullString());
          assertFalse(cSVFormat1.getTrailingDelimiter());
          assertEquals("\n", cSVFormat1.getRecordSeparator());
          assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
          assertFalse(cSVFormat1.getIgnoreEmptyLines());
          assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
          assertFalse(cSVFormat1.getTrim());
          assertFalse(cSVFormat1.getAutoFlush());
          assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
          assertNull(cSVFormat1.getCommentMarker());
          assertFalse(cSVFormat1.getSkipHeaderRecord());
          assertEquals(',', cSVFormat1.getDelimiter());
          assertTrue(cSVFormat1.isEscapeCharacterSet());
          assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
          assertFalse(cSVFormat1.isCommentMarkerSet());
          assertTrue(cSVFormat1.isQuoteCharacterSet());
          assertFalse(cSVFormat1.getIgnoreHeaderCase());
          
          objectArray0[4] = (Object) cSVFormat0;
          objectArray0[5] = (Object) cSVFormat0;
          objectArray0[6] = (Object) cSVFormat0;
          objectArray0[8] = (Object) cSVFormat0;
          CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments(objectArray0);
          assertFalse(cSVFormat0.equals((Object)cSVFormat1));
          assertTrue(cSVFormat2.equals((Object)cSVFormat0));
          assertFalse(cSVFormat2.equals((Object)cSVFormat1));
          assertNotNull(cSVFormat2);
          assertEquals(9, objectArray0.length);
          assertNotSame(cSVFormat0, cSVFormat2);
          assertNotSame(cSVFormat0, cSVFormat1);
          assertNotSame(cSVFormat2, cSVFormat1);
          assertNotSame(cSVFormat2, cSVFormat0);
          assertNull(cSVFormat0.getCommentMarker());
          assertFalse(cSVFormat0.getSkipHeaderRecord());
          assertNull(cSVFormat0.getQuoteMode());
          assertFalse(cSVFormat0.getAutoFlush());
          assertFalse(cSVFormat0.isEscapeCharacterSet());
          assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
          assertNull(cSVFormat0.getEscapeCharacter());
          assertFalse(cSVFormat0.getTrim());
          assertFalse(cSVFormat0.isNullStringSet());
          assertFalse(cSVFormat0.getIgnoreEmptyLines());
          assertNull(cSVFormat0.getNullString());
          assertNull(cSVFormat0.getQuoteCharacter());
          assertFalse(cSVFormat0.isQuoteCharacterSet());
          assertFalse(cSVFormat0.getTrailingDelimiter());
          assertEquals('s', cSVFormat0.getDelimiter());
          assertFalse(cSVFormat0.getAllowMissingColumnNames());
          assertNull(cSVFormat0.getRecordSeparator());
          assertFalse(cSVFormat0.isCommentMarkerSet());
          assertFalse(cSVFormat0.getIgnoreHeaderCase());
          assertFalse(cSVFormat2.getTrailingDelimiter());
          assertFalse(cSVFormat2.isCommentMarkerSet());
          assertFalse(cSVFormat2.isQuoteCharacterSet());
          assertNull(cSVFormat2.getQuoteCharacter());
          assertFalse(cSVFormat2.getIgnoreEmptyLines());
          assertFalse(cSVFormat2.getAllowMissingColumnNames());
          assertNull(cSVFormat2.getEscapeCharacter());
          assertFalse(cSVFormat2.getAutoFlush());
          assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
          assertFalse(cSVFormat2.getTrim());
          assertFalse(cSVFormat2.isNullStringSet());
          assertNull(cSVFormat2.getNullString());
          assertFalse(cSVFormat2.getSkipHeaderRecord());
          assertNull(cSVFormat2.getCommentMarker());
          assertNull(cSVFormat2.getQuoteMode());
          assertEquals('s', cSVFormat2.getDelimiter());
          assertFalse(cSVFormat2.getIgnoreHeaderCase());
          assertNull(cSVFormat2.getRecordSeparator());
          assertFalse(cSVFormat2.isEscapeCharacterSet());
          
          ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
          doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
          CSVFormat cSVFormat3 = cSVFormat0.INFORMIX_UNLOAD.withHeader(resultSet0);
          assertTrue(cSVFormat0.equals((Object)cSVFormat2));
          assertFalse(cSVFormat0.equals((Object)cSVFormat1));
          assertFalse(cSVFormat3.equals((Object)cSVFormat2));
          assertFalse(cSVFormat3.equals((Object)cSVFormat1));
          assertFalse(cSVFormat3.equals((Object)cSVFormat0));
          assertNotNull(cSVFormat3);
          assertNotSame(cSVFormat0, cSVFormat3);
          assertNotSame(cSVFormat0, cSVFormat2);
          assertNotSame(cSVFormat0, cSVFormat1);
          assertNotSame(cSVFormat3, cSVFormat2);
          assertNotSame(cSVFormat3, cSVFormat1);
          assertNotSame(cSVFormat3, cSVFormat0);
          assertNull(cSVFormat0.getCommentMarker());
          assertFalse(cSVFormat0.getSkipHeaderRecord());
          assertNull(cSVFormat0.getQuoteMode());
          assertFalse(cSVFormat0.getAutoFlush());
          assertFalse(cSVFormat0.isEscapeCharacterSet());
          assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
          assertNull(cSVFormat0.getEscapeCharacter());
          assertFalse(cSVFormat0.getTrim());
          assertFalse(cSVFormat0.isNullStringSet());
          assertFalse(cSVFormat0.getIgnoreEmptyLines());
          assertNull(cSVFormat0.getNullString());
          assertNull(cSVFormat0.getQuoteCharacter());
          assertFalse(cSVFormat0.isQuoteCharacterSet());
          assertFalse(cSVFormat0.getTrailingDelimiter());
          assertEquals('s', cSVFormat0.getDelimiter());
          assertFalse(cSVFormat0.getAllowMissingColumnNames());
          assertNull(cSVFormat0.getRecordSeparator());
          assertFalse(cSVFormat0.isCommentMarkerSet());
          assertFalse(cSVFormat0.getIgnoreHeaderCase());
          assertNull(cSVFormat3.getNullString());
          assertFalse(cSVFormat3.getTrailingDelimiter());
          assertEquals("\n", cSVFormat3.getRecordSeparator());
          assertFalse(cSVFormat3.getAllowMissingColumnNames());
          assertEquals('|', cSVFormat3.getDelimiter());
          assertTrue(cSVFormat3.isQuoteCharacterSet());
          assertTrue(cSVFormat3.isEscapeCharacterSet());
          assertFalse(cSVFormat3.getIgnoreHeaderCase());
          assertFalse(cSVFormat3.isCommentMarkerSet());
          assertFalse(cSVFormat3.getSkipHeaderRecord());
          assertNull(cSVFormat3.getCommentMarker());
          assertTrue(cSVFormat3.getIgnoreEmptyLines());
          assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
          assertFalse(cSVFormat3.getTrim());
          assertFalse(cSVFormat3.isNullStringSet());
          assertEquals('\"', (char)cSVFormat3.getQuoteCharacter());
          assertFalse(cSVFormat3.getAutoFlush());
          assertNull(cSVFormat3.getQuoteMode());
          assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
          
          boolean boolean0 = true;
          CSVFormat cSVFormat4 = cSVFormat1.INFORMIX_UNLOAD.withTrim(true);
          assertFalse(cSVFormat0.equals((Object)cSVFormat3));
          assertTrue(cSVFormat0.equals((Object)cSVFormat2));
          assertFalse(cSVFormat0.equals((Object)cSVFormat1));
          assertFalse(cSVFormat1.equals((Object)cSVFormat3));
          assertFalse(cSVFormat1.equals((Object)cSVFormat2));
          assertFalse(cSVFormat1.equals((Object)cSVFormat0));
          assertTrue(cSVFormat4.equals((Object)cSVFormat3));
          assertFalse(cSVFormat4.equals((Object)cSVFormat2));
          assertFalse(cSVFormat4.equals((Object)cSVFormat1));
          assertFalse(cSVFormat4.equals((Object)cSVFormat0));
          assertNotNull(cSVFormat4);
          assertNotSame(cSVFormat0, cSVFormat3);
          assertNotSame(cSVFormat0, cSVFormat2);
          assertNotSame(cSVFormat0, cSVFormat4);
          assertNotSame(cSVFormat0, cSVFormat1);
          assertNotSame(cSVFormat1, cSVFormat3);
          assertNotSame(cSVFormat1, cSVFormat2);
          assertNotSame(cSVFormat1, cSVFormat4);
          assertNotSame(cSVFormat1, cSVFormat0);
          assertNotSame(cSVFormat4, cSVFormat2);
          assertNotSame(cSVFormat4, cSVFormat1);
          assertNotSame(cSVFormat4, cSVFormat3);
          assertNotSame(cSVFormat4, cSVFormat0);
          assertNull(cSVFormat0.getCommentMarker());
          assertFalse(cSVFormat0.getSkipHeaderRecord());
          assertNull(cSVFormat0.getQuoteMode());
          assertFalse(cSVFormat0.getAutoFlush());
          assertFalse(cSVFormat0.isEscapeCharacterSet());
          assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
          assertNull(cSVFormat0.getEscapeCharacter());
          assertFalse(cSVFormat0.getTrim());
          assertFalse(cSVFormat0.isNullStringSet());
          assertFalse(cSVFormat0.getIgnoreEmptyLines());
          assertNull(cSVFormat0.getNullString());
          assertNull(cSVFormat0.getQuoteCharacter());
          assertFalse(cSVFormat0.isQuoteCharacterSet());
          assertFalse(cSVFormat0.getTrailingDelimiter());
          assertEquals('s', cSVFormat0.getDelimiter());
          assertFalse(cSVFormat0.getAllowMissingColumnNames());
          assertNull(cSVFormat0.getRecordSeparator());
          assertFalse(cSVFormat0.isCommentMarkerSet());
          assertFalse(cSVFormat0.getIgnoreHeaderCase());
          assertTrue(cSVFormat1.getAllowMissingColumnNames());
          assertTrue(cSVFormat1.isNullStringSet());
          assertEquals("", cSVFormat1.getNullString());
          assertFalse(cSVFormat1.getTrailingDelimiter());
          assertEquals("\n", cSVFormat1.getRecordSeparator());
          assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
          assertFalse(cSVFormat1.getIgnoreEmptyLines());
          assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
          assertFalse(cSVFormat1.getTrim());
          assertFalse(cSVFormat1.getAutoFlush());
          assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
          assertNull(cSVFormat1.getCommentMarker());
          assertFalse(cSVFormat1.getSkipHeaderRecord());
          assertEquals(',', cSVFormat1.getDelimiter());
          assertTrue(cSVFormat1.isEscapeCharacterSet());
          assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
          assertFalse(cSVFormat1.isCommentMarkerSet());
          assertTrue(cSVFormat1.isQuoteCharacterSet());
          assertFalse(cSVFormat1.getIgnoreHeaderCase());
          assertTrue(cSVFormat4.isEscapeCharacterSet());
          assertFalse(cSVFormat4.isNullStringSet());
          assertEquals('\"', (char)cSVFormat4.getQuoteCharacter());
          assertFalse(cSVFormat4.getAllowMissingColumnNames());
          assertFalse(cSVFormat4.getSkipHeaderRecord());
          assertEquals('|', cSVFormat4.getDelimiter());
          assertNull(cSVFormat4.getCommentMarker());
          assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
          assertFalse(cSVFormat4.getIgnoreHeaderCase());
          assertTrue(cSVFormat4.isQuoteCharacterSet());
          assertFalse(cSVFormat4.isCommentMarkerSet());
          assertFalse(cSVFormat4.getTrailingDelimiter());
          assertEquals("\n", cSVFormat4.getRecordSeparator());
          assertTrue(cSVFormat4.getIgnoreEmptyLines());
          assertTrue(cSVFormat4.getTrim());
          assertNull(cSVFormat4.getNullString());
          assertFalse(cSVFormat4.getAutoFlush());
          assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
          assertNull(cSVFormat4.getQuoteMode());
          
          String string0 = cSVFormat0.format(objectArray0);
          assertFalse(cSVFormat0.equals((Object)cSVFormat3));
          assertFalse(cSVFormat0.equals((Object)cSVFormat4));
          assertTrue(cSVFormat0.equals((Object)cSVFormat2));
          assertFalse(cSVFormat0.equals((Object)cSVFormat1));
          assertNotNull(string0);
          assertEquals(9, objectArray0.length);
          assertNotSame(cSVFormat0, cSVFormat3);
          assertNotSame(cSVFormat0, cSVFormat2);
          assertNotSame(cSVFormat0, cSVFormat4);
          assertNotSame(cSVFormat0, cSVFormat1);
          assertNull(cSVFormat0.getCommentMarker());
          assertFalse(cSVFormat0.getSkipHeaderRecord());
          assertNull(cSVFormat0.getQuoteMode());
          assertFalse(cSVFormat0.getAutoFlush());
          assertFalse(cSVFormat0.isEscapeCharacterSet());
          assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
          assertNull(cSVFormat0.getEscapeCharacter());
          assertFalse(cSVFormat0.getTrim());
          assertFalse(cSVFormat0.isNullStringSet());
          assertFalse(cSVFormat0.getIgnoreEmptyLines());
          assertNull(cSVFormat0.getNullString());
          assertNull(cSVFormat0.getQuoteCharacter());
          assertFalse(cSVFormat0.isQuoteCharacterSet());
          assertFalse(cSVFormat0.getTrailingDelimiter());
          assertEquals('s', cSVFormat0.getDelimiter());
          assertFalse(cSVFormat0.getAllowMissingColumnNames());
          assertNull(cSVFormat0.getRecordSeparator());
          assertFalse(cSVFormat0.isCommentMarkerSet());
          assertFalse(cSVFormat0.getIgnoreHeaderCase());
          
          CSVFormat cSVFormat5 = cSVFormat0.withTrailingDelimiter();
          assertFalse(cSVFormat0.equals((Object)cSVFormat3));
          assertFalse(cSVFormat0.equals((Object)cSVFormat4));
          assertTrue(cSVFormat0.equals((Object)cSVFormat2));
          assertFalse(cSVFormat0.equals((Object)cSVFormat1));
          assertTrue(cSVFormat5.equals((Object)cSVFormat0));
          assertFalse(cSVFormat5.equals((Object)cSVFormat3));
          assertFalse(cSVFormat5.equals((Object)cSVFormat4));
          assertTrue(cSVFormat5.equals((Object)cSVFormat2));
          assertFalse(cSVFormat5.equals((Object)cSVFormat1));
          assertNotNull(cSVFormat5);
          assertNotSame(cSVFormat0, cSVFormat3);
          assertNotSame(cSVFormat0, cSVFormat2);
          assertNotSame(cSVFormat0, cSVFormat5);
          assertNotSame(cSVFormat0, cSVFormat4);
          assertNotSame(cSVFormat0, cSVFormat1);
          assertNotSame(cSVFormat5, cSVFormat3);
          assertNotSame(cSVFormat5, cSVFormat4);
          assertNotSame(cSVFormat5, cSVFormat0);
          assertNotSame(cSVFormat5, cSVFormat1);
          assertNotSame(cSVFormat5, cSVFormat2);
          assertNull(cSVFormat0.getCommentMarker());
          assertFalse(cSVFormat0.getSkipHeaderRecord());
          assertNull(cSVFormat0.getQuoteMode());
          assertFalse(cSVFormat0.getAutoFlush());
          assertFalse(cSVFormat0.isEscapeCharacterSet());
          assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
          assertNull(cSVFormat0.getEscapeCharacter());
          assertFalse(cSVFormat0.getTrim());
          assertFalse(cSVFormat0.isNullStringSet());
          assertFalse(cSVFormat0.getIgnoreEmptyLines());
          assertNull(cSVFormat0.getNullString());
          assertNull(cSVFormat0.getQuoteCharacter());
          assertFalse(cSVFormat0.isQuoteCharacterSet());
          assertFalse(cSVFormat0.getTrailingDelimiter());
          assertEquals('s', cSVFormat0.getDelimiter());
          assertFalse(cSVFormat0.getAllowMissingColumnNames());
          assertNull(cSVFormat0.getRecordSeparator());
          assertFalse(cSVFormat0.isCommentMarkerSet());
          assertFalse(cSVFormat0.getIgnoreHeaderCase());
          assertNull(cSVFormat5.getCommentMarker());
          assertFalse(cSVFormat5.getAutoFlush());
          assertFalse(cSVFormat5.isEscapeCharacterSet());
          assertNull(cSVFormat5.getRecordSeparator());
          assertNull(cSVFormat5.getQuoteMode());
          assertTrue(cSVFormat5.getTrailingDelimiter());
          assertFalse(cSVFormat5.getAllowMissingColumnNames());
          assertFalse(cSVFormat5.getTrim());
          assertFalse(cSVFormat5.isNullStringSet());
          assertFalse(cSVFormat5.getIgnoreHeaderCase());
          assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
          assertNull(cSVFormat5.getEscapeCharacter());
          assertFalse(cSVFormat5.isQuoteCharacterSet());
          assertNull(cSVFormat5.getNullString());
          assertFalse(cSVFormat5.isCommentMarkerSet());
          assertEquals('s', cSVFormat5.getDelimiter());
          assertFalse(cSVFormat5.getIgnoreEmptyLines());
          assertNull(cSVFormat5.getQuoteCharacter());
          assertFalse(cSVFormat5.getSkipHeaderRecord());
          
          CSVPrinter cSVPrinter0 = cSVFormat5.printer();
          assertFalse(cSVFormat0.equals((Object)cSVFormat3));
          assertFalse(cSVFormat0.equals((Object)cSVFormat4));
          assertTrue(cSVFormat0.equals((Object)cSVFormat2));
          assertFalse(cSVFormat0.equals((Object)cSVFormat1));
          assertTrue(cSVFormat0.equals((Object)cSVFormat5));
          assertTrue(cSVFormat5.equals((Object)cSVFormat0));
          assertFalse(cSVFormat5.equals((Object)cSVFormat3));
          assertFalse(cSVFormat5.equals((Object)cSVFormat4));
          assertTrue(cSVFormat5.equals((Object)cSVFormat2));
          assertFalse(cSVFormat5.equals((Object)cSVFormat1));
          assertNotNull(cSVPrinter0);
          assertNotSame(cSVFormat0, cSVFormat3);
          assertNotSame(cSVFormat0, cSVFormat2);
          assertNotSame(cSVFormat0, cSVFormat5);
          assertNotSame(cSVFormat0, cSVFormat4);
          assertNotSame(cSVFormat0, cSVFormat1);
          assertNotSame(cSVFormat5, cSVFormat3);
          assertNotSame(cSVFormat5, cSVFormat4);
          assertNotSame(cSVFormat5, cSVFormat0);
          assertNotSame(cSVFormat5, cSVFormat1);
          assertNotSame(cSVFormat5, cSVFormat2);
          assertNull(cSVFormat0.getCommentMarker());
          assertFalse(cSVFormat0.getSkipHeaderRecord());
          assertNull(cSVFormat0.getQuoteMode());
          assertFalse(cSVFormat0.getAutoFlush());
          assertFalse(cSVFormat0.isEscapeCharacterSet());
          assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
          assertNull(cSVFormat0.getEscapeCharacter());
          assertFalse(cSVFormat0.getTrim());
          assertFalse(cSVFormat0.isNullStringSet());
          assertFalse(cSVFormat0.getIgnoreEmptyLines());
          assertNull(cSVFormat0.getNullString());
          assertNull(cSVFormat0.getQuoteCharacter());
          assertFalse(cSVFormat0.isQuoteCharacterSet());
          assertFalse(cSVFormat0.getTrailingDelimiter());
          assertEquals('s', cSVFormat0.getDelimiter());
          assertFalse(cSVFormat0.getAllowMissingColumnNames());
          assertNull(cSVFormat0.getRecordSeparator());
          assertFalse(cSVFormat0.isCommentMarkerSet());
          assertFalse(cSVFormat0.getIgnoreHeaderCase());
          assertNull(cSVFormat5.getCommentMarker());
          assertFalse(cSVFormat5.getAutoFlush());
          assertFalse(cSVFormat5.isEscapeCharacterSet());
          assertNull(cSVFormat5.getRecordSeparator());
          assertNull(cSVFormat5.getQuoteMode());
          assertTrue(cSVFormat5.getTrailingDelimiter());
          assertFalse(cSVFormat5.getAllowMissingColumnNames());
          assertFalse(cSVFormat5.getTrim());
          assertFalse(cSVFormat5.isNullStringSet());
          assertFalse(cSVFormat5.getIgnoreHeaderCase());
          assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
          assertNull(cSVFormat5.getEscapeCharacter());
          assertFalse(cSVFormat5.isQuoteCharacterSet());
          assertNull(cSVFormat5.getNullString());
          assertFalse(cSVFormat5.isCommentMarkerSet());
          assertEquals('s', cSVFormat5.getDelimiter());
          assertFalse(cSVFormat5.getIgnoreEmptyLines());
          assertNull(cSVFormat5.getQuoteCharacter());
          assertFalse(cSVFormat5.getSkipHeaderRecord());
          
          CSVFormat cSVFormat6 = cSVFormat5.MYSQL.withTrim();
          assertFalse(cSVFormat0.equals((Object)cSVFormat3));
          assertFalse(cSVFormat0.equals((Object)cSVFormat4));
          assertTrue(cSVFormat0.equals((Object)cSVFormat2));
          assertFalse(cSVFormat0.equals((Object)cSVFormat1));
          assertTrue(cSVFormat0.equals((Object)cSVFormat5));
          assertTrue(cSVFormat5.equals((Object)cSVFormat0));
          assertFalse(cSVFormat5.equals((Object)cSVFormat3));
          assertFalse(cSVFormat5.equals((Object)cSVFormat4));
          assertTrue(cSVFormat5.equals((Object)cSVFormat2));
          assertFalse(cSVFormat5.equals((Object)cSVFormat1));
          assertFalse(cSVFormat6.equals((Object)cSVFormat1));
          assertFalse(cSVFormat6.equals((Object)cSVFormat2));
          assertFalse(cSVFormat6.equals((Object)cSVFormat5));
          assertFalse(cSVFormat6.equals((Object)cSVFormat0));
          assertFalse(cSVFormat6.equals((Object)cSVFormat4));
          assertFalse(cSVFormat6.equals((Object)cSVFormat3));
          assertNotNull(cSVFormat6);
          assertNotSame(cSVFormat0, cSVFormat3);
          assertNotSame(cSVFormat0, cSVFormat2);
          assertNotSame(cSVFormat0, cSVFormat6);
          assertNotSame(cSVFormat0, cSVFormat5);
          assertNotSame(cSVFormat0, cSVFormat4);
          assertNotSame(cSVFormat0, cSVFormat1);
          assertNotSame(cSVFormat5, cSVFormat3);
          assertNotSame(cSVFormat5, cSVFormat4);
          assertNotSame(cSVFormat5, cSVFormat0);
          assertNotSame(cSVFormat5, cSVFormat1);
          assertNotSame(cSVFormat5, cSVFormat6);
          assertNotSame(cSVFormat5, cSVFormat2);
          assertNotSame(cSVFormat6, cSVFormat1);
          assertNotSame(cSVFormat6, cSVFormat2);
          assertNotSame(cSVFormat6, cSVFormat5);
          assertNotSame(cSVFormat6, cSVFormat0);
          assertNotSame(cSVFormat6, cSVFormat4);
          assertNotSame(cSVFormat6, cSVFormat3);
          assertNull(cSVFormat0.getCommentMarker());
          assertFalse(cSVFormat0.getSkipHeaderRecord());
          assertNull(cSVFormat0.getQuoteMode());
          assertFalse(cSVFormat0.getAutoFlush());
          assertFalse(cSVFormat0.isEscapeCharacterSet());
          assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
          assertNull(cSVFormat0.getEscapeCharacter());
          assertFalse(cSVFormat0.getTrim());
          assertFalse(cSVFormat0.isNullStringSet());
          assertFalse(cSVFormat0.getIgnoreEmptyLines());
          assertNull(cSVFormat0.getNullString());
          assertNull(cSVFormat0.getQuoteCharacter());
          assertFalse(cSVFormat0.isQuoteCharacterSet());
          assertFalse(cSVFormat0.getTrailingDelimiter());
          assertEquals('s', cSVFormat0.getDelimiter());
          assertFalse(cSVFormat0.getAllowMissingColumnNames());
          assertNull(cSVFormat0.getRecordSeparator());
          assertFalse(cSVFormat0.isCommentMarkerSet());
          assertFalse(cSVFormat0.getIgnoreHeaderCase());
          assertNull(cSVFormat5.getCommentMarker());
          assertFalse(cSVFormat5.getAutoFlush());
          assertFalse(cSVFormat5.isEscapeCharacterSet());
          assertNull(cSVFormat5.getRecordSeparator());
          assertNull(cSVFormat5.getQuoteMode());
          assertTrue(cSVFormat5.getTrailingDelimiter());
          assertFalse(cSVFormat5.getAllowMissingColumnNames());
          assertFalse(cSVFormat5.getTrim());
          assertFalse(cSVFormat5.isNullStringSet());
          assertFalse(cSVFormat5.getIgnoreHeaderCase());
          assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
          assertNull(cSVFormat5.getEscapeCharacter());
          assertFalse(cSVFormat5.isQuoteCharacterSet());
          assertNull(cSVFormat5.getNullString());
          assertFalse(cSVFormat5.isCommentMarkerSet());
          assertEquals('s', cSVFormat5.getDelimiter());
          assertFalse(cSVFormat5.getIgnoreEmptyLines());
          assertNull(cSVFormat5.getQuoteCharacter());
          assertFalse(cSVFormat5.getSkipHeaderRecord());
          assertFalse(cSVFormat6.getIgnoreEmptyLines());
          assertFalse(cSVFormat6.getIgnoreHeaderCase());
          assertFalse(cSVFormat6.isCommentMarkerSet());
          assertFalse(cSVFormat6.getTrailingDelimiter());
          assertFalse(cSVFormat6.isQuoteCharacterSet());
          assertEquals("\n", cSVFormat6.getRecordSeparator());
          assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat6.getQuoteMode());
          assertFalse(cSVFormat6.getSkipHeaderRecord());
          assertNull(cSVFormat6.getCommentMarker());
          assertEquals("\\N", cSVFormat6.getNullString());
          assertFalse(cSVFormat6.getAllowMissingColumnNames());
          assertTrue(cSVFormat6.isEscapeCharacterSet());
          assertNull(cSVFormat6.getQuoteCharacter());
          assertTrue(cSVFormat6.getTrim());
          assertTrue(cSVFormat6.isNullStringSet());
          assertEquals('\t', cSVFormat6.getDelimiter());
          assertEquals('\\', (char)cSVFormat6.getEscapeCharacter());
          assertFalse(cSVFormat6.getAutoFlush());
          assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
          
          char char0 = cSVFormat5.getDelimiter();
          assertFalse(cSVFormat0.equals((Object)cSVFormat3));
          assertFalse(cSVFormat0.equals((Object)cSVFormat6));
          assertFalse(cSVFormat0.equals((Object)cSVFormat4));
          assertTrue(cSVFormat0.equals((Object)cSVFormat2));
          assertFalse(cSVFormat0.equals((Object)cSVFormat1));
          assertTrue(cSVFormat0.equals((Object)cSVFormat5));
          assertTrue(cSVFormat5.equals((Object)cSVFormat0));
          assertFalse(cSVFormat5.equals((Object)cSVFormat3));
          assertFalse(cSVFormat5.equals((Object)cSVFormat4));
          assertTrue(cSVFormat5.equals((Object)cSVFormat2));
          assertFalse(cSVFormat5.equals((Object)cSVFormat1));
          assertFalse(cSVFormat5.equals((Object)cSVFormat6));
          assertNotSame(cSVFormat0, cSVFormat3);
          assertNotSame(cSVFormat0, cSVFormat2);
          assertNotSame(cSVFormat0, cSVFormat6);
          assertNotSame(cSVFormat0, cSVFormat5);
          assertNotSame(cSVFormat0, cSVFormat4);
          assertNotSame(cSVFormat0, cSVFormat1);
          assertNotSame(cSVFormat5, cSVFormat3);
          assertNotSame(cSVFormat5, cSVFormat4);
          assertNotSame(cSVFormat5, cSVFormat0);
          assertNotSame(cSVFormat5, cSVFormat1);
          assertNotSame(cSVFormat5, cSVFormat6);
          assertNotSame(cSVFormat5, cSVFormat2);
          assertEquals('s', char0);
          assertNull(cSVFormat0.getCommentMarker());
          assertFalse(cSVFormat0.getSkipHeaderRecord());
          assertNull(cSVFormat0.getQuoteMode());
          assertFalse(cSVFormat0.getAutoFlush());
          assertFalse(cSVFormat0.isEscapeCharacterSet());
          assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
          assertNull(cSVFormat0.getEscapeCharacter());
          assertFalse(cSVFormat0.getTrim());
          assertFalse(cSVFormat0.isNullStringSet());
          assertFalse(cSVFormat0.getIgnoreEmptyLines());
          assertNull(cSVFormat0.getNullString());
          assertNull(cSVFormat0.getQuoteCharacter());
          assertFalse(cSVFormat0.isQuoteCharacterSet());
          assertFalse(cSVFormat0.getTrailingDelimiter());
          assertEquals('s', cSVFormat0.getDelimiter());
          assertFalse(cSVFormat0.getAllowMissingColumnNames());
          assertNull(cSVFormat0.getRecordSeparator());
          assertFalse(cSVFormat0.isCommentMarkerSet());
          assertFalse(cSVFormat0.getIgnoreHeaderCase());
          assertNull(cSVFormat5.getCommentMarker());
          assertFalse(cSVFormat5.getAutoFlush());
          assertFalse(cSVFormat5.isEscapeCharacterSet());
          assertNull(cSVFormat5.getRecordSeparator());
          assertNull(cSVFormat5.getQuoteMode());
          assertTrue(cSVFormat5.getTrailingDelimiter());
          assertFalse(cSVFormat5.getAllowMissingColumnNames());
          assertFalse(cSVFormat5.getTrim());
          assertFalse(cSVFormat5.isNullStringSet());
          assertFalse(cSVFormat5.getIgnoreHeaderCase());
          assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
          assertNull(cSVFormat5.getEscapeCharacter());
          assertFalse(cSVFormat5.isQuoteCharacterSet());
          assertNull(cSVFormat5.getNullString());
          assertFalse(cSVFormat5.isCommentMarkerSet());
          assertEquals('s', cSVFormat5.getDelimiter());
          assertFalse(cSVFormat5.getIgnoreEmptyLines());
          assertNull(cSVFormat5.getQuoteCharacter());
          assertFalse(cSVFormat5.getSkipHeaderRecord());
          
          MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001ssorg.apache.commons.csv.CSVFormat@0000000001", "org.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001ssorg.apache.commons.csv.CSVFormat@0000000001");
          assertNotNull(mockFile0);
          
          CSVFormat cSVFormat7 = cSVFormat1.MYSQL.withIgnoreSurroundingSpaces(true);
          assertFalse(cSVFormat0.equals((Object)cSVFormat3));
          assertFalse(cSVFormat0.equals((Object)cSVFormat6));
          assertFalse(cSVFormat0.equals((Object)cSVFormat4));
          assertTrue(cSVFormat0.equals((Object)cSVFormat2));
          assertFalse(cSVFormat0.equals((Object)cSVFormat1));
          assertTrue(cSVFormat0.equals((Object)cSVFormat5));
          assertFalse(cSVFormat7.equals((Object)cSVFormat6));
          assertFalse(cSVFormat7.equals((Object)cSVFormat5));
          assertFalse(cSVFormat7.equals((Object)cSVFormat2));
          assertFalse(cSVFormat7.equals((Object)cSVFormat1));
          assertFalse(cSVFormat7.equals((Object)cSVFormat0));
          assertFalse(cSVFormat7.equals((Object)cSVFormat4));
          assertFalse(cSVFormat7.equals((Object)cSVFormat3));
          assertFalse(cSVFormat1.equals((Object)cSVFormat3));
          assertFalse(cSVFormat1.equals((Object)cSVFormat2));
          assertFalse(cSVFormat1.equals((Object)cSVFormat6));
          assertFalse(cSVFormat1.equals((Object)cSVFormat4));
          assertFalse(cSVFormat1.equals((Object)cSVFormat5));
          assertFalse(cSVFormat1.equals((Object)cSVFormat0));
          assertNotNull(cSVFormat7);
          assertNotSame(cSVFormat0, cSVFormat3);
          assertNotSame(cSVFormat0, cSVFormat2);
          assertNotSame(cSVFormat0, cSVFormat6);
          assertNotSame(cSVFormat0, cSVFormat5);
          assertNotSame(cSVFormat0, cSVFormat4);
          assertNotSame(cSVFormat0, cSVFormat7);
          assertNotSame(cSVFormat0, cSVFormat1);
          assertNotSame(cSVFormat7, cSVFormat6);
          assertNotSame(cSVFormat7, cSVFormat5);
          assertNotSame(cSVFormat7, cSVFormat2);
          assertNotSame(cSVFormat7, cSVFormat1);
          assertNotSame(cSVFormat7, cSVFormat0);
          assertNotSame(cSVFormat7, cSVFormat4);
          assertNotSame(cSVFormat7, cSVFormat3);
          assertNotSame(cSVFormat1, cSVFormat3);
          assertNotSame(cSVFormat1, cSVFormat2);
          assertNotSame(cSVFormat1, cSVFormat6);
          assertNotSame(cSVFormat1, cSVFormat4);
          assertNotSame(cSVFormat1, cSVFormat5);
          assertNotSame(cSVFormat1, cSVFormat7);
          assertNotSame(cSVFormat1, cSVFormat0);
          assertNull(cSVFormat0.getCommentMarker());
          assertFalse(cSVFormat0.getSkipHeaderRecord());
          assertNull(cSVFormat0.getQuoteMode());
          assertFalse(cSVFormat0.getAutoFlush());
          assertFalse(cSVFormat0.isEscapeCharacterSet());
          assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
          assertNull(cSVFormat0.getEscapeCharacter());
          assertFalse(cSVFormat0.getTrim());
          assertFalse(cSVFormat0.isNullStringSet());
          assertFalse(cSVFormat0.getIgnoreEmptyLines());
          assertNull(cSVFormat0.getNullString());
          assertNull(cSVFormat0.getQuoteCharacter());
          assertFalse(cSVFormat0.isQuoteCharacterSet());
          assertFalse(cSVFormat0.getTrailingDelimiter());
          assertEquals('s', cSVFormat0.getDelimiter());
          assertFalse(cSVFormat0.getAllowMissingColumnNames());
          assertNull(cSVFormat0.getRecordSeparator());
          assertFalse(cSVFormat0.isCommentMarkerSet());
          assertFalse(cSVFormat0.getIgnoreHeaderCase());
          assertFalse(cSVFormat7.isCommentMarkerSet());
          assertFalse(cSVFormat7.getIgnoreEmptyLines());
          assertFalse(cSVFormat7.getIgnoreHeaderCase());
          assertEquals('\\', (char)cSVFormat7.getEscapeCharacter());
          assertEquals("\\N", cSVFormat7.getNullString());
          assertFalse(cSVFormat7.getTrim());
          assertTrue(cSVFormat7.isNullStringSet());
          assertFalse(cSVFormat7.getSkipHeaderRecord());
          assertTrue(cSVFormat7.getIgnoreSurroundingSpaces());
          assertNull(cSVFormat7.getQuoteCharacter());
          assertFalse(cSVFormat7.isQuoteCharacterSet());
          assertEquals("\n", cSVFormat7.getRecordSeparator());
          assertTrue(cSVFormat7.isEscapeCharacterSet());
          assertFalse(cSVFormat7.getAutoFlush());
          assertNull(cSVFormat7.getCommentMarker());
          assertEquals('\t', cSVFormat7.getDelimiter());
          assertFalse(cSVFormat7.getTrailingDelimiter());
          assertFalse(cSVFormat7.getAllowMissingColumnNames());
          assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat7.getQuoteMode());
          assertTrue(cSVFormat1.getAllowMissingColumnNames());
          assertTrue(cSVFormat1.isNullStringSet());
          assertEquals("", cSVFormat1.getNullString());
          assertFalse(cSVFormat1.getTrailingDelimiter());
          assertEquals("\n", cSVFormat1.getRecordSeparator());
          assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
          assertFalse(cSVFormat1.getIgnoreEmptyLines());
          assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
          assertFalse(cSVFormat1.getTrim());
          assertFalse(cSVFormat1.getAutoFlush());
          assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
          assertNull(cSVFormat1.getCommentMarker());
          assertFalse(cSVFormat1.getSkipHeaderRecord());
          assertEquals(',', cSVFormat1.getDelimiter());
          assertTrue(cSVFormat1.isEscapeCharacterSet());
          assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
          assertFalse(cSVFormat1.isCommentMarkerSet());
          assertTrue(cSVFormat1.isQuoteCharacterSet());
          assertFalse(cSVFormat1.getIgnoreHeaderCase());
          
          MockFile mockFile1 = new MockFile(mockFile0, "f\fL0R+qL jLB");
          assertFalse(mockFile1.equals((Object)mockFile0));
          assertNotNull(mockFile1);
          
          CSVFormat cSVFormat8 = cSVFormat0.INFORMIX_UNLOAD_CSV.withDelimiter('s');
          assertFalse(cSVFormat0.equals((Object)cSVFormat3));
          assertFalse(cSVFormat0.equals((Object)cSVFormat6));
          assertFalse(cSVFormat0.equals((Object)cSVFormat4));
          assertTrue(cSVFormat0.equals((Object)cSVFormat2));
          assertFalse(cSVFormat0.equals((Object)cSVFormat7));
          assertFalse(cSVFormat0.equals((Object)cSVFormat1));
          assertTrue(cSVFormat0.equals((Object)cSVFormat5));
          assertFalse(cSVFormat8.equals((Object)cSVFormat2));
          assertFalse(cSVFormat8.equals((Object)cSVFormat7));
          assertFalse(cSVFormat8.equals((Object)cSVFormat0));
          assertFalse(cSVFormat8.equals((Object)cSVFormat1));
          assertFalse(cSVFormat8.equals((Object)cSVFormat5));
          assertFalse(cSVFormat8.equals((Object)cSVFormat4));
          assertFalse(cSVFormat8.equals((Object)cSVFormat3));
          assertFalse(cSVFormat8.equals((Object)cSVFormat6));
          assertNotNull(cSVFormat8);
          assertNotSame(cSVFormat0, cSVFormat8);
          assertNotSame(cSVFormat0, cSVFormat3);
          assertNotSame(cSVFormat0, cSVFormat2);
          assertNotSame(cSVFormat0, cSVFormat6);
          assertNotSame(cSVFormat0, cSVFormat5);
          assertNotSame(cSVFormat0, cSVFormat4);
          assertNotSame(cSVFormat0, cSVFormat7);
          assertNotSame(cSVFormat0, cSVFormat1);
          assertNotSame(cSVFormat8, cSVFormat2);
          assertNotSame(cSVFormat8, cSVFormat7);
          assertNotSame(cSVFormat8, cSVFormat0);
          assertNotSame(cSVFormat8, cSVFormat1);
          assertNotSame(cSVFormat8, cSVFormat5);
          assertNotSame(cSVFormat8, cSVFormat4);
          assertNotSame(cSVFormat8, cSVFormat3);
          assertNotSame(cSVFormat8, cSVFormat6);
          assertNull(cSVFormat0.getCommentMarker());
          assertFalse(cSVFormat0.getSkipHeaderRecord());
          assertNull(cSVFormat0.getQuoteMode());
          assertFalse(cSVFormat0.getAutoFlush());
          assertFalse(cSVFormat0.isEscapeCharacterSet());
          assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
          assertNull(cSVFormat0.getEscapeCharacter());
          assertFalse(cSVFormat0.getTrim());
          assertFalse(cSVFormat0.isNullStringSet());
          assertFalse(cSVFormat0.getIgnoreEmptyLines());
          assertNull(cSVFormat0.getNullString());
          assertNull(cSVFormat0.getQuoteCharacter());
          assertFalse(cSVFormat0.isQuoteCharacterSet());
          assertFalse(cSVFormat0.getTrailingDelimiter());
          assertEquals('s', cSVFormat0.getDelimiter());
          assertFalse(cSVFormat0.getAllowMissingColumnNames());
          assertNull(cSVFormat0.getRecordSeparator());
          assertFalse(cSVFormat0.isCommentMarkerSet());
          assertFalse(cSVFormat0.getIgnoreHeaderCase());
          assertFalse(cSVFormat8.getAutoFlush());
          assertFalse(cSVFormat8.isEscapeCharacterSet());
          assertNull(cSVFormat8.getCommentMarker());
          assertFalse(cSVFormat8.getAllowMissingColumnNames());
          assertTrue(cSVFormat8.getIgnoreEmptyLines());
          assertFalse(cSVFormat8.getSkipHeaderRecord());
          assertFalse(cSVFormat8.getIgnoreHeaderCase());
          assertEquals('s', cSVFormat8.getDelimiter());
          assertTrue(cSVFormat8.isQuoteCharacterSet());
          assertFalse(cSVFormat8.getTrailingDelimiter());
          assertFalse(cSVFormat8.isCommentMarkerSet());
          assertEquals("\n", cSVFormat8.getRecordSeparator());
          assertEquals('\"', (char)cSVFormat8.getQuoteCharacter());
          assertFalse(cSVFormat8.getIgnoreSurroundingSpaces());
          assertNull(cSVFormat8.getNullString());
          assertNull(cSVFormat8.getEscapeCharacter());
          assertNull(cSVFormat8.getQuoteMode());
          assertFalse(cSVFormat8.getTrim());
          assertFalse(cSVFormat8.isNullStringSet());
          
          Path path0 = mockFile1.toPath();
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertFalse(mockFile1.equals((Object)mockFile0));
          assertNotNull(path0);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile1, mockFile0);
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertEquals(0L, mockFile0.length());
          assertFalse(mockFile0.canRead());
          assertFalse(mockFile0.canWrite());
          assertFalse(mockFile0.exists());
          assertTrue(mockFile0.isFile());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.lastModified());
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.isDirectory());
          assertFalse(mockFile1.canExecute());
          assertEquals(0L, mockFile1.length());
          assertEquals(0L, mockFile1.getFreeSpace());
          assertFalse(mockFile1.canWrite());
          assertFalse(mockFile1.canRead());
          assertFalse(mockFile1.isDirectory());
          assertTrue(mockFile1.isAbsolute());
          assertFalse(mockFile1.isHidden());
          assertEquals(0L, mockFile1.getUsableSpace());
          assertEquals("f\fL0R+qL jLB", mockFile1.getName());
          assertEquals(0L, mockFile1.lastModified());
          assertFalse(mockFile1.exists());
          assertTrue(mockFile1.isFile());
          assertEquals(0L, mockFile1.getTotalSpace());
          
          Charset charset0 = Charset.defaultCharset();
          assertNotNull(charset0);
          assertEquals("US-ASCII", charset0.displayName());
          assertEquals("US-ASCII", charset0.name());
          assertTrue(charset0.isRegistered());
          assertEquals("US-ASCII", charset0.toString());
          assertTrue(charset0.canEncode());
          
          // Undeclared exception!
          try { 
            cSVFormat4.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/experiment/org.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001ssorg.apache.commons.csv.CSVFormat@0000000001/org.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001sorg.apache.commons.csv.CSVFormat@0000000001ssorg.apache.commons.csv.CSVFormat@0000000001/f\fL0R+qL jLB\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.GeneratedMethodAccessor275.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals("", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertEquals(1, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals("", cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertTrue(cSVFormat0.isNullStringSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals("", cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getAutoFlush());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      assertNotNull(cSVFormat0);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      
      boolean boolean0 = cSVFormat0.getAutoFlush();
      assertFalse(boolean0);
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getEscapeCharacter());
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("", cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      
      String[] stringArray0 = cSVFormat0.getHeaderComments();
      assertNull(stringArray0);
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getCommentMarker());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertEquals("", cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrailingDelimiter());
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertNull(cSVFormat0.getQuoteMode());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertNull(cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertNull(cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuoteMode());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getTrim());
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertEquals(7, objectArray0.length);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertNull(cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrim());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertTrue(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertNull(cSVFormat1.getQuoteMode());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAutoFlush());
      assertNull(cSVFormat1.getEscapeCharacter());
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('');
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNotNull(cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getCommentMarker());
      assertEquals("", cSVFormat0.getNullString());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat0.getEscapeCharacter());
      assertFalse(cSVFormat0.getTrim());
      assertTrue(cSVFormat0.isNullStringSet());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat0.getQuoteCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat1.getQuoteMode());
      assertEquals("", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('\"', (char)cSVFormat1.getEscapeCharacter());
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVPrinter cSVPrinter0 = cSVFormat0.printer();
      assertNotNull(cSVPrinter0);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertNull(cSVFormat0.getCommentMarker());
      assertFalse(cSVFormat0.isCommentMarkerSet());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat0.getQuoteMode());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals("\\N", cSVFormat0.getNullString());
      assertEquals('\\', (char)cSVFormat0.getEscapeCharacter());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      assertTrue(cSVFormat0.isNullStringSet());
      assertNull(cSVFormat0.getQuoteCharacter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      Object[] objectArray0 = new Object[2];
      cSVFormat1.INFORMIX_UNLOAD.printer();
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) resultSet0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      char char0 = '}';
      CSVFormat cSVFormat4 = cSVFormat3.MYSQL.withSkipHeaderRecord(true);
      CSVFormat cSVFormat5 = cSVFormat4.POSTGRESQL_TEXT.withIgnoreSurroundingSpaces(true);
      cSVFormat5.POSTGRESQL_CSV.withRecordSeparator('}');
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      cSVFormat0.RFC4180.withHeader(resultSet1);
      Character character0 = new Character('}');
      CSVFormat cSVFormat6 = cSVFormat3.withQuote(character0);
      cSVFormat6.getQuoteCharacter();
      cSVFormat3.withHeaderComments(objectArray0);
      cSVFormat2.getAutoFlush();
      File file0 = MockFile.createTempFile("The comment start character and the delimiter cannot be the same ('", "");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "|CE0F~gg", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        cSVFormat0.print((Path) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          CSVFormat cSVFormat0 = CSVFormat.TDF;
          CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
          boolean boolean0 = true;
          CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
          MockFile mockFile0 = new MockFile("UD$Q");
          File file0 = MockFile.createTempFile("UD$Q", "vf'CIt'k2=C5\"SP+%]d", (File) mockFile0);
          MockFile mockFile1 = new MockFile(file0, "The escape character and the delimiter cannot be the same ('");
          Path path0 = mockFile1.toPath();
          Charset charset0 = Charset.defaultCharset();
          // Undeclared exception!
          try { 
            cSVFormat2.POSTGRESQL_TEXT.print(path0, charset0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/experiment/UD$Q/UD$Q0vf'CIt'k2=C5\"SP+%]d/The escape character and the delimiter cannot be the same ('\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // java.nio.file.Files.newBufferedWriter(Files.java:2860)
             // org.apache.commons.csv.CSVFormat.print(CSVFormat.java:1051)
             // sun.reflect.GeneratedMethodAccessor275.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:261)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:224)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getTrailingDelimiter());
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAutoFlush());
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      char char0 = 'E';
      CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
      cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter(false);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat1.withQuoteMode(quoteMode0);
      String string0 = "OVQK+Sb>,@g1{NB";
      // Undeclared exception!
      try { 
        CSVFormat.valueOf("OVQK+Sb>,@g1{NB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.csv.CSVFormat.Predefined.OVQK+Sb>,@g1{NB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('=');
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertEquals('=', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.PostgreSQLCsv;
      CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
      char char0 = 'Y';
      cSVFormat0.EXCEL.withEscape('Y');
      URI uRI0 = MockURI.URI("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      // Undeclared exception!
      try { 
        cSVFormat0.RFC4180.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
      char char0 = 'W';
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase(true);
      cSVFormat4.INFORMIX_UNLOAD_CSV.hashCode();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat2;
      cSVFormat3.MYSQL.withAutoFlush(true);
      objectArray0[3] = (Object) cSVFormat4;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat4;
      CSVFormat cSVFormat5 = cSVFormat1.RFC4180.withIgnoreHeaderCase(true);
      cSVFormat5.EXCEL.format(objectArray0);
      Object object0 = new Object();
      objectArray0[6] = object0;
      cSVFormat4.format(objectArray0);
      cSVFormat4.POSTGRESQL_CSV.withTrailingDelimiter();
      cSVFormat3.EXCEL.withAllowMissingColumnNames();
      cSVFormat5.withRecordSeparator("f8+9)}_3_%(lRn+=OgT");
      Character character0 = new Character('W');
      // Undeclared exception!
      try { 
        cSVFormat4.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('W')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.getTrailingDelimiter());
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[0];
      String string0 = cSVFormat0.format(objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
      cSVFormat0.POSTGRESQL_TEXT.withTrailingDelimiter(false);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.POSTGRESQL_TEXT.withAllowMissingColumnNames();
      cSVFormat1.INFORMIX_UNLOAD.withTrim();
      cSVFormat2.withSkipHeaderRecord(false);
      Character character0 = new Character('E');
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('E')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(";?mH@zq>Qk'f+");
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getTrim());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("<PmjyhL$%1=VT_Of$Lo");
      char char0 = 'd';
      cSVFormat1.MYSQL.withQuote('d');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat2.withIgnoreHeaderCase(true);
      CSVFormat.newFormat('4');
      Appendable appendable0 = null;
      // Undeclared exception!
      try { 
        cSVFormat1.EXCEL.println((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Character character0 = cSVFormat0.getEscapeCharacter();
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\\N", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getTrim());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getAutoFlush());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('/');
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('/', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAutoFlush());
      assertFalse(cSVFormat1.getTrailingDelimiter());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getTrim());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreHeaderCase());
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
      assertFalse(cSVFormat0.getTrim());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreHeaderCase());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getTrailingDelimiter());
      assertEquals('\'', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAutoFlush());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('5');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat5 = cSVFormat4.withAutoFlush(false);
      assertFalse(cSVFormat5.getIgnoreHeaderCase());
      assertFalse(cSVFormat2.getTrim());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getAutoFlush());
      assertEquals("\n", cSVFormat5.getRecordSeparator());
      assertTrue(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat5.getTrailingDelimiter());
      assertTrue(cSVFormat5.getTrim());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertTrue(cSVFormat5.isEscapeCharacterSet());
      assertTrue(cSVFormat5.getIgnoreSurroundingSpaces());
  }
}
